/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(31);

	var _MainApp = __webpack_require__(170);

	var _MainApp2 = _interopRequireDefault(_MainApp);

	__webpack_require__(543);

	var _reactTapEventPlugin = __webpack_require__(548);

	var _reactTapEventPlugin2 = _interopRequireDefault(_reactTapEventPlugin);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	(0, _reactTapEventPlugin2.default)();
	(0, _reactDom.render)(_react2.default.createElement(_MainApp2.default, null), document.getElementById("app"));

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var ReactBaseClasses = __webpack_require__(4);
	var ReactChildren = __webpack_require__(13);
	var ReactDOMFactories = __webpack_require__(21);
	var ReactElement = __webpack_require__(15);
	var ReactPropTypes = __webpack_require__(22);
	var ReactVersion = __webpack_require__(27);

	var createReactClass = __webpack_require__(28);
	var onlyChild = __webpack_require__(30);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (false) {
	  var lowPriorityWarning = require('./lowPriorityWarning');
	  var canDefineProperty = require('./canDefineProperty');
	  var ReactElementValidator = require('./ReactElementValidator');
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;
	var createMixin = function (mixin) {
	  return mixin;
	};

	if (false) {
	  var warnedForSpread = false;
	  var warnedForCreateMixin = false;
	  __spread = function () {
	    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
	    warnedForSpread = true;
	    return _assign.apply(null, arguments);
	  };

	  createMixin = function (mixin) {
	    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
	    warnedForCreateMixin = true;
	    return mixin;
	  };
	}

	var React = {
	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactBaseClasses.Component,
	  PureComponent: ReactBaseClasses.PureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: createReactClass,
	  createFactory: createFactory,
	  createMixin: createMixin,

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	if (false) {
	  var warnedForCreateClass = false;
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });

	    Object.defineProperty(React, 'createClass', {
	      get: function () {
	        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
	        warnedForCreateClass = true;
	        return createReactClass;
	      }
	    });
	  }

	  // React.DOM factories are deprecated. Wrap these methods so that
	  // invocations of the React.DOM namespace and alert users to switch
	  // to the `react-dom-factories` package.
	  React.DOM = {};
	  var warnedForFactories = false;
	  Object.keys(ReactDOMFactories).forEach(function (factory) {
	    React.DOM[factory] = function () {
	      if (!warnedForFactories) {
	        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
	        warnedForFactories = true;
	      }
	      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
	    };
	  });
	}

	module.exports = React;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5),
	    _assign = __webpack_require__(3);

	var ReactNoopUpdateQueue = __webpack_require__(6);

	var canDefineProperty = __webpack_require__(9);
	var emptyObject = __webpack_require__(10);
	var invariant = __webpack_require__(11);
	var lowPriorityWarning = __webpack_require__(12);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  false ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (false) {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = {
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent
	};

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(7);

	function warnNoop(publicInstance, callerName) {
	  if (false) {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(8);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (false) {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (false) {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (false) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (false) {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	if (false) {
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = lowPriorityWarning;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(14);
	var ReactElement = __webpack_require__(15);

	var emptyFunction = __webpack_require__(8);
	var traverseAllChildren = __webpack_require__(18);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var invariant = __webpack_require__(11);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  false ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var ReactCurrentOwner = __webpack_require__(16);

	var warning = __webpack_require__(7);
	var canDefineProperty = __webpack_require__(9);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(17);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (false) {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (false) {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	       false ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	       false ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (false) {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (false) {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (false) {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	module.exports = ReactCurrentOwner;

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var ReactCurrentOwner = __webpack_require__(16);
	var REACT_ELEMENT_TYPE = __webpack_require__(17);

	var getIteratorFn = __webpack_require__(19);
	var invariant = __webpack_require__(11);
	var KeyEscapeUtils = __webpack_require__(20);
	var warning = __webpack_require__(7);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (false) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (false) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  false ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(15);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (false) {
	  var ReactElementValidator = require('./ReactElementValidator');
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(15),
	    isValidElement = _require.isValidElement;

	var factory = __webpack_require__(23);

	module.exports = factory(isValidElement);

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(24);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var assign = __webpack_require__(3);

	var ReactPropTypesSecret = __webpack_require__(25);
	var checkPropTypes = __webpack_require__(26);

	var printWarning = function() {};

	if (false) {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (false) {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (false) {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	       false ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	       false ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ }),
/* 25 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var printWarning = function() {};

	if (false) {
	  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
	  var loggedTypeFailures = {};

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (false) {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          )

	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	module.exports = checkPropTypes;


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	module.exports = '15.6.2';

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(4),
	    Component = _require.Component;

	var _require2 = __webpack_require__(15),
	    isValidElement = _require2.isValidElement;

	var ReactNoopUpdateQueue = __webpack_require__(6);
	var factory = __webpack_require__(29);

	module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var emptyObject = __webpack_require__(10);
	var _invariant = __webpack_require__(11);

	if (false) {
	  var warning = require('fbjs/lib/warning');
	}

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	var ReactPropTypeLocationNames;
	if (false) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	} else {
	  ReactPropTypeLocationNames = {};
	}

	function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
	  /**
	   * Policies that describe methods in `ReactClassInterface`.
	   */

	  var injectedMixins = [];

	  /**
	   * Composite components are higher-level components that compose other composite
	   * or host components.
	   *
	   * To create a new type of `ReactClass`, pass a specification of
	   * your new class to `React.createClass`. The only requirement of your class
	   * specification is that you implement a `render` method.
	   *
	   *   var MyComponent = React.createClass({
	   *     render: function() {
	   *       return <div>Hello World</div>;
	   *     }
	   *   });
	   *
	   * The class specification supports a specific protocol of methods that have
	   * special meaning (e.g. `render`). See `ReactClassInterface` for
	   * more the comprehensive protocol. Any other properties and methods in the
	   * class specification will be available on the prototype.
	   *
	   * @interface ReactClassInterface
	   * @internal
	   */
	  var ReactClassInterface = {
	    /**
	     * An array of Mixin objects to include when defining your component.
	     *
	     * @type {array}
	     * @optional
	     */
	    mixins: 'DEFINE_MANY',

	    /**
	     * An object containing properties and methods that should be defined on
	     * the component's constructor instead of its prototype (static methods).
	     *
	     * @type {object}
	     * @optional
	     */
	    statics: 'DEFINE_MANY',

	    /**
	     * Definition of prop types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    propTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    contextTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types this component sets for its children.
	     *
	     * @type {object}
	     * @optional
	     */
	    childContextTypes: 'DEFINE_MANY',

	    // ==== Definition methods ====

	    /**
	     * Invoked when the component is mounted. Values in the mapping will be set on
	     * `this.props` if that prop is not specified (i.e. using an `in` check).
	     *
	     * This method is invoked before `getInitialState` and therefore cannot rely
	     * on `this.state` or use `this.setState`.
	     *
	     * @return {object}
	     * @optional
	     */
	    getDefaultProps: 'DEFINE_MANY_MERGED',

	    /**
	     * Invoked once before the component is mounted. The return value will be used
	     * as the initial value of `this.state`.
	     *
	     *   getInitialState: function() {
	     *     return {
	     *       isOn: false,
	     *       fooBaz: new BazFoo()
	     *     }
	     *   }
	     *
	     * @return {object}
	     * @optional
	     */
	    getInitialState: 'DEFINE_MANY_MERGED',

	    /**
	     * @return {object}
	     * @optional
	     */
	    getChildContext: 'DEFINE_MANY_MERGED',

	    /**
	     * Uses props from `this.props` and state from `this.state` to render the
	     * structure of the component.
	     *
	     * No guarantees are made about when or how often this method is invoked, so
	     * it must not have side effects.
	     *
	     *   render: function() {
	     *     var name = this.props.name;
	     *     return <div>Hello, {name}!</div>;
	     *   }
	     *
	     * @return {ReactComponent}
	     * @required
	     */
	    render: 'DEFINE_ONCE',

	    // ==== Delegate methods ====

	    /**
	     * Invoked when the component is initially created and about to be mounted.
	     * This may have side effects, but any external subscriptions or data created
	     * by this method must be cleaned up in `componentWillUnmount`.
	     *
	     * @optional
	     */
	    componentWillMount: 'DEFINE_MANY',

	    /**
	     * Invoked when the component has been mounted and has a DOM representation.
	     * However, there is no guarantee that the DOM node is in the document.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been mounted (initialized and rendered) for the first time.
	     *
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidMount: 'DEFINE_MANY',

	    /**
	     * Invoked before the component receives new props.
	     *
	     * Use this as an opportunity to react to a prop transition by updating the
	     * state using `this.setState`. Current props are accessed via `this.props`.
	     *
	     *   componentWillReceiveProps: function(nextProps, nextContext) {
	     *     this.setState({
	     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	     *     });
	     *   }
	     *
	     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	     * transition may cause a state change, but the opposite is not true. If you
	     * need it, you are probably looking for `componentWillUpdate`.
	     *
	     * @param {object} nextProps
	     * @optional
	     */
	    componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Invoked while deciding if the component should be updated as a result of
	     * receiving new props, state and/or context.
	     *
	     * Use this as an opportunity to `return false` when you're certain that the
	     * transition to the new props/state/context will not require a component
	     * update.
	     *
	     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	     *     return !equal(nextProps, this.props) ||
	     *       !equal(nextState, this.state) ||
	     *       !equal(nextContext, this.context);
	     *   }
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @return {boolean} True if the component should update.
	     * @optional
	     */
	    shouldComponentUpdate: 'DEFINE_ONCE',

	    /**
	     * Invoked when the component is about to update due to a transition from
	     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	     * and `nextContext`.
	     *
	     * Use this as an opportunity to perform preparation before an update occurs.
	     *
	     * NOTE: You **cannot** use `this.setState()` in this method.
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @param {ReactReconcileTransaction} transaction
	     * @optional
	     */
	    componentWillUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component's DOM representation has been updated.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been updated.
	     *
	     * @param {object} prevProps
	     * @param {?object} prevState
	     * @param {?object} prevContext
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component is about to be removed from its parent and have
	     * its DOM representation destroyed.
	     *
	     * Use this as an opportunity to deallocate any external resources.
	     *
	     * NOTE: There is no `componentDidUnmount` since your component will have been
	     * destroyed by that point.
	     *
	     * @optional
	     */
	    componentWillUnmount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillMount`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillMount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillReceiveProps`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillUpdate`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillUpdate: 'DEFINE_MANY',

	    // ==== Advanced methods ====

	    /**
	     * Updates the component's currently mounted DOM representation.
	     *
	     * By default, this implements React's rendering and reconciliation algorithm.
	     * Sophisticated clients may wish to override this.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     * @overridable
	     */
	    updateComponent: 'OVERRIDE_BASE'
	  };

	  /**
	   * Similar to ReactClassInterface but for static methods.
	   */
	  var ReactClassStaticInterface = {
	    /**
	     * This method is invoked after a component is instantiated and when it
	     * receives new props. Return an object to update state in response to
	     * prop changes. Return null to indicate no change to state.
	     *
	     * If an object is returned, its keys will be merged into the existing state.
	     *
	     * @return {object || null}
	     * @optional
	     */
	    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
	  };

	  /**
	   * Mapping from class specification keys to special processing functions.
	   *
	   * Although these are declared like instance properties in the specification
	   * when defining classes using `React.createClass`, they are actually static
	   * and are accessible on the constructor instead of the prototype. Despite
	   * being static, they must be defined outside of the "statics" key under
	   * which all other static methods are defined.
	   */
	  var RESERVED_SPEC_KEYS = {
	    displayName: function(Constructor, displayName) {
	      Constructor.displayName = displayName;
	    },
	    mixins: function(Constructor, mixins) {
	      if (mixins) {
	        for (var i = 0; i < mixins.length; i++) {
	          mixSpecIntoComponent(Constructor, mixins[i]);
	        }
	      }
	    },
	    childContextTypes: function(Constructor, childContextTypes) {
	      if (false) {
	        validateTypeDef(Constructor, childContextTypes, 'childContext');
	      }
	      Constructor.childContextTypes = _assign(
	        {},
	        Constructor.childContextTypes,
	        childContextTypes
	      );
	    },
	    contextTypes: function(Constructor, contextTypes) {
	      if (false) {
	        validateTypeDef(Constructor, contextTypes, 'context');
	      }
	      Constructor.contextTypes = _assign(
	        {},
	        Constructor.contextTypes,
	        contextTypes
	      );
	    },
	    /**
	     * Special case getDefaultProps which should move into statics but requires
	     * automatic merging.
	     */
	    getDefaultProps: function(Constructor, getDefaultProps) {
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps = createMergedResultFunction(
	          Constructor.getDefaultProps,
	          getDefaultProps
	        );
	      } else {
	        Constructor.getDefaultProps = getDefaultProps;
	      }
	    },
	    propTypes: function(Constructor, propTypes) {
	      if (false) {
	        validateTypeDef(Constructor, propTypes, 'prop');
	      }
	      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	    },
	    statics: function(Constructor, statics) {
	      mixStaticSpecIntoComponent(Constructor, statics);
	    },
	    autobind: function() {}
	  };

	  function validateTypeDef(Constructor, typeDef, location) {
	    for (var propName in typeDef) {
	      if (typeDef.hasOwnProperty(propName)) {
	        // use a warning instead of an _invariant so components
	        // don't show up in prod but only in __DEV__
	        if (false) {
	          warning(
	            typeof typeDef[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	              'React.PropTypes.',
	            Constructor.displayName || 'ReactClass',
	            ReactPropTypeLocationNames[location],
	            propName
	          );
	        }
	      }
	    }
	  }

	  function validateMethodOverride(isAlreadyDefined, name) {
	    var specPolicy = ReactClassInterface.hasOwnProperty(name)
	      ? ReactClassInterface[name]
	      : null;

	    // Disallow overriding of base class methods unless explicitly allowed.
	    if (ReactClassMixin.hasOwnProperty(name)) {
	      _invariant(
	        specPolicy === 'OVERRIDE_BASE',
	        'ReactClassInterface: You are attempting to override ' +
	          '`%s` from your class specification. Ensure that your method names ' +
	          'do not overlap with React methods.',
	        name
	      );
	    }

	    // Disallow defining methods more than once unless explicitly allowed.
	    if (isAlreadyDefined) {
	      _invariant(
	        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
	        'ReactClassInterface: You are attempting to define ' +
	          '`%s` on your component more than once. This conflict may be due ' +
	          'to a mixin.',
	        name
	      );
	    }
	  }

	  /**
	   * Mixin helper which handles policy validation and reserved
	   * specification keys when building React classes.
	   */
	  function mixSpecIntoComponent(Constructor, spec) {
	    if (!spec) {
	      if (false) {
	        var typeofSpec = typeof spec;
	        var isMixinValid = typeofSpec === 'object' && spec !== null;

	        if (process.env.NODE_ENV !== 'production') {
	          warning(
	            isMixinValid,
	            "%s: You're attempting to include a mixin that is either null " +
	              'or not an object. Check the mixins included by the component, ' +
	              'as well as any mixins they include themselves. ' +
	              'Expected object but got %s.',
	            Constructor.displayName || 'ReactClass',
	            spec === null ? null : typeofSpec
	          );
	        }
	      }

	      return;
	    }

	    _invariant(
	      typeof spec !== 'function',
	      "ReactClass: You're attempting to " +
	        'use a component class or function as a mixin. Instead, just use a ' +
	        'regular object.'
	    );
	    _invariant(
	      !isValidElement(spec),
	      "ReactClass: You're attempting to " +
	        'use a component as a mixin. Instead, just use a regular object.'
	    );

	    var proto = Constructor.prototype;
	    var autoBindPairs = proto.__reactAutoBindPairs;

	    // By handling mixins before any other properties, we ensure the same
	    // chaining order is applied to methods with DEFINE_MANY policy, whether
	    // mixins are listed before or after these methods in the spec.
	    if (spec.hasOwnProperty(MIXINS_KEY)) {
	      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	    }

	    for (var name in spec) {
	      if (!spec.hasOwnProperty(name)) {
	        continue;
	      }

	      if (name === MIXINS_KEY) {
	        // We have already handled mixins in a special case above.
	        continue;
	      }

	      var property = spec[name];
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      validateMethodOverride(isAlreadyDefined, name);

	      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	        RESERVED_SPEC_KEYS[name](Constructor, property);
	      } else {
	        // Setup methods on prototype:
	        // The following member methods should not be automatically bound:
	        // 1. Expected ReactClass methods (in the "interface").
	        // 2. Overridden methods (that were mixed in).
	        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	        var isFunction = typeof property === 'function';
	        var shouldAutoBind =
	          isFunction &&
	          !isReactClassMethod &&
	          !isAlreadyDefined &&
	          spec.autobind !== false;

	        if (shouldAutoBind) {
	          autoBindPairs.push(name, property);
	          proto[name] = property;
	        } else {
	          if (isAlreadyDefined) {
	            var specPolicy = ReactClassInterface[name];

	            // These cases should already be caught by validateMethodOverride.
	            _invariant(
	              isReactClassMethod &&
	                (specPolicy === 'DEFINE_MANY_MERGED' ||
	                  specPolicy === 'DEFINE_MANY'),
	              'ReactClass: Unexpected spec policy %s for key %s ' +
	                'when mixing in component specs.',
	              specPolicy,
	              name
	            );

	            // For methods which are defined more than once, call the existing
	            // methods before calling the new property, merging if appropriate.
	            if (specPolicy === 'DEFINE_MANY_MERGED') {
	              proto[name] = createMergedResultFunction(proto[name], property);
	            } else if (specPolicy === 'DEFINE_MANY') {
	              proto[name] = createChainedFunction(proto[name], property);
	            }
	          } else {
	            proto[name] = property;
	            if (false) {
	              // Add verbose displayName to the function, which helps when looking
	              // at profiling tools.
	              if (typeof property === 'function' && spec.displayName) {
	                proto[name].displayName = spec.displayName + '_' + name;
	              }
	            }
	          }
	        }
	      }
	    }
	  }

	  function mixStaticSpecIntoComponent(Constructor, statics) {
	    if (!statics) {
	      return;
	    }

	    for (var name in statics) {
	      var property = statics[name];
	      if (!statics.hasOwnProperty(name)) {
	        continue;
	      }

	      var isReserved = name in RESERVED_SPEC_KEYS;
	      _invariant(
	        !isReserved,
	        'ReactClass: You are attempting to define a reserved ' +
	          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	          'as an instance property instead; it will still be accessible on the ' +
	          'constructor.',
	        name
	      );

	      var isAlreadyDefined = name in Constructor;
	      if (isAlreadyDefined) {
	        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
	          ? ReactClassStaticInterface[name]
	          : null;

	        _invariant(
	          specPolicy === 'DEFINE_MANY_MERGED',
	          'ReactClass: You are attempting to define ' +
	            '`%s` on your component more than once. This conflict may be ' +
	            'due to a mixin.',
	          name
	        );

	        Constructor[name] = createMergedResultFunction(Constructor[name], property);

	        return;
	      }

	      Constructor[name] = property;
	    }
	  }

	  /**
	   * Merge two objects, but throw if both contain the same key.
	   *
	   * @param {object} one The first object, which is mutated.
	   * @param {object} two The second object
	   * @return {object} one after it has been mutated to contain everything in two.
	   */
	  function mergeIntoWithNoDuplicateKeys(one, two) {
	    _invariant(
	      one && two && typeof one === 'object' && typeof two === 'object',
	      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	    );

	    for (var key in two) {
	      if (two.hasOwnProperty(key)) {
	        _invariant(
	          one[key] === undefined,
	          'mergeIntoWithNoDuplicateKeys(): ' +
	            'Tried to merge two objects with the same key: `%s`. This conflict ' +
	            'may be due to a mixin; in particular, this may be caused by two ' +
	            'getInitialState() or getDefaultProps() methods returning objects ' +
	            'with clashing keys.',
	          key
	        );
	        one[key] = two[key];
	      }
	    }
	    return one;
	  }

	  /**
	   * Creates a function that invokes two functions and merges their return values.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createMergedResultFunction(one, two) {
	    return function mergedResult() {
	      var a = one.apply(this, arguments);
	      var b = two.apply(this, arguments);
	      if (a == null) {
	        return b;
	      } else if (b == null) {
	        return a;
	      }
	      var c = {};
	      mergeIntoWithNoDuplicateKeys(c, a);
	      mergeIntoWithNoDuplicateKeys(c, b);
	      return c;
	    };
	  }

	  /**
	   * Creates a function that invokes two functions and ignores their return vales.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createChainedFunction(one, two) {
	    return function chainedFunction() {
	      one.apply(this, arguments);
	      two.apply(this, arguments);
	    };
	  }

	  /**
	   * Binds a method to the component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   * @param {function} method Method to be bound.
	   * @return {function} The bound method.
	   */
	  function bindAutoBindMethod(component, method) {
	    var boundMethod = method.bind(component);
	    if (false) {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis) {
	        for (
	          var _len = arguments.length,
	            args = Array(_len > 1 ? _len - 1 : 0),
	            _key = 1;
	          _key < _len;
	          _key++
	        ) {
	          args[_key - 1] = arguments[_key];
	        }

	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning(
	              false,
	              'bind(): React component methods may only be bound to the ' +
	                'component instance. See %s',
	              componentName
	            );
	          }
	        } else if (!args.length) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning(
	              false,
	              'bind(): You are binding a component method to the component. ' +
	                'React does this for you automatically in a high-performance ' +
	                'way, so you can safely remove this call. See %s',
	              componentName
	            );
	          }
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }

	  /**
	   * Binds all auto-bound methods in a component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   */
	  function bindAutoBindMethods(component) {
	    var pairs = component.__reactAutoBindPairs;
	    for (var i = 0; i < pairs.length; i += 2) {
	      var autoBindKey = pairs[i];
	      var method = pairs[i + 1];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }

	  var IsMountedPreMixin = {
	    componentDidMount: function() {
	      this.__isMounted = true;
	    }
	  };

	  var IsMountedPostMixin = {
	    componentWillUnmount: function() {
	      this.__isMounted = false;
	    }
	  };

	  /**
	   * Add more to the ReactClass base class. These are all legacy features and
	   * therefore not already part of the modern ReactComponent.
	   */
	  var ReactClassMixin = {
	    /**
	     * TODO: This will be deprecated because state should always keep a consistent
	     * type signature and the only use case for this, is to avoid that.
	     */
	    replaceState: function(newState, callback) {
	      this.updater.enqueueReplaceState(this, newState, callback);
	    },

	    /**
	     * Checks whether or not this composite component is mounted.
	     * @return {boolean} True if mounted, false otherwise.
	     * @protected
	     * @final
	     */
	    isMounted: function() {
	      if (false) {
	        warning(
	          this.__didWarnIsMounted,
	          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
	            'subscriptions and pending requests in componentWillUnmount to ' +
	            'prevent memory leaks.',
	          (this.constructor && this.constructor.displayName) ||
	            this.name ||
	            'Component'
	        );
	        this.__didWarnIsMounted = true;
	      }
	      return !!this.__isMounted;
	    }
	  };

	  var ReactClassComponent = function() {};
	  _assign(
	    ReactClassComponent.prototype,
	    ReactComponent.prototype,
	    ReactClassMixin
	  );

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  function createClass(spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function(props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (false) {
	        warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	            'JSX instead. See: https://fb.me/react-legacyfactory'
	        );
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (false) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (
	          initialState === undefined &&
	          this.getInitialState._isMockFunction
	        ) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      _invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      );

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
	    mixSpecIntoComponent(Constructor, spec);
	    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (false) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    _invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    );

	    if (false) {
	      warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.componentWillRecieveProps,
	        '%s has a method called ' +
	          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.UNSAFE_componentWillRecieveProps,
	        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
	          'Did you mean UNSAFE_componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  }

	  return createClass;
	}

	module.exports = factory;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var ReactElement = __webpack_require__(15);

	var invariant = __webpack_require__(11);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ?  false ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(32);


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactDefaultInjection = __webpack_require__(37);
	var ReactMount = __webpack_require__(161);
	var ReactReconciler = __webpack_require__(58);
	var ReactUpdates = __webpack_require__(55);
	var ReactVersion = __webpack_require__(166);

	var findDOMNode = __webpack_require__(167);
	var getHostComponentFromComposite = __webpack_require__(168);
	var renderSubtreeIntoContainer = __webpack_require__(169);
	var warning = __webpack_require__(7);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	  /* eslint-enable camelcase */
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (false) {
	  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (false) {
	  var ReactInstrumentation = require('./ReactInstrumentation');
	  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');
	  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');
	  var ReactDOMInvalidARIAHook = require('./ReactDOMInvalidARIAHook');

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var DOMProperty = __webpack_require__(35);
	var ReactDOMComponentFlags = __webpack_require__(36);

	var invariant = __webpack_require__(11);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ?  false ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ?  false ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ?  false ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var invariant = __webpack_require__(11);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ?  false ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  false ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (false) {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (false) {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName:  false ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

/***/ }),
/* 36 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(38);
	var BeforeInputEventPlugin = __webpack_require__(39);
	var ChangeEventPlugin = __webpack_require__(54);
	var DefaultEventPluginOrder = __webpack_require__(67);
	var EnterLeaveEventPlugin = __webpack_require__(68);
	var HTMLDOMPropertyConfig = __webpack_require__(73);
	var ReactComponentBrowserEnvironment = __webpack_require__(74);
	var ReactDOMComponent = __webpack_require__(87);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactDOMEmptyComponent = __webpack_require__(132);
	var ReactDOMTreeTraversal = __webpack_require__(133);
	var ReactDOMTextComponent = __webpack_require__(134);
	var ReactDefaultBatchingStrategy = __webpack_require__(135);
	var ReactEventListener = __webpack_require__(136);
	var ReactInjection = __webpack_require__(139);
	var ReactReconcileTransaction = __webpack_require__(140);
	var SVGDOMPropertyConfig = __webpack_require__(148);
	var SelectEventPlugin = __webpack_require__(149);
	var SimpleEventPlugin = __webpack_require__(150);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(40);
	var ExecutionEnvironment = __webpack_require__(47);
	var FallbackCompositionState = __webpack_require__(48);
	var SyntheticCompositionEvent = __webpack_require__(51);
	var SyntheticInputEvent = __webpack_require__(53);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(41);
	var EventPluginUtils = __webpack_require__(43);

	var accumulateInto = __webpack_require__(45);
	var forEachAccumulated = __webpack_require__(46);
	var warning = __webpack_require__(7);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var EventPluginRegistry = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(43);
	var ReactErrorUtils = __webpack_require__(44);

	var accumulateInto = __webpack_require__(45);
	var forEachAccumulated = __webpack_require__(46);
	var invariant = __webpack_require__(11);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ?  false ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ?  false ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }
	};

	module.exports = EventPluginHub;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var invariant = __webpack_require__(11);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ?  false ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ?  false ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ?  false ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ?  false ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if (false) {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames:  false ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (false) {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	};

	module.exports = EventPluginRegistry;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var ReactErrorUtils = __webpack_require__(44);

	var invariant = __webpack_require__(11);
	var warning = __webpack_require__(7);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if (false) {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (false) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (false) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (false) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ?  false ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (false) {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = function () {
	        func(a);
	      };
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var invariant = __webpack_require__(11);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ?  false ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

/***/ }),
/* 46 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ }),
/* 47 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var PooledClass = __webpack_require__(49);

	var getTextContentAccessor = __webpack_require__(50);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var invariant = __webpack_require__(11);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  false ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(52);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var PooledClass = __webpack_require__(49);

	var emptyFunction = __webpack_require__(8);
	var warning = __webpack_require__(7);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (false) {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (false) {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	      // eslint-disable-next-line valid-typeof
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	      // eslint-disable-next-line valid-typeof
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (false) {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (false) {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	/** Proxying after everything set on SyntheticEvent
	  * to resolve Proxy issue on some WebKit browsers
	  * in which some Event properties are set to undefined (GH#10010)
	  */
	if (false) {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	     false ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(52);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(41);
	var EventPropagators = __webpack_require__(40);
	var ExecutionEnvironment = __webpack_require__(47);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactUpdates = __webpack_require__(55);
	var SyntheticEvent = __webpack_require__(52);

	var inputValueTracking = __webpack_require__(63);
	var getEventTarget = __webpack_require__(64);
	var isEventSupported = __webpack_require__(65);
	var isTextInputElement = __webpack_require__(66);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
	  event.type = 'change';
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getInstIfValueChanged(targetInst, nativeEvent) {
	  var updated = inputValueTracking.updateValueIfChanged(targetInst);
	  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

	  if (updated || simulated) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}

	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.

	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}

	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementInst = null;
	}

	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst, nativeEvent);
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topClick') {
	    return getInstIfValueChanged(targetInst, nativeEvent);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
	    return getInstIfValueChanged(targetInst, nativeEvent);
	  }
	}

	function handleControlledInputBlur(inst, node) {
	  // TODO: In IE, inst is occasionally null. Why?
	  if (inst == null) {
	    return;
	  }

	  // Fiber and ReactDOM keep wrapper state in separate places
	  var state = inst._wrapperState || node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  // If controlled, assign the value attribute to the current value on blur
	  var value = '' + node.value;
	  if (node.getAttribute('value') !== value) {
	    node.setAttribute('value', value);
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	  eventTypes: eventTypes,

	  _allowSimulatedPassThrough: true,
	  _isInputEventSupported: isInputEventSupported,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }

	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === 'topBlur') {
	      handleControlledInputBlur(targetInst, targetNode);
	    }
	  }
	};

	module.exports = ChangeEventPlugin;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34),
	    _assign = __webpack_require__(3);

	var CallbackQueue = __webpack_require__(56);
	var PooledClass = __webpack_require__(49);
	var ReactFeatureFlags = __webpack_require__(57);
	var ReactReconciler = __webpack_require__(58);
	var Transaction = __webpack_require__(62);

	var invariant = __webpack_require__(11);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ?  false ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ?  false ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  invariant(batchingStrategy.isBatchingUpdates, "ReactUpdates.asap: Can't enqueue an asap callback in a context where" + 'updates are not being batched.');
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ?  false ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ?  false ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ?  false ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ?  false ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PooledClass = __webpack_require__(49);

	var invariant = __webpack_require__(11);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */


	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ?  false ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */


	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);

/***/ }),
/* 57 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(59);
	var ReactInstrumentation = __webpack_require__(61);

	var warning = __webpack_require__(7);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
	  {
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	       false ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	};

	module.exports = ReactReconciler;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactOwner = __webpack_require__(60);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var invariant = __webpack_require__(11);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ?  false ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ?  false ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	};

	module.exports = ReactOwner;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if (false) {
	  var ReactDebugTool = require('./ReactDebugTool');
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var invariant = __webpack_require__(11);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /* eslint-disable space-before-function-paren */

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    /* eslint-enable space-before-function-paren */
	    !!this.isInTransaction() ?  false ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ?  false ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(33);

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(inst) {
	  return inst._wrapperState.valueTracker;
	}

	function attachTracker(inst, tracker) {
	  inst._wrapperState.valueTracker = tracker;
	}

	function detachTracker(inst) {
	  inst._wrapperState.valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value;
	  if (node) {
	    value = isCheckable(node) ? '' + node.checked : node.value;
	  }
	  return value;
	}

	var inputValueTracking = {
	  // exposed for testing
	  _getTrackerFromNode: function (node) {
	    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
	  },


	  track: function (inst) {
	    if (getTracker(inst)) {
	      return;
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var valueField = isCheckable(node) ? 'checked' : 'value';
	    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	    var currentValue = '' + node[valueField];

	    // if someone has already defined a value or Safari, then bail
	    // and don't track value will cause over reporting of changes,
	    // but it's better then a hard failure
	    // (needed for certain tests that spyOn input values and Safari)
	    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	      return;
	    }

	    Object.defineProperty(node, valueField, {
	      enumerable: descriptor.enumerable,
	      configurable: true,
	      get: function () {
	        return descriptor.get.call(this);
	      },
	      set: function (value) {
	        currentValue = '' + value;
	        descriptor.set.call(this, value);
	      }
	    });

	    attachTracker(inst, {
	      getValue: function () {
	        return currentValue;
	      },
	      setValue: function (value) {
	        currentValue = '' + value;
	      },
	      stopTracking: function () {
	        detachTracker(inst);
	        delete node[valueField];
	      }
	    });
	  },

	  updateValueIfChanged: function (inst) {
	    if (!inst) {
	      return false;
	    }
	    var tracker = getTracker(inst);

	    if (!tracker) {
	      inputValueTracking.track(inst);
	      return true;
	    }

	    var lastValue = tracker.getValue();
	    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

	    if (nextValue !== lastValue) {
	      tracker.setValue(nextValue);
	      return true;
	    }

	    return false;
	  },
	  stopTracking: function (inst) {
	    var tracker = getTracker(inst);
	    if (tracker) {
	      tracker.stopTracking();
	    }
	  }
	};

	module.exports = inputValueTracking;

/***/ }),
/* 64 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ }),
/* 66 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ }),
/* 67 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(40);
	var ReactDOMComponentTree = __webpack_require__(33);
	var SyntheticMouseEvent = __webpack_require__(69);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }
	};

	module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(70);
	var ViewportMetrics = __webpack_require__(71);

	var getEventModifierState = __webpack_require__(72);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(52);

	var getEventTarget = __webpack_require__(64);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ }),
/* 71 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ViewportMetrics = {
	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	};

	module.exports = ViewportMetrics;

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(35);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    controlsList: 0,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {},
	  DOMMutationMethods: {
	    value: function (node, value) {
	      if (value == null) {
	        return node.removeAttribute('value');
	      }

	      // Number inputs get special treatment due to some edge cases in
	      // Chrome. Let everything else assign the value attribute as normal.
	      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
	      if (node.type !== 'number' || node.hasAttribute('value') === false) {
	        node.setAttribute('value', '' + value);
	      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
	        // Don't assign an attribute if validation reports bad
	        // input. Chrome will clear the value. Additionally, don't
	        // operate on inputs that have focus, otherwise Chrome might
	        // strip off trailing decimal places and cause the user's
	        // cursor position to jump to the beginning of the input.
	        //
	        // In ReactDOMInput, we have an onBlur event that will trigger
	        // this function again when focus is lost.
	        node.setAttribute('value', '' + value);
	      }
	    }
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(75);
	var ReactDOMIDOperations = __webpack_require__(86);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(76);
	var Danger = __webpack_require__(82);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactInstrumentation = __webpack_require__(61);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(79);
	var setInnerHTML = __webpack_require__(78);
	var setTextContent = __webpack_require__(80);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (false) {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (false) {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (false) {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: {
	                toIndex: update.toIndex,
	                content: update.content.toString()
	              }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	};

	module.exports = DOMChildrenOperations;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(77);
	var setInnerHTML = __webpack_require__(78);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(79);
	var setTextContent = __webpack_require__(80);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ }),
/* 77 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);
	var DOMNamespaces = __webpack_require__(77);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(79);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xfeff) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ }),
/* 79 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);
	var escapeTextContentForBrowser = __webpack_require__(81);
	var setInnerHTML = __webpack_require__(78);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ }),
/* 81 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var DOMLazyTree = __webpack_require__(76);
	var ExecutionEnvironment = __webpack_require__(47);

	var createNodesFromMarkup = __webpack_require__(83);
	var emptyFunction = __webpack_require__(8);
	var invariant = __webpack_require__(11);

	var Danger = {
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	};

	module.exports = Danger;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(47);

	var createArrayFromMixed = __webpack_require__(84);
	var getMarkupWrap = __webpack_require__(85);
	var invariant = __webpack_require__(11);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ?  false ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ?  false ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(11);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  false ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ?  false ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ?  false ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ?  false ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(47);

	var invariant = __webpack_require__(11);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ?  false ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(75);
	var ReactDOMComponentTree = __webpack_require__(33);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(34),
	    _assign = __webpack_require__(3);

	var AutoFocusUtils = __webpack_require__(88);
	var CSSPropertyOperations = __webpack_require__(90);
	var DOMLazyTree = __webpack_require__(76);
	var DOMNamespaces = __webpack_require__(77);
	var DOMProperty = __webpack_require__(35);
	var DOMPropertyOperations = __webpack_require__(98);
	var EventPluginHub = __webpack_require__(41);
	var EventPluginRegistry = __webpack_require__(42);
	var ReactBrowserEventEmitter = __webpack_require__(100);
	var ReactDOMComponentFlags = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactDOMInput = __webpack_require__(103);
	var ReactDOMOption = __webpack_require__(106);
	var ReactDOMSelect = __webpack_require__(107);
	var ReactDOMTextarea = __webpack_require__(108);
	var ReactInstrumentation = __webpack_require__(61);
	var ReactMultiChild = __webpack_require__(109);
	var ReactServerRenderingTransaction = __webpack_require__(128);

	var emptyFunction = __webpack_require__(8);
	var escapeTextContentForBrowser = __webpack_require__(81);
	var invariant = __webpack_require__(11);
	var isEventSupported = __webpack_require__(65);
	var shallowEqual = __webpack_require__(117);
	var inputValueTracking = __webpack_require__(63);
	var validateDOMNesting = __webpack_require__(131);
	var warning = __webpack_require__(7);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { string: true, number: true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	   false ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ?  false ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ?  false ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ?  false ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ?  false ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (false) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if (false) {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trackInputValue() {
	  inputValueTracking.track(this);
	}

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ?  false ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ?  false ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	var newlineEatingTags = {
	  listing: true,
	  pre: true,
	  textarea: true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ?  false ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (false) {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trackInputValue, this);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trackInputValue, this);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (false) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (false) {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (false) {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (false) {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);

	        // We also check that we haven't missed a value update, such as a
	        // Radio group shifting the checked value to another named radio input.
	        inputValueTracking.updateValueIfChanged(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (false) {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (false) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (false) {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (false) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (false) {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	      case 'textarea':
	        inputValueTracking.stopTracking(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ?  false ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (false) {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }
	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(33);

	var focusNode = __webpack_require__(89);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(91);
	var ExecutionEnvironment = __webpack_require__(47);
	var ReactInstrumentation = __webpack_require__(61);

	var camelizeStyleName = __webpack_require__(92);
	var dangerousStyleValue = __webpack_require__(94);
	var hyphenateStyleName = __webpack_require__(95);
	var memoizeStringOnly = __webpack_require__(97);
	var warning = __webpack_require__(7);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (false) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var isCustomProperty = styleName.indexOf('--') === 0;
	      var styleValue = styles[styleName];
	      if (false) {
	        if (!isCustomProperty) {
	          warnValidStyle(styleName, styleValue, component);
	        }
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (false) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var isCustomProperty = styleName.indexOf('--') === 0;
	      if (false) {
	        if (!isCustomProperty) {
	          warnValidStyle(styleName, styles[styleName], component);
	        }
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (isCustomProperty) {
	        style.setProperty(styleName, styleValue);
	      } else if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	};

	module.exports = CSSPropertyOperations;

/***/ }),
/* 91 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(93);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ }),
/* 93 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(91);
	var warning = __webpack_require__(7);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (false) {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(96);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ }),
/* 96 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ }),
/* 97 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(35);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactInstrumentation = __webpack_require__(61);

	var quoteAttributeValueForBrowser = __webpack_require__(99);
	var warning = __webpack_require__(7);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	   false ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (false) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (false) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (false) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (false) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	};

	module.exports = DOMPropertyOperations;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(81);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var EventPluginRegistry = __webpack_require__(42);
	var ReactEventEmitterMixin = __webpack_require__(101);
	var ViewportMetrics = __webpack_require__(71);

	var getVendorPrefixedEventName = __webpack_require__(102);
	var isEventSupported = __webpack_require__(65);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	});

	module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(41);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34),
	    _assign = __webpack_require__(3);

	var DOMPropertyOperations = __webpack_require__(98);
	var LinkedValueUtils = __webpack_require__(104);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactUpdates = __webpack_require__(55);

	var invariant = __webpack_require__(11);
	var warning = __webpack_require__(7);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (false) {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      controlled: isControlled(props)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (false) {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      if (value === 0 && node.value === '') {
	        node.value = '0';
	        // Note: IE9 reports a number inputs as 'text', so check props instead.
	      } else if (props.type === 'number') {
	        // Simulate `input.valueAsNumber`. IE9 does not support it
	        var valueAsNumber = parseFloat(node.value, 10) || 0;

	        if (
	        // eslint-disable-next-line
	        value != valueAsNumber ||
	        // eslint-disable-next-line
	        value == valueAsNumber && node.value != value) {
	          // Cast `value` to a string to ensure the value is set correctly. While
	          // browsers typically do this as necessary, jsdom doesn't.
	          node.value = '' + value;
	        }
	      } else if (node.value !== '' + value) {
	        // Cast `value` to a string to ensure the value is set correctly. While
	        // browsers typically do this as necessary, jsdom doesn't.
	        node.value = '' + value;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ?  false ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var ReactPropTypesSecret = __webpack_require__(105);
	var propTypesFactory = __webpack_require__(23);

	var React = __webpack_require__(2);
	var PropTypes = propTypesFactory(React.isValidElement);

	var invariant = __webpack_require__(11);
	var warning = __webpack_require__(7);

	var hasReadOnlyValue = {
	  button: true,
	  checkbox: true,
	  image: true,
	  hidden: true,
	  radio: true,
	  reset: true,
	  submit: true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ?  false ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ?  false ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ?  false ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	         false ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var React = __webpack_require__(2);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactDOMSelect = __webpack_require__(107);

	var warning = __webpack_require__(7);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	       false ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }
	};

	module.exports = ReactDOMOption;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var LinkedValueUtils = __webpack_require__(104);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactUpdates = __webpack_require__(55);

	var warning = __webpack_require__(7);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	     false ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	       false ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	       false ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (false) {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	       false ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34),
	    _assign = __webpack_require__(3);

	var LinkedValueUtils = __webpack_require__(104);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactUpdates = __webpack_require__(55);

	var invariant = __webpack_require__(11);
	var warning = __webpack_require__(7);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ?  false ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (false) {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (false) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ?  false ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ?  false ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;

	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var ReactComponentEnvironment = __webpack_require__(110);
	var ReactInstanceMap = __webpack_require__(111);
	var ReactInstrumentation = __webpack_require__(61);

	var ReactCurrentOwner = __webpack_require__(16);
	var ReactReconciler = __webpack_require__(58);
	var ReactChildReconciler = __webpack_require__(112);

	var emptyFunction = __webpack_require__(8);
	var flattenChildren = __webpack_require__(127);
	var invariant = __webpack_require__(11);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (false) {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (false) {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (false) {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (false) {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (false) {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  false ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  false ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (false) {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	  }
	};

	module.exports = ReactMultiChild;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var invariant = __webpack_require__(11);

	var injected = false;

	var ReactComponentEnvironment = {
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ?  false ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	};

	module.exports = ReactComponentEnvironment;

/***/ }),
/* 111 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	};

	module.exports = ReactInstanceMap;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(58);

	var instantiateReactComponent = __webpack_require__(114);
	var KeyEscapeUtils = __webpack_require__(122);
	var shouldUpdateReactComponent = __webpack_require__(118);
	var traverseAllChildren = __webpack_require__(123);
	var warning = __webpack_require__(7);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && ("production") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(126);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (false) {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
	  {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (false) {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
	  {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(113)))

/***/ }),
/* 113 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34),
	    _assign = __webpack_require__(3);

	var ReactCompositeComponent = __webpack_require__(115);
	var ReactEmptyComponent = __webpack_require__(119);
	var ReactHostComponent = __webpack_require__(120);

	var getNextDebugID = __webpack_require__(121);
	var invariant = __webpack_require__(11);
	var warning = __webpack_require__(7);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (false) {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ?  false ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ?  false ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (false) {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (false) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	module.exports = instantiateReactComponent;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34),
	    _assign = __webpack_require__(3);

	var React = __webpack_require__(2);
	var ReactComponentEnvironment = __webpack_require__(110);
	var ReactCurrentOwner = __webpack_require__(16);
	var ReactErrorUtils = __webpack_require__(44);
	var ReactInstanceMap = __webpack_require__(111);
	var ReactInstrumentation = __webpack_require__(61);
	var ReactNodeTypes = __webpack_require__(116);
	var ReactReconciler = __webpack_require__(58);

	if (false) {
	  var checkReactTypeSpec = require('./checkReactTypeSpec');
	}

	var emptyObject = __webpack_require__(10);
	var invariant = __webpack_require__(11);
	var shallowEqual = __webpack_require__(117);
	var shouldUpdateReactComponent = __webpack_require__(118);
	var warning = __webpack_require__(7);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (false) {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ?  false ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (false) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (false) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  false ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (false) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (false) {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if (false) {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (false) {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if (false) {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if (false) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if (false) {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (false) {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (false) {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if (false) {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ?  false ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (false) {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ?  false ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (false) {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ?  false ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (false) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (false) {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (false) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (false) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if (false) {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if (false) {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;

	    if (false) {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if (false) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (("production") !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ?  false ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ?  false ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (false) {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null
	};

	module.exports = ReactCompositeComponent;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var React = __webpack_require__(2);

	var invariant = __webpack_require__(11);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ?  false ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;

/***/ }),
/* 117 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ }),
/* 118 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ }),
/* 119 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var invariant = __webpack_require__(11);

	var genericComponentClass = null;
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ?  false ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;

/***/ }),
/* 121 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ }),
/* 122 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var ReactCurrentOwner = __webpack_require__(16);
	var REACT_ELEMENT_TYPE = __webpack_require__(124);

	var getIteratorFn = __webpack_require__(125);
	var invariant = __webpack_require__(11);
	var KeyEscapeUtils = __webpack_require__(122);
	var warning = __webpack_require__(7);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (false) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (false) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  false ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;

/***/ }),
/* 124 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 125 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var ReactCurrentOwner = __webpack_require__(16);

	var invariant = __webpack_require__(11);
	var warning = __webpack_require__(7);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty
	  // Strip regex characters so we can use it for regex
	  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
	  // Remove hasOwnProperty from the template to make it generic
	  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	   false ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ?  false ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ?  false ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ?  false ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ?  false ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ?  false ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ?  false ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs,

	  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
	    if (typeof console.reactStack !== 'function') {
	      return;
	    }

	    var stack = [];
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    try {
	      if (isCreatingElement) {
	        stack.push({
	          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
	          fileName: currentSource ? currentSource.fileName : null,
	          lineNumber: currentSource ? currentSource.lineNumber : null
	        });
	      }

	      while (id) {
	        var element = ReactComponentTreeHook.getElement(id);
	        var parentID = ReactComponentTreeHook.getParentID(id);
	        var ownerID = ReactComponentTreeHook.getOwnerID(id);
	        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
	        var source = element && element._source;
	        stack.push({
	          name: ownerName,
	          fileName: source ? source.fileName : null,
	          lineNumber: source ? source.lineNumber : null
	        });
	        id = parentID;
	      }
	    } catch (err) {
	      // Internal state is messed up.
	      // Stop building the stack (it's just a nice to have).
	    }

	    console.reactStack(stack);
	  },
	  popNonStandardWarningStack: function () {
	    if (typeof console.reactStackEnd !== 'function') {
	      return;
	    }
	    console.reactStackEnd();
	  }
	};

	module.exports = ReactComponentTreeHook;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(122);
	var traverseAllChildren = __webpack_require__(123);
	var warning = __webpack_require__(7);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && ("production") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(126);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (false) {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (false) {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(113)))

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var PooledClass = __webpack_require__(49);
	var Transaction = __webpack_require__(62);
	var ReactInstrumentation = __webpack_require__(61);
	var ReactServerUpdateQueue = __webpack_require__(129);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (false) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(130);

	var warning = __webpack_require__(7);

	function warnNoop(publicInstance, callerName) {
	  if (false) {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var ReactCurrentOwner = __webpack_require__(16);
	var ReactInstanceMap = __webpack_require__(111);
	var ReactInstrumentation = __webpack_require__(61);
	var ReactUpdates = __webpack_require__(55);

	var invariant = __webpack_require__(11);
	var warning = __webpack_require__(7);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (false) {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (false) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    // Future-proof 15.5
	    if (callback !== undefined && callback !== null) {
	      ReactUpdateQueue.validateCallback(callback, 'replaceState');
	      if (internalInstance._pendingCallbacks) {
	        internalInstance._pendingCallbacks.push(callback);
	      } else {
	        internalInstance._pendingCallbacks = [callback];
	      }
	    }

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (false) {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ?  false ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	};

	module.exports = ReactUpdateQueue;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var emptyFunction = __webpack_require__(8);
	var warning = __webpack_require__(7);

	var validateDOMNesting = emptyFunction;

	if (false) {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var DOMLazyTree = __webpack_require__(76);
	var ReactDOMComponentTree = __webpack_require__(33);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var invariant = __webpack_require__(11);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  false ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ?  false ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  false ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ?  false ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ?  false ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34),
	    _assign = __webpack_require__(3);

	var DOMChildrenOperations = __webpack_require__(75);
	var DOMLazyTree = __webpack_require__(76);
	var ReactDOMComponentTree = __webpack_require__(33);

	var escapeTextContentForBrowser = __webpack_require__(81);
	var invariant = __webpack_require__(11);
	var validateDOMNesting = __webpack_require__(131);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (false) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ?  false ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMTextComponent;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var ReactUpdates = __webpack_require__(55);
	var Transaction = __webpack_require__(62);

	var emptyFunction = __webpack_require__(8);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var EventListener = __webpack_require__(137);
	var ExecutionEnvironment = __webpack_require__(47);
	var PooledClass = __webpack_require__(49);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactUpdates = __webpack_require__(55);

	var getEventTarget = __webpack_require__(64);
	var getUnboundedScrollPosition = __webpack_require__(138);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(8);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (false) {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;

/***/ }),
/* 138 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(35);
	var EventPluginHub = __webpack_require__(41);
	var EventPluginUtils = __webpack_require__(43);
	var ReactComponentEnvironment = __webpack_require__(110);
	var ReactEmptyComponent = __webpack_require__(119);
	var ReactBrowserEventEmitter = __webpack_require__(100);
	var ReactHostComponent = __webpack_require__(120);
	var ReactUpdates = __webpack_require__(55);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(3);

	var CallbackQueue = __webpack_require__(56);
	var PooledClass = __webpack_require__(49);
	var ReactBrowserEventEmitter = __webpack_require__(100);
	var ReactInputSelection = __webpack_require__(141);
	var ReactInstrumentation = __webpack_require__(61);
	var Transaction = __webpack_require__(62);
	var ReactUpdateQueue = __webpack_require__(130);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (false) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(142);

	var containsNode = __webpack_require__(144);
	var focusNode = __webpack_require__(89);
	var getActiveElement = __webpack_require__(147);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	var getNodeForCharacterOffset = __webpack_require__(143);
	var getTextContentAccessor = __webpack_require__(50);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ }),
/* 143 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(145);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(146);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ }),
/* 146 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ }),
/* 147 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	module.exports = getActiveElement;

/***/ }),
/* 148 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(40);
	var ExecutionEnvironment = __webpack_require__(47);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactInputSelection = __webpack_require__(141);
	var SyntheticEvent = __webpack_require__(52);

	var getActiveElement = __webpack_require__(147);
	var isTextInputElement = __webpack_require__(66);
	var shallowEqual = __webpack_require__(117);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var EventListener = __webpack_require__(137);
	var EventPropagators = __webpack_require__(40);
	var ReactDOMComponentTree = __webpack_require__(33);
	var SyntheticAnimationEvent = __webpack_require__(151);
	var SyntheticClipboardEvent = __webpack_require__(152);
	var SyntheticEvent = __webpack_require__(52);
	var SyntheticFocusEvent = __webpack_require__(153);
	var SyntheticKeyboardEvent = __webpack_require__(154);
	var SyntheticMouseEvent = __webpack_require__(69);
	var SyntheticDragEvent = __webpack_require__(157);
	var SyntheticTouchEvent = __webpack_require__(158);
	var SyntheticTransitionEvent = __webpack_require__(159);
	var SyntheticUIEvent = __webpack_require__(70);
	var SyntheticWheelEvent = __webpack_require__(160);

	var emptyFunction = __webpack_require__(8);
	var getEventCharCode = __webpack_require__(155);
	var invariant = __webpack_require__(11);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ?  false ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	};

	module.exports = SimpleEventPlugin;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(52);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(52);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(70);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(70);

	var getEventCharCode = __webpack_require__(155);
	var getEventKey = __webpack_require__(156);
	var getEventModifierState = __webpack_require__(72);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 155 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(155);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1',
	  113: 'F2',
	  114: 'F3',
	  115: 'F4',
	  116: 'F5',
	  117: 'F6',
	  118: 'F7',
	  119: 'F8',
	  120: 'F9',
	  121: 'F10',
	  122: 'F11',
	  123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(69);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(70);

	var getEventModifierState = __webpack_require__(72);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(52);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(69);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var DOMLazyTree = __webpack_require__(76);
	var DOMProperty = __webpack_require__(35);
	var React = __webpack_require__(2);
	var ReactBrowserEventEmitter = __webpack_require__(100);
	var ReactCurrentOwner = __webpack_require__(16);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactDOMContainerInfo = __webpack_require__(162);
	var ReactDOMFeatureFlags = __webpack_require__(163);
	var ReactFeatureFlags = __webpack_require__(57);
	var ReactInstanceMap = __webpack_require__(111);
	var ReactInstrumentation = __webpack_require__(61);
	var ReactMarkupChecksum = __webpack_require__(164);
	var ReactReconciler = __webpack_require__(58);
	var ReactUpdateQueue = __webpack_require__(130);
	var ReactUpdates = __webpack_require__(55);

	var emptyObject = __webpack_require__(10);
	var instantiateReactComponent = __webpack_require__(114);
	var invariant = __webpack_require__(11);
	var setInnerHTML = __webpack_require__(78);
	var shouldUpdateReactComponent = __webpack_require__(118);
	var warning = __webpack_require__(7);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (false) {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (false) {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (false) {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	     false ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ?  false ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ?  false ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ?  false ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	     false ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, {
	      child: nextElement
	    });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	     false ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ?  false ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (false) {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ?  false ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (false) {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ?  false ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (false) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ?  false ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (false) {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(131);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (false) {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;

/***/ }),
/* 163 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(165);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ }),
/* 165 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ }),
/* 166 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	module.exports = '15.6.2';

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(34);

	var ReactCurrentOwner = __webpack_require__(16);
	var ReactDOMComponentTree = __webpack_require__(33);
	var ReactInstanceMap = __webpack_require__(111);

	var getHostComponentFromComposite = __webpack_require__(168);
	var invariant = __webpack_require__(11);
	var warning = __webpack_require__(7);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (false) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ?  false ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ?  false ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(116);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(161);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _HashRouter = __webpack_require__(171);

	var _HashRouter2 = _interopRequireDefault(_HashRouter);

	var _reactRouterDom = __webpack_require__(190);

	var _api = __webpack_require__(215);

	var _api2 = _interopRequireDefault(_api);

	var _HomePage = __webpack_require__(242);

	var _HomePage2 = _interopRequireDefault(_HomePage);

	var _LoginPage = __webpack_require__(527);

	var _LoginPage2 = _interopRequireDefault(_LoginPage);

	var _DashboardPage = __webpack_require__(533);

	var _DashboardPage2 = _interopRequireDefault(_DashboardPage);

	var _NotFound = __webpack_require__(537);

	var _NotFound2 = _interopRequireDefault(_NotFound);

	var _Logout = __webpack_require__(538);

	var _Logout2 = _interopRequireDefault(_Logout);

	var _App = __webpack_require__(539);

	var _App2 = _interopRequireDefault(_App);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MainApp = function (_React$Component) {
	    _inherits(MainApp, _React$Component);

	    function MainApp(props) {
	        _classCallCheck(this, MainApp);

	        var _this = _possibleConstructorReturn(this, (MainApp.__proto__ || Object.getPrototypeOf(MainApp)).call(this, props));

	        _this.state = {
	            currentUser: null
	        };
	        _this.handleLoginSuccess = _this.handleLoginSuccess.bind(_this);
	        _this.handleLogout = _this.handleLogout.bind(_this);
	        return _this;
	    }

	    _createClass(MainApp, [{
	        key: 'handleLoginSuccess',
	        value: function handleLoginSuccess(user, referer) {
	            this.setState({ currentUser: _api2.default.getCurrentUser() });
	            var ref = referer;
	            console.log("RETURNING TO: " + ref);
	            if (ref === null) {
	                ref = '/dashboard';
	            }

	            location.replace(location.href.replace('/login', ref));
	        }
	    }, {
	        key: 'handleLogout',
	        value: function handleLogout() {
	            _api2.default.logOut();
	            this.setState({ currentUser: null });
	        }
	    }, {
	        key: 'isUserAuth',
	        value: function isUserAuth() {
	            return _api2.default.getCurrentUser() != null;
	        }
	    }, {
	        key: 'getUserAuth',
	        value: function getUserAuth() {
	            return _api2.default.getCurrentUser();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return _react2.default.createElement(
	                _HashRouter2.default,
	                null,
	                _react2.default.createElement(
	                    _App2.default,
	                    { title: 'URL Shortener', loginHandler: this },
	                    _react2.default.createElement(
	                        _reactRouterDom.Switch,
	                        null,
	                        _react2.default.createElement(_reactRouterDom.Route, { exact: true, path: '/', component: _HomePage2.default }),
	                        _react2.default.createElement(_reactRouterDom.Route, { path: '/login', render: function render(props) {
	                                return _react2.default.createElement(_LoginPage2.default, _extends({}, props, { loginHandler: _this2 }));
	                            } }),
	                        _react2.default.createElement(_reactRouterDom.Route, { path: '/logout', render: function render(props) {
	                                return _react2.default.createElement(_Logout2.default, { loginHandler: _this2, goTo: '/' });
	                            } }),
	                        _react2.default.createElement(_reactRouterDom.Route, { path: '/dashboard', render: function render(props) {
	                                return _this2.isUserAuth() ? _react2.default.createElement(_DashboardPage2.default, _extends({}, props, { handleLoginSuccess: _this2.handleLoginSuccess, handleLogout: _this2.handleLogout })) : _react2.default.createElement(_reactRouterDom.Redirect, { to: {
	                                        pathname: '/login',
	                                        state: {
	                                            referer: '/dashboard'
	                                        }
	                                    } });
	                            } }),
	                        _react2.default.createElement(_reactRouterDom.Route, { component: _NotFound2.default })
	                    )
	                )
	            );
	        }
	    }]);

	    return MainApp;
	}(_react2.default.Component);

	exports.default = MainApp;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _warning = __webpack_require__(172);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(175);

	var _Router = __webpack_require__(187);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */
	var HashRouter = function (_React$Component) {
	  _inherits(HashRouter, _React$Component);

	  function HashRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, HashRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createHashHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  HashRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.");
	  };

	  HashRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return HashRouter;
	}(_react2.default.Component);

	HashRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  getUserConfirmation: _propTypes2.default.func,
	  hashType: _propTypes2.default.oneOf(["hashbang", "noslash", "slash"]),
	  children: _propTypes2.default.node
	};
	exports.default = HashRouter;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @providesModule warning
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var __DEV__ = ("production") !== 'production';

	var warning = function() {};

	if (__DEV__) {
	  var printWarning = function printWarning(format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    var argIndex = 0;
	    var message = 'Warning: ' +
	      format.replace(/%s/g, function() {
	        return args[argIndex++];
	      });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  }

	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	          '`warning(condition, format, ...args)` requires a warning ' +
	          'message argument'
	      );
	    }
	    if (!condition) {
	      printWarning.apply(null, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (false) {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(174)();
	}


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = __webpack_require__(25);

	function emptyFunction() {}

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim
	  };

	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;

	var _LocationUtils = __webpack_require__(176);

	Object.defineProperty(exports, 'createLocation', {
	  enumerable: true,
	  get: function get() {
	    return _LocationUtils.createLocation;
	  }
	});
	Object.defineProperty(exports, 'locationsAreEqual', {
	  enumerable: true,
	  get: function get() {
	    return _LocationUtils.locationsAreEqual;
	  }
	});

	var _PathUtils = __webpack_require__(179);

	Object.defineProperty(exports, 'parsePath', {
	  enumerable: true,
	  get: function get() {
	    return _PathUtils.parsePath;
	  }
	});
	Object.defineProperty(exports, 'createPath', {
	  enumerable: true,
	  get: function get() {
	    return _PathUtils.createPath;
	  }
	});

	var _createBrowserHistory2 = __webpack_require__(180);

	var _createBrowserHistory3 = _interopRequireDefault(_createBrowserHistory2);

	var _createHashHistory2 = __webpack_require__(185);

	var _createHashHistory3 = _interopRequireDefault(_createHashHistory2);

	var _createMemoryHistory2 = __webpack_require__(186);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.createBrowserHistory = _createBrowserHistory3.default;
	exports.createHashHistory = _createHashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.locationsAreEqual = exports.createLocation = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _resolvePathname = __webpack_require__(177);

	var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

	var _valueEqual = __webpack_require__(178);

	var _valueEqual2 = _interopRequireDefault(_valueEqual);

	var _PathUtils = __webpack_require__(179);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
	  var location = void 0;
	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = (0, _PathUtils.parsePath)(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);

	    if (location.pathname === undefined) location.pathname = '';

	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }

	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }

	    if (state !== undefined && location.state === undefined) location.state = state;
	  }

	  try {
	    location.pathname = decodeURI(location.pathname);
	  } catch (e) {
	    if (e instanceof URIError) {
	      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
	    } else {
	      throw e;
	    }
	  }

	  if (key) location.key = key;

	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
	    }
	  } else {
	    // When there is no prior location and pathname is empty, set it to /
	    if (!location.pathname) {
	      location.pathname = '/';
	    }
	  }

	  return location;
	};

	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
	};

/***/ }),
/* 177 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	}

	// About 1.5x faster than the two-arg version of Array#splice()
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	// This implementation is based heavily on node's url.parse
	function resolvePathname(to) {
	  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	  var toParts = to && to.split('/') || [];
	  var fromParts = from && from.split('/') || [];

	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;

	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }

	  if (!fromParts.length) return '/';

	  var hasTrailingSlash = void 0;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }

	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];

	    if (part === '.') {
	      spliceOne(fromParts, i);
	    } else if (part === '..') {
	      spliceOne(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne(fromParts, i);
	      up--;
	    }
	  }

	  if (!mustEndAbs) for (; up--; up) {
	    fromParts.unshift('..');
	  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

	  var result = fromParts.join('/');

	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

	  return result;
	}

	exports.default = resolvePathname;
	module.exports = exports['default'];

/***/ }),
/* 178 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function valueEqual(a, b) {
	  if (a === b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return valueEqual(item, b[index]);
	    });
	  }

	  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

	  if (aType !== bType) return false;

	  if (aType === 'object') {
	    var aValue = a.valueOf();
	    var bValue = b.valueOf();

	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

	    var aKeys = Object.keys(a);
	    var bKeys = Object.keys(b);

	    if (aKeys.length !== bKeys.length) return false;

	    return aKeys.every(function (key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }

	  return false;
	}

	exports.default = valueEqual;
	module.exports = exports['default'];

/***/ }),
/* 179 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};

	var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	};

	var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {
	  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
	};

	var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {
	  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
	};

	var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	};

	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }

	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};

	var createPath = exports.createPath = function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;


	  var path = pathname || '/';

	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

	  return path;
	};

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(181);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(176);

	var _PathUtils = __webpack_require__(179);

	var _createTransitionManager = __webpack_require__(183);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _DOMUtils = __webpack_require__(184);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	var getHistoryState = function getHistoryState() {
	  try {
	    return window.history.state || {};
	  } catch (e) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    return {};
	  }
	};

	/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');

	  var globalHistory = window.history;
	  var canUseHistory = (0, _DOMUtils.supportsHistory)();
	  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();

	  var _props$forceRefresh = props.forceRefresh,
	      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
	      _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

	  var getDOMLocation = function getDOMLocation(historyState) {
	    var _ref = historyState || {},
	        key = _ref.key,
	        state = _ref.state;

	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;


	    var path = pathname + search + hash;

	    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

	    return (0, _LocationUtils.createLocation)(path, state, key);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var handlePopState = function handlePopState(event) {
	    // Ignore extraneous popstate events in WebKit.
	    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

	    handlePop(getDOMLocation(event.state));
	  };

	  var handleHashChange = function handleHashChange() {
	    handlePop(getDOMLocation(getHistoryState()));
	  };

	  var forceNextPop = false;

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of keys we've seen in sessionStorage.
	    // Instead, we just default to 0 for keys we don't know.

	    var toIndex = allKeys.indexOf(toLocation.key);

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allKeys.indexOf(fromLocation.key);

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  var initialLocation = getDOMLocation(getHistoryState());
	  var allKeys = [initialLocation.key];

	  // Public interface

	  var createHref = function createHref(location) {
	    return basename + (0, _PathUtils.createPath)(location);
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.pushState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.href = href;
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	          nextKeys.push(location.key);
	          allKeys = nextKeys;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

	        window.location.href = href;
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.replaceState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.replace(href);
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);

	          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

	        window.location.replace(href);
	      }
	    });
	  };

	  var go = function go(n) {
	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createBrowserHistory;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (false) {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (false) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(181);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createTransitionManager = function createTransitionManager() {
	  var prompt = null;

	  var setPrompt = function setPrompt(nextPrompt) {
	    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');

	    prompt = nextPrompt;

	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  };

	  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  };

	  var listeners = [];

	  var appendListener = function appendListener(fn) {
	    var isActive = true;

	    var listener = function listener() {
	      if (isActive) fn.apply(undefined, arguments);
	    };

	    listeners.push(listener);

	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var notifyListeners = function notifyListeners() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    listeners.forEach(function (listener) {
	      return listener.apply(undefined, args);
	    });
	  };

	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	};

	exports.default = createTransitionManager;

/***/ }),
/* 184 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};

	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};

	var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;

	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

	  return window.history && 'pushState' in window.history;
	};

	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};

	/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */
	var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
	  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
	};

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(181);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(176);

	var _PathUtils = __webpack_require__(179);

	var _createTransitionManager = __webpack_require__(183);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _DOMUtils = __webpack_require__(184);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HashChangeEvent = 'hashchange';

	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: _PathUtils.stripLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  },
	  slash: {
	    encodePath: _PathUtils.addLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  }
	};

	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};

	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};

	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');

	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};

	var createHashHistory = function createHashHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');

	  var globalHistory = window.history;
	  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

	  var _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$hashType = props.hashType,
	      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;

	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;


	  var getDOMLocation = function getDOMLocation() {
	    var path = decodePath(getHashPath());

	    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

	    return (0, _LocationUtils.createLocation)(path);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var forceNextPop = false;
	  var ignorePath = null;

	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);

	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;

	      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

	      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

	      ignorePath = null;

	      handlePop(location);
	    }
	  };

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.

	    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  // Ensure the hash is encoded properly before doing anything else.
	  var path = getHashPath();
	  var encodedPath = encodePath(path);

	  if (path !== encodedPath) replaceHashPath(encodedPath);

	  var initialLocation = getDOMLocation();
	  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];

	  // Public interface

	  var createHref = function createHref(location) {
	    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);

	        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	        nextPaths.push(path);
	        allPaths = nextPaths;

	        setState({ action: action, location: location });
	      } else {
	        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');

	        setState();
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }

	      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));

	      if (prevIndex !== -1) allPaths[prevIndex] = path;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');

	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createHashHistory;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(181);

	var _warning2 = _interopRequireDefault(_warning);

	var _PathUtils = __webpack_require__(179);

	var _LocationUtils = __webpack_require__(176);

	var _createTransitionManager = __webpack_require__(183);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var clamp = function clamp(n, lowerBound, upperBound) {
	  return Math.min(Math.max(n, lowerBound), upperBound);
	};

	/**
	 * Creates a history object that stores locations in memory.
	 */
	var createMemoryHistory = function createMemoryHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var getUserConfirmation = props.getUserConfirmation,
	      _props$initialEntries = props.initialEntries,
	      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
	      _props$initialIndex = props.initialIndex,
	      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = history.entries.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var index = clamp(initialIndex, 0, initialEntries.length - 1);
	  var entries = initialEntries.map(function (entry) {
	    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
	  });

	  // Public interface

	  var createHref = _PathUtils.createPath;

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var prevIndex = history.index;
	      var nextIndex = prevIndex + 1;

	      var nextEntries = history.entries.slice(0);
	      if (nextEntries.length > nextIndex) {
	        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
	      } else {
	        nextEntries.push(location);
	      }

	      setState({
	        action: action,
	        location: location,
	        index: nextIndex,
	        entries: nextEntries
	      });
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      history.entries[history.index] = location;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

	    var action = 'POP';
	    var location = history.entries[nextIndex];

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (ok) {
	        setState({
	          action: action,
	          location: location,
	          index: nextIndex
	        });
	      } else {
	        // Mimic the behavior of DOM histories by
	        // causing a render after a cancelled POP.
	        setState();
	      }
	    });
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var canGo = function canGo(n) {
	    var nextIndex = history.index + n;
	    return nextIndex >= 0 && nextIndex < history.entries.length;
	  };

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    return transitionManager.setPrompt(prompt);
	  };

	  var listen = function listen(listener) {
	    return transitionManager.appendListener(listener);
	  };

	  var history = {
	    length: entries.length,
	    action: 'POP',
	    location: entries[index],
	    index: index,
	    entries: entries,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    canGo: canGo,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createMemoryHistory;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Router = __webpack_require__(188);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Router2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(189);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for putting history on context.
	 */
	var Router = function (_React$Component) {
	  _inherits(Router, _React$Component);

	  function Router() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Router);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props.history.location.pathname)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Router.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        history: this.props.history,
	        route: {
	          location: this.props.history.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Router.prototype.computeMatch = function computeMatch(pathname) {
	    return {
	      path: "/",
	      url: "/",
	      params: {},
	      isExact: pathname === "/"
	    };
	  };

	  Router.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;

	    var _props = this.props,
	        children = _props.children,
	        history = _props.history;


	    (0, _invariant2.default)(children == null || _react2.default.Children.count(children) === 1, "A <Router> may have only one child element");

	    // Do this here so we can setState when a <Redirect> changes the
	    // location in componentWillMount. This happens e.g. when doing
	    // server rendering using a <StaticRouter>.
	    this.unlisten = history.listen(function () {
	      _this2.setState({
	        match: _this2.computeMatch(history.location.pathname)
	      });
	    });
	  };

	  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(this.props.history === nextProps.history, "You cannot change <Router history>");
	  };

	  Router.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unlisten();
	  };

	  Router.prototype.render = function render() {
	    var children = this.props.children;

	    return children ? _react2.default.Children.only(children) : null;
	  };

	  return Router;
	}(_react2.default.Component);

	Router.propTypes = {
	  history: _propTypes2.default.object.isRequired,
	  children: _propTypes2.default.node
	};
	Router.contextTypes = {
	  router: _propTypes2.default.object
	};
	Router.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Router;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @providesModule warning
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var __DEV__ = ("production") !== 'production';

	var warning = function() {};

	if (__DEV__) {
	  var printWarning = function printWarning(format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    var argIndex = 0;
	    var message = 'Warning: ' +
	      format.replace(/%s/g, function() {
	        return args[argIndex++];
	      });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  }

	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	          '`warning(condition, format, ...args)` requires a warning ' +
	          'message argument'
	      );
	    }
	    if (!condition) {
	      printWarning.apply(null, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;
	exports.withRouter = exports.matchPath = exports.generatePath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.NavLink = exports.MemoryRouter = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;

	var _BrowserRouter2 = __webpack_require__(191);

	var _BrowserRouter3 = _interopRequireDefault(_BrowserRouter2);

	var _HashRouter2 = __webpack_require__(171);

	var _HashRouter3 = _interopRequireDefault(_HashRouter2);

	var _Link2 = __webpack_require__(192);

	var _Link3 = _interopRequireDefault(_Link2);

	var _MemoryRouter2 = __webpack_require__(193);

	var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);

	var _NavLink2 = __webpack_require__(195);

	var _NavLink3 = _interopRequireDefault(_NavLink2);

	var _Prompt2 = __webpack_require__(201);

	var _Prompt3 = _interopRequireDefault(_Prompt2);

	var _Redirect2 = __webpack_require__(203);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(196);

	var _Route3 = _interopRequireDefault(_Route2);

	var _Router2 = __webpack_require__(187);

	var _Router3 = _interopRequireDefault(_Router2);

	var _StaticRouter2 = __webpack_require__(206);

	var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);

	var _Switch2 = __webpack_require__(208);

	var _Switch3 = _interopRequireDefault(_Switch2);

	var _generatePath2 = __webpack_require__(210);

	var _generatePath3 = _interopRequireDefault(_generatePath2);

	var _matchPath2 = __webpack_require__(211);

	var _matchPath3 = _interopRequireDefault(_matchPath2);

	var _withRouter2 = __webpack_require__(212);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.BrowserRouter = _BrowserRouter3.default;
	exports.HashRouter = _HashRouter3.default;
	exports.Link = _Link3.default;
	exports.MemoryRouter = _MemoryRouter3.default;
	exports.NavLink = _NavLink3.default;
	exports.Prompt = _Prompt3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;
	exports.Router = _Router3.default;
	exports.StaticRouter = _StaticRouter3.default;
	exports.Switch = _Switch3.default;
	exports.generatePath = _generatePath3.default;
	exports.matchPath = _matchPath3.default;
	exports.withRouter = _withRouter3.default;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _warning = __webpack_require__(172);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(175);

	var _Router = __webpack_require__(187);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses HTML5 history.
	 */
	var BrowserRouter = function (_React$Component) {
	  _inherits(BrowserRouter, _React$Component);

	  function BrowserRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, BrowserRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createBrowserHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  BrowserRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.");
	  };

	  BrowserRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return BrowserRouter;
	}(_react2.default.Component);

	BrowserRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  forceRefresh: _propTypes2.default.bool,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = BrowserRouter;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _history = __webpack_require__(175);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isModifiedEvent = function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	};

	/**
	 * The public API for rendering a history-aware <a>.
	 */

	var Link = function (_React$Component) {
	  _inherits(Link, _React$Component);

	  function Link() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Link);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
	      if (_this.props.onClick) _this.props.onClick(event);

	      if (!event.defaultPrevented && // onClick prevented default
	      event.button === 0 && // ignore everything but left clicks
	      !_this.props.target && // let browser handle "target=_blank" etc.
	      !isModifiedEvent(event) // ignore clicks with modifier keys
	      ) {
	          event.preventDefault();

	          var history = _this.context.router.history;
	          var _this$props = _this.props,
	              replace = _this$props.replace,
	              to = _this$props.to;


	          if (replace) {
	            history.replace(to);
	          } else {
	            history.push(to);
	          }
	        }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Link.prototype.render = function render() {
	    var _props = this.props,
	        replace = _props.replace,
	        to = _props.to,
	        innerRef = _props.innerRef,
	        props = _objectWithoutProperties(_props, ["replace", "to", "innerRef"]); // eslint-disable-line no-unused-vars

	    (0, _invariant2.default)(this.context.router, "You should not use <Link> outside a <Router>");

	    (0, _invariant2.default)(to !== undefined, 'You must specify the "to" property');

	    var history = this.context.router.history;

	    var location = typeof to === "string" ? (0, _history.createLocation)(to, null, null, history.location) : to;

	    var href = history.createHref(location);
	    return _react2.default.createElement("a", _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));
	  };

	  return Link;
	}(_react2.default.Component);

	Link.propTypes = {
	  onClick: _propTypes2.default.func,
	  target: _propTypes2.default.string,
	  replace: _propTypes2.default.bool,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
	  innerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
	};
	Link.defaultProps = {
	  replace: false
	};
	Link.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired,
	      createHref: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Link;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _MemoryRouter = __webpack_require__(194);

	var _MemoryRouter2 = _interopRequireDefault(_MemoryRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _MemoryRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _warning = __webpack_require__(189);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(175);

	var _Router = __webpack_require__(188);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that stores location in memory.
	 */
	var MemoryRouter = function (_React$Component) {
	  _inherits(MemoryRouter, _React$Component);

	  function MemoryRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, MemoryRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createMemoryHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  MemoryRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.");
	  };

	  MemoryRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return MemoryRouter;
	}(_react2.default.Component);

	MemoryRouter.propTypes = {
	  initialEntries: _propTypes2.default.array,
	  initialIndex: _propTypes2.default.number,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = MemoryRouter;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Route = __webpack_require__(196);

	var _Route2 = _interopRequireDefault(_Route);

	var _Link = __webpack_require__(192);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */
	var NavLink = function NavLink(_ref) {
	  var to = _ref.to,
	      exact = _ref.exact,
	      strict = _ref.strict,
	      location = _ref.location,
	      activeClassName = _ref.activeClassName,
	      className = _ref.className,
	      activeStyle = _ref.activeStyle,
	      style = _ref.style,
	      getIsActive = _ref.isActive,
	      ariaCurrent = _ref["aria-current"],
	      rest = _objectWithoutProperties(_ref, ["to", "exact", "strict", "location", "activeClassName", "className", "activeStyle", "style", "isActive", "aria-current"]);

	  var path = (typeof to === "undefined" ? "undefined" : _typeof(to)) === "object" ? to.pathname : to;

	  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202
	  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");

	  return _react2.default.createElement(_Route2.default, {
	    path: escapedPath,
	    exact: exact,
	    strict: strict,
	    location: location,
	    children: function children(_ref2) {
	      var location = _ref2.location,
	          match = _ref2.match;

	      var isActive = !!(getIsActive ? getIsActive(match, location) : match);

	      return _react2.default.createElement(_Link2.default, _extends({
	        to: to,
	        className: isActive ? [className, activeClassName].filter(function (i) {
	          return i;
	        }).join(" ") : className,
	        style: isActive ? _extends({}, style, activeStyle) : style,
	        "aria-current": isActive && ariaCurrent || null
	      }, rest));
	    }
	  });
	};

	NavLink.propTypes = {
	  to: _Link2.default.propTypes.to,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  location: _propTypes2.default.object,
	  activeClassName: _propTypes2.default.string,
	  className: _propTypes2.default.string,
	  activeStyle: _propTypes2.default.object,
	  style: _propTypes2.default.object,
	  isActive: _propTypes2.default.func,
	  "aria-current": _propTypes2.default.oneOf(["page", "step", "location", "date", "time", "true"])
	};

	NavLink.defaultProps = {
	  activeClassName: "active",
	  "aria-current": "page"
	};

	exports.default = NavLink;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Route = __webpack_require__(197);

	var _Route2 = _interopRequireDefault(_Route);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Route2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(189);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _matchPath = __webpack_require__(198);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isEmptyChildren = function isEmptyChildren(children) {
	  return _react2.default.Children.count(children) === 0;
	};

	/**
	 * The public API for matching a single path and rendering.
	 */

	var Route = function (_React$Component) {
	  _inherits(Route, _React$Component);

	  function Route() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Route);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props, _this.context.router)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Route.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        route: {
	          location: this.props.location || this.context.router.route.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Route.prototype.computeMatch = function computeMatch(_ref, router) {
	    var computedMatch = _ref.computedMatch,
	        location = _ref.location,
	        path = _ref.path,
	        strict = _ref.strict,
	        exact = _ref.exact,
	        sensitive = _ref.sensitive;

	    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

	    (0, _invariant2.default)(router, "You should not use <Route> or withRouter() outside a <Router>");

	    var route = router.route;

	    var pathname = (location || route.location).pathname;

	    return (0, _matchPath2.default)(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }, route.match);
	  };

	  Route.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");

	    (0, _warning2.default)(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");

	    (0, _warning2.default)(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored");
	  };

	  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');

	    this.setState({
	      match: this.computeMatch(nextProps, nextContext.router)
	    });
	  };

	  Route.prototype.render = function render() {
	    var match = this.state.match;
	    var _props = this.props,
	        children = _props.children,
	        component = _props.component,
	        render = _props.render;
	    var _context$router = this.context.router,
	        history = _context$router.history,
	        route = _context$router.route,
	        staticContext = _context$router.staticContext;

	    var location = this.props.location || route.location;
	    var props = { match: match, location: location, history: history, staticContext: staticContext };

	    if (component) return match ? _react2.default.createElement(component, props) : null;

	    if (render) return match ? render(props) : null;

	    if (typeof children === "function") return children(props);

	    if (children && !isEmptyChildren(children)) return _react2.default.Children.only(children);

	    return null;
	  };

	  return Route;
	}(_react2.default.Component);

	Route.propTypes = {
	  computedMatch: _propTypes2.default.object, // private, from <Switch>
	  path: _propTypes2.default.string,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  sensitive: _propTypes2.default.bool,
	  component: _propTypes2.default.func,
	  render: _propTypes2.default.func,
	  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
	  location: _propTypes2.default.object
	};
	Route.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.object.isRequired,
	    route: _propTypes2.default.object.isRequired,
	    staticContext: _propTypes2.default.object
	  })
	};
	Route.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Route;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _pathToRegexp = __webpack_require__(199);

	var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	var compilePath = function compilePath(pattern, options) {
	  var cacheKey = "" + options.end + options.strict + options.sensitive;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var keys = [];
	  var re = (0, _pathToRegexp2.default)(pattern, keys, options);
	  var compiledPattern = { re: re, keys: keys };

	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledPattern;
	    cacheCount++;
	  }

	  return compiledPattern;
	};

	/**
	 * Public API for matching a URL pathname to a path pattern.
	 */
	var matchPath = function matchPath(pathname) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var parent = arguments[2];

	  if (typeof options === "string") options = { path: options };

	  var _options = options,
	      path = _options.path,
	      _options$exact = _options.exact,
	      exact = _options$exact === undefined ? false : _options$exact,
	      _options$strict = _options.strict,
	      strict = _options$strict === undefined ? false : _options$strict,
	      _options$sensitive = _options.sensitive,
	      sensitive = _options$sensitive === undefined ? false : _options$sensitive;


	  if (path == null) return parent;

	  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),
	      re = _compilePath.re,
	      keys = _compilePath.keys;

	  var match = re.exec(pathname);

	  if (!match) return null;

	  var url = match[0],
	      values = match.slice(1);

	  var isExact = pathname === url;

	  if (exact && !isExact) return null;

	  return {
	    path: path, // the path pattern used to match
	    url: path === "/" && url === "" ? "/" : url, // the matched portion of the URL
	    isExact: isExact, // whether or not we matched exactly
	    params: keys.reduce(function (memo, key, index) {
	      memo[key.name] = values[index];
	      return memo;
	    }, {})
	  };
	};

	exports.default = matchPath;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	var isarray = __webpack_require__(200)

	/**
	 * Expose `pathToRegexp`.
	 */
	module.exports = pathToRegexp
	module.exports.parse = parse
	module.exports.compile = compile
	module.exports.tokensToFunction = tokensToFunction
	module.exports.tokensToRegExp = tokensToRegExp

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g')

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = []
	  var key = 0
	  var index = 0
	  var path = ''
	  var defaultDelimiter = options && options.delimiter || '/'
	  var res

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0]
	    var escaped = res[1]
	    var offset = res.index
	    path += str.slice(index, offset)
	    index = offset + m.length

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1]
	      continue
	    }

	    var next = str[index]
	    var prefix = res[2]
	    var name = res[3]
	    var capture = res[4]
	    var group = res[5]
	    var modifier = res[6]
	    var asterisk = res[7]

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path)
	      path = ''
	    }

	    var partial = prefix != null && next != null && next !== prefix
	    var repeat = modifier === '+' || modifier === '*'
	    var optional = modifier === '?' || modifier === '*'
	    var delimiter = res[2] || defaultDelimiter
	    var pattern = capture || group

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    })
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index)
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path)
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options))
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length)

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
	    }
	  }

	  return function (obj, opts) {
	    var path = ''
	    var data = obj || {}
	    var options = opts || {}
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i]

	      if (typeof token === 'string') {
	        path += token

	        continue
	      }

	      var value = data[token.name]
	      var segment

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j])

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g)

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      })
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = []

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source)
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  var strict = options.strict
	  var end = options.end !== false
	  var route = ''

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i]

	    if (typeof token === 'string') {
	      route += escapeString(token)
	    } else {
	      var prefix = escapeString(token.prefix)
	      var capture = '(?:' + token.pattern + ')'

	      keys.push(token)

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*'
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?'
	        } else {
	          capture = prefix + '(' + capture + ')?'
	        }
	      } else {
	        capture = prefix + '(' + capture + ')'
	      }

	      route += capture
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/')
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
	  }

	  if (end) {
	    route += '$'
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}


/***/ }),
/* 200 */
/***/ (function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Prompt = __webpack_require__(202);

	var _Prompt2 = _interopRequireDefault(_Prompt);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Prompt2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for prompting the user before navigating away
	 * from a screen with a component.
	 */
	var Prompt = function (_React$Component) {
	  _inherits(Prompt, _React$Component);

	  function Prompt() {
	    _classCallCheck(this, Prompt);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Prompt.prototype.enable = function enable(message) {
	    if (this.unblock) this.unblock();

	    this.unblock = this.context.router.history.block(message);
	  };

	  Prompt.prototype.disable = function disable() {
	    if (this.unblock) {
	      this.unblock();
	      this.unblock = null;
	    }
	  };

	  Prompt.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, "You should not use <Prompt> outside a <Router>");

	    if (this.props.when) this.enable(this.props.message);
	  };

	  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.when) {
	      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
	    } else {
	      this.disable();
	    }
	  };

	  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.disable();
	  };

	  Prompt.prototype.render = function render() {
	    return null;
	  };

	  return Prompt;
	}(_react2.default.Component);

	Prompt.propTypes = {
	  when: _propTypes2.default.bool,
	  message: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	Prompt.defaultProps = {
	  when: true
	};
	Prompt.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      block: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Prompt;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Redirect = __webpack_require__(204);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Redirect2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(189);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _history = __webpack_require__(175);

	var _generatePath = __webpack_require__(205);

	var _generatePath2 = _interopRequireDefault(_generatePath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for updating the location programmatically
	 * with a component.
	 */
	var Redirect = function (_React$Component) {
	  _inherits(Redirect, _React$Component);

	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Redirect.prototype.isStatic = function isStatic() {
	    return this.context.router && this.context.router.staticContext;
	  };

	  Redirect.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, "You should not use <Redirect> outside a <Router>");

	    if (this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidMount = function componentDidMount() {
	    if (!this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var prevTo = (0, _history.createLocation)(prevProps.to);
	    var nextTo = (0, _history.createLocation)(this.props.to);

	    if ((0, _history.locationsAreEqual)(prevTo, nextTo)) {
	      (0, _warning2.default)(false, "You tried to redirect to the same route you're currently on: " + ("\"" + nextTo.pathname + nextTo.search + "\""));
	      return;
	    }

	    this.perform();
	  };

	  Redirect.prototype.computeTo = function computeTo(_ref) {
	    var computedMatch = _ref.computedMatch,
	        to = _ref.to;

	    if (computedMatch) {
	      if (typeof to === "string") {
	        return (0, _generatePath2.default)(to, computedMatch.params);
	      } else {
	        return _extends({}, to, {
	          pathname: (0, _generatePath2.default)(to.pathname, computedMatch.params)
	        });
	      }
	    }

	    return to;
	  };

	  Redirect.prototype.perform = function perform() {
	    var history = this.context.router.history;
	    var push = this.props.push;

	    var to = this.computeTo(this.props);

	    if (push) {
	      history.push(to);
	    } else {
	      history.replace(to);
	    }
	  };

	  Redirect.prototype.render = function render() {
	    return null;
	  };

	  return Redirect;
	}(_react2.default.Component);

	Redirect.propTypes = {
	  computedMatch: _propTypes2.default.object, // private, from <Switch>
	  push: _propTypes2.default.bool,
	  from: _propTypes2.default.string,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
	};
	Redirect.defaultProps = {
	  push: false
	};
	Redirect.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired
	    }).isRequired,
	    staticContext: _propTypes2.default.object
	  }).isRequired
	};
	exports.default = Redirect;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _pathToRegexp = __webpack_require__(199);

	var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	var compileGenerator = function compileGenerator(pattern) {
	  var cacheKey = pattern;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var compiledGenerator = _pathToRegexp2.default.compile(pattern);

	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledGenerator;
	    cacheCount++;
	  }

	  return compiledGenerator;
	};

	/**
	 * Public API for generating a URL pathname from a pattern and parameters.
	 */
	var generatePath = function generatePath() {
	  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (pattern === "/") {
	    return pattern;
	  }
	  var generator = compileGenerator(pattern);
	  return generator(params, { pretty: true });
	};

	exports.default = generatePath;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _StaticRouter = __webpack_require__(207);

	var _StaticRouter2 = _interopRequireDefault(_StaticRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _StaticRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(189);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(175);

	var _Router = __webpack_require__(188);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === "/" ? path : "/" + path;
	};

	var addBasename = function addBasename(basename, location) {
	  if (!basename) return location;

	  return _extends({}, location, {
	    pathname: addLeadingSlash(basename) + location.pathname
	  });
	};

	var stripBasename = function stripBasename(basename, location) {
	  if (!basename) return location;

	  var base = addLeadingSlash(basename);

	  if (location.pathname.indexOf(base) !== 0) return location;

	  return _extends({}, location, {
	    pathname: location.pathname.substr(base.length)
	  });
	};

	var createURL = function createURL(location) {
	  return typeof location === "string" ? location : (0, _history.createPath)(location);
	};

	var staticHandler = function staticHandler(methodName) {
	  return function () {
	    (0, _invariant2.default)(false, "You cannot %s with <StaticRouter>", methodName);
	  };
	};

	var noop = function noop() {};

	/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */

	var StaticRouter = function (_React$Component) {
	  _inherits(StaticRouter, _React$Component);

	  function StaticRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, StaticRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
	      return addLeadingSlash(_this.props.basename + createURL(path));
	    }, _this.handlePush = function (location) {
	      var _this$props = _this.props,
	          basename = _this$props.basename,
	          context = _this$props.context;

	      context.action = "PUSH";
	      context.location = addBasename(basename, (0, _history.createLocation)(location));
	      context.url = createURL(context.location);
	    }, _this.handleReplace = function (location) {
	      var _this$props2 = _this.props,
	          basename = _this$props2.basename,
	          context = _this$props2.context;

	      context.action = "REPLACE";
	      context.location = addBasename(basename, (0, _history.createLocation)(location));
	      context.url = createURL(context.location);
	    }, _this.handleListen = function () {
	      return noop;
	    }, _this.handleBlock = function () {
	      return noop;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  StaticRouter.prototype.getChildContext = function getChildContext() {
	    return {
	      router: {
	        staticContext: this.props.context
	      }
	    };
	  };

	  StaticRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.");
	  };

	  StaticRouter.prototype.render = function render() {
	    var _props = this.props,
	        basename = _props.basename,
	        context = _props.context,
	        location = _props.location,
	        props = _objectWithoutProperties(_props, ["basename", "context", "location"]);

	    var history = {
	      createHref: this.createHref,
	      action: "POP",
	      location: stripBasename(basename, (0, _history.createLocation)(location)),
	      push: this.handlePush,
	      replace: this.handleReplace,
	      go: staticHandler("go"),
	      goBack: staticHandler("goBack"),
	      goForward: staticHandler("goForward"),
	      listen: this.handleListen,
	      block: this.handleBlock
	    };

	    return _react2.default.createElement(_Router2.default, _extends({}, props, { history: history }));
	  };

	  return StaticRouter;
	}(_react2.default.Component);

	StaticRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  context: _propTypes2.default.object.isRequired,
	  location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
	};
	StaticRouter.defaultProps = {
	  basename: "",
	  location: "/"
	};
	StaticRouter.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = StaticRouter;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Switch = __webpack_require__(209);

	var _Switch2 = _interopRequireDefault(_Switch);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Switch2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(189);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _matchPath = __webpack_require__(198);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for rendering the first <Route> that matches.
	 */
	var Switch = function (_React$Component) {
	  _inherits(Switch, _React$Component);

	  function Switch() {
	    _classCallCheck(this, Switch);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Switch.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, "You should not use <Switch> outside a <Router>");
	  };

	  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	  };

	  Switch.prototype.render = function render() {
	    var route = this.context.router.route;
	    var children = this.props.children;

	    var location = this.props.location || route.location;

	    var match = void 0,
	        child = void 0;
	    _react2.default.Children.forEach(children, function (element) {
	      if (match == null && _react2.default.isValidElement(element)) {
	        var _element$props = element.props,
	            pathProp = _element$props.path,
	            exact = _element$props.exact,
	            strict = _element$props.strict,
	            sensitive = _element$props.sensitive,
	            from = _element$props.from;

	        var path = pathProp || from;

	        child = element;
	        match = (0, _matchPath2.default)(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }, route.match);
	      }
	    });

	    return match ? _react2.default.cloneElement(child, { location: location, computedMatch: match }) : null;
	  };

	  return Switch;
	}(_react2.default.Component);

	Switch.contextTypes = {
	  router: _propTypes2.default.shape({
	    route: _propTypes2.default.object.isRequired
	  }).isRequired
	};
	Switch.propTypes = {
	  children: _propTypes2.default.node,
	  location: _propTypes2.default.object
	};
	exports.default = Switch;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _generatePath = __webpack_require__(205);

	var _generatePath2 = _interopRequireDefault(_generatePath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _generatePath2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _matchPath = __webpack_require__(198);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _matchPath2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _withRouter = __webpack_require__(213);

	var _withRouter2 = _interopRequireDefault(_withRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _withRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _hoistNonReactStatics = __webpack_require__(214);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _Route = __webpack_require__(197);

	var _Route2 = _interopRequireDefault(_Route);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A public higher-order component to access the imperative API
	 */
	var withRouter = function withRouter(Component) {
	  var C = function C(props) {
	    var wrappedComponentRef = props.wrappedComponentRef,
	        remainingProps = _objectWithoutProperties(props, ["wrappedComponentRef"]);

	    return _react2.default.createElement(_Route2.default, {
	      children: function children(routeComponentProps) {
	        return _react2.default.createElement(Component, _extends({}, remainingProps, routeComponentProps, {
	          ref: wrappedComponentRef
	        }));
	      }
	    });
	  };

	  C.displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
	  C.WrappedComponent = Component;
	  C.propTypes = {
	    wrappedComponentRef: _propTypes2.default.func
	  };

	  return (0, _hoistNonReactStatics2.default)(C, Component);
	};

	exports.default = withRouter;

/***/ }),
/* 214 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    getDerivedStateFromProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    callee: true,
	    arguments: true,
	    arity: true
	};

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

	        if (objectPrototype) {
	            var inheritedComponent = getPrototypeOf(sourceComponent);
	            if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	            }
	        }

	        var keys = getOwnPropertyNames(sourceComponent);

	        if (getOwnPropertySymbols) {
	            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
	                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                try { // Avoid failures from read-only properties
	                    defineProperty(targetComponent, key, descriptor);
	                } catch (e) {}
	            }
	        }

	        return targetComponent;
	    }

	    return targetComponent;
	}

	module.exports = hoistNonReactStatics;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _apiConfig = __webpack_require__(216);

	var _jwtDecode = __webpack_require__(217);

	var _jwtDecode2 = _interopRequireDefault(_jwtDecode);

	var _httpClient = __webpack_require__(220);

	var _httpClient2 = _interopRequireDefault(_httpClient);

	var _FileSystem = __webpack_require__(240);

	var _FileSystem2 = _interopRequireDefault(_FileSystem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var api = {};
	var fileReader = new _FileSystem2.default();
	/** TOKEN RELATED **/
	api.getToken = function () {
	    return localStorage.getItem('token');
	};
	api.setToken = function (token) {
	    localStorage.setItem('token', token);
	    return token;
	};
	api.getCurrentUser = function () {
	    var token = api.getToken();
	    if (token) return (0, _jwtDecode2.default)(token);
	    return null;
	};
	api.logOut = function () {
	    _httpClient2.default.logOut();
	    localStorage.removeItem('token');
	    return true;
	};
	/** TOKEN RELATED **/

	// During initial app load attempt to set a localStorage stored token
	// as a default header for all api requests.
	_httpClient2.default.setAuthToken(api.getToken());

	/** SERVER RELATED **/
	api.logIn = function (credentials, callback) {
	    if (_apiConfig.API_ROOT) {
	        _httpClient2.default.logIn(credentials, callback);
	    } else {
	        var result = fileReader.parseJSONResponse('login');
	        api.setToken(result.data.Authorization);
	        result.data = api.getCurrentUser();
	        if (callback) {
	            callback(result);
	        }
	    }
	};

	api.getModel = function (model, callback) {
	    if (_apiConfig.API_ROOT) {
	        _httpClient2.default.getModel(api.getToken(), model, callback);
	    } else {
	        console.log("READING FROM FILE getModel");
	    }
	};

	api.postModel = function (model, properties, callback) {
	    if (_apiConfig.API_ROOT) {
	        _httpClient2.default.postModel(api.getToken(), model, properties, callback);
	    } else {
	        var result = fileReader.parseJSONResponse(model);
	        if (callback) {
	            callback(result);
	        }
	    }
	};

	// During initial app load attempt to set a localStorage stored token
	// as a default header for all api requests.
	exports.default = api;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	//const apiVersion = 'v1';
	var backendHost = void 0;
	var node = ("production");

	if (node === 'production') {
	    backendHost = "http://localhost:8080/";
	} else {
	    if (node === 'development') {
	        backendHost = "http://localhost:8080/";
	    } else {
	        //console.log("TEST MODE: simulating server responses");
	        backendHost = null;
	    }
	}

	var API_ROOT = exports.API_ROOT = backendHost;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var base64_url_decode = __webpack_require__(218);

	function InvalidTokenError(message) {
	  this.message = message;
	}

	InvalidTokenError.prototype = new Error();
	InvalidTokenError.prototype.name = 'InvalidTokenError';

	module.exports = function (token,options) {
	  if (typeof token !== 'string') {
	    throw new InvalidTokenError('Invalid token specified');
	  }

	  options = options || {};
	  var pos = options.header === true ? 0 : 1;
	  try {
	    return JSON.parse(base64_url_decode(token.split('.')[pos]));
	  } catch (e) {
	    throw new InvalidTokenError('Invalid token specified: ' + e.message);
	  }
	};

	module.exports.InvalidTokenError = InvalidTokenError;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	var atob = __webpack_require__(219);

	function b64DecodeUnicode(str) {
	  return decodeURIComponent(atob(str).replace(/(.)/g, function (m, p) {
	    var code = p.charCodeAt(0).toString(16).toUpperCase();
	    if (code.length < 2) {
	      code = '0' + code;
	    }
	    return '%' + code;
	  }));
	}

	module.exports = function(str) {
	  var output = str.replace(/-/g, "+").replace(/_/g, "/");
	  switch (output.length % 4) {
	    case 0:
	      break;
	    case 2:
	      output += "==";
	      break;
	    case 3:
	      output += "=";
	      break;
	    default:
	      throw "Illegal base64url string!";
	  }

	  try{
	    return b64DecodeUnicode(output);
	  } catch (err) {
	    return atob(output);
	  }
	};


/***/ }),
/* 219 */
/***/ (function(module, exports) {

	/**
	 * The code was extracted from:
	 * https://github.com/davidchambers/Base64.js
	 */

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function InvalidCharacterError(message) {
	  this.message = message;
	}

	InvalidCharacterError.prototype = new Error();
	InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	function polyfill (input) {
	  var str = String(input).replace(/=+$/, '');
	  if (str.length % 4 == 1) {
	    throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	  }
	  for (
	    // initialize result and counters
	    var bc = 0, bs, buffer, idx = 0, output = '';
	    // get next character
	    buffer = str.charAt(idx++);
	    // character found in table? initialize bit storage and add its ascii value;
	    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	      // and if not first of each 4 characters,
	      // convert the first 8 bits to one ascii character
	      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	  ) {
	    // try to find character in table (0-63, not found => -1)
	    buffer = chars.indexOf(buffer);
	  }
	  return output;
	}


	module.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _axios = __webpack_require__(221);

	var _axios2 = _interopRequireDefault(_axios);

	var _apiConfig = __webpack_require__(216);

	var _api = __webpack_require__(215);

	var _api2 = _interopRequireDefault(_api);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// instantiate axios
	var httpClient = _axios2.default.create();

	httpClient.logIn = function (credentials, callback) {
	    var conf = {
	        "auth": credentials
	    };
	    _axios2.default.get(_apiConfig.API_ROOT + "auth/", conf).then(function (serverResponse) {
	        //console.log("httpClient.logIn serverResponse: " + JSON.stringify(serverResponse));
	        var token = serverResponse.data.Authorization;
	        if (token) {
	            _api2.default.setToken(token);
	            // sets token as an included header for all subsequent api requests
	            _axios2.default.defaults.headers.common['Authorization'] = token;
	            serverResponse.data = _api2.default.getCurrentUser();
	        }
	        try {
	            if (callback) {
	                callback(serverResponse);
	            }
	        } catch (e) {
	            console.log("Ignoring error on callback: " + e);
	        }
	    }).catch(function (response) {
	        console.error("ERROR when calling server:" + JSON.stringify(response), response);
	        if (callback) {
	            callback(response);
	        }
	    });
	};

	httpClient.logOut = function () {
	    delete _axios2.default.defaults.headers.common['Authorization'];
	    return true;
	};

	httpClient.getModel = function (token, model, callback) {
	    if (token) {
	        _axios2.default.defaults.headers.common['Authorization'] = token;
	    }
	    _axios2.default.get(_apiConfig.API_ROOT + model).then(function (response) {
	        if (response.status === 200) {
	            if (callback) {
	                try {
	                    callback(response);
	                } catch (e) {
	                    console.error("Catching ERROR on callback: " + e, e);
	                }
	            }
	        } else {
	            console.log("httpClient.getModel: Unexpected OK status [" + response.status + "]. See https://github.com/axios/axios#handling-errors");
	        }
	    }).catch(function (response) {
	        console.log("httpClient:: catching server error [" + response.status + "|" + response + "]");
	        var errors = [];
	        var errorSum = {};
	        if (response.status === 401 || response.status === 403) {
	            _api2.default.logOut();
	            errors.push('Your session has expired or is not active.');
	        } else {
	            errors.push('Try again in a minute and if it is still failing, call @dtodo1paco');
	        }
	        if (errors.length > 0) {
	            errorSum['summary'] = 'Ooops! something went wrong.';
	            errorSum['errors'] = errors;
	        }
	        if (callback) {
	            callback(errorSum);
	        }
	    });
	};

	httpClient.postModel = function (token, model, properties, callback) {
	    _axios2.default.post(_apiConfig.API_ROOT + model, properties).then(function (response) {
	        if (response.status < 300) {
	            if (callback) {
	                callback(response);
	            }
	        } else {
	            console.log("httpClient.postModel: Unexpected OK status [" + response.status + "]. See https://github.com/axios/axios#handling-errors");
	        }
	    }).catch(function (response) {
	        console.log("httpClient:: catching error [" + response.status + "|" + response + "]");
	        var errors = [];
	        var errorSum = {};
	        if (response.status === 401) {
	            _api2.default.logOut();
	            errors.push('Your session has expired or is not active.');
	        } else {
	            errors.push('Try again in a minute and if it is still failing, call @dtodo1paco');
	        }
	        if (errors.length > 0) {
	            errorSum['summary'] = 'Ooops! something went wrong.';
	            errorSum['errors'] = errors;
	        }
	        if (callback) {
	            callback(errorSum);
	        }
	    });
	};

	httpClient.setAuthToken = function (token) {
	    _axios2.default.defaults.headers.common['Authorization'] = token;
	};

	exports.default = httpClient;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(222);

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var defaults = __webpack_require__(223);
	var utils = __webpack_require__(224);
	var dispatchRequest = __webpack_require__(226);
	var InterceptorManager = __webpack_require__(235);
	var isAbsoluteURL = __webpack_require__(236);
	var combineURLs = __webpack_require__(237);
	var bind = __webpack_require__(238);
	var transformData = __webpack_require__(230);

	function Axios(defaultConfig) {
	  this.defaults = utils.merge({}, defaultConfig);
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }

	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);

	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }

	  // Don't allow overriding defaults.withCredentials
	  config.withCredentials = config.withCredentials || this.defaults.withCredentials;

	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );

	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);

	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	var defaultInstance = new Axios(defaults);
	var axios = module.exports = bind(Axios.prototype.request, defaultInstance);
	axios.request = bind(Axios.prototype.request, defaultInstance);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;

	// Expose properties from defaultInstance
	axios.defaults = defaultInstance.defaults;
	axios.interceptors = defaultInstance.interceptors;

	// Factory for creating new instances
	axios.create = function create(defaultConfig) {
	  return new Axios(defaultConfig);
	};

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(239);

	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	  axios[method] = bind(Axios.prototype[method], defaultInstance);
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	  axios[method] = bind(Axios.prototype[method], defaultInstance);
	});


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(224);
	var normalizeHeaderName = __webpack_require__(225);

	var PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	module.exports = {
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      data = data.replace(PROTECTION_PREFIX, '');
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],

	  headers: {
	    common: {
	      'Accept': 'application/json, text/plain, */*'
	    },
	    patch: utils.merge(DEFAULT_CONTENT_TYPE),
	    post: utils.merge(DEFAULT_CONTENT_TYPE),
	    put: utils.merge(DEFAULT_CONTENT_TYPE)
	  },

	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};


/***/ }),
/* 224 */
/***/ (function(module, exports) {

	'use strict';

	/*global toString:true*/

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  typeof document.createElement -> undefined
	 */
	function isStandardBrowserEnv() {
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined' &&
	    typeof document.createElement === 'function'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object' && !isArray(obj)) {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  trim: trim
	};


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(224);

	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Dispatch a request to the server using whichever adapter
	 * is supported by the current environment.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  return new Promise(function executor(resolve, reject) {
	    try {
	      var adapter;

	      if (typeof config.adapter === 'function') {
	        // For custom adapter support
	        adapter = config.adapter;
	      } else if (typeof XMLHttpRequest !== 'undefined') {
	        // For browsers use XHR adapter
	        adapter = __webpack_require__(227);
	      } else if (typeof process !== 'undefined') {
	        // For node use HTTP adapter
	        adapter = __webpack_require__(227);
	      }

	      if (typeof adapter === 'function') {
	        adapter(resolve, reject, config);
	      }
	    } catch (e) {
	      reject(e);
	    }
	  });
	};


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(113)))

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(224);
	var buildURL = __webpack_require__(228);
	var parseHeaders = __webpack_require__(229);
	var transformData = __webpack_require__(230);
	var isURLSameOrigin = __webpack_require__(231);
	var btoa = (typeof window !== 'undefined' && window.btoa) || __webpack_require__(232);
	var settle = __webpack_require__(233);

	module.exports = function xhrAdapter(resolve, reject, config) {
	  var requestData = config.data;
	  var requestHeaders = config.headers;

	  if (utils.isFormData(requestData)) {
	    delete requestHeaders['Content-Type']; // Let the browser set it
	  }

	  var request = new XMLHttpRequest();
	  var loadEvent = 'onreadystatechange';
	  var xDomain = false;

	  // For IE 8/9 CORS support
	  // Only supports POST and GET calls and doesn't returns the response headers.
	  // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	  if (("production") !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
	    request = new window.XDomainRequest();
	    loadEvent = 'onload';
	    xDomain = true;
	    request.onprogress = function handleProgress() {};
	    request.ontimeout = function handleTimeout() {};
	  }

	  // HTTP basic authentication
	  if (config.auth) {
	    var username = config.auth.username || '';
	    var password = config.auth.password || '';
	    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	  }

	  request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

	  // Set the request timeout in MS
	  request.timeout = config.timeout;

	  // Listen for ready state
	  request[loadEvent] = function handleLoad() {
	    if (!request || (request.readyState !== 4 && !xDomain)) {
	      return;
	    }

	    // The request errored out and we didn't get a response, this will be
	    // handled by onerror instead
	    if (request.status === 0) {
	      return;
	    }

	    // Prepare the response
	    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	    var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	    var response = {
	      data: transformData(
	        responseData,
	        responseHeaders,
	        config.transformResponse
	      ),
	      // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
	      status: request.status === 1223 ? 204 : request.status,
	      statusText: request.status === 1223 ? 'No Content' : request.statusText,
	      headers: responseHeaders,
	      config: config,
	      request: request
	    };

	    settle(resolve, reject, response);

	    // Clean up request
	    request = null;
	  };

	  // Handle low level network errors
	  request.onerror = function handleError() {
	    // Real errors are hidden from us by the browser
	    // onerror should only fire if it's a network error
	    reject(new Error('Network Error'));

	    // Clean up request
	    request = null;
	  };

	  // Handle timeout
	  request.ontimeout = function handleTimeout() {
	    var err = new Error('timeout of ' + config.timeout + 'ms exceeded');
	    err.timeout = config.timeout;
	    err.code = 'ECONNABORTED';
	    reject(err);

	    // Clean up request
	    request = null;
	  };

	  // Add xsrf header
	  // This is only done if running in a standard browser environment.
	  // Specifically not if we're in a web worker, or react-native.
	  if (utils.isStandardBrowserEnv()) {
	    var cookies = __webpack_require__(234);

	    // Add xsrf header
	    var xsrfValue = config.withCredentials || isURLSameOrigin(config.url) ?
	        cookies.read(config.xsrfCookieName) :
	        undefined;

	    if (xsrfValue) {
	      requestHeaders[config.xsrfHeaderName] = xsrfValue;
	    }
	  }

	  // Add headers to the request
	  if ('setRequestHeader' in request) {
	    utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	        // Remove Content-Type if data is undefined
	        delete requestHeaders[key];
	      } else {
	        // Otherwise add header to the request
	        request.setRequestHeader(key, val);
	      }
	    });
	  }

	  // Add withCredentials to request if needed
	  if (config.withCredentials) {
	    request.withCredentials = true;
	  }

	  // Add responseType to request if needed
	  if (config.responseType) {
	    try {
	      request.responseType = config.responseType;
	    } catch (e) {
	      if (request.responseType !== 'json') {
	        throw e;
	      }
	    }
	  }

	  // Handle progress if needed
	  if (config.progress) {
	    if (config.method === 'post' || config.method === 'put') {
	      request.upload.addEventListener('progress', config.progress);
	    } else if (config.method === 'get') {
	      request.addEventListener('progress', config.progress);
	    }
	  }

	  if (requestData === undefined) {
	    requestData = null;
	  }

	  // Send the request
	  request.send(requestData);
	};


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(224);

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }

	      if (!utils.isArray(val)) {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(224);

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });

	  return parsed;
	};


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(224);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });

	  return data;
	};


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(224);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 232 */
/***/ (function(module, exports) {

	'use strict';

	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';

	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}

	module.exports = btoa;


/***/ }),
/* 233 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(response);
	  }
	};


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(224);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(224);

	function InterceptorManager() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	module.exports = InterceptorManager;


/***/ }),
/* 236 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 237 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
	};


/***/ }),
/* 238 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 239 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _fs = __webpack_require__(241);

	var _fs2 = _interopRequireDefault(_fs);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var FileSystem = function () {
	    function FileSystem() {
	        _classCallCheck(this, FileSystem);
	    }

	    _createClass(FileSystem, [{
	        key: 'parseJSONResponse',
	        value: function parseJSONResponse(model) {
	            // TODO: add error responses using random number
	            var response = this.parseJSONFile('tests/__data/genericResponse.json');
	            var data = this.parseJSONFile('tests/__data/' + model + ".json");
	            response.data = data;
	            response.status = 200;
	            return response;
	        }
	    }, {
	        key: 'parseJSONFile',
	        value: function parseJSONFile(file) {
	            var content = String(_fs2.default.readFileSync(file));
	            return JSON.parse(content);
	        }
	    }]);

	    return FileSystem;
	}();

	exports.default = FileSystem;

/***/ }),
/* 241 */
/***/ (function(module, exports) {

	

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _URLForm = __webpack_require__(243);

	var _URLForm2 = _interopRequireDefault(_URLForm);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Home = function (_React$Component) {
	  _inherits(Home, _React$Component);

	  function Home() {
	    _classCallCheck(this, Home);

	    return _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).apply(this, arguments));
	  }

	  _createClass(Home, [{
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement(_URLForm2.default, null);
	    }
	  }]);

	  return Home;
	}(_react2.default.Component);

	exports.default = Home;

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Card = __webpack_require__(244);

	var _Card2 = _interopRequireDefault(_Card);

	var _CardTitle = __webpack_require__(275);

	var _CardTitle2 = _interopRequireDefault(_CardTitle);

	var _CardActions = __webpack_require__(303);

	var _CardActions2 = _interopRequireDefault(_CardActions);

	var _CircularProgress = __webpack_require__(304);

	var _CircularProgress2 = _interopRequireDefault(_CircularProgress);

	var _Media = __webpack_require__(306);

	var _Media2 = _interopRequireDefault(_Media);

	var _Buttons = __webpack_require__(309);

	var _Buttons2 = _interopRequireDefault(_Buttons);

	var _reactMd = __webpack_require__(315);

	var _api = __webpack_require__(215);

	var _api2 = _interopRequireDefault(_api);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var URLForm = function (_React$Component) {
	    _inherits(URLForm, _React$Component);

	    function URLForm() {
	        _classCallCheck(this, URLForm);

	        var _this = _possibleConstructorReturn(this, (URLForm.__proto__ || Object.getPrototypeOf(URLForm)).call(this));

	        _this.state = {
	            loading: false,
	            numClicks: 0,
	            urlValue: '',
	            urlShortened: null
	        };
	        _this.handleClick = _this.handleClick.bind(_this);
	        _this.handleReset = _this.handleReset.bind(_this);
	        _this.handleUrlChange = _this.handleUrlChange.bind(_this);
	        _this.checkResponse = _this.checkResponse.bind(_this);
	        _this.openInNewTab = _this.openInNewTab.bind(_this);
	        return _this;
	    }

	    _createClass(URLForm, [{
	        key: "checkResponse",
	        value: function checkResponse(response) {
	            if (response && response.data && response.data.shortened) {
	                var link = location != 'about:blank' ? location : '' + response.data.shortened;
	                link = link.replace('/#', '');
	                this.setState({
	                    urlShortened: link,
	                    loading: false
	                });
	            }
	        }
	    }, {
	        key: "handleUrlChange",
	        value: function handleUrlChange(url) {
	            this.setState({ urlValue: url });
	        }
	    }, {
	        key: "handleClick",
	        value: function handleClick(e) {
	            e.preventDefault();
	            var nClicks = this.state.numClicks + 1;
	            var loading = false;
	            var url = this.state.urlValue;
	            if (url.length > 0) {
	                loading = true;
	                _api2.default.postModel("url", { source: url }, this.checkResponse);
	            }
	            this.setState({ numClicks: nClicks, loading: loading });
	        }
	    }, {
	        key: "handleReset",
	        value: function handleReset(e) {
	            this.setState({
	                urlValue: '',
	                loading: false,
	                urlShortened: '',
	                numClicks: 0
	            });
	        }
	    }, {
	        key: "openInNewTab",
	        value: function openInNewTab() {
	            window.open(this.state.urlShortened, "_blank");
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            var _state = this.state,
	                urlValue = _state.urlValue,
	                numClicks = _state.numClicks,
	                loading = _state.loading,
	                urlShortened = _state.urlShortened;

	            var result = null;
	            if (loading) {
	                result = _react2.default.createElement(_CircularProgress2.default, { key: "progress", id: "url-shortener-waiting" });
	            } else if (urlShortened) {
	                result = _react2.default.createElement(
	                    "div",
	                    { id: "url-shortened" },
	                    _react2.default.createElement(
	                        "div",
	                        { className: "result md-cell md-cell--10 md-cell--3-phone md-cell--6-tablet" },
	                        _react2.default.createElement(
	                            "span",
	                            null,
	                            "Your URL shortened: ",
	                            _react2.default.createElement(
	                                "a",
	                                { href: urlShortened },
	                                urlShortened
	                            )
	                        ),
	                        _react2.default.createElement(
	                            _Buttons2.default,
	                            { icon: true, primary: true, onClick: this.openInNewTab, className: "md-cell md-cell--1 md-cell--1-phone md-cell--1-tablet" },
	                            "open_in_new"
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _Buttons2.default,
	                        { icon: true, primary: true, onClick: this.handleReset, className: "md-cell md-cell--2 md-cell--1-phone md-cell--2-tablet" },
	                        "autorenew"
	                    )
	                );
	            }
	            return _react2.default.createElement(
	                _Card2.default,
	                { className: "main-form md-block-centered" },
	                _react2.default.createElement(
	                    _Media2.default,
	                    null,
	                    _react2.default.createElement("img", {
	                        src: "http://inspirationseek.com/wp-content/uploads/2014/06/Abstract-Painting-Ideas.jpg",
	                        role: "presentation"
	                    }),
	                    _react2.default.createElement(
	                        _Media.MediaOverlay,
	                        null,
	                        _react2.default.createElement(_CardTitle2.default, { title: "URL Shortener", subtitle: "Type a URL and click 'Shorten'" })
	                    )
	                ),
	                _react2.default.createElement(
	                    "form",
	                    { className: "md-grid", onSubmit: this.handleClick },
	                    _react2.default.createElement(
	                        "div",
	                        { className: "url-form" },
	                        _react2.default.createElement(_reactMd.TextField, {
	                            required: true,
	                            errorText: "Please, type a URL before click button",
	                            error: numClicks > 0 && (urlValue == null || urlValue.length == 0),
	                            id: "floating-center-title",
	                            label: "URL",
	                            lineDirection: "center",
	                            placeholder: "https://google.com",
	                            value: this.state.urlValue,
	                            onChange: this.handleUrlChange,
	                            className: "md-cell md-cell--9 md-cell--3-phone md-cell--6-tablet"
	                        }),
	                        _react2.default.createElement(
	                            _Buttons2.default,
	                            { flat: true, onClick: this.handleClick,
	                                className: "md-cell md-cell--2 md-cell--1-phone md-cell--2-tablet" },
	                            "Shorten"
	                        )
	                    ),
	                    result
	                )
	            );
	        }
	    }]);

	    return URLForm;
	}(_react2.default.Component);

	exports.default = URLForm;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _contextTypes = __webpack_require__(252);

	var _contextTypes2 = _interopRequireDefault(_contextTypes);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _Paper = __webpack_require__(256);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _Collapse = __webpack_require__(259);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Card = function (_PureComponent) {
	  _inherits(Card, _PureComponent);

	  function Card(props) {
	    _classCallCheck(this, Card);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._handleMouseOver = function (e) {
	      if (_this.props.onMouseOver) {
	        _this.props.onMouseOver(e);
	      }

	      if (_this.props.raise && !_this._touched) {
	        _this.setState({ zDepth: 4 });
	      }
	    };

	    _this._handleMouseLeave = function (e) {
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(e);
	      }

	      _this._touched = false;
	      if (_this.props.raise && _this.state.zDepth !== 1) {
	        _this.setState({ zDepth: 1 });
	      }
	    };

	    _this._handleTouchStart = function (e) {
	      if (_this.props.onTouchStart) {
	        _this.props.onTouchStart(e);
	      }

	      _this._touched = true;
	    };

	    _this._handleExpandClick = function (e) {
	      var onExpanderClick = _this.props.onExpanderClick;

	      var expanded = !(0, _getField2.default)(_this.props, _this.state, 'expanded');
	      if (onExpanderClick) {
	        onExpanderClick(expanded, e);
	      }

	      if (typeof _this.props.expanded === 'undefined') {
	        _this.setState({ expanded: expanded });
	      }
	    };

	    _this.state = {
	      zDepth: 1,
	      expanded: typeof props.initiallyExpanded !== 'undefined' ? props.initiallyExpanded : !!props.defaultExpanded
	    };
	    return _this;
	  }

	  Card.prototype.getChildContext = function getChildContext() {
	    var _props = this.props,
	        expanderTooltipLabel = _props.expanderTooltipLabel,
	        expanderTooltipDelay = _props.expanderTooltipDelay,
	        expanderTooltipPosition = _props.expanderTooltipPosition,
	        expanderIcon = _props.expanderIcon,
	        iconClassName = _props.iconClassName,
	        iconChildren = _props.iconChildren,
	        expanderIconClassName = _props.expanderIconClassName,
	        expanderIconChildren = _props.expanderIconChildren;


	    var expanded = typeof this.props.isExpanded !== 'undefined' ? this.props.isExpanded : (0, _getField2.default)(this.props, this.state, 'expanded');

	    return {
	      expanded: expanded,
	      onExpandClick: this._handleExpandClick,
	      icon: (0, _getDeprecatedIcon2.default)(iconChildren || expanderIconChildren, iconClassName || expanderIconClassName, expanderIcon),
	      tooltipLabel: expanderTooltipLabel,
	      tooltipDelay: expanderTooltipDelay,
	      tooltipPosition: expanderTooltipPosition
	    };
	  };

	  Card.prototype.render = function render() {
	    var zDepth = this.state.zDepth;

	    var _props2 = this.props,
	        className = _props2.className,
	        raise = _props2.raise,
	        tableCard = _props2.tableCard,
	        children = _props2.children,
	        animate = _props2.animate,
	        propExpanded = _props2.expanded,
	        onExpanderClick = _props2.onExpanderClick,
	        defaultExpanded = _props2.defaultExpanded,
	        expanderIcon = _props2.expanderIcon,
	        expanderIconChildren = _props2.expanderIconChildren,
	        expanderIconClassName = _props2.expanderIconClassName,
	        expanderTooltipLabel = _props2.expanderTooltipLabel,
	        expanderTooltipDelay = _props2.expanderTooltipDelay,
	        expanderTooltipPosition = _props2.expanderTooltipPosition,
	        iconChildren = _props2.iconChildren,
	        iconClassName = _props2.iconClassName,
	        isExpanded = _props2.isExpanded,
	        initiallyExpanded = _props2.initiallyExpanded,
	        props = _objectWithoutProperties(_props2, ['className', 'raise', 'tableCard', 'children', 'animate', 'expanded', 'onExpanderClick', 'defaultExpanded', 'expanderIcon', 'expanderIconChildren', 'expanderIconClassName', 'expanderTooltipLabel', 'expanderTooltipDelay', 'expanderTooltipPosition', 'iconChildren', 'iconClassName', 'isExpanded', 'initiallyExpanded']);

	    var expanded = typeof this.props.isExpanded !== 'undefined' ? this.props.isExpanded : (0, _getField2.default)(this.props, this.state, 'expanded');
	    var expanderIndex = -1;
	    var parts = _react.Children.map(_react.Children.toArray(children), function (child, i) {
	      if (!child || !child.props) {
	        return child;
	      } else if (expanderIndex < 0 && (child.props.isExpander || child.props.expander)) {
	        expanderIndex = i;
	      }

	      if (!child.props.expandable) {
	        return child;
	      }

	      var collapsed = expanderIndex === -1 || expanderIndex === i || !expanded;
	      return _react2.default.createElement(
	        _Collapse2.default,
	        { collapsed: collapsed, animate: animate },
	        child
	      );
	    });

	    return _react2.default.createElement(
	      _Paper2.default,
	      _extends({}, props, {
	        zDepth: zDepth,
	        className: (0, _classnames2.default)('md-card', {
	          'md-card--raise': raise,
	          'md-card--table': tableCard
	        }, 'md-background--card', className),
	        onMouseOver: this._handleMouseOver,
	        onMouseLeave: this._handleMouseLeave,
	        onTouchStart: this._handleTouchStart
	      }),
	      parts
	    );
	  };

	  return Card;
	}(_react.PureComponent);

	Card.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the card.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Any Card parts that should be rendered.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the card is expanded by default when there is an expander
	   * component.
	   */
	  defaultExpanded: _propTypes2.default.bool,

	  /**
	   * Boolean if the card should raise on hover when on a desktop display.
	   */
	  raise: _propTypes2.default.bool,

	  /**
	   * Boolean if the card is currently expanded. This will require the `onExpanderClick` function
	   * to toggle the state. The card will become controlled if this is not `undefined`.
	   */
	  expanded: (0, _controlled2.default)(_propTypes2.default.bool, 'onExpanderClick', 'defaultExpanded'),

	  /**
	   * An optional function to call when the expander is clicked.
	   */
	  onExpanderClick: _propTypes2.default.func,

	  /**
	   * The icon to use for the expander button. It is recommended to use this prop over
	   * the `expaderIconChildren` and `expanderIconClassName` since it provides more control.
	   */
	  expanderIcon: _propTypes2.default.element,

	  /**
	   * The tooltip position for the expander icon.
	   */
	  expanderTooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * The optional tooltip to display for the expander icon.
	   */
	  expanderTooltipLabel: _propTypes2.default.node,

	  /**
	   * An optional delay before the tooltip appears for the expander icon on hover.
	   */
	  expanderTooltipDelay: _propTypes2.default.number,

	  /**
	   * Boolean if the card contains a table. It will update the styling accordingly.
	   * When using the `DataTable` component, do not wrap it in a `CardText` component.
	   *
	   * ```js
	   * <Card tableCard={true}>
	   *   <CardTitle title="Example />
	   *   <DataTable>
	   *     ...
	   *   </DataTable>
	   * </Card>
	   * ```
	   */
	  tableCard: _propTypes2.default.bool,

	  /**
	   * An optional function to call when the mouseover event is triggered.
	   */
	  onMouseOver: _propTypes2.default.func,

	  /**
	   * An optional function to call when the mouseleave event is triggered.
	   */
	  onMouseLeave: _propTypes2.default.func,

	  /**
	   * An optional function to call when the touchstart event is triggered.
	   */
	  onTouchStart: _propTypes2.default.func,

	  /**
	   * Boolean if the card expansion should be animated.
	   */
	  animate: _propTypes2.default.bool,

	  expanderIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `expanderIcon` instead'),
	  expanderIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `expanderIcon` instead'),
	  initiallyExpanded: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultExpanded` instead'),
	  isExpanded: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `expanded` instead'),
	  iconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `expanderIconChildren` prop instead'),
	  iconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `expanderIconClassName` prop instead')
	};
	Card.defaultProps = {
	  animate: true,
	  expanderIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'keyboard_arrow_down'
	  ),
	  expanderTooltipPosition: 'left'
	};
	Card.childContextTypes = _contextTypes2.default;
	exports.default = Card;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (false) {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(246)();
	}


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(8);
	var invariant = __webpack_require__(11);
	var ReactPropTypesSecret = __webpack_require__(247);

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    invariant(
	      false,
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim
	  };

	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ }),
/* 247 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = deprecated;

	var _warning = __webpack_require__(181);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var warned = {};

	function deprecated(validator, reason) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;

	    if (props[propName] != null) {
	      var messageKey = componentName + '.' + propName;

	      (0, _warning2.default)(warned[messageKey], 'The ' + location + ' `' + propFullNameSafe + '` of ' + ('`' + componentNameSafe + '` is deprecated. ' + reason + '.'));

	      warned[messageKey] = true;
	    }

	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }

	    return validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	  };
	}

	/* eslint-disable no-underscore-dangle */
	function _resetWarned() {
	  warned = {};
	}

	deprecated._resetWarned = _resetWarned;
	/* eslint-enable no-underscore-dangle */

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = controlled;

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Validates the a component is fully controlled or uncontrolled.  If the given prop is not
	 * `undefined`, it will check if the `funcName` is defined and a function. A missing function
	 * will generate an error similar to the built-in React controlled validation message.
	 *
	 * @param {String} funcName - The function name to use for additional validation.
	 * @param {function} validator - The PropTypes validator to use for the given prop.
	 * @return {Error} an error or null.
	 */
	function controlled(validator, funcName) {
	  var fallbackPropName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'defaultValue';

	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;

	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }

	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && typeof props[propName] !== 'undefined' && !props.readOnly && !props.disabled) {
	      var _PropTypes$func;

	      var funcError = (_PropTypes$func = _propTypes2.default.func).isRequired.apply(_PropTypes$func, [props, funcName, componentName, location, propFullName].concat(args));
	      if (funcError) {
	        err = new Error('You provided a `' + propFullNameSafe + '` ' + location + ' to the ' + componentNameSafe + ' without a ' + ('`' + funcName + '` handler. This will render a read only field. Set either the `' + funcName + '` ') + ('or use the `' + fallbackPropName + '` instead.'));
	      }
	    }

	    return err;
	  };
	} /** @module utils/PropTypes/controlled */

/***/ }),
/* 251 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = getField;
	/** @module utils/getField */

	/**
	 * Gets the current field for a component that can the field
	 * as either uncontrolled or controlled.
	 *
	 * @param {Object} props - the props object.
	 * @param {Object} state = the state object.
	 * @param {string=} field - the field to extract a value from. Defaults to 'value'.
	 *
	 * @return the field's value.
	 */
	function getField(props, state) {
	  var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'value';

	  return typeof props[field] !== 'undefined' ? props[field] : state[field];
	}

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  onExpandClick: _propTypes2.default.func,
	  expanded: _propTypes2.default.bool,
	  icon: _propTypes2.default.element,
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
	  tooltipLabel: _propTypes2.default.node,
	  tooltipDelay: _propTypes2.default.number
	};

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = getDeprecatedIcon;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getDeprecatedIcon(className, children, icon) {
	  if (className || children) {
	    return _react2.default.createElement(
	      _FontIcon2.default,
	      { iconClassName: className },
	      children
	    );
	  }

	  return icon;
	}

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ICON_SIZE = 24;

	/**
	 * The \`FontIcon\` component is used for rendering a font-icon library's
	 * icon. The default is to use the `material-icons` library, but others
	 * can be used as well.
	 *
	 * If you are using another font-icon library that does not always create
	 * icons with a perfect 1:1 scale (such as font-awesome), it is recommended
	 * to update the `.md-icon` styles to set the width and height to `$md-font-icon-size`.
	 * However, this will prevent different sided icons.
	 *
	 * ```scss
	 * .md-icon.fa {
	 *   height: $md-font-icon-size;
	 *   width: $md-font-icon-size;
	 * }
	 * ```
	 */

	var FontIcon = function (_PureComponent) {
	  _inherits(FontIcon, _PureComponent);

	  function FontIcon(props) {
	    _classCallCheck(this, FontIcon);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

	    _initialiseProps.call(_this);

	    _this.state = { styles: _this._mergeStyles(props) };
	    return _this;
	  }

	  FontIcon.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        style = _props.style,
	        forceSize = _props.forceSize,
	        forceFontSize = _props.forceFontSize;

	    if (style !== nextProps.style || forceSize !== nextProps.forceSize || forceFontSize !== nextProps.forceFontSize) {
	      this.setState({ styles: this._mergeStyles(nextProps) });
	    }
	  };

	  FontIcon.prototype.render = function render() {
	    var styles = this.state.styles;

	    var _props2 = this.props,
	        iconClassName = _props2.iconClassName,
	        className = _props2.className,
	        children = _props2.children,
	        disabled = _props2.disabled,
	        primary = _props2.primary,
	        secondary = _props2.secondary,
	        error = _props2.error,
	        inherit = _props2.inherit,
	        style = _props2.style,
	        forceSize = _props2.forceSize,
	        forceFontSize = _props2.forceFontSize,
	        props = _objectWithoutProperties(_props2, ['iconClassName', 'className', 'children', 'disabled', 'primary', 'secondary', 'error', 'inherit', 'style', 'forceSize', 'forceFontSize']);

	    var classes = (0, _classnames2.default)('md-icon', iconClassName, (0, _themeColors2.default)({
	      disabled: disabled,
	      error: error,
	      inherit: inherit,
	      primary: primary,
	      secondary: secondary
	    }), className);

	    return _react2.default.createElement(
	      'i',
	      _extends({}, props, { style: styles, className: classes }),
	      children
	    );
	  };

	  return FontIcon;
	}(_react.PureComponent);

	FontIcon.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `FontIcon`.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The icon font library className to use to display the icon.
	   */
	  iconClassName: _propTypes2.default.string.isRequired,

	  /**
	   * Boolean if the primary theme color should be applied.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the secondary theme color should be applied.
	   */
	  secondary: _propTypes2.default.bool,

	  /**
	   * Boolean if the icon is considered disabled and should inherit the
	   * disabled color.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * Boolean if the error color should be applied to the icon.
	   */
	  error: _propTypes2.default.bool,

	  /**
	   * Boolean if the color of the icon should be inherited by parent elements.
	   */
	  inherit: _propTypes2.default.bool,

	  /**
	   * Either a boolean that will enforce the 24x24 size of the font icon or a number of the size
	   * to enforce. This is useful when using other font icon libraries that do not have a consistent
	   * size.
	   */
	  forceSize: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),

	  /**
	   * Boolean if the `forceSize` prop should also force the `font-size` instead of only `width` and `height`.
	   */
	  forceFontSize: function forceFontSize(props, propName, component) {
	    for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      args[_key - 3] = arguments[_key];
	    }

	    var error = _propTypes2.default.bool.apply(_propTypes2.default, [props, propName, component].concat(args));
	    if (!error && typeof props.forceSize === 'undefined' && props[propName]) {
	      error = new Error('You provided a `forceFontSize` prop to the ' + component + ' component, without specifying the `forceSize` ' + ('prop. Either set the `forceSize` prop to a boolean or a number, or disable `' + propName + '`.'));
	    }

	    return error;
	  },

	  /**
	   * Any children required to display the icon with the font library.
	   */
	  children: _propTypes2.default.node
	};
	FontIcon.defaultProps = {
	  iconClassName: 'material-icons'
	};

	var _initialiseProps = function _initialiseProps() {
	  this._mergeStyles = function (_ref) {
	    var style = _ref.style,
	        forceSize = _ref.forceSize,
	        forceFontSize = _ref.forceFontSize;

	    var styles = style;
	    if (typeof forceSize === 'boolean') {
	      styles = _extends({
	        height: ICON_SIZE,
	        width: ICON_SIZE,
	        fontSize: forceFontSize ? ICON_SIZE : undefined
	      }, style);
	    } else if (typeof forceSize === 'number') {
	      styles = _extends({
	        height: forceSize,
	        width: forceSize,
	        fontSize: forceFontSize ? forceSize : undefined
	      }, style);
	    }

	    return styles;
	  };
	};

	exports.default = FontIcon;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = themeColors;

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * This is a utility function to apply the different text colors as a class name.
	 *
	 * @param {Object} options - The options to use to figure out which styles to apply.
	 * @param {boolean?} options.text - Boolean if the base text color should attempt to be
	 *    applied. This will only be applied if all the other states are not true.
	 * @param {boolean?} options.disabled - Boolean if the text should be disabled.
	 * @param {boolean?} options.error - Boolean if the error color should attempt to be applied.
	 *    This will only be applied if the disabled state is false.
	 * @param {boolean?} options.primary - Boolean if the primary color should be applied. This
	 *    will only be applied if all the other states are false.
	 * @param {boolean?} options.secondary - Boolean if the secondary color should be applied.
	 *    This will only be applied if all the other states are false.
	 * @param {boolean?} options.inherit - Boolean if the color should be inherited by a parent.
	 *    This will only be applied if the error and disabled states are false.
	 * @return {String} the class name
	 */
	function themeColors() {
	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref$themeText = _ref.themeText,
	      themeText = _ref$themeText === undefined ? true : _ref$themeText,
	      _ref$text = _ref.text,
	      text = _ref$text === undefined ? false : _ref$text,
	      _ref$background = _ref.background,
	      background = _ref$background === undefined ? false : _ref$background,
	      _ref$disabled = _ref.disabled,
	      disabled = _ref$disabled === undefined ? false : _ref$disabled,
	      _ref$error = _ref.error,
	      error = _ref$error === undefined ? false : _ref$error,
	      _ref$hint = _ref.hint,
	      hint = _ref$hint === undefined ? false : _ref$hint,
	      _ref$primary = _ref.primary,
	      primary = _ref$primary === undefined ? false : _ref$primary,
	      _ref$secondary = _ref.secondary,
	      secondary = _ref$secondary === undefined ? false : _ref$secondary,
	      _ref$inherit = _ref.inherit,
	      inherit = _ref$inherit === undefined ? false : _ref$inherit,
	      _ref$ink = _ref.ink,
	      ink = _ref$ink === undefined ? false : _ref$ink,
	      _ref$card = _ref.card,
	      card = _ref$card === undefined ? false : _ref$card,
	      _ref$hover = _ref.hover,
	      hover = _ref$hover === undefined ? false : _ref$hover;

	  var className = arguments[1];

	  var colors = '';
	  if (themeText) {
	    if (disabled) {
	      colors = 'md-text--disabled';
	    } else if (error) {
	      colors = 'md-text--error';
	    } else if (inherit) {
	      colors = 'md-text--inherit';
	    } else {
	      colors = (0, _classnames2.default)({
	        'md-text': text && !primary && !secondary && !hint,
	        'md-text--secondary': hint,
	        'md-text--theme-primary': !hint && primary,
	        'md-text--theme-secondary': !hint && secondary,
	        'md-ink--primary': ink && primary,
	        'md-ink--secondary': ink && secondary
	      });
	    }
	  } else {
	    colors = (0, _classnames2.default)({
	      'md-background': background && !primary && !secondary && !card,
	      'md-background--card': card,
	      'md-background--primary': primary,
	      'md-background--primary-hover': primary && hover,
	      'md-background--secondary': secondary,
	      'md-background--secondary-hover': secondary && hover
	    });
	  }

	  return (0, _classnames2.default)(colors, className);
	} /** @module utils/themeColors */

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _between = __webpack_require__(257);

	var _between2 = _interopRequireDefault(_between);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Paper` component is a simple wrapper that adds box-shadow.
	 *
	 * You can also use the SCSS mixin instead of paper.
	 *
	 * ```scss
	 * @include md-box-shadow(5);
	 * ```
	 */
	var Paper = function (_PureComponent) {
	  _inherits(Paper, _PureComponent);

	  function Paper() {
	    _classCallCheck(this, Paper);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Paper.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.component,
	        zDepth = _props.zDepth,
	        className = _props.className,
	        raiseOnHover = _props.raiseOnHover,
	        props = _objectWithoutProperties(_props, ['component', 'zDepth', 'className', 'raiseOnHover']);

	    return _react2.default.createElement(Component, _extends({}, props, {
	      className: (0, _classnames2.default)('md-paper md-paper--' + zDepth, {
	        'md-paper--0-hover': zDepth === 0 && raiseOnHover
	      }, className)
	    }));
	  };

	  return Paper;
	}(_react.PureComponent);

	Paper.propTypes = {
	  /**
	   * The component to render the paper as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The depth of the paper. This should be a number between 0 - 5. If
	   * the depth is 0, it will raise to a depth of 3 on hover.
	   */
	  zDepth: (0, _between2.default)(_propTypes2.default.number.isRequired, 0, 5),

	  /**
	   * Any children to display in the paper.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the paper should raise to the `zDepth` of `3` on hover when the initial
	   * `zDepth` is `0`.
	   */
	  raiseOnHover: _propTypes2.default.bool
	};
	Paper.defaultProps = {
	  zDepth: 1,
	  component: 'div'
	};
	exports.default = Paper;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = between;

	var _isBetween = __webpack_require__(258);

	var _isBetween2 = _interopRequireDefault(_isBetween);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Validates that a number is between a min and max value.
	 *
	 * @param {function} validator - The number validator to use.
	 * @param {number} min - The min number to use.
	 * @param {number} max - The max number to use.
	 * @return {Error} the prop type error or null
	 */
	function between(validator, min, max) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;

	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }

	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    var value = props[propName];
	    if (!err && typeof value !== 'undefined' && !(0, _isBetween2.default)(value, min, max)) {
	      err = new Error('You provided a `' + propFullNameSafe + '` ' + location + ' to the ' + componentNameSafe + ' that was ' + ('not within the range from \'' + min + ' - ' + max + '\'. `' + propFullNameSafe + '`: ' + value + '.'));
	    }

	    return err;
	  };
	} /** @module utils/PropTypes/between */

/***/ }),
/* 258 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = isBetween;
	/** @module utils/NumberUtils/isBetween */

	/**
	 * Checks if a number is between a min and maximum (inclusive)
	 *
	 * @param {Number} num the number to check
	 * @param {Number} min the minimum
	 * @param {Number} max the maximum
	 * @return {Boolean} true if the number is between the min and max (inclusive)
	 */
	function isBetween(num, min, max) {
	  return num >= min && num <= max;
	}

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _reactMotion = __webpack_require__(260);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Collapse` component is used to animate a single child entering
	 * or leaving. This uses the `react-motion` library to animate the height,
	 * padding-top, and padding-bottom of an element when the `collapsed` prop
	 * changes.
	 */
	var Collapse = function (_PureComponent) {
	  _inherits(Collapse, _PureComponent);

	  function Collapse(props) {
	    _classCallCheck(this, Collapse);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._setHeight = function (child) {
	      if (_this._child && typeof _this._child.ref === 'function') {
	        _this._child.ref(child);
	      }

	      var height = 0;
	      var paddingTop = 0;
	      var paddingBottom = 0;
	      if (child !== null) {
	        var node = (0, _reactDom.findDOMNode)(child);
	        var cs = window.getComputedStyle(node);
	        height = node.offsetHeight;
	        paddingTop = parseInt(cs.getPropertyValue('padding-top'), 10);
	        paddingBottom = parseInt(cs.getPropertyValue('padding-bottom'), 10);
	      }

	      height = Math.max(_this.props.minHeight, height);

	      _this.setState({ height: height, paddingTop: paddingTop, paddingBottom: paddingBottom });
	    };

	    if (!props.collapsed) {
	      _this.state = { initialOpen: true };
	    } else {
	      _this.state = {
	        height: props.minHeight,
	        paddingTop: 0,
	        paddingBottom: 0
	      };
	    }
	    return _this;
	  }

	  Collapse.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.state.initialOpen && nextProps.collapsed) {
	      this.setState({ initialOpen: false });
	    }
	  };

	  Collapse.prototype._spring = function _spring(collapsed, initialOpen, value, config) {
	    var min = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

	    var nextValue = !collapsed ? Math.max(min, value) : min;
	    if (initialOpen && !collapsed) {
	      return nextValue;
	    }

	    return (0, _reactMotion.spring)(nextValue, config);
	  };

	  Collapse.prototype.render = function render() {
	    var _this2 = this;

	    var _state = this.state,
	        height = _state.height,
	        paddingTop = _state.paddingTop,
	        paddingBottom = _state.paddingBottom,
	        initialOpen = _state.initialOpen;
	    var _props = this.props,
	        children = _props.children,
	        collapsed = _props.collapsed,
	        defaultStyle = _props.defaultStyle,
	        motionStyle = _props.style,
	        springConfig = _props.springConfig,
	        animate = _props.animate,
	        minHeight = _props.minHeight;


	    if (!animate) {
	      return collapsed ? null : children;
	    }

	    return _react2.default.createElement(
	      _reactMotion.Motion,
	      {
	        style: _extends({}, motionStyle, {
	          height: this._spring(collapsed, initialOpen, height, springConfig, minHeight),
	          paddingTop: this._spring(collapsed, initialOpen, paddingTop, springConfig),
	          paddingBottom: this._spring(collapsed, initialOpen, paddingBottom, springConfig)
	        }),
	        defaultStyle: _extends({}, defaultStyle, {
	          height: height,
	          paddingTop: paddingTop,
	          paddingBottom: paddingBottom
	        })
	      },
	      function (style) {
	        if (collapsed && !style.height) {
	          return null;
	        }

	        var child = _react.Children.only(children);
	        _this2._child = child;
	        var nextStyle = child.props.style;
	        if (collapsed && (!minHeight || style.height !== minHeight) || style.height !== height) {
	          nextStyle = _extends({}, child.props.style, style, {
	            overflow: 'hidden'
	          });
	        }
	        return (0, _react.cloneElement)(child, {
	          ref: !collapsed ? _this2._setHeight : null,
	          style: nextStyle
	        });
	      }
	    );
	  };

	  return Collapse;
	}(_react.PureComponent);

	Collapse.propTypes = {
	  /**
	   * An optional style to merge with the `Motion` style.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional default style to merge with the `Motion` default style.
	   */
	  defaultStyle: _propTypes2.default.object,

	  /**
	   * Boolean if the children are currently collapsed.
	   */
	  collapsed: _propTypes2.default.bool.isRequired,

	  /**
	   * A single child to collapse or expand.
	   */
	  children: _propTypes2.default.element.isRequired,

	  /**
	   * The spring config to use for the animation.
	   */
	  springConfig: _propTypes2.default.object.isRequired,

	  /**
	   * Boolean if the single child entering or leaving should be animated.
	   */
	  animate: _propTypes2.default.bool,

	  /**
	   * The min height to apply for the collapse div.
	   */
	  minHeight: _propTypes2.default.number.isRequired
	};
	Collapse.defaultProps = {
	  animate: true,
	  springConfig: {
	    precision: 0.5
	  },
	  minHeight: 0
	};
	exports.default = Collapse;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Motion = __webpack_require__(261);

	exports.Motion = _interopRequire(_Motion);

	var _StaggeredMotion = __webpack_require__(269);

	exports.StaggeredMotion = _interopRequire(_StaggeredMotion);

	var _TransitionMotion = __webpack_require__(270);

	exports.TransitionMotion = _interopRequire(_TransitionMotion);

	var _spring = __webpack_require__(272);

	exports.spring = _interopRequire(_spring);

	var _presets = __webpack_require__(273);

	exports.presets = _interopRequire(_presets);

	var _stripStyle = __webpack_require__(263);

	exports.stripStyle = _interopRequire(_stripStyle);

	// deprecated, dummy warning function

	var _reorderKeys = __webpack_require__(274);

	exports.reorderKeys = _interopRequire(_reorderKeys);

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _mapToZero = __webpack_require__(262);

	var _mapToZero2 = _interopRequireDefault(_mapToZero);

	var _stripStyle = __webpack_require__(263);

	var _stripStyle2 = _interopRequireDefault(_stripStyle);

	var _stepper3 = __webpack_require__(264);

	var _stepper4 = _interopRequireDefault(_stepper3);

	var _performanceNow = __webpack_require__(265);

	var _performanceNow2 = _interopRequireDefault(_performanceNow);

	var _raf = __webpack_require__(266);

	var _raf2 = _interopRequireDefault(_raf);

	var _shouldStopAnimation = __webpack_require__(268);

	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var msPerFrame = 1000 / 60;

	var Motion = (function (_React$Component) {
	  _inherits(Motion, _React$Component);

	  _createClass(Motion, null, [{
	    key: 'propTypes',
	    value: {
	      // TOOD: warn against putting a config in here
	      defaultStyle: _propTypes2['default'].objectOf(_propTypes2['default'].number),
	      style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired,
	      children: _propTypes2['default'].func.isRequired,
	      onRest: _propTypes2['default'].func
	    },
	    enumerable: true
	  }]);

	  function Motion(props) {
	    var _this = this;

	    _classCallCheck(this, Motion);

	    _React$Component.call(this, props);
	    this.wasAnimating = false;
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyle = null;

	    this.clearUnreadPropStyle = function (destStyle) {
	      var dirty = false;
	      var _state = _this.state;
	      var currentStyle = _state.currentStyle;
	      var currentVelocity = _state.currentVelocity;
	      var lastIdealStyle = _state.lastIdealStyle;
	      var lastIdealVelocity = _state.lastIdealVelocity;

	      for (var key in destStyle) {
	        if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	          continue;
	        }

	        var styleValue = destStyle[key];
	        if (typeof styleValue === 'number') {
	          if (!dirty) {
	            dirty = true;
	            currentStyle = _extends({}, currentStyle);
	            currentVelocity = _extends({}, currentVelocity);
	            lastIdealStyle = _extends({}, lastIdealStyle);
	            lastIdealVelocity = _extends({}, lastIdealVelocity);
	          }

	          currentStyle[key] = styleValue;
	          currentVelocity[key] = 0;
	          lastIdealStyle[key] = styleValue;
	          lastIdealVelocity[key] = 0;
	        }
	      }

	      if (dirty) {
	        _this.setState({ currentStyle: currentStyle, currentVelocity: currentVelocity, lastIdealStyle: lastIdealStyle, lastIdealVelocity: lastIdealVelocity });
	      }
	    };

	    this.startAnimationIfNecessary = function () {
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        // check if we need to animate in the first place
	        var propsStyle = _this.props.style;
	        if (_shouldStopAnimation2['default'](_this.state.currentStyle, propsStyle, _this.state.currentVelocity)) {
	          if (_this.wasAnimating && _this.props.onRest) {
	            _this.props.onRest();
	          }

	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.wasAnimating = false;
	          _this.accumulatedTime = 0;
	          return;
	        }

	        _this.wasAnimating = true;

	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }

	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }

	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	        var newLastIdealStyle = {};
	        var newLastIdealVelocity = {};
	        var newCurrentStyle = {};
	        var newCurrentVelocity = {};

	        for (var key in propsStyle) {
	          if (!Object.prototype.hasOwnProperty.call(propsStyle, key)) {
	            continue;
	          }

	          var styleValue = propsStyle[key];
	          if (typeof styleValue === 'number') {
	            newCurrentStyle[key] = styleValue;
	            newCurrentVelocity[key] = 0;
	            newLastIdealStyle[key] = styleValue;
	            newLastIdealVelocity[key] = 0;
	          } else {
	            var newLastIdealStyleValue = _this.state.lastIdealStyle[key];
	            var newLastIdealVelocityValue = _this.state.lastIdealVelocity[key];
	            for (var i = 0; i < framesToCatchUp; i++) {
	              var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              newLastIdealStyleValue = _stepper[0];
	              newLastIdealVelocityValue = _stepper[1];
	            }

	            var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	            var nextIdealX = _stepper2[0];
	            var nextIdealV = _stepper2[1];

	            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	            newLastIdealStyle[key] = newLastIdealStyleValue;
	            newLastIdealVelocity[key] = newLastIdealVelocityValue;
	          }
	        }

	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	        _this.setState({
	          currentStyle: newCurrentStyle,
	          currentVelocity: newCurrentVelocity,
	          lastIdealStyle: newLastIdealStyle,
	          lastIdealVelocity: newLastIdealVelocity
	        });

	        _this.unreadPropStyle = null;

	        _this.startAnimationIfNecessary();
	      });
	    };

	    this.state = this.defaultState();
	  }

	  Motion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyle = _props.defaultStyle;
	    var style = _props.style;

	    var currentStyle = defaultStyle || _stripStyle2['default'](style);
	    var currentVelocity = _mapToZero2['default'](currentStyle);
	    return {
	      currentStyle: currentStyle,
	      currentVelocity: currentVelocity,
	      lastIdealStyle: currentStyle,
	      lastIdealVelocity: currentVelocity
	    };
	  };

	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400

	  Motion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };

	  Motion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyle != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyle);
	    }

	    this.unreadPropStyle = props.style;
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };

	  Motion.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };

	  Motion.prototype.render = function render() {
	    var renderedChildren = this.props.children(this.state.currentStyle);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };

	  return Motion;
	})(_react2['default'].Component);

	exports['default'] = Motion;
	module.exports = exports['default'];

	// after checking for unreadPropStyle != null, we manually go set the
	// non-interpolating values (those that are a number, without a spring
	// config)

/***/ }),
/* 262 */
/***/ (function(module, exports) {

	

	// currently used to initiate the velocity style object to 0
	'use strict';

	exports.__esModule = true;
	exports['default'] = mapToZero;

	function mapToZero(obj) {
	  var ret = {};
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) {
	      ret[key] = 0;
	    }
	  }
	  return ret;
	}

	module.exports = exports['default'];

/***/ }),
/* 263 */
/***/ (function(module, exports) {

	
	// turn {x: {val: 1, stiffness: 1, damping: 2}, y: 2} generated by
	// `{x: spring(1, {stiffness: 1, damping: 2}), y: 2}` into {x: 1, y: 2}

	'use strict';

	exports.__esModule = true;
	exports['default'] = stripStyle;

	function stripStyle(style) {
	  var ret = {};
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }
	    ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;
	  }
	  return ret;
	}

	module.exports = exports['default'];

/***/ }),
/* 264 */
/***/ (function(module, exports) {

	

	// stepper is used a lot. Saves allocation to return the same array wrapper.
	// This is fine and danger-free against mutations because the callsite
	// immediately destructures it and gets the numbers inside without passing the
	"use strict";

	exports.__esModule = true;
	exports["default"] = stepper;

	var reusedTuple = [0, 0];

	function stepper(secondPerFrame, x, v, destX, k, b, precision) {
	  // Spring stiffness, in kg / s^2

	  // for animations, destX is really spring length (spring at rest). initial
	  // position is considered as the stretched/compressed position of a spring
	  var Fspring = -k * (x - destX);

	  // Damping, in kg / s
	  var Fdamper = -b * v;

	  // usually we put mass here, but for animation purposes, specifying mass is a
	  // bit redundant. you could simply adjust k and b accordingly
	  // let a = (Fspring + Fdamper) / mass;
	  var a = Fspring + Fdamper;

	  var newV = v + a * secondPerFrame;
	  var newX = x + newV * secondPerFrame;

	  if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
	    reusedTuple[0] = destX;
	    reusedTuple[1] = 0;
	    return reusedTuple;
	  }

	  reusedTuple[0] = newX;
	  reusedTuple[1] = newV;
	  return reusedTuple;
	}

	module.exports = exports["default"];
	// array reference around.

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.7.1
	(function() {
	  var getNanoSeconds, hrtime, loadTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - loadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    loadTime = getNanoSeconds();
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(113)))

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var now = __webpack_require__(267)
	  , root = typeof window === 'undefined' ? global : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root[vendors[i] + 'Request' + suffix]
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix]
	}

	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60

	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = now()
	        , next = Math.max(0, frameDuration - (_now - last))
	      last = next + _now
	      setTimeout(function() {
	        var cp = queue.slice(0)
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last)
	            } catch(e) {
	              setTimeout(function() { throw e }, 0)
	            }
	          }
	        }
	      }, Math.round(next))
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    })
	    return id
	  }

	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true
	      }
	    }
	  }
	}

	module.exports = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	}
	module.exports.cancel = function() {
	  caf.apply(root, arguments)
	}
	module.exports.polyfill = function(object) {
	  if (!object) {
	    object = root;
	  }
	  object.requestAnimationFrame = raf
	  object.cancelAnimationFrame = caf
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(this);

	//# sourceMappingURL=performance-now.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(113)))

/***/ }),
/* 268 */
/***/ (function(module, exports) {

	

	// usage assumption: currentStyle values have already been rendered but it says
	// nothing of whether currentStyle is stale (see unreadPropStyle)
	'use strict';

	exports.__esModule = true;
	exports['default'] = shouldStopAnimation;

	function shouldStopAnimation(currentStyle, style, currentVelocity) {
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }

	    if (currentVelocity[key] !== 0) {
	      return false;
	    }

	    var styleValue = typeof style[key] === 'number' ? style[key] : style[key].val;
	    // stepper will have already taken care of rounding precision errors, so
	    // won't have such thing as 0.9999 !=== 1
	    if (currentStyle[key] !== styleValue) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = exports['default'];

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _mapToZero = __webpack_require__(262);

	var _mapToZero2 = _interopRequireDefault(_mapToZero);

	var _stripStyle = __webpack_require__(263);

	var _stripStyle2 = _interopRequireDefault(_stripStyle);

	var _stepper3 = __webpack_require__(264);

	var _stepper4 = _interopRequireDefault(_stepper3);

	var _performanceNow = __webpack_require__(265);

	var _performanceNow2 = _interopRequireDefault(_performanceNow);

	var _raf = __webpack_require__(266);

	var _raf2 = _interopRequireDefault(_raf);

	var _shouldStopAnimation = __webpack_require__(268);

	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var msPerFrame = 1000 / 60;

	function shouldStopAnimationAll(currentStyles, styles, currentVelocities) {
	  for (var i = 0; i < currentStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], styles[i], currentVelocities[i])) {
	      return false;
	    }
	  }
	  return true;
	}

	var StaggeredMotion = (function (_React$Component) {
	  _inherits(StaggeredMotion, _React$Component);

	  _createClass(StaggeredMotion, null, [{
	    key: 'propTypes',
	    value: {
	      // TOOD: warn against putting a config in here
	      defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].objectOf(_propTypes2['default'].number)),
	      styles: _propTypes2['default'].func.isRequired,
	      children: _propTypes2['default'].func.isRequired
	    },
	    enumerable: true
	  }]);

	  function StaggeredMotion(props) {
	    var _this = this;

	    _classCallCheck(this, StaggeredMotion);

	    _React$Component.call(this, props);
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyles = null;

	    this.clearUnreadPropStyle = function (unreadPropStyles) {
	      var _state = _this.state;
	      var currentStyles = _state.currentStyles;
	      var currentVelocities = _state.currentVelocities;
	      var lastIdealStyles = _state.lastIdealStyles;
	      var lastIdealVelocities = _state.lastIdealVelocities;

	      var someDirty = false;
	      for (var i = 0; i < unreadPropStyles.length; i++) {
	        var unreadPropStyle = unreadPropStyles[i];
	        var dirty = false;

	        for (var key in unreadPropStyle) {
	          if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	            continue;
	          }

	          var styleValue = unreadPropStyle[key];
	          if (typeof styleValue === 'number') {
	            if (!dirty) {
	              dirty = true;
	              someDirty = true;
	              currentStyles[i] = _extends({}, currentStyles[i]);
	              currentVelocities[i] = _extends({}, currentVelocities[i]);
	              lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	              lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	            }
	            currentStyles[i][key] = styleValue;
	            currentVelocities[i][key] = 0;
	            lastIdealStyles[i][key] = styleValue;
	            lastIdealVelocities[i][key] = 0;
	          }
	        }
	      }

	      if (someDirty) {
	        _this.setState({ currentStyles: currentStyles, currentVelocities: currentVelocities, lastIdealStyles: lastIdealStyles, lastIdealVelocities: lastIdealVelocities });
	      }
	    };

	    this.startAnimationIfNecessary = function () {
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        var destStyles = _this.props.styles(_this.state.lastIdealStyles);

	        // check if we need to animate in the first place
	        if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities)) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.accumulatedTime = 0;
	          return;
	        }

	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }

	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }

	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	        var newLastIdealStyles = [];
	        var newLastIdealVelocities = [];
	        var newCurrentStyles = [];
	        var newCurrentVelocities = [];

	        for (var i = 0; i < destStyles.length; i++) {
	          var destStyle = destStyles[i];
	          var newCurrentStyle = {};
	          var newCurrentVelocity = {};
	          var newLastIdealStyle = {};
	          var newLastIdealVelocity = {};

	          for (var key in destStyle) {
	            if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	              continue;
	            }

	            var styleValue = destStyle[key];
	            if (typeof styleValue === 'number') {
	              newCurrentStyle[key] = styleValue;
	              newCurrentVelocity[key] = 0;
	              newLastIdealStyle[key] = styleValue;
	              newLastIdealVelocity[key] = 0;
	            } else {
	              var newLastIdealStyleValue = _this.state.lastIdealStyles[i][key];
	              var newLastIdealVelocityValue = _this.state.lastIdealVelocities[i][key];
	              for (var j = 0; j < framesToCatchUp; j++) {
	                var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	                newLastIdealStyleValue = _stepper[0];
	                newLastIdealVelocityValue = _stepper[1];
	              }

	              var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              var nextIdealX = _stepper2[0];
	              var nextIdealV = _stepper2[1];

	              newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	              newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	              newLastIdealStyle[key] = newLastIdealStyleValue;
	              newLastIdealVelocity[key] = newLastIdealVelocityValue;
	            }
	          }

	          newCurrentStyles[i] = newCurrentStyle;
	          newCurrentVelocities[i] = newCurrentVelocity;
	          newLastIdealStyles[i] = newLastIdealStyle;
	          newLastIdealVelocities[i] = newLastIdealVelocity;
	        }

	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	        _this.setState({
	          currentStyles: newCurrentStyles,
	          currentVelocities: newCurrentVelocities,
	          lastIdealStyles: newLastIdealStyles,
	          lastIdealVelocities: newLastIdealVelocities
	        });

	        _this.unreadPropStyles = null;

	        _this.startAnimationIfNecessary();
	      });
	    };

	    this.state = this.defaultState();
	  }

	  StaggeredMotion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;

	    var currentStyles = defaultStyles || styles().map(_stripStyle2['default']);
	    var currentVelocities = currentStyles.map(function (currentStyle) {
	      return _mapToZero2['default'](currentStyle);
	    });
	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: currentStyles,
	      lastIdealVelocities: currentVelocities
	    };
	  };

	  StaggeredMotion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };

	  StaggeredMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }

	    this.unreadPropStyles = props.styles(this.state.lastIdealStyles);
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };

	  StaggeredMotion.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };

	  StaggeredMotion.prototype.render = function render() {
	    var renderedChildren = this.props.children(this.state.currentStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };

	  return StaggeredMotion;
	})(_react2['default'].Component);

	exports['default'] = StaggeredMotion;
	module.exports = exports['default'];

	// it's possible that currentStyle's value is stale: if props is immediately
	// changed from 0 to 400 to spring(0) again, the async currentStyle is still
	// at 0 (didn't have time to tick and interpolate even once). If we naively
	// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	// In reality currentStyle should be 400

	// after checking for unreadPropStyles != null, we manually go set the
	// non-interpolating values (those that are a number, without a spring
	// config)

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _mapToZero = __webpack_require__(262);

	var _mapToZero2 = _interopRequireDefault(_mapToZero);

	var _stripStyle = __webpack_require__(263);

	var _stripStyle2 = _interopRequireDefault(_stripStyle);

	var _stepper3 = __webpack_require__(264);

	var _stepper4 = _interopRequireDefault(_stepper3);

	var _mergeDiff = __webpack_require__(271);

	var _mergeDiff2 = _interopRequireDefault(_mergeDiff);

	var _performanceNow = __webpack_require__(265);

	var _performanceNow2 = _interopRequireDefault(_performanceNow);

	var _raf = __webpack_require__(266);

	var _raf2 = _interopRequireDefault(_raf);

	var _shouldStopAnimation = __webpack_require__(268);

	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var msPerFrame = 1000 / 60;

	// the children function & (potential) styles function asks as param an
	// Array<TransitionPlainStyle>, where each TransitionPlainStyle is of the format
	// {key: string, data?: any, style: PlainStyle}. However, the way we keep
	// internal states doesn't contain such a data structure (check the state and
	// TransitionMotionState). So when children function and others ask for such
	// data we need to generate them on the fly by combining mergedPropsStyles and
	// currentStyles/lastIdealStyles
	function rehydrateStyles(mergedPropsStyles, unreadPropStyles, plainStyles) {
	  // Copy the value to a `const` so that Flow understands that the const won't
	  // change and will be non-nullable in the callback below.
	  var cUnreadPropStyles = unreadPropStyles;
	  if (cUnreadPropStyles == null) {
	    return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	      return {
	        key: mergedPropsStyle.key,
	        data: mergedPropsStyle.data,
	        style: plainStyles[i]
	      };
	    });
	  }
	  return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	    for (var j = 0; j < cUnreadPropStyles.length; j++) {
	      if (cUnreadPropStyles[j].key === mergedPropsStyle.key) {
	        return {
	          key: cUnreadPropStyles[j].key,
	          data: cUnreadPropStyles[j].data,
	          style: plainStyles[i]
	        };
	      }
	    }
	    return { key: mergedPropsStyle.key, data: mergedPropsStyle.data, style: plainStyles[i] };
	  });
	}

	function shouldStopAnimationAll(currentStyles, destStyles, currentVelocities, mergedPropsStyles) {
	  if (mergedPropsStyles.length !== destStyles.length) {
	    return false;
	  }

	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (mergedPropsStyles[i].key !== destStyles[i].key) {
	      return false;
	    }
	  }

	  // we have the invariant that mergedPropsStyles and
	  // currentStyles/currentVelocities/last* are synced in terms of cells, see
	  // mergeAndSync comment for more info
	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], destStyles[i].style, currentVelocities[i])) {
	      return false;
	    }
	  }

	  return true;
	}

	// core key merging logic

	// things to do: say previously merged style is {a, b}, dest style (prop) is {b,
	// c}, previous current (interpolating) style is {a, b}
	// **invariant**: current[i] corresponds to merged[i] in terms of key

	// steps:
	// turn merged style into {a?, b, c}
	//    add c, value of c is destStyles.c
	//    maybe remove a, aka call willLeave(a), then merged is either {b, c} or {a, b, c}
	// turn current (interpolating) style from {a, b} into {a?, b, c}
	//    maybe remove a
	//    certainly add c, value of c is willEnter(c)
	// loop over merged and construct new current
	// dest doesn't change, that's owner's
	function mergeAndSync(willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldLastIdealStyles, oldLastIdealVelocities) {
	  var newMergedPropsStyles = _mergeDiff2['default'](oldMergedPropsStyles, destStyles, function (oldIndex, oldMergedPropsStyle) {
	    var leavingStyle = willLeave(oldMergedPropsStyle);
	    if (leavingStyle == null) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    if (_shouldStopAnimation2['default'](oldCurrentStyles[oldIndex], leavingStyle, oldCurrentVelocities[oldIndex])) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    return { key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data, style: leavingStyle };
	  });

	  var newCurrentStyles = [];
	  var newCurrentVelocities = [];
	  var newLastIdealStyles = [];
	  var newLastIdealVelocities = [];
	  for (var i = 0; i < newMergedPropsStyles.length; i++) {
	    var newMergedPropsStyleCell = newMergedPropsStyles[i];
	    var foundOldIndex = null;
	    for (var j = 0; j < oldMergedPropsStyles.length; j++) {
	      if (oldMergedPropsStyles[j].key === newMergedPropsStyleCell.key) {
	        foundOldIndex = j;
	        break;
	      }
	    }
	    // TODO: key search code
	    if (foundOldIndex == null) {
	      var plainStyle = willEnter(newMergedPropsStyleCell);
	      newCurrentStyles[i] = plainStyle;
	      newLastIdealStyles[i] = plainStyle;

	      var velocity = _mapToZero2['default'](newMergedPropsStyleCell.style);
	      newCurrentVelocities[i] = velocity;
	      newLastIdealVelocities[i] = velocity;
	    } else {
	      newCurrentStyles[i] = oldCurrentStyles[foundOldIndex];
	      newLastIdealStyles[i] = oldLastIdealStyles[foundOldIndex];
	      newCurrentVelocities[i] = oldCurrentVelocities[foundOldIndex];
	      newLastIdealVelocities[i] = oldLastIdealVelocities[foundOldIndex];
	    }
	  }

	  return [newMergedPropsStyles, newCurrentStyles, newCurrentVelocities, newLastIdealStyles, newLastIdealVelocities];
	}

	var TransitionMotion = (function (_React$Component) {
	  _inherits(TransitionMotion, _React$Component);

	  _createClass(TransitionMotion, null, [{
	    key: 'propTypes',
	    value: {
	      defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	        key: _propTypes2['default'].string.isRequired,
	        data: _propTypes2['default'].any,
	        style: _propTypes2['default'].objectOf(_propTypes2['default'].number).isRequired
	      })),
	      styles: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	        key: _propTypes2['default'].string.isRequired,
	        data: _propTypes2['default'].any,
	        style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired
	      }))]).isRequired,
	      children: _propTypes2['default'].func.isRequired,
	      willEnter: _propTypes2['default'].func,
	      willLeave: _propTypes2['default'].func,
	      didLeave: _propTypes2['default'].func
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      willEnter: function willEnter(styleThatEntered) {
	        return _stripStyle2['default'](styleThatEntered.style);
	      },
	      // recall: returning null makes the current unmounting TransitionStyle
	      // disappear immediately
	      willLeave: function willLeave() {
	        return null;
	      },
	      didLeave: function didLeave() {}
	    },
	    enumerable: true
	  }]);

	  function TransitionMotion(props) {
	    var _this = this;

	    _classCallCheck(this, TransitionMotion);

	    _React$Component.call(this, props);
	    this.unmounting = false;
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyles = null;

	    this.clearUnreadPropStyle = function (unreadPropStyles) {
	      var _mergeAndSync = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, unreadPropStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);

	      var mergedPropsStyles = _mergeAndSync[0];
	      var currentStyles = _mergeAndSync[1];
	      var currentVelocities = _mergeAndSync[2];
	      var lastIdealStyles = _mergeAndSync[3];
	      var lastIdealVelocities = _mergeAndSync[4];

	      for (var i = 0; i < unreadPropStyles.length; i++) {
	        var unreadPropStyle = unreadPropStyles[i].style;
	        var dirty = false;

	        for (var key in unreadPropStyle) {
	          if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	            continue;
	          }

	          var styleValue = unreadPropStyle[key];
	          if (typeof styleValue === 'number') {
	            if (!dirty) {
	              dirty = true;
	              currentStyles[i] = _extends({}, currentStyles[i]);
	              currentVelocities[i] = _extends({}, currentVelocities[i]);
	              lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	              lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	              mergedPropsStyles[i] = {
	                key: mergedPropsStyles[i].key,
	                data: mergedPropsStyles[i].data,
	                style: _extends({}, mergedPropsStyles[i].style)
	              };
	            }
	            currentStyles[i][key] = styleValue;
	            currentVelocities[i][key] = 0;
	            lastIdealStyles[i][key] = styleValue;
	            lastIdealVelocities[i][key] = 0;
	            mergedPropsStyles[i].style[key] = styleValue;
	          }
	        }
	      }

	      // unlike the other 2 components, we can't detect staleness and optionally
	      // opt out of setState here. each style object's data might contain new
	      // stuff we're not/cannot compare
	      _this.setState({
	        currentStyles: currentStyles,
	        currentVelocities: currentVelocities,
	        mergedPropsStyles: mergedPropsStyles,
	        lastIdealStyles: lastIdealStyles,
	        lastIdealVelocities: lastIdealVelocities
	      });
	    };

	    this.startAnimationIfNecessary = function () {
	      if (_this.unmounting) {
	        return;
	      }

	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        // https://github.com/chenglou/react-motion/pull/420
	        // > if execution passes the conditional if (this.unmounting), then
	        // executes async defaultRaf and after that component unmounts and after
	        // that the callback of defaultRaf is called, then setState will be called
	        // on unmounted component.
	        if (_this.unmounting) {
	          return;
	        }

	        var propStyles = _this.props.styles;
	        var destStyles = typeof propStyles === 'function' ? propStyles(rehydrateStyles(_this.state.mergedPropsStyles, _this.unreadPropStyles, _this.state.lastIdealStyles)) : propStyles;

	        // check if we need to animate in the first place
	        if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities, _this.state.mergedPropsStyles)) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.accumulatedTime = 0;
	          return;
	        }

	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }

	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }

	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	        var _mergeAndSync2 = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, destStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);

	        var newMergedPropsStyles = _mergeAndSync2[0];
	        var newCurrentStyles = _mergeAndSync2[1];
	        var newCurrentVelocities = _mergeAndSync2[2];
	        var newLastIdealStyles = _mergeAndSync2[3];
	        var newLastIdealVelocities = _mergeAndSync2[4];

	        for (var i = 0; i < newMergedPropsStyles.length; i++) {
	          var newMergedPropsStyle = newMergedPropsStyles[i].style;
	          var newCurrentStyle = {};
	          var newCurrentVelocity = {};
	          var newLastIdealStyle = {};
	          var newLastIdealVelocity = {};

	          for (var key in newMergedPropsStyle) {
	            if (!Object.prototype.hasOwnProperty.call(newMergedPropsStyle, key)) {
	              continue;
	            }

	            var styleValue = newMergedPropsStyle[key];
	            if (typeof styleValue === 'number') {
	              newCurrentStyle[key] = styleValue;
	              newCurrentVelocity[key] = 0;
	              newLastIdealStyle[key] = styleValue;
	              newLastIdealVelocity[key] = 0;
	            } else {
	              var newLastIdealStyleValue = newLastIdealStyles[i][key];
	              var newLastIdealVelocityValue = newLastIdealVelocities[i][key];
	              for (var j = 0; j < framesToCatchUp; j++) {
	                var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	                newLastIdealStyleValue = _stepper[0];
	                newLastIdealVelocityValue = _stepper[1];
	              }

	              var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              var nextIdealX = _stepper2[0];
	              var nextIdealV = _stepper2[1];

	              newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	              newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	              newLastIdealStyle[key] = newLastIdealStyleValue;
	              newLastIdealVelocity[key] = newLastIdealVelocityValue;
	            }
	          }

	          newLastIdealStyles[i] = newLastIdealStyle;
	          newLastIdealVelocities[i] = newLastIdealVelocity;
	          newCurrentStyles[i] = newCurrentStyle;
	          newCurrentVelocities[i] = newCurrentVelocity;
	        }

	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	        _this.setState({
	          currentStyles: newCurrentStyles,
	          currentVelocities: newCurrentVelocities,
	          lastIdealStyles: newLastIdealStyles,
	          lastIdealVelocities: newLastIdealVelocities,
	          mergedPropsStyles: newMergedPropsStyles
	        });

	        _this.unreadPropStyles = null;

	        _this.startAnimationIfNecessary();
	      });
	    };

	    this.state = this.defaultState();
	  }

	  TransitionMotion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;
	    var willEnter = _props.willEnter;
	    var willLeave = _props.willLeave;
	    var didLeave = _props.didLeave;

	    var destStyles = typeof styles === 'function' ? styles(defaultStyles) : styles;

	    // this is special. for the first time around, we don't have a comparison
	    // between last (no last) and current merged props. we'll compute last so:
	    // say default is {a, b} and styles (dest style) is {b, c}, we'll
	    // fabricate last as {a, b}
	    var oldMergedPropsStyles = undefined;
	    if (defaultStyles == null) {
	      oldMergedPropsStyles = destStyles;
	    } else {
	      oldMergedPropsStyles = defaultStyles.map(function (defaultStyleCell) {
	        // TODO: key search code
	        for (var i = 0; i < destStyles.length; i++) {
	          if (destStyles[i].key === defaultStyleCell.key) {
	            return destStyles[i];
	          }
	        }
	        return defaultStyleCell;
	      });
	    }
	    var oldCurrentStyles = defaultStyles == null ? destStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    });
	    var oldCurrentVelocities = defaultStyles == null ? destStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    });

	    var _mergeAndSync3 = mergeAndSync(
	    // Because this is an old-style createReactClass component, Flow doesn't
	    // understand that the willEnter and willLeave props have default values
	    // and will always be present.
	    willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldCurrentStyles, // oldLastIdealStyles really
	    oldCurrentVelocities);

	    var mergedPropsStyles = _mergeAndSync3[0];
	    var currentStyles = _mergeAndSync3[1];
	    var currentVelocities = _mergeAndSync3[2];
	    var lastIdealStyles = _mergeAndSync3[3];
	    var lastIdealVelocities = _mergeAndSync3[4];
	    // oldLastIdealVelocities really

	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: lastIdealStyles,
	      lastIdealVelocities: lastIdealVelocities,
	      mergedPropsStyles: mergedPropsStyles
	    };
	  };

	  // after checking for unreadPropStyles != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)

	  TransitionMotion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };

	  TransitionMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }

	    var styles = props.styles;
	    if (typeof styles === 'function') {
	      this.unreadPropStyles = styles(rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles));
	    } else {
	      this.unreadPropStyles = styles;
	    }

	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };

	  TransitionMotion.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unmounting = true;
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };

	  TransitionMotion.prototype.render = function render() {
	    var hydratedStyles = rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles);
	    var renderedChildren = this.props.children(hydratedStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };

	  return TransitionMotion;
	})(_react2['default'].Component);

	exports['default'] = TransitionMotion;
	module.exports = exports['default'];

	// list of styles, each containing interpolating values. Part of what's passed
	// to children function. Notice that this is
	// Array<ActualInterpolatingStyleObject>, without the wrapper that is {key: ...,
	// data: ... style: ActualInterpolatingStyleObject}. Only mergedPropsStyles
	// contains the key & data info (so that we only have a single source of truth
	// for these, and to save space). Check the comment for `rehydrateStyles` to
	// see how we regenerate the entirety of what's passed to children function

	// the array that keeps track of currently rendered stuff! Including stuff
	// that you've unmounted but that's still animating. This is where it lives

	// it's possible that currentStyle's value is stale: if props is immediately
	// changed from 0 to 400 to spring(0) again, the async currentStyle is still
	// at 0 (didn't have time to tick and interpolate even once). If we naively
	// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	// In reality currentStyle should be 400

/***/ }),
/* 271 */
/***/ (function(module, exports) {

	

	// core keys merging algorithm. If previous render's keys are [a, b], and the
	// next render's [c, b, d], what's the final merged keys and ordering?

	// - c and a must both be before b
	// - b before d
	// - ordering between a and c ambiguous

	// this reduces to merging two partially ordered lists (e.g. lists where not
	// every item has a definite ordering, like comparing a and c above). For the
	// ambiguous ordering we deterministically choose to place the next render's
	// item after the previous'; so c after a

	// this is called a topological sorting. Except the existing algorithms don't
	// work well with js bc of the amount of allocation, and isn't optimized for our
	// current use-case bc the runtime is linear in terms of edges (see wiki for
	// meaning), which is huge when two lists have many common elements
	'use strict';

	exports.__esModule = true;
	exports['default'] = mergeDiff;

	function mergeDiff(prev, next, onRemove) {
	  // bookkeeping for easier access of a key's index below. This is 2 allocations +
	  // potentially triggering chrome hash map mode for objs (so it might be faster

	  var prevKeyIndex = {};
	  for (var i = 0; i < prev.length; i++) {
	    prevKeyIndex[prev[i].key] = i;
	  }
	  var nextKeyIndex = {};
	  for (var i = 0; i < next.length; i++) {
	    nextKeyIndex[next[i].key] = i;
	  }

	  // first, an overly elaborate way of merging prev and next, eliminating
	  // duplicates (in terms of keys). If there's dupe, keep the item in next).
	  // This way of writing it saves allocations
	  var ret = [];
	  for (var i = 0; i < next.length; i++) {
	    ret[i] = next[i];
	  }
	  for (var i = 0; i < prev.length; i++) {
	    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {
	      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't
	      // merge in keys that the user desires to kill
	      var fill = onRemove(i, prev[i]);
	      if (fill != null) {
	        ret.push(fill);
	      }
	    }
	  }

	  // now all the items all present. Core sorting logic to have the right order
	  return ret.sort(function (a, b) {
	    var nextOrderA = nextKeyIndex[a.key];
	    var nextOrderB = nextKeyIndex[b.key];
	    var prevOrderA = prevKeyIndex[a.key];
	    var prevOrderB = prevKeyIndex[b.key];

	    if (nextOrderA != null && nextOrderB != null) {
	      // both keys in next
	      return nextKeyIndex[a.key] - nextKeyIndex[b.key];
	    } else if (prevOrderA != null && prevOrderB != null) {
	      // both keys in prev
	      return prevKeyIndex[a.key] - prevKeyIndex[b.key];
	    } else if (nextOrderA != null) {
	      // key a in next, key b in prev

	      // how to determine the order between a and b? We find a "pivot" (term
	      // abuse), a key present in both prev and next, that is sandwiched between
	      // a and b. In the context of our above example, if we're comparing a and
	      // d, b's (the only) pivot
	      for (var i = 0; i < next.length; i++) {
	        var pivot = next[i].key;
	        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	          continue;
	        }

	        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {
	          return -1;
	        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {
	          return 1;
	        }
	      }
	      // pluggable. default to: next bigger than prev
	      return 1;
	    }
	    // prevOrderA, nextOrderB
	    for (var i = 0; i < next.length; i++) {
	      var pivot = next[i].key;
	      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	        continue;
	      }
	      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {
	        return 1;
	      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {
	        return -1;
	      }
	    }
	    // pluggable. default to: next bigger than prev
	    return -1;
	  });
	}

	module.exports = exports['default'];
	// to loop through and find a key's index each time), but I no longer care

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = spring;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presets = __webpack_require__(273);

	var _presets2 = _interopRequireDefault(_presets);

	var defaultConfig = _extends({}, _presets2['default'].noWobble, {
	  precision: 0.01
	});

	function spring(val, config) {
	  return _extends({}, defaultConfig, config, { val: val });
	}

	module.exports = exports['default'];

/***/ }),
/* 273 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = {
	  noWobble: { stiffness: 170, damping: 26 }, // the default, if nothing provided
	  gentle: { stiffness: 120, damping: 14 },
	  wobbly: { stiffness: 180, damping: 12 },
	  stiff: { stiffness: 210, damping: 20 }
	};
	module.exports = exports["default"];

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = reorderKeys;

	var hasWarned = false;

	function reorderKeys() {
	  if (false) {
	    if (!hasWarned) {
	      hasWarned = true;
	      console.error('`reorderKeys` has been removed, since it is no longer needed for TransitionMotion\'s new styles array API.');
	    }
	  }
	}

	module.exports = exports['default'];

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _CardTitleBlock = __webpack_require__(276);

	var _CardTitleBlock2 = _interopRequireDefault(_CardTitleBlock);

	var _CardExpander = __webpack_require__(277);

	var _CardExpander2 = _interopRequireDefault(_CardExpander);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `CardTitle` component is used to render a title in a Card along
	 * with an optional subtitle or avatar.
	 */
	var CardTitle = function (_Component) {
	  _inherits(CardTitle, _Component);

	  function CardTitle() {
	    _classCallCheck(this, CardTitle);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  CardTitle.prototype.render = function render() {
	    var _props = this.props,
	        id = _props.id,
	        style = _props.style,
	        className = _props.className,
	        title = _props.title,
	        subtitle = _props.subtitle,
	        expander = _props.expander,
	        isExpander = _props.isExpander,
	        children = _props.children,
	        propAvatar = _props.avatar,
	        props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'title', 'subtitle', 'expander', 'isExpander', 'children', 'avatar']);

	    var avatar = this.props.avatar;

	    if (avatar) {
	      var avatarClassName = _react.Children.only(avatar).props.className;

	      avatar = (0, _react.cloneElement)(avatar, {
	        className: (0, _classnames2.default)('md-avatar--card', avatarClassName)
	      });
	    }
	    return _react2.default.createElement(
	      'div',
	      _extends({}, props, {
	        style: style,
	        className: (0, _classnames2.default)('md-card-title', {
	          'md-card-title--primary': !avatar
	        }, className)
	      }),
	      avatar,
	      _react2.default.createElement(_CardTitleBlock2.default, { id: id, title: title, subtitle: subtitle, avatar: !!avatar }),
	      children,
	      isExpander || expander && _react2.default.createElement(_CardExpander2.default, null)
	    );
	  };

	  return CardTitle;
	}(_react.Component);

	CardTitle.propTypes = {
	  /**
	   * An optional id to add to the `title`.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The title to display.
	   */
	  title: _propTypes2.default.node.isRequired,

	  /**
	   * An optional subtitle to display.
	   */
	  subtitle: _propTypes2.default.node,

	  /**
	   * Any additional children to display in the title block
	   * after the avatar, title, and subtitle.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * An optional avatar to display before the title and subtitle.
	   */
	  avatar: _propTypes2.default.element,

	  /**
	   * Boolean if the `CardTitle` component should inject a button
	   * for expanding all children below it.
	   */
	  expander: _propTypes2.default.bool,

	  isExpander: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `expander` instead')
	};
	exports.default = CardTitle;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CardTitleBlock = function (_PureComponent) {
	  _inherits(CardTitleBlock, _PureComponent);

	  function CardTitleBlock() {
	    _classCallCheck(this, CardTitleBlock);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  CardTitleBlock.prototype.render = function render() {
	    var _props = this.props,
	        id = _props.id,
	        subtitle = _props.subtitle,
	        avatar = _props.avatar;
	    var title = this.props.title;

	    title = _react2.default.createElement(
	      'h2',
	      {
	        id: id,
	        className: (0, _classnames2.default)('md-card-title--title', {
	          'md-card-title--large': !avatar
	        }, (0, _themeColors2.default)({ text: true })),
	        tabIndex: id ? -1 : null
	      },
	      title
	    );

	    if (!subtitle) {
	      return title;
	    }

	    return _react2.default.createElement(
	      'div',
	      {
	        className: (0, _classnames2.default)('md-card-title--title-block', {
	          'md-card-title--one-line': avatar
	        })
	      },
	      title,
	      _react2.default.createElement(
	        'h3',
	        { className: 'md-card-title--title ' + (0, _themeColors2.default)({ hint: true }) },
	        subtitle
	      )
	    );
	  };

	  return CardTitleBlock;
	}(_react.PureComponent);

	CardTitleBlock.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  title: _propTypes2.default.node.isRequired,
	  subtitle: _propTypes2.default.node,
	  avatar: _propTypes2.default.bool
	};
	exports.default = CardTitleBlock;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _contextTypes = __webpack_require__(252);

	var _contextTypes2 = _interopRequireDefault(_contextTypes);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	var _getCollapserStyles = __webpack_require__(302);

	var _getCollapserStyles2 = _interopRequireDefault(_getCollapserStyles);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The CardExpander component is just a simple `IconButton` that
	 * gets generated through the `Card`'s `contextTypes`. Props are not used
	 * at all.
	 *
	 * Any component below a component that has this component inject into it
	 * and has the prop `expandable={true}` will be toggleable when this is clicked.
	 *
	 * You can manually inject the `CardExpander` component yourself if you want to
	 * use a component that is not a `CardActions` or a `CardTitle`.
	 */
	var CardExpander = function (_Component) {
	  _inherits(CardExpander, _Component);

	  function CardExpander() {
	    _classCallCheck(this, CardExpander);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  CardExpander.prototype.render = function render() {
	    var _context = this.context,
	        expanded = _context.expanded,
	        onExpandClick = _context.onExpandClick,
	        icon = _context.icon,
	        tooltipPosition = _context.tooltipPosition,
	        tooltipLabel = _context.tooltipLabel,
	        tooltipDelay = _context.tooltipDelay;


	    return _react2.default.createElement(_Button2.default, {
	      icon: true,
	      className: (0, _getCollapserStyles2.default)({ flipped: expanded }, 'md-collapser--card'),
	      onClick: onExpandClick,
	      tooltipLabel: tooltipLabel,
	      tooltipDelay: tooltipDelay,
	      tooltipPosition: tooltipPosition,
	      iconEl: icon
	    });
	  };

	  return CardExpander;
	}(_react.Component);

	CardExpander.contextTypes = _contextTypes2.default;
	exports.default = CardExpander;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _keyCodes = __webpack_require__(279);

	var _CSSTransitionGroupTick = __webpack_require__(280);

	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);

	var _getBtnStyles2 = __webpack_require__(281);

	var _getBtnStyles3 = _interopRequireDefault(_getBtnStyles2);

	var _invalidIf = __webpack_require__(282);

	var _invalidIf2 = _interopRequireDefault(_invalidIf);

	var _captureNextEvent = __webpack_require__(283);

	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _IconSeparator = __webpack_require__(284);

	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);

	var _injectInk = __webpack_require__(285);

	var _injectInk2 = _interopRequireDefault(_injectInk);

	var _injectTooltip = __webpack_require__(299);

	var _injectTooltip2 = _interopRequireDefault(_injectTooltip);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Button` component can either be a `FlatButton`, `RaisedButton`, `IconButton`, or a
	 * `FloatingButton`.
	 *
	 * A `FlatButton` is a button with no depth on the screen that is ideally used in `Dialog`s
	 * or `CardActions`. The text can be optionally styled with the `primary` or `secondary` colors.
	 *
	 * A `RaisedButton` is a button with some depth to help actions have more prominent in flat
	 * layouts or layouts with varying content. The background can be styled by the light/dark theme,
	 * or optionally the `primary` or `secondary` color.
	 *
	 * An `IconButton` is a button that just displays a `FontIcon` as the child in a circle.
	 * The `FontIcon` can be optionally styled with the `primary` or `secondary` color.
	 *
	 * A `FloatingButton` is a special case. Woop
	 */
	var Button = function (_PureComponent) {
	  _inherits(Button, _PureComponent);

	  function Button() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Button);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Button.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.disabled && !nextProps.disabled && this.state.hover) {
	      this.setState({ hover: false });
	    }
	  };

	  Button.prototype.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {
	    var _this2 = this;

	    if (!this.state.pressed && nextState.pressed) {
	      this._timeout = setTimeout(function () {
	        _this2._timeout = null;
	        if (_this2._attemptedBlur) {
	          _this2._attemptedBlur = false;

	          _this2.setState({ pressed: false });
	        }
	      }, 450);
	    }
	  };

	  Button.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }

	    if (this._snackbarTimeout) {
	      clearTimeout(this._snackbarTimeout);
	    }

	    window.removeEventListener('click', this._blur);
	  };

	  Button.prototype.render = function render() {
	    var _getBtnStyles;

	    var _props = this.props,
	        className = _props.className,
	        iconClassName = _props.iconClassName,
	        iconChildren = _props.iconChildren,
	        iconBefore = _props.iconBefore,
	        href = _props.href,
	        primary = _props.primary,
	        secondary = _props.secondary,
	        flat = _props.flat,
	        raised = _props.raised,
	        floating = _props.floating,
	        mini = _props.mini,
	        fixed = _props.fixed,
	        fixedPosition = _props.fixedPosition,
	        disabled = _props.disabled,
	        component = _props.component,
	        ink = _props.ink,
	        tooltip = _props.tooltip,
	        icon = _props.icon,
	        forceIconSize = _props.forceIconSize,
	        forceIconFontSize = _props.forceIconFontSize,
	        type = _props.type,
	        children = _props.children,
	        swapTheming = _props.swapTheming,
	        svg = _props.svg,
	        propIconEl = _props.iconEl,
	        label = _props.label,
	        props = _objectWithoutProperties(_props, ['className', 'iconClassName', 'iconChildren', 'iconBefore', 'href', 'primary', 'secondary', 'flat', 'raised', 'floating', 'mini', 'fixed', 'fixedPosition', 'disabled', 'component', 'ink', 'tooltip', 'icon', 'forceIconSize', 'forceIconFontSize', 'type', 'children', 'swapTheming', 'svg', 'iconEl', 'label']);

	    var iconEl = this.props.iconEl;


	    if (!href) {
	      props.type = type;
	    }

	    var _state = this.state,
	        pressed = _state.pressed,
	        hover = _state.hover,
	        snackbar = _state.snackbar,
	        snackbarType = _state.snackbarType;

	    var iconBtnType = icon || floating;

	    var visibleChildren = void 0;
	    if (!iconEl && !svg && (iconClassName || iconChildren || iconBtnType || label && children)) {
	      var resolvedIconChildren = iconChildren;
	      if (typeof iconChildren === 'undefined') {
	        resolvedIconChildren = iconBtnType || label ? children : null;
	      }

	      iconEl = _react2.default.createElement(
	        _FontIcon2.default,
	        { iconClassName: iconClassName, forceSize: forceIconSize, forceFontSize: forceIconFontSize, inherit: true },
	        resolvedIconChildren
	      );
	    } else if (iconEl || svg) {
	      var el = _react2.default.Children.only(iconEl || children);
	      iconEl = _react2.default.cloneElement(el, { inherit: !el.props.error });
	    }

	    if (!iconBtnType) {
	      visibleChildren = label || children;
	      if (iconEl) {
	        visibleChildren = _react2.default.createElement(
	          _IconSeparator2.default,
	          { label: visibleChildren, iconBefore: iconBefore },
	          iconEl
	        );
	      }
	    } else {
	      visibleChildren = iconEl;
	    }

	    var Component = component || (href ? 'a' : 'button');
	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        disabled: disabled,
	        onTouchStart: this._handleTouchStart,
	        onTouchEnd: this._handleTouchEnd,
	        onMouseDown: this._handleMouseDown,
	        onMouseUp: this._handleMouseUp,
	        onKeyDown: this._handleKeyDown,
	        onKeyUp: this._handleKeyUp,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave,
	        href: href,
	        className: (0, _getBtnStyles3.default)({
	          flat: flat,
	          raised: raised,
	          icon: icon,
	          floating: floating,
	          disabled: disabled,
	          primary: primary,
	          secondary: secondary,
	          hover: hover,
	          swapTheming: swapTheming,
	          pressed: pressed,
	          mini: mini,
	          fixed: fixed,
	          fixedPosition: fixedPosition
	        }, (_getBtnStyles = {
	          'md-btn--tooltip': tooltip,
	          'md-btn--snackbar-floating': snackbar
	        }, _getBtnStyles['md-btn--snackbar-floating-' + snackbarType + 'adjust'] = snackbar && snackbarType !== null, _getBtnStyles), 'md-inline-block', className)
	      }),
	      ink,
	      tooltip,
	      visibleChildren
	    );
	  };

	  return Button;
	}(_react.PureComponent);

	Button.propTypes = {
	  /**
	   * An optional style to apply to the button.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * A boolean if the icon should appear before or after the text for a `FlatButton` or
	   * a `RaisedButton`.
	   */
	  iconBefore: _propTypes2.default.bool,

	  /**
	   * Any children used to display the button. When the button type is `icon` or `floating`,
	   * this can be used to render the `FontIcon` instead of the `iconChildren` prop.
	   *
	   * When the button type is `raised` or `flat`, this will be the label or any other elements
	   * you'd like to display in the button. This can work hand-in-hand with the `iconClassName`
	   * and `iconChildren` to make a button with an icon and text.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * An icon className to use in an optional `FontIcon` in any version of the button. This will
	   * be used with the `children` prop. If the `floating` or `icon` props are set to true, this or
	   * the children are required.
	   *
	   * @see {@link #iconEl}
	   */
	  iconClassName: _propTypes2.default.string,

	  /**
	   * Any children to use to display an icon in the button.
	   *
	   * @see {@link #iconEl}
	   */
	  iconChildren: _propTypes2.default.node,

	  /**
	   * An optional icon to display. This prop is recommended over the `iconClassName` and `iconChildren`
	   * props since it allows more control for you. There is also better SVG support since it won't wrap
	   * the SVG with the `FontIcon` element.
	   */
	  iconEl: _propTypes2.default.element,

	  /**
	   * The type for the button. This is required when the `component` prop is not
	   * the 'a' tag, a `function`, or when the `href` prop is defined.
	   */
	  type: function type(props, propName, component) {
	    for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      args[_key2 - 3] = arguments[_key2];
	    }

	    var c = props.component;
	    var validator = _propTypes2.default.oneOf(['button', 'submit', 'reset']);
	    if (!props.href && c !== 'a' && typeof c !== 'function') {
	      validator = validator.isRequired;
	    }

	    return validator.apply(undefined, [props, propName, component].concat(args));
	  },

	  /**
	   * Boolean if the button should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the button should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,

	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional href for the button. This will style the `a` tag as a button.
	   */
	  href: _propTypes2.default.string,

	  /**
	   * An optional component to render the button as. This allows you to get all the styles and functionality
	   * of the Button, but as a custom React component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

	  /**
	   * An optional function to call when the `click` event is triggered.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `touchstart` event is triggered.
	   */
	  onTouchStart: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `touchend` event is triggered.
	   */
	  onTouchEnd: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mousedown` event is triggered.
	   */
	  onMouseDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseup` event is triggered.
	   */
	  onMouseUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `keyup` event is triggered.
	   */
	  onKeyUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `keydown` event is triggered.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseenter` event is triggered.
	   */
	  onMouseEnter: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseleave` event is triggered.
	   */
	  onMouseLeave: _propTypes2.default.func,

	  /**
	   * Boolean if the `FloatingButton` should be fixed to the page. This prop can
	   * only be enabled if the `floating` prop is true.
	   */
	  fixed: (0, _invalidIf2.default)(_propTypes2.default.bool, 'flat', 'raised', 'icon'),

	  /**
	   * The position that the `FloatingButton` should be fixed to the page. It will
	   * either be fixed to the top right, top left, bottom right, or bottom left of
	   * the page. This prop is only used if the `floating` prop and `fixed` prop are
	   * `true`.
	   */
	  fixedPosition: _propTypes2.default.oneOf(['tr', 'tl', 'br', 'bl']).isRequired,

	  /**
	   * Boolean if the `FloatingButton` should be `mini`. This prop can only be used
	   * when the `floating` prop is true.
	   */
	  mini: (0, _invalidIf2.default)(_propTypes2.default.bool, 'flat', 'raised', 'icon'),

	  /**
	   * Boolean if the `Button` should be styled as a `FlatButton`.
	   */
	  flat: _propTypes2.default.bool,

	  /**
	   * Boolean if the `Button` should be styled as a `RaisedButton`.
	   */
	  raised: _propTypes2.default.bool,

	  /**
	   * Boolean if the `Button` should be styled as a `IconButton`.
	   *
	   * @see {@link #svg}
	   */
	  icon: _propTypes2.default.bool,

	  /**
	   * Boolean if the `Button` should be styled as a `FloatingButton`.
	   *
	   * @see {@link #svg}
	   */
	  floating: _propTypes2.default.bool,

	  /**
	   * Boolean if the theming of `primary` or `secondary` should be swapped. By default,
	   * only flat and icon buttons can gain the theme colors as text color while the raised
	   * and floating buttons can gain the theme colors as background color.
	   *
	   * If this prop is enabled, the flat and icon buttons will gain the theme background colors
	   * while the raised and icon will gain the theme text colors instead.
	   *
	   * @see {@link #primary}
	   * @see {@link #secondary}
	   */
	  swapTheming: _propTypes2.default.bool,

	  /**
	   * An optional label to use for the tooltip. This is normally only used for
	   * `IconButton`s or `FloatingButton`s, but can be used on `FlatButton`s and
	   * `RaisedButton`s if you wish. Knock yourself out!
	   *
	   * If this prop is omitted, no tooltip will be included.
	   */
	  tooltipLabel: _propTypes2.default.node,

	  /**
	   * An optional delay before the tooltip appears on mouse over.
	   */
	  tooltipDelay: _propTypes2.default.number,

	  /**
	   * The position for the tooltip.
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * An ink from `injectInk`.
	   * @access private
	   */
	  ink: _propTypes2.default.node,

	  /**
	   * A tooltip from `injectTooltip`
	   * @access private
	   */
	  tooltip: _propTypes2.default.node,

	  /**
	   * Custom validator for verifying that only one type is defined and that
	   * at one type is defined.
	   */
	  _typeValidator: function _typeValidator(props, propName, component) {
	    var flat = props.flat,
	        raised = props.raised,
	        icon = props.icon,
	        floating = props.floating;


	    var defined = [raised, flat, icon, floating].filter(function (d) {
	      return d;
	    });
	    var len = defined.length;
	    if (len === 0) {
	      return new Error('A material design button type must be specified in the `' + component + '` but none were ' + 'given. Valid types are `flat`, `raised`, `icon`, or `floating`.');
	    } else if (len !== 1) {
	      return new Error('Only one material design button type may be specified in the `' + component + '` but `' + len + '` ' + 'were given. Select only one of `flat`, `raised`, `icon`, or `floating`.');
	    }

	    return null;
	  },

	  /**
	   * Either a boolean that will enforce the 24x24 size of the font icon or a number of the size
	   * to enforce. This is useful when using other font icon libraries that do not have a consistent
	   * size.
	   */
	  forceIconSize: _FontIcon2.default.propTypes.forceSize,

	  /**
	   * Boolean if the `forceIconSize` prop should also force the `font-size` instead of only `width` and `height`.
	   */
	  forceIconFontSize: _propTypes2.default.bool,

	  /**
	   * Boolean if the child is an SVGIcon or FontIcon when using the `icon` or `floating` props. This is only needed
	   * until the next release when the `label` migration can be removed.
	   */
	  svg: _propTypes2.default.bool,

	  label: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `children` prop instead'),
	  noIcon: (0, _deprecated2.default)(_propTypes2.default.bool, 'This has been removed during the alpha release. Children will always attempt to be rendered outside of an ' + 'icon by default for flat and raised buttons')
	};
	Button.defaultProps = {
	  type: 'button',
	  iconBefore: true,
	  fixedPosition: 'br'
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this3 = this;

	  this.state = {
	    pressed: false,
	    snackbar: false,
	    snackbarType: null
	  };

	  this._blur = function () {
	    if (_this3.props.disabled) {
	      return;
	    }

	    if (_this3._timeout) {
	      _this3._attemptedBlur = true;
	    } else {
	      _this3.setState({ pressed: false });
	    }
	  };

	  this._handleMouseUp = function (e) {
	    if (_this3.props.onMouseUp) {
	      _this3.props.onMouseUp(e);
	    }

	    _this3._blur();
	  };

	  this._handleMouseDown = function (e) {
	    if (_this3.props.onMouseDown) {
	      _this3.props.onMouseDown(e);
	    }

	    if (!_this3.props.disabled) {
	      _this3.setState({ pressed: true });
	    }
	  };

	  this._handleTouchStart = function (e) {
	    if (_this3.props.onTouchStart) {
	      _this3.props.onTouchStart(e);
	    }

	    if (!_this3.props.disabled) {
	      _this3.setState({ pressed: true });
	    }
	  };

	  this._handleTouchEnd = function (e) {
	    if (_this3.props.onTouchEnd) {
	      _this3.props.onTouchEnd(e);
	    }

	    _this3._blur();
	    (0, _captureNextEvent2.default)('mouseover');
	  };

	  this._handleKeyUp = function (e) {
	    if (_this3.props.onKeyUp) {
	      _this3.props.onKeyUp(e);
	    }

	    if ((e.which || e.keyCode) === _keyCodes.TAB) {
	      window.addEventListener('click', _this3._blur);
	      _this3.setState({ pressed: true });
	    }
	  };

	  this._handleKeyDown = function (e) {
	    if (_this3.props.onKeyDown) {
	      _this3.props.onKeyDown(e);
	    }

	    if ((e.which || e.keyCode) === _keyCodes.TAB) {
	      window.removeEventListener('click', _this3._blur);
	      _this3.setState({ pressed: false });
	    }
	  };

	  this._handleMouseEnter = function (e) {
	    if (_this3.props.onMouseEnter) {
	      _this3.props.onMouseEnter(e);
	    }

	    if (!_this3.props.disabled) {
	      _this3.setState({ hover: true });
	    }
	  };

	  this._handleMouseLeave = function (e) {
	    if (_this3.props.onMouseLeave) {
	      _this3.props.onMouseLeave(e);
	    }

	    if (!_this3.props.disabled) {
	      _this3.setState({ hover: false });
	    }
	  };

	  this._animateForSnackbar = function (multiline, leaveTimeout) {
	    if (typeof leaveTimeout === 'number') {
	      _this3._snackbarTimeout = setTimeout(function () {
	        _this3._snackbarTimeout = setTimeout(function () {
	          _this3._snackbarTimeout = null;

	          _this3.setState({ snackbar: false });
	        }, leaveTimeout + 150);

	        _this3.setState({ snackbarType: null });
	      }, _CSSTransitionGroupTick2.default);
	    } else {
	      _this3._snackbarTimeout = setTimeout(function () {
	        _this3._snackbarTimeout = null;

	        _this3.setState({ snackbar: true, snackbarType: multiline ? 'multiline-' : '' });
	      }, _CSSTransitionGroupTick2.default);
	    }
	  };
	};

	exports.default = (0, _injectInk2.default)((0, _injectTooltip2.default)(Button));

/***/ }),
/* 279 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var LEFT_MOUSE = exports.LEFT_MOUSE = 0;
	var RIGHT_MOUSE = exports.RIGHT_MOUSE = 2;

	var TAB = exports.TAB = 9;
	var ENTER = exports.ENTER = 13;
	var ESC = exports.ESC = 27;
	var SPACE = exports.SPACE = 32;
	var PAGE_UP = exports.PAGE_UP = 33;
	var PAGE_DOWN = exports.PAGE_DOWN = 34;
	var END = exports.END = 35;
	var HOME = exports.HOME = 36;
	var LEFT = exports.LEFT = 37;
	var UP = exports.UP = 38;
	var RIGHT = exports.RIGHT = 39;
	var DOWN = exports.DOWN = 40;

	var ZERO = exports.ZERO = 48;
	var NINE = exports.NINE = 57;
	var KEYPAD_ZERO = exports.KEYPAD_ZERO = 96;
	var KEYPAD_NINE = exports.KEYPAD_NINE = 105;

/***/ }),
/* 280 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	// This will need to keep in sync with the `ReactCSSTransitionGroupChild` `TICK` const.
	// https://github.com/facebook/react/blob/master/src/addons/transitions/ReactCSSTransitionGroupChild.js#L22

	exports.default = 17;

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = getBtnStyles;

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Since it can be helpful to apply button styles on other components, this is a utlity function
	 * to apply those styles based on props.
	 */
	function getBtnStyles(_ref) {
	  var _ref2;

	  var flat = _ref.flat,
	      raised = _ref.raised,
	      icon = _ref.icon,
	      floating = _ref.floating,
	      disabled = _ref.disabled,
	      primary = _ref.primary,
	      secondary = _ref.secondary,
	      hover = _ref.hover,
	      swapTheming = _ref.swapTheming,
	      pressed = _ref.pressed,
	      mini = _ref.mini,
	      fixed = _ref.fixed,
	      fixedPosition = _ref.fixedPosition;

	  var flatStyles = flat || icon;
	  var raisedStyles = raised || floating;
	  var textTheming = flatStyles && !swapTheming || raisedStyles && swapTheming;
	  var backgroundTheming = (!disabled && raisedStyles && !swapTheming || flatStyles && swapTheming) && (primary || secondary);

	  for (var _len = arguments.length, classNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    classNames[_key - 1] = arguments[_key];
	  }

	  return _classnames2.default.apply(undefined, ['md-btn', (_ref2 = {
	    'md-btn--flat': flat || disabled && raised,
	    'md-btn--raised': !disabled && raised,
	    'md-btn--icon': icon || floating,
	    'md-btn--floating': floating,
	    'md-btn--text': flat || raised,
	    'md-btn--hover': !disabled && hover,
	    'md-btn--raised-disabled': disabled && raised,
	    'md-btn--raised-pressed': !disabled && raisedStyles && pressed,
	    'md-btn--fixed': fixed
	  }, _ref2['md-btn--fixed-' + fixedPosition] = floating && fixed, _ref2['md-btn--floating-mini'] = floating && mini, _ref2['md-btn--color-primary-active'] = !disabled && primary && hover && textTheming, _ref2['md-btn--color-secondary-active'] = !disabled && secondary && hover && textTheming, _ref2['md-pointer--hover'] = !disabled, _ref2['md-paper md-paper--2'] = !disabled && floating, _ref2['md-paper--4'] = !disabled && floating && pressed, _ref2), (0, _themeColors2.default)({
	    text: !icon && !floating && !backgroundTheming,
	    themeText: !backgroundTheming,
	    disabled: disabled,
	    primary: primary,
	    secondary: secondary,
	    hover: true,
	    ink: true
	  })].concat(classNames));
	}

/***/ }),
/* 282 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = invalidIf;
	/** @module utils/PropTypes/invalidIf */

	/**
	 * A custom validator that will throw an error if any of the `ifDefinedProps` are also defined.
	 *
	 * @param {function} validator - The PropTypes validator to use.
	 * @param {String...} ifDefinedProps - any othe rprop names to validate against
	 * @return {Error} an error or null
	 */
	function invalidIf(validator) {
	  for (var _len = arguments.length, ifDefinedProps = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    ifDefinedProps[_key - 1] = arguments[_key];
	  }

	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;

	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }

	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (err) {
	      return err;
	    }

	    var defined = typeof props[propName] !== 'undefined' && !!props[propName];
	    var othersDefined = ifDefinedProps.filter(function (name) {
	      return typeof props[name] !== 'undefined' && !!props[name];
	    });
	    if (defined && othersDefined.length) {
	      var names = '`' + othersDefined.join('`, `') + '`';
	      if (othersDefined.length === 1) {
	        return new Error('You provided both a `' + propFullNameSafe + '` and ' + names + ' prop to the ' + componentNameSafe + ' ' + 'but only one can be given.');
	      }

	      return new Error('You provided a `' + propFullNameSafe + '` ' + location + ' to the ' + componentNameSafe + ' when ' + ('the following props were defined: ' + names + '. Either remove the `' + propFullNameSafe + '` ') + 'or use the remove all the other props.');
	    }

	    return null;
	  };
	}

/***/ }),
/* 283 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = captureNextEvent;
	/** @module utils/EventUtils/captureNextEvent */

	/**
	 * This function will capture the next event and stop propagation during the
	 * bubbling cycle of events. This is really only useful if you want to stop
	 * the default behavior of chained events.
	 *
	 * @param {String} type - The event type to capture.
	 * @param {Object|func=} target - Either the DOM node to target, a callback function
	 *      to call once the event has been captured, or undefined. If this is undefined,
	 *      the event will be captured on the window.
	 * @param {func=} callback - An optional callback function to call once the event
	 *      has been captured.
	 */
	function captureNextEvent(type, target, callback) {
	  var el = typeof target !== 'function' && target ? target : window;
	  var cb = typeof target === 'function' ? target : callback;

	  var capture = function capture(e) {
	    e.stopPropagation();
	    if (cb) {
	      cb(e);
	    }

	    el.removeEventListener(type, capture, true);
	  };

	  el.addEventListener(type, capture, true);
	}

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `IconSeparator` component is a simple helper component to render some text and
	 * an icon with some space between them while centering the text. The icon can either
	 * come before or after the text.
	 */
	var IconSeparator = function (_PureComponent) {
	  _inherits(IconSeparator, _PureComponent);

	  function IconSeparator() {
	    _classCallCheck(this, IconSeparator);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  IconSeparator.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        labelStyle = _props.labelStyle,
	        labelClassName = _props.labelClassName,
	        component = _props.component,
	        label = _props.label,
	        iconBefore = _props.iconBefore,
	        children = _props.children,
	        props = _objectWithoutProperties(_props, ['className', 'labelStyle', 'labelClassName', 'component', 'label', 'iconBefore', 'children']);

	    var text = void 0;
	    if ((0, _react.isValidElement)(label)) {
	      var labelProps = _react.Children.only(label).props;
	      text = (0, _react.cloneElement)(label, {
	        className: (0, _classnames2.default)('md-icon-text', labelClassName, labelProps.className),
	        style: _extends({}, labelStyle, labelProps.style)
	      });
	    } else {
	      text = _react2.default.createElement(
	        'span',
	        { style: labelStyle, className: (0, _classnames2.default)('md-icon-text', labelClassName) },
	        label
	      );
	    }

	    var Component = component;

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, { className: (0, _classnames2.default)('md-icon-separator', className) }),
	      iconBefore && children,
	      text,
	      !iconBefore && children
	    );
	  };

	  return IconSeparator;
	}(_react.PureComponent);

	IconSeparator.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the label.
	   */
	  labelStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the label.
	   */
	  labelClassName: _propTypes2.default.string,

	  /**
	   * The label to display.
	   */
	  label: _propTypes2.default.node.isRequired,

	  /**
	   * The icon to display.
	   */
	  children: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the icon should appear before or after the text
	   */
	  iconBefore: _propTypes2.default.bool,

	  /**
	   * The component to be rendered as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired
	};
	IconSeparator.defaultProps = {
	  component: 'div'
	};
	exports.default = IconSeparator;

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(31);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _getDisplayName = __webpack_require__(286);

	var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

	var _InkContainer = __webpack_require__(287);

	var _InkContainer2 = _interopRequireDefault(_InkContainer);

	var _inkContextTypes = __webpack_require__(298);

	var _inkContextTypes2 = _interopRequireDefault(_inkContextTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Takes any component and injects an ink container for having the Material Design Ink effect.
	 *
	 * The default triggers for an ink are:
	 * - mouse down event
	 * - touch start event
	 * - keyboard focus
	 * - form submit
	 *
	 * The form submit ink will only be triggered if the `ComposedComponent` has the attribute
	 * `type="submit"`, the `ComposedComponent` is in a form, and the user hits the `enter` key
	 * while not actively focusing the `ComposedComponent`.
	 *
	 * ```js
	 * @param {function} ComposedComponent - The React Component to inject an `ink` prop into.
	 * @return {function} a new React class rendering the `ComposedComponent` and adding an
	 *    `ink` pop.
	 * ```
	 */
	exports.default = function (ComposedComponent) {
	  var _class, _temp2;

	  return _temp2 = _class = function (_PureComponent) {
	    _inherits(InkedComponent, _PureComponent);

	    function InkedComponent() {
	      var _temp, _this, _ret;

	      _classCallCheck(this, InkedComponent);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.createInk = function (pageX, pageY) {
	        if (_this._inkContainer && !_this.props.disabled && !_this.props.inkDisabled) {
	          _this._inkContainer.createInk(pageX, pageY);
	        }
	      }, _this.focus = function () {
	        if (_this.props.inkDisabled) {
	          var composed = (0, _reactDom.findDOMNode)(_this._composed);
	          if (composed) {
	            composed.focus();
	          }
	        } else if (_this._inkContainer) {
	          _this._inkContainer.focus();
	        }
	      }, _this.getComposedComponent = function () {
	        return _this._composed;
	      }, _this._setInkRef = function (inkContainer) {
	        if (inkContainer) {
	          _this._inkContainer = inkContainer;
	        }
	      }, _this._setComposedComponent = function (component) {
	        _this._composed = component;
	      }, _temp), _possibleConstructorReturn(_this, _ret);
	    }

	    InkedComponent.prototype.componentDidMount = function componentDidMount() {
	      var ref = this.props.__SUPER_SECRET_REF__;
	      // Emulate the ref callback...

	      if (ref) {
	        ref(this);
	      }
	    };

	    InkedComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	      var ref = this.props.__SUPER_SECRET_REF__;
	      // Emulate the ref callback...

	      if (ref) {
	        ref(null);
	      }
	    };

	    /**
	     * A publicly accessible way to manually create an ink. This can be used with the `refs`.
	     * The ink can either be created by using the `pageX` and `pageY` from a click/touch event
	     * or it will be created in the center of the `ComposedComponent`.
	     *
	     * ```js
	     * <SomeInkedComponent ref={inkHOC => inkHOC.createInk()} />
	     * ```
	     *
	     * @param {number=} pageX - An optional pageX of the click or touch event.
	     * @param {number=} pageY - An optional pageY of the click or touch event.
	     */


	    /**
	     * This will attempt to focus the composed component. If the component is disabled, nothing
	     * will happen. If the `disabled` and `inkDisabled` props are not set to `true`, an ink will
	     * also be created.
	     *
	     * ```js
	     * <SomeInkedComponent ref={inkHOC => inkHOC.focus()} />
	     * ```
	     */


	    /**
	     * Gets the composed component as a ref. This is useful if you need to access the ref of the
	     * composed component instead of the `injectInk` HOC to use some publicly accessible methods.
	     *
	     * ```js
	     * <SomeInkedComponent
	     *   ref={inkHOC => {
	     *     inkHOC.getComposedComponent().focus();
	     *   }}
	     * />
	     * ```
	     */


	    InkedComponent.prototype.render = function render() {
	      var _props = this.props,
	          transitionOverlap = _props.inkTransitionOverlap,
	          transitionEnterTimeout = _props.inkTransitionEnterTimeout,
	          transitionLeaveTimeout = _props.inkTransitionLeaveTimeout,
	          inkStyle = _props.inkStyle,
	          inkClassName = _props.inkClassName,
	          inkContainerStyle = _props.inkContainerStyle,
	          inkContainerClassName = _props.inkContainerClassName,
	          waitForInkTransition = _props.waitForInkTransition,
	          disabledInteractions = _props.disabledInteractions,
	          pulse = _props.pulse,
	          propInkDisabled = _props.inkDisabled,
	          __SUPER_SECRET_REF__ = _props.__SUPER_SECRET_REF__,
	          props = _objectWithoutProperties(_props, ['inkTransitionOverlap', 'inkTransitionEnterTimeout', 'inkTransitionLeaveTimeout', 'inkStyle', 'inkClassName', 'inkContainerStyle', 'inkContainerClassName', 'waitForInkTransition', 'disabledInteractions', 'pulse', 'inkDisabled', '__SUPER_SECRET_REF__']);

	      var inkDisabled = (0, _getField2.default)(this.props, this.context, 'inkDisabled');
	      var inkDisabledInteractions = typeof disabledInteractions !== 'undefined' ? disabledInteractions : this.context.inkDisabledInteractions;

	      if (!(props.disabled || inkDisabled)) {
	        props.ink = _react2.default.createElement(_InkContainer2.default, {
	          ref: this._setInkRef,
	          key: 'ink-container',
	          pulse: pulse,
	          style: inkContainerStyle,
	          className: inkContainerClassName,
	          inkStyle: inkStyle,
	          inkClassName: inkClassName,
	          disabledInteractions: inkDisabledInteractions,
	          transitionOverlap: transitionOverlap,
	          transitionEnterTimeout: transitionEnterTimeout,
	          transitionLeaveTimeout: transitionLeaveTimeout,
	          waitForInkTransition: waitForInkTransition
	        });
	      }

	      props.ref = this._setComposedComponent;

	      return _react2.default.createElement(ComposedComponent, props);
	    };

	    return InkedComponent;
	  }(_react.PureComponent), _class.displayName = (0, _getDisplayName2.default)(ComposedComponent, 'Ink'), _class.propTypes = {
	    /**
	     * An optional style to apply to each ink that gets generated.
	     */
	    inkStyle: _propTypes2.default.object,

	    /**
	     * An optional className to apply to each ink that gets generated.
	     */
	    inkClassName: _propTypes2.default.string,

	    /**
	     * An optional style to apply to the ink's container.
	     */
	    inkContainerStyle: _propTypes2.default.object,

	    /**
	     * An optional className to apply to the ink's container.
	     */
	    inkContainerClassName: _propTypes2.default.string,

	    /**
	     * Boolean if the composed component or the ink is disabled.
	     */
	    disabled: _propTypes2.default.bool,

	    /**
	     * Boolean if only the ink is disabled for the composed component.
	     */
	    inkDisabled: _propTypes2.default.bool,

	    /**
	     * The time (in ms) that the enter and leave transitions for the ink should overlap.
	     * This really just allows for a more _fluid_ looking ink when something is quickly
	     * touched or clicked by having it fade out while growing.
	     */
	    inkTransitionOverlap: _propTypes2.default.number.isRequired,

	    /**
	     * The transition time for the ink to be considered fully entered. This should really
	     * map up to whatever value you set for `$md-ink-enter-transition-time`.
	     */
	    inkTransitionEnterTimeout: _propTypes2.default.number.isRequired,

	    /**
	     * The transition time for the ink to be considered fully leaved (left?). This should really
	     * map up to whatever value you set for `$md-ink-leave-transition-time`.
	     */
	    inkTransitionLeaveTimeout: _propTypes2.default.number.isRequired,

	    /**
	     * Boolean if the `ComposedComponent`'s click event only after the ink has finished transitioning
	     * in and out. This is really only to get a more _fluid_ looking click event when clicking on
	     * the `ComposedComponent` ends up taking it out of the view. (ex: Closing a Dialog).
	     */
	    waitForInkTransition: _propTypes2.default.bool,

	    /**
	     * An optional array of interactions that can be disabled for the ink. This is a *very* limited
	     * use case where `Switches` needed the ink disabled only when using a mouse.
	     */
	    disabledInteractions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['keyboard', 'mouse', 'touch'])),

	    /**
	     * Boolean if the ink should do a pulse animation while focused. This was enabled by default in
	     * previous versions.
	     */
	    pulse: _propTypes2.default.bool,

	    /**
	     * When using inked components in a `TransitionGroup`, the ref callback is not actually invoked.
	     * This is a little _hack_ to get it to work by not using `ref`, but this name.
	     */
	    __SUPER_SECRET_REF__: _propTypes2.default.func
	  }, _class.defaultProps = {
	    inkTransitionOverlap: 150,
	    inkTransitionEnterTimeout: 450,
	    inkTransitionLeaveTimeout: 300
	  }, _class.contextTypes = _inkContextTypes2.default, _temp2;
	};

/***/ }),
/* 286 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = getDisplayName;
	/** @module utils/StringUtils/getDisplayName */

	/**
	 * Gets the display name for a composed component.
	 *
	 * @param {function|Object} ComposedComponent - The composed component to use
	 * @param {String} hoc - The higher order component's name to use.
	 * @return {String} the new name of the component.
	 */
	function getDisplayName(ComposedComponent, hoc) {
	  var name = '' + (ComposedComponent.displayName || ComposedComponent.name || 'Component');

	  return 'with' + hoc + '(' + name + ')';
	}

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(31);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _TransitionGroup = __webpack_require__(288);

	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _keyCodes = __webpack_require__(279);

	var _isFormPartRole = __webpack_require__(291);

	var _isFormPartRole2 = _interopRequireDefault(_isFormPartRole);

	var _calcPageOffset = __webpack_require__(292);

	var _calcPageOffset2 = _interopRequireDefault(_calcPageOffset);

	var _isValidClick = __webpack_require__(294);

	var _isValidClick2 = _interopRequireDefault(_isValidClick);

	var _touches = __webpack_require__(295);

	var _captureNextEvent = __webpack_require__(283);

	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);

	var _calculateHypotenuse = __webpack_require__(296);

	var _calculateHypotenuse2 = _interopRequireDefault(_calculateHypotenuse);

	var _Ink = __webpack_require__(297);

	var _Ink2 = _interopRequireDefault(_Ink);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `InkContainer` is used for holding the list of inks that get created by touch,
	 * click, or keyboard focus.
	 *
	 * If the container element has the `type="submit"` attribute, the ink will also be
	 * triggered when the user presses enter anywhere in the form.
	 */
	var InkContainer = function (_PureComponent) {
	  _inherits(InkContainer, _PureComponent);

	  function InkContainer() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, InkContainer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { inks: [] }, _this.createInk = function (pageX, pageY) {
	      _this._createInk(pageX, pageY);
	      _this._removeTimeout = setTimeout(function () {
	        _this._removeTimeout = null;
	        _this._removeInk();
	      }, _this.props.transitionOverlap);
	    }, _this.focus = function () {
	      _this._getKeyboardContainer().focus();
	    }, _this._createInk = function (pageX, pageY) {
	      var _this$_inkContainer = _this._inkContainer,
	          offsetWidth = _this$_inkContainer.offsetWidth,
	          offsetHeight = _this$_inkContainer.offsetHeight;


	      var x = void 0;
	      var y = void 0;
	      if (typeof pageX !== 'undefined' && typeof pageY !== 'undefined') {
	        var pageOffset = (0, _calcPageOffset2.default)(_this._inkContainer);

	        x = pageX - pageOffset.left;
	        y = pageY - pageOffset.top;
	      } else {
	        x = offsetWidth / 2;
	        y = offsetHeight / 2;
	      }

	      var r = Math.max((0, _calculateHypotenuse2.default)(x, y), (0, _calculateHypotenuse2.default)(offsetWidth - x, y), (0, _calculateHypotenuse2.default)(offsetWidth - x, offsetHeight - y), (0, _calculateHypotenuse2.default)(x, offsetHeight - y));

	      var ink = {
	        left: x - r,
	        top: y - r,
	        size: r * 2,
	        key: Date.now()
	      };

	      var inks = _this.state.inks.slice();
	      inks.push(ink);
	      _this.setState({ inks: inks });
	    }, _this._removeInk = function () {
	      var inks = _this.state.inks.slice();
	      inks.pop();

	      _this.setState({ inks: inks });
	    }, _this._getKeyboardContainer = function () {
	      if (_this._container.classList.contains('md-text-field-container')) {
	        return _this._container.querySelector('.md-text-field');
	      }

	      return _this._container;
	    }, _this._setContainers = function (group) {
	      if (group !== null) {
	        _this._inkContainer = (0, _reactDom.findDOMNode)(group);
	        _this._container = _this._inkContainer.parentElement;

	        if (_this._container) {
	          _this._initOrRemoveEvents(_this.props);
	        }
	      }
	    }, _this._initOrRemoveEvents = function (props) {
	      var keyboardDiff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var mouseDiff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	      var touchDiff = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

	      var mouseDisabled = _this._isListenerDisabled('mouse', props.disabledInteractions);
	      var touchDisabled = _this._isListenerDisabled('touch', props.disabledInteractions);
	      var keyboardDisabled = _this._isListenerDisabled('keyboard', props.disabledInteractions);

	      if (keyboardDiff) {
	        var fn = (keyboardDisabled ? 'remove' : 'add') + 'EventListener';
	        _this._getKeyboardContainer()[fn]('focus', _this._handleFocus);
	        _this._getKeyboardContainer()[fn]('keydown', _this._handleKeyDown);

	        if (_this._container.getAttribute('type') === 'submit') {
	          window[fn]('submit', _this._handleSubmit);
	        }

	        if (mouseDiff) {
	          _this._container[(!mouseDisabled ? 'add' : 'remove') + 'EventListener']('mousedown', _this._stopPropagationToFocus);
	        }

	        if (touchDiff) {
	          (0, _touches.setTouchEvent)(!touchDisabled, _this._container, 'start', _this._stopPropagationToFocus);
	        }
	      }

	      if (mouseDiff) {
	        var _fn = (mouseDisabled ? 'remove' : 'add') + 'EventListener';
	        _this._container[_fn]('mousedown', _this._handleMouseDown);
	        _this._container[_fn]('mouseup', _this._handleMouseUp);
	      }

	      if (touchDiff) {
	        (0, _touches.setTouchEvent)(!touchDisabled, _this._container, 'start', _this._handleTouchStart);
	        (0, _touches.setTouchEvent)(!touchDisabled, _this._container, 'end', _this._handleTouchEnd);
	      }
	    }, _this._maybeDelayClick = function () {
	      if (!_this.props.waitForInkTransition) {
	        return;
	      }

	      (0, _captureNextEvent2.default)('click', _this._container);
	    }, _this._handleRemove = function () {
	      if (_this._clicked && _this.props.waitForInkTransition) {
	        // For some reason if the click event will make the ink unmount, it will no longer
	        // have a debug id in the TransitionGroup and it displays a warning. Adding a 1ms timeout
	        // fixes that issue... It only happens on an actual click instead of an enter click.
	        setTimeout(function () {
	          _this._container.click();
	        }, 1);
	      }

	      _this._clicked = false;
	    }, _this._handleKeyDown = function (e) {
	      var key = e.which || e.keyCode;
	      var enter = key === _keyCodes.ENTER;
	      var space = key === _keyCodes.SPACE;
	      // Don't trigger ink when enter key is pressed and the target has an input inside of it (SelectField)
	      if (space || enter && !(0, _isFormPartRole2.default)(e.target) && !e.target.querySelector('input')) {
	        _this._clicked = true;
	        _this.createInk();
	        _this._maybeDelayClick();
	      }
	    }, _this._handleFocus = function () {
	      if (_this._clicked) {
	        return;
	      }

	      _this._createInk();
	      _this._getKeyboardContainer().addEventListener('blur', _this._handleBlur);
	    }, _this._handleBlur = function () {
	      _this._getKeyboardContainer().removeEventListener('blur', _this._handleBlur);
	      _this._removeInk();
	    }, _this._handleMouseDown = function (e) {
	      _this._clicked = true;
	      if (!(0, _isValidClick2.default)(e) || _this._skipNextMouse) {
	        _this._skipNextMouse = false;
	        return;
	      }

	      _this._mouseLeave = false;
	      _this._container.addEventListener('mouseleave', _this._handleMouseLeave);
	      _this._createInk(e.pageX, e.pageY);
	    }, _this._handleMouseLeave = function () {
	      _this._container.removeEventListener('mouseleave', _this._handleMouseLeave);
	      _this._mouseLeave = true;
	      _this._removeInk();
	    }, _this._handleMouseUp = function () {
	      if (_this._mouseLeave) {
	        return;
	      }

	      _this._maybeDelayClick();
	      _this._container.removeEventListener('mouseleave', _this._handleMouseLeave);
	      _this._removeInk();
	    }, _this._handleTouchStart = function (e) {
	      _this._aborted = false;
	      _this._clicked = true;
	      _this._skipNextMouse = true;
	      (0, _touches.addTouchEvent)(window, 'move', _this._handleTouchMove);

	      var _e$changedTouches$ = e.changedTouches[0],
	          pageX = _e$changedTouches$.pageX,
	          pageY = _e$changedTouches$.pageY;

	      _this._createInk(pageX, pageY);
	    }, _this._handleTouchMove = function () {
	      (0, _touches.removeTouchEvent)(window, 'move', _this._handleTouchMove);
	      var lastInk = _this.state.inks[_this.state.inks.length - 1];
	      if (!lastInk || Date.now() > lastInk.key + 200) {
	        _this._aborted = false;
	        return;
	      }

	      var inks = _this.state.inks.slice();
	      var index = inks.length - 1;

	      var abortedInk = Object.assign({}, lastInk, { aborted: true });
	      inks.splice(index, 1, abortedInk);

	      _this._aborted = true;
	      _this.setState({ inks: inks }, _this._removeInk);
	    }, _this._handleTouchEnd = function () {
	      _this._skipNextMouse = true;

	      if (_this._aborted) {
	        return;
	      } else {
	        (0, _touches.removeTouchEvent)(window, 'move', _this._handleTouchMove);
	      }

	      _this._removeInk();
	    }, _this._handleSubmit = function (e) {
	      if (document.activeElement === _this._container || !e.target.contains(_this._container)) {
	        return;
	      }

	      _this._maybeDelayClick();
	      _this.createInk();
	    }, _this._stopPropagationToFocus = function (e) {
	      switch (e.type) {
	        case 'touchstart':
	          (0, _touches.addTouchEvent)(window, 'end', _this._stopPropagationToFocus, { capture: true });
	          break;
	        case 'touchend':
	          (0, _touches.removeTouchEvent)(window, 'end', _this._stopPropagationToFocus, { capture: true });
	          break;
	        case 'mousedown':
	          window.addEventListener('mouseup', _this._stopPropagationToFocus, true);
	          break;
	        case 'mouseup':
	          window.removeEventListener('mouseup', _this._stopPropagationToFocus, true);
	          break;
	        default:
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  InkContainer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var di = this.props.disabledInteractions;
	    var ndi = nextProps.disabledInteractions;

	    if (di === ndi || !this._container) {
	      return;
	    }

	    var mouseDisabledDiff = this._isListenerDisabledDiff('mouse', di, ndi);
	    var touchDisabledDiff = this._isListenerDisabledDiff('touch', di, ndi);
	    var keyboardDisabledDiff = this._isListenerDisabledDiff('keyboard', di, ndi);
	    this._initOrRemoveEvents(nextProps, keyboardDisabledDiff, mouseDisabledDiff, touchDisabledDiff);
	  };

	  InkContainer.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._removeTimeout) {
	      clearTimeout(this._removeTimeout);
	    }

	    if (this._container) {
	      this._initOrRemoveEvents({ disabledInteractions: ['keyboard', 'mouse', 'touch'] });
	      this._getKeyboardContainer().removeEventListener('blur', this._handleBlur);
	    }
	  };

	  /**
	   * Creates an ink from pageX and pageY coordinates. These values should either come
	   * from the `changedTouches` or just the base event (if clicked). These coordinates
	   * are used to position the ink correctly in the container from touch/click point.
	   * If either value is undefined, an ink will be created from the center of the
	   * container.
	   *
	   * It will also automatically remove the ink.
	   *
	   * @param {number} pageX - The page x coordinate of the click or touch event.
	   * @param {number} pageY - The page y coordinate of the click or touch event.
	   */


	  /**
	   * Focuses the main element.
	   */


	  InkContainer.prototype._isListenerDisabledDiff = function _isListenerDisabledDiff(interaction, disabledInteractions, nextDisabledInteractions) {
	    var i = disabledInteractions.indexOf(interaction);
	    var ni = nextDisabledInteractions.indexOf(interaction);

	    return i < 0 && ni >= 0 || i >= 0 && ni < 0;
	  };

	  InkContainer.prototype._isListenerDisabled = function _isListenerDisabled(interaction, disabledInteractions) {
	    return disabledInteractions && disabledInteractions.indexOf(interaction) !== -1;
	  };

	  /**
	   * Creates an ink from pageX and pageY coordinates. These values should either come
	   * from the `changedTouches` or just the base event (if clicked). These coordinates
	   * are used to position the ink correctly in the container from touch/click point.
	   * If either value is undefined, an ink will be created from the center of the
	   * container.
	   *
	   * @param {number} pageX - The page x coordinate of the click or touch event.
	   * @param {number} pageY - The page y coordinate of the click or touch event.
	   */


	  /**
	   * Removes an ink from the container.
	   */


	  /**
	   * Gets the container for any keyboard events. This will almost always be the main element,
	   * but text fields will need to be the input itself.
	   */


	  /**
	   * Sets the ink container and the main container from the ref callback. When the component
	   * is mounting, the keyboard, mouse, and keyboard events will be initialized.
	   */


	  /**
	   * This function will either add or remove the event listeners for creating inks.
	   *
	   * @param {Object} props - The current props to use for figuring out if the events should
	   *    be added or removed.
	   * @param {bool=} keyboardDiff - Boolean if there was a difference between the current props and either
	   *    the previous or next props for the keyboard interactions being disabled.
	   * @param {bool=} mouseDiff - Boolean if there was a difference between the current props and either
	   *    the previous or next props for the mouse interactions being disabled.
	   * @param {bool=} touchDiff - Boolean if there was a difference between the current props and either
	   *    the previous or next props for the touch interactions being disabled.
	   */


	  /**
	   * If a form was submitted that contains the container of the ink and the current focus element
	   * is not the container, trigger an ink effect.
	   *
	   * The current focus check is added so that two inks are not created.
	   */


	  InkContainer.prototype.render = function render() {
	    var _this2 = this;

	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        inkStyle = _props.inkStyle,
	        inkClassName = _props.inkClassName,
	        transitionOverlap = _props.transitionOverlap,
	        transitionEnterTimeout = _props.transitionEnterTimeout,
	        transitionLeaveTimeout = _props.transitionLeaveTimeout,
	        pulse = _props.pulse;

	    var inks = this.state.inks.map(function (props) {
	      return _react2.default.createElement(_Ink2.default, _extends({}, props, {
	        pulse: pulse,
	        style: inkStyle,
	        className: inkClassName,
	        onRemove: _this2._handleRemove,
	        transitionOverlap: transitionOverlap,
	        transitionEnterTimeout: transitionEnterTimeout,
	        transitionLeaveTimeout: transitionLeaveTimeout
	      }));
	    });

	    return _react2.default.createElement(
	      _TransitionGroup2.default,
	      {
	        component: 'div',
	        style: style,
	        className: (0, _classnames2.default)('md-ink-container', className),
	        ref: this._setContainers
	      },
	      inks
	    );
	  };

	  return InkContainer;
	}(_react.PureComponent);

	InkContainer.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  inkStyle: _propTypes2.default.object,
	  inkClassName: _propTypes2.default.string,
	  waitForInkTransition: _propTypes2.default.bool,
	  disabledInteractions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['keyboard', 'mouse', 'touch'])),
	  transitionOverlap: _propTypes2.default.number.isRequired,
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,
	  pulse: _propTypes2.default.bool
	};
	InkContainer.defaultProps = {
	  transitionOverlap: 150,
	  transitionEnterTimeout: 450,
	  transitionLeaveTimeout: 300
	};
	exports.default = InkContainer;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _chainFunction = __webpack_require__(289);

	var _chainFunction2 = _interopRequireDefault(_chainFunction);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(181);

	var _warning2 = _interopRequireDefault(_warning);

	var _ChildMapping = __webpack_require__(290);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var propTypes = {
	  component: _propTypes2.default.any,
	  childFactory: _propTypes2.default.func,
	  children: _propTypes2.default.node
	};

	var defaultProps = {
	  component: 'span',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};

	var TransitionGroup = function (_React$Component) {
	  _inherits(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    _classCallCheck(this, TransitionGroup);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.performAppear = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;

	      if (component.componentWillAppear) {
	        component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key, component));
	      } else {
	        _this._handleDoneAppearing(key, component);
	      }
	    };

	    _this._handleDoneAppearing = function (key, component) {
	      if (component.componentDidAppear) {
	        component.componentDidAppear();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully appeared. Remove it.
	        _this.performLeave(key, component);
	      }
	    };

	    _this.performEnter = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;

	      if (component.componentWillEnter) {
	        component.componentWillEnter(_this._handleDoneEntering.bind(_this, key, component));
	      } else {
	        _this._handleDoneEntering(key, component);
	      }
	    };

	    _this._handleDoneEntering = function (key, component) {
	      if (component.componentDidEnter) {
	        component.componentDidEnter();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully entered. Remove it.
	        _this.performLeave(key, component);
	      }
	    };

	    _this.performLeave = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;

	      if (component.componentWillLeave) {
	        component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key, component));
	      } else {
	        // Note that this is somewhat dangerous b/c it calls setState()
	        // again, effectively mutating the component before all the work
	        // is done.
	        _this._handleDoneLeaving(key, component);
	      }
	    };

	    _this._handleDoneLeaving = function (key, component) {
	      if (component.componentDidLeave) {
	        component.componentDidLeave();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

	      if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	        // This entered again before it fully left. Add it again.
	        _this.keysToEnter.push(key);
	      } else {
	        _this.setState(function (state) {
	          var newChildren = _extends({}, state.children);
	          delete newChildren[key];
	          return { children: newChildren };
	        });
	      }
	    };

	    _this.childRefs = Object.create(null);

	    _this.state = {
	      children: (0, _ChildMapping.getChildMapping)(props.children)
	    };
	    return _this;
	  }

	  TransitionGroup.prototype.componentWillMount = function componentWillMount() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  };

	  TransitionGroup.prototype.componentDidMount = function componentDidMount() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key, this.childRefs[key]);
	      }
	    }
	  };

	  TransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var nextChildMapping = (0, _ChildMapping.getChildMapping)(nextProps.children);
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: (0, _ChildMapping.mergeChildMappings)(prevChildMapping, nextChildMapping)
	    });

	    for (var key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (var _key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(_key);
	      if (prevChildMapping[_key] && !hasNext && !this.currentlyTransitioningKeys[_key]) {
	        this.keysToLeave.push(_key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  };

	  TransitionGroup.prototype.componentDidUpdate = function componentDidUpdate() {
	    var _this2 = this;

	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(function (key) {
	      return _this2.performEnter(key, _this2.childRefs[key]);
	    });

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(function (key) {
	      return _this2.performLeave(key, _this2.childRefs[key]);
	    });
	  };

	  TransitionGroup.prototype.render = function render() {
	    var _this3 = this;

	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];

	    var _loop = function _loop(key) {
	      var child = _this3.state.children[key];
	      if (child) {
	        var isCallbackRef = typeof child.ref !== 'string';
	        var factoryChild = _this3.props.childFactory(child);
	        var ref = function ref(r) {
	          _this3.childRefs[key] = r;
	        };

	         false ? (0, _warning2.default)(isCallbackRef, 'string refs are not supported on children of TransitionGroup and will be ignored. ' + 'Please use a callback ref instead: https://facebook.github.io/react/docs/refs-and-the-dom.html#the-ref-callback-attribute') : void 0;

	        // Always chaining the refs leads to problems when the childFactory
	        // wraps the child. The child ref callback gets called twice with the
	        // wrapper and the child. So we only need to chain the ref if the
	        // factoryChild is not different from child.
	        if (factoryChild === child && isCallbackRef) {
	          ref = (0, _chainFunction2.default)(child.ref, ref);
	        }

	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(_react2.default.cloneElement(factoryChild, {
	          key: key,
	          ref: ref
	        }));
	      }
	    };

	    for (var key in this.state.children) {
	      _loop(key);
	    }

	    // Do not forward TransitionGroup props to primitive DOM nodes
	    var props = _extends({}, this.props);
	    delete props.transitionLeave;
	    delete props.transitionName;
	    delete props.transitionAppear;
	    delete props.transitionEnter;
	    delete props.childFactory;
	    delete props.transitionLeaveTimeout;
	    delete props.transitionEnterTimeout;
	    delete props.transitionAppearTimeout;
	    delete props.component;

	    return _react2.default.createElement(this.props.component, props, childrenToRender);
	  };

	  return TransitionGroup;
	}(_react2.default.Component);

	TransitionGroup.displayName = 'TransitionGroup';


	TransitionGroup.propTypes =  false ? propTypes : {};
	TransitionGroup.defaultProps = defaultProps;

	exports.default = TransitionGroup;
	module.exports = exports['default'];

/***/ }),
/* 289 */
/***/ (function(module, exports) {

	
	module.exports = function chain(){
	  var len = arguments.length
	  var args = [];

	  for (var i = 0; i < len; i++)
	    args[i] = arguments[i]

	  args = args.filter(function(fn){ return fn != null })

	  if (args.length === 0) return undefined
	  if (args.length === 1) return args[0]

	  return args.reduce(function(current, next){
	    return function chainedFunction() {
	      current.apply(this, arguments);
	      next.apply(this, arguments);
	    };
	  })
	}


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;

	var _react = __webpack_require__(1);

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children) {
	  if (!children) {
	    return children;
	  }
	  var result = {};
	  _react.Children.map(children, function (child) {
	    return child;
	  }).forEach(function (child) {
	    result[child.key] = child;
	  });
	  return result;
	}

	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */
	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    if (next.hasOwnProperty(key)) {
	      return next[key];
	    }

	    return prev[key];
	  }

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextKeysPending = {};

	  var pendingKeys = [];
	  for (var prevKey in prev) {
	    if (next.hasOwnProperty(prevKey)) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i = void 0;
	  var childMapping = {};
	  for (var nextKey in next) {
	    if (nextKeysPending.hasOwnProperty(nextKey)) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }
	    childMapping[nextKey] = getValueForKey(nextKey);
	  }

	  // Finally, add the keys which didn't appear before any key in `next`
	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

/***/ }),
/* 291 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = isFormPartRole;
	/** @module utils/isFormPartRole */

	/**
	 * A simple utility function to determine if an element has a role that should
	 * be used as a form part. This is mostly used for changing the behavior of keyboard
	 * events.
	 *
	 * A form part role is one of the following:
	 * - checkbox
	 * - radio
	 * - listbox
	 * - input
	 *
	 * @param {HTMLElement} el - the element to check.
	 * @return {boolean} true if the element is considered an element part of a form.
	 */
	function isFormPartRole(el) {
	  if (!el) {
	    return false;
	  } else if (el.nodeName === 'INPUT') {
	    return true;
	  }

	  var role = el.getAttribute('role');
	  return role === 'checkbox' || role === 'radio' || role === 'listbox';
	}

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = calcPageOffset;

	var _getPagePosition = __webpack_require__(293);

	var _getPagePosition2 = _interopRequireDefault(_getPagePosition);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Calculates the page offset of an element. If the element
	 * is false-ish, an empty object will be returned.
	 *
	 * This is really only used for calculating an ink position.
	 *
	 * @param {Node} el - An html node to find a page offset for.
	 * @return {Object} an object with a left and top attribute for the page
	 *    offset.
	 */
	function calcPageOffset(el) {
	  if (!el) {
	    return { left: null, right: null };
	  }

	  var rect = el.getBoundingClientRect();
	  return {
	    left: rect.left + (0, _getPagePosition2.default)('x'),
	    top: rect.top + (0, _getPagePosition2.default)('y')
	  };
	} /** @module utils/Positioning/calcPageOffset */

/***/ }),
/* 293 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = getPagePosition;
	/** @module utils/Positioning/getPagePosition */

	/**
	 * Gets the current page position.
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY
	 * @param {String} direction - The direction that should be retrieved. This
	 *    should be either 'x' or 'y'.
	 * @return {number} the position of the direction on the page.
	 */
	function getPagePosition(direction) {
	  var scroll = 'scroll' + (direction === 'x' ? 'Left' : 'Top');
	  if (typeof window.pageXOffset !== 'undefined') {
	    return window['page' + direction.toUpperCase() + 'Offset'];
	  } else if ((document.compatMode || '') === 'CSS1Compat') {
	    return document.documentElement[scroll];
	  } else {
	    return document.body[scroll];
	  }
	}

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = isValidClick;

	var _keyCodes = __webpack_require__(279);

	/**
	 * Checks if an event is a valid click event by ignoring
	 * any clisk that are not the left mouse button and not
	 * clicks that involve the shift key.
	 *
	 * @param {Object} e - the event to check
	 * @return {Boolean} true if the event is valid.
	 */
	function isValidClick(e) {
	  return e.button === _keyCodes.LEFT_MOUSE && !e.shiftKey;
	} /** @module utils/EventUtils/isValidClick */

/***/ }),
/* 295 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.setTouchEvent = setTouchEvent;
	exports.addTouchEvent = addTouchEvent;
	exports.removeTouchEvent = removeTouchEvent;
	// https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
	var supportsPassive = void 0;
	try {
	  var opts = Object.defineProperty({}, 'passive', {
	    get: function get() {
	      supportsPassive = true;
	    }
	  });
	  window.addEventListener('test', null, opts);
	} catch (e) {
	  supportsPassive = false;
	}

	/**
	 * A helper function for manually setting touch events on elements with the passive
	 * option (when it is supported).
	 *
	 * @param {boolean} add - Boolean if the event listener should be added or removed.
	 * @param {HTMLElement} el - The element to add the listener to.
	 * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'
	 * @param {function} callback - The event listener callback function.
	 * @param {Object=} options - any additional options to apply.
	 */
	function setTouchEvent(add, el, eventType, callback, options) {
	  return el[(add ? 'add' : 'remove') + 'EventListener']('touch' + eventType, callback, supportsPassive ? _extends({ passive: true }, options) : false);
	}

	/**
	 * A helper function for manually adding touch events on elements with the passive
	 * option (when it is supported).
	 *
	 * @param {HTMLElement} el - The element to add the listener to.
	 * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'
	 * @param {function} callback - The event listener callback function.
	 * @param {Object=} options - any additional options to apply.
	 */
	function addTouchEvent(el, type, callback, options) {
	  return setTouchEvent(true, el, type, callback, options);
	}

	/**
	 * A helper function for manually removing touch events on elements with the passive
	 * option (when it is supported).
	 *
	 * @param {HTMLElement} el - The element to add the listener to.
	 * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'
	 * @param {function} callback - The event listener callback function.
	 * @param {Object=} options - any additional options to apply.
	 */
	function removeTouchEvent(el, type, callback, options) {
	  return setTouchEvent(false, el, type, callback, options);
	}

/***/ }),
/* 296 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = calculateHypotenuse;
	/** @module utils/NumberUtils/calculateHypotenuse */

	/**
	 * Calculates the hypotenuse using the x and y coordinates given.
	 *
	 * @param {number} a the x coordinate
	 * @param {number} b the y coordinate
	 * @return {number} the hypotenuse length for the given x and y coordinates.
	 */
	function calculateHypotenuse(a, b) {
	  return Math.sqrt(a * a + b * b);
	}

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _CSSTransitionGroupTick = __webpack_require__(280);

	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Ink = function (_PureComponent) {
	  _inherits(Ink, _PureComponent);

	  function Ink(props) {
	    _classCallCheck(this, Ink);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this.state = {
	      active: false,
	      expanded: false,
	      pulsing: false,
	      leaving: false
	    };
	    return _this;
	  }

	  Ink.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (!this.props.aborted && nextProps.aborted) {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }

	      if (this._abort) {
	        this._abort();
	      }

	      this.setState({ active: false, expanding: false, pulsing: false, leaving: false });
	    }
	  };

	  Ink.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }
	  };

	  Ink.prototype.componentWillEnter = function componentWillEnter(cb) {
	    var _this2 = this;

	    if (this.props.aborted) {
	      cb();
	      return;
	    }

	    var _props = this.props,
	        transitionOverlap = _props.transitionOverlap,
	        transitionEnterTimeout = _props.transitionEnterTimeout;

	    this._abort = cb;

	    this._timeout = setTimeout(function () {
	      _this2._timeout = setTimeout(function () {
	        _this2._timeout = null;
	        _this2._abort = null;

	        cb();
	      }, transitionEnterTimeout - transitionOverlap);

	      _this2.setState({ expanded: true });
	    }, _CSSTransitionGroupTick2.default);

	    this.setState({ active: true });
	  };

	  Ink.prototype.componentDidEnter = function componentDidEnter() {
	    var _this3 = this;

	    if (this.props.pulse) {
	      this._timeout = setTimeout(function () {
	        _this3._timeout = null;

	        _this3.setState({ pulsing: true });
	      }, this.props.transitionEnterTimeout);
	    }
	  };

	  Ink.prototype.componentWillLeave = function componentWillLeave(cb) {
	    var _this4 = this;

	    if (this.props.aborted) {
	      cb();
	      return;
	    }

	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }

	    this._abort = cb;
	    this._timeout = setTimeout(function () {
	      _this4._timeout = null;

	      cb();
	    }, this.props.transitionLeaveTimeout);

	    this.setState({ pulsing: false, leaving: true });
	  };

	  Ink.prototype.componentDidLeave = function componentDidLeave() {
	    if (!this.props.aborted && this.props.onRemove) {
	      this.props.onRemove();
	    }
	  };

	  Ink.prototype.render = function render() {
	    var _props2 = this.props,
	        style = _props2.style,
	        className = _props2.className,
	        left = _props2.left,
	        top = _props2.top,
	        size = _props2.size;
	    var _state = this.state,
	        active = _state.active,
	        expanded = _state.expanded,
	        pulsing = _state.pulsing,
	        leaving = _state.leaving;


	    return _react2.default.createElement('span', {
	      style: Object.assign({}, style, {
	        left: left,
	        top: top,
	        height: size,
	        width: size
	      }),
	      className: (0, _classnames2.default)('md-ink', {
	        'md-ink--active': active,
	        'md-ink--expanded': expanded,
	        'md-ink--pulsing': pulsing,
	        'md-ink--leaving': leaving
	      }, className)
	    });
	  };

	  return Ink;
	}(_react.PureComponent);

	Ink.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  aborted: _propTypes2.default.bool,
	  onRemove: _propTypes2.default.func,
	  left: _propTypes2.default.number.isRequired,
	  top: _propTypes2.default.number.isRequired,
	  size: _propTypes2.default.number.isRequired,
	  transitionOverlap: _propTypes2.default.number.isRequired,
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,
	  pulse: _propTypes2.default.bool
	};
	exports.default = Ink;

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  inkDisabled: _propTypes2.default.bool,
	  inkDisabledInteractions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['keyboard', 'mouse', 'touch']))
	};

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _getDisplayName = __webpack_require__(286);

	var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

	var _TooltipContainer = __webpack_require__(300);

	var _TooltipContainer2 = _interopRequireDefault(_TooltipContainer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Takes any component and injects a tooltip container as a prop. The tooltip container
	 * will add event listeners for touch, mouse, and keyboard events so that a tooltip will appear
	 * in the ComposedComponent.
	 *
	 * If the `tooltipLabel` prop is omitted, the tooltip and event listeners will not
	 * be included.
	 *
	 * ```js
	 * @param {function} ComposedComponent the component to compose with the tooltip functionality.
	 * @return {function} the ComposedComponent with a tooltip.
	 * ```
	 */
	exports.default = function (ComposedComponent) {
	  var _class, _temp2;

	  return _temp2 = _class = function (_PureComponent) {
	    _inherits(TooltipedComponent, _PureComponent);

	    function TooltipedComponent() {
	      var _temp, _this, _ret;

	      _classCallCheck(this, TooltipedComponent);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._composed = null, _this.getComposedComponent = function () {
	        return _this._composed;
	      }, _this._setComposedComponent = function (component) {
	        _this._composed = component;
	      }, _temp), _possibleConstructorReturn(_this, _ret);
	    }

	    /**
	     * Gets the composed component as a ref. This is useful if you need to access the ref of the
	     * composed component instead of the `injectTooltip` HOC to use some publicly accessible methods.
	     *
	     * ```js
	     * <SomeTooltippedComponent
	     *   ref={tooltipHOC => {
	     *     tooltipHOC.getComposedComponent().focus();
	     *   }}
	     * />
	     * ```
	     *
	     * > NOTE: This can be `null`, so make sure to do a null check before using.
	     */


	    TooltipedComponent.prototype.render = function render() {
	      var _props = this.props,
	          tooltipLabel = _props.tooltipLabel,
	          tooltipDelay = _props.tooltipDelay,
	          tooltipPosition = _props.tooltipPosition,
	          tooltipStyle = _props.tooltipStyle,
	          tooltipClassName = _props.tooltipClassName,
	          tooltipContainerStyle = _props.tooltipContainerStyle,
	          tooltipContainerClassName = _props.tooltipContainerClassName,
	          tooltipTransitionEnterTimeout = _props.tooltipTransitionEnterTimeout,
	          tooltipTransitionLeaveTimeout = _props.tooltipTransitionLeaveTimeout,
	          props = _objectWithoutProperties(_props, ['tooltipLabel', 'tooltipDelay', 'tooltipPosition', 'tooltipStyle', 'tooltipClassName', 'tooltipContainerStyle', 'tooltipContainerClassName', 'tooltipTransitionEnterTimeout', 'tooltipTransitionLeaveTimeout']);

	      if (tooltipLabel) {
	        props.tooltip = _react2.default.createElement(_TooltipContainer2.default, {
	          key: 'tooltipContainer',
	          label: tooltipLabel,
	          delay: tooltipDelay,
	          position: tooltipPosition,
	          enterTimeout: tooltipTransitionEnterTimeout,
	          leaveTimeout: tooltipTransitionLeaveTimeout,
	          style: tooltipContainerStyle,
	          className: tooltipContainerClassName,
	          tooltipStyle: tooltipStyle,
	          tooltipClassName: tooltipClassName
	        });
	      }

	      props.ref = this._setComposedComponent;

	      return _react2.default.createElement(ComposedComponent, props);
	    };

	    return TooltipedComponent;
	  }(_react.PureComponent), _class.displayName = (0, _getDisplayName2.default)(ComposedComponent, 'Tooltip'), _class.propTypes = {
	    /**
	     * An optional style to apply to the tooltip container.
	     */
	    tooltipContainerStyle: _propTypes2.default.object,

	    /**
	     * An optional className to apply to the tooltip container.
	     */
	    tooltipContainerClassName: _propTypes2.default.string,

	    /**
	     * An optional style to apply to the tooltip itself.
	     */
	    tooltipStyle: _propTypes2.default.object,

	    /**
	     * An optional className to the tooltip itself.
	     */
	    tooltipClassName: _propTypes2.default.string,

	    /**
	     * The tooltip to display. If omitted, the `tooltip` prop will not be injected.
	     */
	    tooltipLabel: _propTypes2.default.node,

	    /**
	     * The amount of delay before the tooltip will appear on hover, touch, or keyboard focus.
	     */
	    tooltipDelay: _TooltipContainer2.default.propTypes.delay,

	    /**
	     * The position that the tooltip should appear related to the composed component.
	     */
	    tooltipPosition: _TooltipContainer2.default.propTypes.position,

	    /**
	     * The transition time for the tooltip appearing.
	     */
	    tooltipTransitionEnterTimeout: _TooltipContainer2.default.propTypes.enterTimeout,

	    /**
	     * The transition time for the tooltip disappearing.
	     */
	    tooltipTransitionLeaveTimeout: _TooltipContainer2.default.propTypes.leaveTimeout
	  }, _temp2;
	};

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(31);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _TransitionGroup = __webpack_require__(288);

	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _keyCodes = __webpack_require__(279);

	var _captureNextEvent = __webpack_require__(283);

	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);

	var _touches = __webpack_require__(295);

	var _Tooltip = __webpack_require__(301);

	var _Tooltip2 = _interopRequireDefault(_Tooltip);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function getContainer(tooltip) {
	  return tooltip.parentNode;
	}

	var TooltipContainer = function (_PureComponent) {
	  _inherits(TooltipContainer, _PureComponent);

	  function TooltipContainer() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, TooltipContainer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { visible: false }, _this._delayedTimeout = null, _this._unlinkTarget = function () {
	      var target = _this._target;
	      if (target) {
	        (0, _touches.removeTouchEvent)(target, 'start', _this._showTooltip);
	        (0, _touches.removeTouchEvent)(target, 'end', _this._hideTooltip);
	        target.removeEventListener('mouseover', _this._showTooltip);
	        target.removeEventListener('mouseleave', _this._hideTooltip);
	        target.removeEventListener('keyup', _this._handleKeyUp);
	        target.removeEventListener('blur', _this._hideTooltip);
	      }
	    }, _this._setTarget = function () {
	      var container = _this._container;
	      var target = _this.props.target;


	      _this._unlinkTarget();

	      if (typeof target === 'function') {
	        target = target(container, _this);
	      }
	      target = target ? (0, _reactDom.findDOMNode)(target) : container;
	      _this._target = target || null;

	      if (target) {
	        (0, _touches.addTouchEvent)(target, 'start', _this._showTooltip);
	        (0, _touches.addTouchEvent)(target, 'end', _this._hideTooltip);
	        target.addEventListener('mouseover', _this._showTooltip);
	        target.addEventListener('mouseleave', _this._hideTooltip);
	        target.addEventListener('keyup', _this._handleKeyUp);
	        target.addEventListener('blur', _this._hideTooltip);
	      }
	    }, _this._setContainers = function (span) {
	      if (span) {
	        _this._container = _this.props.container(span.parentNode, _this);
	      }
	    }, _this._stopContextMenu = function (e) {
	      e.preventDefault();
	      window.removeEventListener('contextmenu', _this._stopContextMenu, true);
	      (0, _captureNextEvent2.default)('click');
	      _this.setState({ visible: true });
	    }, _this._showTooltip = function (e) {
	      if (e.type === 'mouseover' && _this._touched) {
	        return;
	      }

	      if (e.type === 'touchstart') {
	        _this._touched = true;

	        window.addEventListener('contextmenu', _this._stopContextMenu, true);
	        return;
	      }

	      var delay = _this.props.delay;

	      if (_this._delayedTimeout) {
	        clearTimeout(_this._delayedTimeout);
	      }

	      if (delay) {
	        _this._delayedTimeout = setTimeout(function () {
	          _this._delayedTimeout = null;

	          _this.setState({ visible: true });
	        }, delay);
	      } else {
	        _this.setState({ visible: true });
	      }
	    }, _this._hideTooltip = function (e) {
	      if (_this._delayedTimeout) {
	        clearTimeout(_this._delayedTimeout);
	      }

	      if (e.type === 'mouseover' && _this._touched) {
	        return;
	      }

	      _this.setState({ visible: false });
	    }, _this._handleKeyUp = function (e) {
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        _this._showTooltip(e);
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  TooltipContainer.prototype.componentDidMount = function componentDidMount() {
	    this._setTarget();
	  };

	  TooltipContainer.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this.props.target !== prevProps.target) {
	      this._setTarget();
	    }
	  };

	  TooltipContainer.prototype.componentWillUnmount = function componentWillUnmount() {
	    this._unlinkTarget();
	    this._target = null;

	    if (this._delayedTimeout) {
	      clearTimeout(this._delayedTimeout);
	    }
	  };

	  TooltipContainer.prototype.render = function render() {
	    var visible = this.state.visible;
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        tooltipStyle = _props.tooltipStyle,
	        tooltipClassName = _props.tooltipClassName,
	        label = _props.label,
	        position = _props.position,
	        enterTimeout = _props.enterTimeout,
	        leaveTimeout = _props.leaveTimeout;


	    var tooltip = _react2.default.createElement(
	      _Tooltip2.default,
	      {
	        key: 'tooltip',
	        style: tooltipStyle,
	        className: tooltipClassName,
	        position: position,
	        enterTimeout: enterTimeout,
	        leaveTimeout: leaveTimeout
	      },
	      label
	    );

	    return _react2.default.createElement(
	      _TransitionGroup2.default,
	      {
	        style: style,
	        className: (0, _classnames2.default)('md-tooltip-container', className),
	        component: 'div'
	      },
	      _react2.default.createElement('span', { ref: this._setContainers, 'aria-hidden': true }),
	      visible ? tooltip : null
	    );
	  };

	  return TooltipContainer;
	}(_react.PureComponent);

	TooltipContainer.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  tooltipStyle: _propTypes2.default.object,
	  tooltipClassName: _propTypes2.default.string,
	  label: _propTypes2.default.node.isRequired,
	  position: _Tooltip2.default.propTypes.position,
	  delay: _propTypes2.default.number,
	  enterTimeout: _Tooltip2.default.propTypes.enterTimeout,
	  leaveTimeout: _Tooltip2.default.propTypes.leaveTimeout,
	  /**
	   * A function that returns a DOM element that will be used as the tooltip's container.
	   * A ref to the tooltip's DOM element will be passed into the function.
	   */
	  container: _propTypes2.default.func,
	  /**
	   * A component/element the tooltip should be linked to,
	   * or a function that returns such a component/element.
	   * A ref to the tooltip's container will be passed into the function.
	   *
	   * By default the tooltip's container will be used as the target.
	   */
	  target: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func])
	};
	TooltipContainer.defaultProps = {
	  container: getContainer,
	  delay: 0
	};
	exports.default = TooltipContainer;

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _CSSTransitionGroupTick = __webpack_require__(280);

	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Tooltip = function (_PureComponent) {
	  _inherits(Tooltip, _PureComponent);

	  function Tooltip(props) {
	    _classCallCheck(this, Tooltip);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this.state = {
	      entering: false,
	      leaving: false,
	      active: false,
	      visible: false
	    };

	    _this._timeout = null;
	    return _this;
	  }

	  Tooltip.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }
	  };

	  Tooltip.prototype.componentWillEnter = function componentWillEnter(cb) {
	    var _this2 = this;

	    this._timeout = setTimeout(function () {
	      _this2._timeout = setTimeout(function () {
	        _this2._timeout = null;

	        cb();
	      }, _this2.props.enterTimeout);
	      _this2.setState({ active: true });
	    }, _CSSTransitionGroupTick2.default);

	    this.setState({ entering: true });
	  };

	  Tooltip.prototype.componentDidEnter = function componentDidEnter() {
	    this.setState({ entering: false, active: false, visible: true });
	  };

	  Tooltip.prototype.componentWillLeave = function componentWillLeave(cb) {
	    var _this3 = this;

	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }

	    this._timeout = setTimeout(function () {
	      _this3._timeout = setTimeout(function () {
	        _this3._timeout = null;

	        cb();
	      }, _this3.props.leaveTimeout);

	      _this3.setState({ active: true, visible: false });
	    }, _CSSTransitionGroupTick2.default);

	    this.setState({ leaving: true });
	  };

	  Tooltip.prototype.render = function render() {
	    var _cn;

	    var _state = this.state,
	        active = _state.active,
	        entering = _state.entering,
	        leaving = _state.leaving,
	        visible = _state.visible;
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        children = _props.children,
	        position = _props.position;


	    var direction = position === 'top' || position === 'bottom' ? 'horizontal' : 'vertical';
	    return _react2.default.createElement(
	      'span',
	      {
	        style: style,
	        className: (0, _classnames2.default)('md-tooltip md-tooltip--' + position + ' md-tooltip--' + direction, (_cn = {
	          'md-tooltip--active': active,
	          'md-tooltip--enter': entering,
	          'md-tooltip--enter-active': entering && active,
	          'md-tooltip--leave': leaving,
	          'md-tooltip--leave-active': leaving && active
	        }, _cn['md-tooltip--' + position + '-active'] = visible || entering && active, _cn), className)
	      },
	      children
	    );
	  };

	  return Tooltip;
	}(_react.PureComponent);

	Tooltip.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  position: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
	  children: _propTypes2.default.node.isRequired,
	  enterTimeout: _propTypes2.default.number,
	  leaveTimeout: _propTypes2.default.number
	};
	Tooltip.defaultProps = {
	  position: 'bottom',
	  enterTimeout: 150,
	  leaveTimeout: 150
	};
	exports.default = Tooltip;

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = getCollapserStyles;

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A simple utility function to get the dynamic collapser styles.
	 */
	function getCollapserStyles(_ref) {
	  var _ref2;

	  var flipped = _ref.flipped,
	      suffix = _ref.suffix,
	      suffixFlipped = _ref.suffixFlipped;

	  for (var _len = arguments.length, classNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    classNames[_key - 1] = arguments[_key];
	  }

	  return _classnames2.default.apply(undefined, ['md-collapser', (_ref2 = {
	    'md-collapser--flipped': flipped && (!suffixFlipped || !suffix)
	  }, _ref2['md-collapser--' + suffix] = suffix, _ref2['md-collapser--' + suffix + '-flipped'] = suffix && flipped && suffixFlipped, _ref2)].concat(classNames));
	}

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _CardExpander = __webpack_require__(277);

	var _CardExpander2 = _interopRequireDefault(_CardExpander);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `CardActions` component is used for adding actions on your card.
	 * The actions should be `FlatButton`s or `IconButton`s.
	 *
	 * This component can act as a `CardExpander`.
	 */
	var CardActions = function (_Component) {
	  _inherits(CardActions, _Component);

	  function CardActions() {
	    _classCallCheck(this, CardActions);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  CardActions.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        children = _props.children,
	        isExpander = _props.isExpander,
	        expander = _props.expander,
	        centered = _props.centered,
	        stacked = _props.stacked,
	        props = _objectWithoutProperties(_props, ['className', 'children', 'isExpander', 'expander', 'centered', 'stacked']);

	    return _react2.default.createElement(
	      'section',
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-dialog-footer--card', {
	          'md-dialog-footer--inline': !stacked,
	          'md-dialog-footer--stacked': stacked,
	          'md-dialog-footer--card-centered': centered
	        }, className)
	      }),
	      children,
	      isExpander || expander && _react2.default.createElement(_CardExpander2.default, null)
	    );
	  };

	  return CardActions;
	}(_react.Component);

	CardActions.propTypes = {
	  /**
	   * Boolean if this component should act as an expander and inject the
	   * `CardExpander`.
	   */
	  expander: _propTypes2.default.bool,

	  /**
	   * An optional className to apply to the actions container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An actions to display.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the actions should be centered.
	   */
	  centered: _propTypes2.default.bool,

	  /**
	   * Boolean if the actions should be stacked.
	   */
	  stacked: _propTypes2.default.bool,

	  isExpander: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `expander` instead')
	};
	exports.default = CardActions;

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _between = __webpack_require__(257);

	var _between2 = _interopRequireDefault(_between);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ROATE_DISTANCE = 360 * 1.75;
	var BASE_SIZE = 24; // font-icon font size

	/**
	 * The `CircularProgress` component is used to give visual feedback while your app
	 * is loading.
	 *
	 * There are two different types of circular progress bars: `Determinate` and `Indeterminate`.
	 *
	 * A `Determinate` circular progress bar should be used when you want to keep track of the current
	 * progress. An example would be downloading a file.
	 *
	 * An `Indeterminate` circular progress bar should be used when you can not keep track of the progress
	 * yourself. An example would be waiting for some API call to complete.
	 */

	var CircularProgress = function (_PureComponent) {
	  _inherits(CircularProgress, _PureComponent);

	  function CircularProgress() {
	    _classCallCheck(this, CircularProgress);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  /* eslint-disable max-len */
	  CircularProgress.prototype.render = function render() {
	    var _props = this.props,
	        scale = _props.scale,
	        style = _props.style,
	        className = _props.className,
	        value = _props.value,
	        determinateDashoffset = _props.determinateDashoffset,
	        centered = _props.centered,
	        props = _objectWithoutProperties(_props, ['scale', 'style', 'className', 'value', 'determinateDashoffset', 'centered']);

	    var isDeterminate = typeof value === 'number';
	    var circleStyle = void 0;
	    var svgStyle = style;
	    if (isDeterminate) {
	      var rotate = 'rotate3d(0, 0, 1, ' + ROATE_DISTANCE / 100 * value + 'deg)';
	      circleStyle = {
	        strokeDashoffset: determinateDashoffset - determinateDashoffset / 100 * value
	      };

	      svgStyle = Object.assign({}, style, {
	        WebkitTransform: (0, _classnames2.default)(style.WebkitTransform, rotate),
	        MozTransform: (0, _classnames2.default)(style.MozTransform, rotate),
	        transform: (0, _classnames2.default)(style.transform, rotate)
	      });
	    }

	    var accessibilityProps = {
	      role: 'progressbar',
	      'aria-valuemin': 0,
	      'aria-valuemax': 100
	    };

	    if (isDeterminate) {
	      accessibilityProps['aria-valuenow'] = value;
	    }

	    return _react2.default.createElement(
	      'svg',
	      _extends({}, props, accessibilityProps, {
	        style: svgStyle,
	        className: (0, _classnames2.default)('md-progress md-progress--circular', {
	          'md-block-centered': centered,
	          'md-progress--circular-determinate': isDeterminate,
	          'md-progress--circular-indeterminate': !isDeterminate
	        }, className),
	        width: scale * BASE_SIZE,
	        height: scale * BASE_SIZE,
	        viewBox: '0 0 66 66'
	      }),
	      _react2.default.createElement('circle', {
	        className: (0, _classnames2.default)('md-circular-progress-path', {
	          'md-circular-progress-path--animated': !isDeterminate
	        }),
	        strokeWidth: '6',
	        strokeLinecap: 'round',
	        style: circleStyle,
	        cx: '33',
	        cy: '33',
	        r: '30'
	      })
	    );
	  };

	  return CircularProgress;
	}(_react.PureComponent);

	CircularProgress.propTypes = {
	  /**
	   * The `id` prop is required for accessibility concerns.
	   * [Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)
	   *
	   * > If the progressbar is describing the loading progress of a particular region of a page, the author
	   * __SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the
	   * region until it is finished loading. It is not possible for the user to alter the value of a progressbar
	   * because it is always readonly.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /* eslint-enable max-len */

	  /**
	   * A style object to apply to the SVG. If this is a determinate `CircularProgress`,
	   * the `transform` (and vendor prefixes) styles will be merged with the current
	   * progress rotation.
	   */
	  style: _propTypes2.default.object.isRequired,

	  /**
	   * An optional className to apply to the SVG.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The current value of the progress. If this value is defined, it will
	   * be converted to a determinate circular progress. The progress will not
	   * advance unless this value changes.
	   *
	   * This value should also be a number between 0 and 100.
	   */
	  value: (0, _between2.default)(_propTypes2.default.number, 0, 100),

	  /**
	   * The scale for the circular progress.
	   */
	  scale: _propTypes2.default.number.isRequired,

	  /**
	   * You probably don't want to update this. I'm not good at SVG. This should
	   * match the SCSS variable `$md-circular-progress-stroke-dashoffset`.
	   */
	  determinateDashoffset: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the progress should be centered in it's container.
	   */
	  centered: _propTypes2.default.bool
	};
	CircularProgress.defaultProps = {
	  style: {},
	  scale: 1,
	  determinateDashoffset: 187,
	  centered: true
	};
	exports.default = CircularProgress;

/***/ }),
/* 305 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = isRequiredForA11y;
	function isRequiredForA11y(validator) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;

	    if (props[propName] == null) {
	      return new Error('The ' + location + ' `' + propFullNameSafe + '` is required to make ' + ('`' + componentNameSafe + '` accessible for users of assistive ') + 'technologies such as screen readers.');
	    }

	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }

	    return validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	  };
	}

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.MediaOverlay = exports.Media = undefined;

	var _Media2 = __webpack_require__(307);

	var _Media3 = _interopRequireDefault(_Media2);

	var _MediaOverlay2 = __webpack_require__(308);

	var _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Media3.default;
	exports.Media = _Media3.default;
	exports.MediaOverlay = _MediaOverlay3.default;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function validateAspectRatio(props, propName, component) {
	  var _PropTypes$string;

	  var value = props[propName];

	  for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	    args[_key - 3] = arguments[_key];
	  }

	  var err = (_PropTypes$string = _propTypes2.default.string).isRequired.apply(_PropTypes$string, [props, propName, component].concat(args));
	  if (!err && value.split('-').length !== 2) {
	    err = new Error('Your provided an `' + propName + '` prop to the ' + component + ' that is not a valid ' + ('aspect ratio `' + value + '`. This should be in the form of \'{width}-{height}\'.'));
	  }

	  return err;
	}

	/**
	 * The `Media` component is used to display images, iframes, ...media. Who'da thunk?
	 */

	var Media = function (_PureComponent) {
	  _inherits(Media, _PureComponent);

	  function Media() {
	    _classCallCheck(this, Media);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Media.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        Component = _props.component,
	        className = _props.className,
	        children = _props.children,
	        forceAspect = _props.forceAspect,
	        aspectRatio = _props.aspectRatio,
	        expandable = _props.expandable,
	        props = _objectWithoutProperties(_props, ['component', 'className', 'children', 'forceAspect', 'aspectRatio', 'expandable']);

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-media', (_cn = {}, _cn['md-media--' + aspectRatio] = forceAspect, _cn), className)
	      }),
	      children
	    );
	  };

	  return Media;
	}(_react.PureComponent);

	Media.propTypes = {
	  /**
	   * An optional className to apply to the card media component.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Any media to display.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the aspect ratio should be forced.
	   */
	  forceAspect: _propTypes2.default.bool,

	  /**
	   * The aspect ratio to use.
	   */
	  aspectRatio: validateAspectRatio,

	  /**
	   * Boolean if this component should be expandable when there is a `CardExpander`
	   * above it in the `Card`.
	   */
	  expandable: _propTypes2.default.bool,

	  /**
	   * The component to render the card media as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	Media.defaultProps = {
	  forceAspect: true,
	  aspectRatio: '16-9',
	  component: 'section'
	};
	exports.default = Media;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `MediaOverlay` component is just a very simple wrapper that adds the
	 * `.md-media-overlay` class name to a div. The overlay will be positioned
	 * at the bottom of the `Media` by default.
	 */
	var MediaOverlay = function (_PureComponent) {
	  _inherits(MediaOverlay, _PureComponent);

	  function MediaOverlay() {
	    _classCallCheck(this, MediaOverlay);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  MediaOverlay.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        Component = _props.component,
	        props = _objectWithoutProperties(_props, ['className', 'component']);

	    return _react2.default.createElement(Component, _extends({ className: (0, _classnames2.default)('md-media-overlay', className) }, props));
	  };

	  return MediaOverlay;
	}(_react.PureComponent);

	MediaOverlay.propTypes = {
	  /**
	   * An optional style to apply to the overlay.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the overlay.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Any children to display in the overlay. This is _normally_ a `CardTitle` component
	   * or some buttons.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * The component to be rendered as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	MediaOverlay.defaultProps = {
	  component: 'div'
	};
	exports.default = MediaOverlay;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.IconButton = exports.FloatingButton = exports.RaisedButton = exports.FlatButton = exports.Button = undefined;

	var _Button2 = __webpack_require__(278);

	var _Button3 = _interopRequireDefault(_Button2);

	var _FlatButton2 = __webpack_require__(310);

	var _FlatButton3 = _interopRequireDefault(_FlatButton2);

	var _RaisedButton2 = __webpack_require__(312);

	var _RaisedButton3 = _interopRequireDefault(_RaisedButton2);

	var _FloatingButton2 = __webpack_require__(313);

	var _FloatingButton3 = _interopRequireDefault(_FloatingButton2);

	var _IconButton2 = __webpack_require__(314);

	var _IconButton3 = _interopRequireDefault(_IconButton2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Button3.default;
	exports.Button = _Button3.default;
	exports.FlatButton = _FlatButton3.default;
	exports.RaisedButton = _RaisedButton3.default;
	exports.FloatingButton = _FloatingButton3.default;
	exports.IconButton = _IconButton3.default;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _componentDeprecated = __webpack_require__(311);

	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var FlatButton = function (_PureComponent) {
	  _inherits(FlatButton, _PureComponent);

	  function FlatButton() {
	    _classCallCheck(this, FlatButton);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  FlatButton.prototype.render = function render() {
	    return _react2.default.createElement(_Button2.default, _extends({}, this.props, { flat: true }));
	  };

	  return FlatButton;
	}(_react.PureComponent);

	FlatButton.propTypes = {
	  /**
	   * The label to display in the button.
	   */
	  label: _propTypes2.default.node.isRequired,

	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Boolean if the icon should be displayed before the label.
	   */
	  iconBefore: _propTypes2.default.bool,

	  /**
	   * A `FontIcon` to display in the button. It can be placed before
	   * or after the label.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * The button type.
	   */
	  type: _propTypes2.default.string,

	  /**
	   * Boolean if the button should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the button should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,

	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional href to convert the button into a link button.
	   */
	  href: _propTypes2.default.string,

	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,

	  deprecated: (0, _componentDeprecated2.default)('The behavior of the `FlatButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` component and add a ' + 'prop `flat`.')
	};
	FlatButton.defaultProps = {
	  type: 'button',
	  iconBefore: true
	};
	exports.default = FlatButton;

/***/ }),
/* 311 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = componentDeprecated;
	/** @module utils/PropTypes/componentDeprecated */

	/**
	 * A simple PropType validation that shows that a component is deprecated and also prints
	 * a reason for the deprecation.
	 *
	 * @param {String} reason - The reason that the component is deprecated.
	 * @return {Error} a prop type validation error.
	 */
	function componentDeprecated(reason) {
	  return function validate(props, propName, componentName) {
	    var componentNameSafe = componentName || '<<anonymous>>';

	    return new Error('The `' + componentNameSafe + '` has been deprecated and will be removed in the next release. ' + reason);
	  };
	}

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _componentDeprecated = __webpack_require__(311);

	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RaisedButton = function (_PureComponent) {
	  _inherits(RaisedButton, _PureComponent);

	  function RaisedButton() {
	    _classCallCheck(this, RaisedButton);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  RaisedButton.prototype.render = function render() {
	    return _react2.default.createElement(_Button2.default, _extends({}, this.props, { raised: true }));
	  };

	  return RaisedButton;
	}(_react.PureComponent);

	RaisedButton.propTypes = {
	  /**
	   * The label to display in the button.
	   */
	  label: _propTypes2.default.node.isRequired,

	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Boolean if the icon should be displayed before the label.
	   */
	  iconBefore: _propTypes2.default.bool,

	  /**
	   * A `FontIcon` to display in the button. It can be placed before
	   * or after the label.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * The button type.
	   */
	  type: _propTypes2.default.string,

	  /**
	   * Boolean if the button should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the button should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,

	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional href to convert the button into a link button.
	   */
	  href: _propTypes2.default.string,

	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,

	  deprecated: (0, _componentDeprecated2.default)('The behavior of the `RaisedButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` component and add a ' + 'prop `raised`.')
	};
	RaisedButton.defaultProps = {
	  type: 'button',
	  iconBefore: true
	};
	exports.default = RaisedButton;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _componentDeprecated = __webpack_require__(311);

	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);

	var _IconButton = __webpack_require__(314);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * A `FloatingButton` is an extension of the `IconButton`.
	 * A tooltip can be displayed on hover or touch hold if the
	 * `tooltipLabel` prop is given.
	 *
	 * Another name for this button is a `FloatingActionButton` (FAB).
	 *
	 * Any other props (such as style or event listeners) will also be
	 * applied.
	 */
	var FloatingButton = function (_PureComponent) {
	  _inherits(FloatingButton, _PureComponent);

	  function FloatingButton() {
	    _classCallCheck(this, FloatingButton);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  FloatingButton.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        fixed = _props.fixed,
	        mini = _props.mini,
	        children = _props.children,
	        iconClassName = _props.iconClassName,
	        props = _objectWithoutProperties(_props, ['className', 'fixed', 'mini', 'children', 'iconClassName']);

	    return _react2.default.createElement(
	      _IconButton2.default,
	      _extends({}, props, {
	        className: (0, _classnames2.default)({
	          'md-btn--floating-fixed': fixed,
	          'md-btn--floating-mini': mini
	        }, className),
	        iconClassName: iconClassName,
	        floating: true
	      }),
	      children
	    );
	  };

	  return FloatingButton;
	}(_react.PureComponent);

	FloatingButton.propTypes = {
	  /**
	   * The className to use for rendering the `FontIcon`.
	   */
	  iconClassName: _propTypes2.default.string,

	  /**
	   * Any children to use to render the `FontIcon`.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The button type.
	   */
	  type: _propTypes2.default.string,

	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional href to convert the button into a link button.
	   */
	  href: _propTypes2.default.string,

	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional label to use if you would like a tooltip to display
	   * on hover or touch hold.
	   */
	  tooltipLabel: _propTypes2.default.node,

	  /**
	   * The position that the tooltip should be displayed relative to
	   * the button.
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * An optional amount of delay before the tooltip appears.
	   */
	  tooltipDelay: _propTypes2.default.number,

	  /**
	   * Boolean if the floating button is fixed.
	   */
	  fixed: _propTypes2.default.bool,

	  /**
	   * Boolean if the floating button should be displayed as the mini
	   * version.
	   */
	  mini: _propTypes2.default.bool,

	  /**
	   * Boolean if the floating button should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the floating button should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,

	  deprecated: (0, _componentDeprecated2.default)('The behavior of the `FloatingButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` component and add a ' + 'prop `floating`.')
	};
	exports.default = FloatingButton;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _componentDeprecated = __webpack_require__(311);

	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _injectTooltip = __webpack_require__(299);

	var _injectTooltip2 = _interopRequireDefault(_injectTooltip);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `IconButton` component automatically includes ink and a tooltip.
	 * The tooltip will only be included if the `tooltipLabel` prop is given.
	 *
	 * Any other props (such as style or event listeners) will also be
	 * applied.
	 */
	var IconButton = function (_PureComponent) {
	  _inherits(IconButton, _PureComponent);

	  function IconButton() {
	    _classCallCheck(this, IconButton);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  IconButton.prototype.render = function render() {
	    var _props = this.props,
	        iconClassName = _props.iconClassName,
	        children = _props.children,
	        tooltip = _props.tooltip,
	        floating = _props.floating,
	        props = _objectWithoutProperties(_props, ['iconClassName', 'children', 'tooltip', 'floating']);

	    delete props.tooltipLabel;
	    delete props.tooltipPosition;

	    return _react2.default.createElement(
	      _Button2.default,
	      _extends({}, props, { icon: !floating, floating: floating }),
	      tooltip,
	      _react2.default.createElement(
	        _FontIcon2.default,
	        { iconClassName: iconClassName },
	        children
	      )
	    );
	  };

	  return IconButton;
	}(_react.PureComponent);

	IconButton.propTypes = {
	  /**
	   * The className to use for rendering the `FontIcon`.
	   */
	  iconClassName: _propTypes2.default.string,

	  /**
	   * Any children to use to render the `FontIcon`.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The button type.
	   */
	  type: _propTypes2.default.string,

	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional href to convert the button into a link button.
	   */
	  href: _propTypes2.default.string,

	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,
	  /**
	   * Boolean if the IconButton is floating
	  floating: PropTypes.bool,
	   /**
	   * An optional label to use if you would like a tooltip to display
	   * on hover or touch hold.
	   */
	  tooltipLabel: _propTypes2.default.node,

	  /**
	   * The position that the tooltip should be displayed relative to
	   * the button.
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * An optional amount of delay before the tooltip appears.
	   */
	  tooltipDelay: _propTypes2.default.number,

	  // Inject from injectTooltip
	  tooltip: _propTypes2.default.node,
	  floating: _propTypes2.default.bool,

	  deprecated: (0, _componentDeprecated2.default)('The behavior of the `IconButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` component and add a ' + 'prop `icon`.')
	};
	IconButton.defaultProps = {
	  type: 'button'
	};
	exports.default = (0, _injectTooltip2.default)(IconButton);

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.bem = exports.Version = exports.Tooltipped = exports.injectTooltip = exports.Toolbar = exports.TextField = exports.TabPanel = exports.MenuTab = exports.Tab = exports.Tabs = exports.TabsContainer = exports.Subheader = exports.SVGIcon = exports.Snackbar = exports.Slider = exports.SelectField = exports.Switch = exports.Radio = exports.Checkbox = exports.SelectionControlGroup = exports.SelectionControl = exports.LinearProgress = exports.CircularProgress = exports.TimePicker = exports.DatePicker = exports.Paper = exports.NavigationDrawer = exports.MenuButton = exports.DropdownMenu = exports.Menu = exports.MediaOverlay = exports.Media = exports.ListItemControl = exports.ListItem = exports.List = exports.injectInk = exports.ResizeObserver = exports.Portal = exports.IconSeparator = exports.Layover = exports.FocusContainer = exports.Collapse = exports.AccessibleFakeInkedButton = exports.AccessibleFakeButton = exports.GridList = exports.Cell = exports.Grid = exports.FontIcon = exports.FileUpload = exports.FileInput = exports.ExpansionList = exports.ExpansionPanel = exports.Drawer = exports.Divider = exports.Dialog = exports.DialogContainer = exports.TableCardHeader = exports.DropdownMenuColumn = exports.MenuButtonColumn = exports.SelectFieldColumn = exports.EditDialogColumn = exports.TablePagination = exports.TableColumn = exports.TableRow = exports.TableFooter = exports.TableBody = exports.TableHeader = exports.DataTable = exports.Chip = exports.CardText = exports.CardTitle = exports.CardActions = exports.Card = exports.Button = exports.BottomNavigation = exports.Badge = exports.Avatar = exports.Autocomplete = undefined;

	var _Autocomplete2 = __webpack_require__(316);

	var _Autocomplete3 = _interopRequireDefault(_Autocomplete2);

	var _Avatar2 = __webpack_require__(371);

	var _Avatar3 = _interopRequireDefault(_Avatar2);

	var _Badge2 = __webpack_require__(373);

	var _Badge3 = _interopRequireDefault(_Badge2);

	var _BottomNavigation2 = __webpack_require__(374);

	var _BottomNavigation3 = _interopRequireDefault(_BottomNavigation2);

	var _Button2 = __webpack_require__(278);

	var _Button3 = _interopRequireDefault(_Button2);

	var _Card2 = __webpack_require__(244);

	var _Card3 = _interopRequireDefault(_Card2);

	var _CardActions2 = __webpack_require__(303);

	var _CardActions3 = _interopRequireDefault(_CardActions2);

	var _CardTitle2 = __webpack_require__(275);

	var _CardTitle3 = _interopRequireDefault(_CardTitle2);

	var _CardText2 = __webpack_require__(378);

	var _CardText3 = _interopRequireDefault(_CardText2);

	var _Chip2 = __webpack_require__(379);

	var _Chip3 = _interopRequireDefault(_Chip2);

	var _DataTable2 = __webpack_require__(380);

	var _DataTable3 = _interopRequireDefault(_DataTable2);

	var _TableHeader2 = __webpack_require__(383);

	var _TableHeader3 = _interopRequireDefault(_TableHeader2);

	var _TableBody2 = __webpack_require__(385);

	var _TableBody3 = _interopRequireDefault(_TableBody2);

	var _TableFooter2 = __webpack_require__(386);

	var _TableFooter3 = _interopRequireDefault(_TableFooter2);

	var _TableRow2 = __webpack_require__(387);

	var _TableRow3 = _interopRequireDefault(_TableRow2);

	var _TableColumn2 = __webpack_require__(395);

	var _TableColumn3 = _interopRequireDefault(_TableColumn2);

	var _TablePagination2 = __webpack_require__(396);

	var _TablePagination3 = _interopRequireDefault(_TablePagination2);

	var _EditDialogColumn2 = __webpack_require__(400);

	var _EditDialogColumn3 = _interopRequireDefault(_EditDialogColumn2);

	var _SelectFieldColumn2 = __webpack_require__(408);

	var _SelectFieldColumn3 = _interopRequireDefault(_SelectFieldColumn2);

	var _MenuButtonColumn2 = __webpack_require__(410);

	var _MenuButtonColumn3 = _interopRequireDefault(_MenuButtonColumn2);

	var _DropdownMenuColumn2 = __webpack_require__(414);

	var _DropdownMenuColumn3 = _interopRequireDefault(_DropdownMenuColumn2);

	var _TableCardHeader2 = __webpack_require__(415);

	var _TableCardHeader3 = _interopRequireDefault(_TableCardHeader2);

	var _DialogContainer2 = __webpack_require__(417);

	var _DialogContainer3 = _interopRequireDefault(_DialogContainer2);

	var _Dialog2 = __webpack_require__(402);

	var _Dialog3 = _interopRequireDefault(_Dialog2);

	var _Divider2 = __webpack_require__(370);

	var _Divider3 = _interopRequireDefault(_Divider2);

	var _Drawer2 = __webpack_require__(419);

	var _Drawer3 = _interopRequireDefault(_Drawer2);

	var _ExpansionPanel2 = __webpack_require__(424);

	var _ExpansionPanel3 = _interopRequireDefault(_ExpansionPanel2);

	var _ExpansionList2 = __webpack_require__(426);

	var _ExpansionList3 = _interopRequireDefault(_ExpansionList2);

	var _FileInput2 = __webpack_require__(427);

	var _FileInput3 = _interopRequireDefault(_FileInput2);

	var _FileUpload2 = __webpack_require__(428);

	var _FileUpload3 = _interopRequireDefault(_FileUpload2);

	var _FontIcon2 = __webpack_require__(254);

	var _FontIcon3 = _interopRequireDefault(_FontIcon2);

	var _Grid2 = __webpack_require__(429);

	var _Grid3 = _interopRequireDefault(_Grid2);

	var _Cell2 = __webpack_require__(431);

	var _Cell3 = _interopRequireDefault(_Cell2);

	var _GridList2 = __webpack_require__(432);

	var _GridList3 = _interopRequireDefault(_GridList2);

	var _AccessibleFakeButton2 = __webpack_require__(340);

	var _AccessibleFakeButton3 = _interopRequireDefault(_AccessibleFakeButton2);

	var _AccessibleFakeInkedButton2 = __webpack_require__(339);

	var _AccessibleFakeInkedButton3 = _interopRequireDefault(_AccessibleFakeInkedButton2);

	var _Collapse2 = __webpack_require__(259);

	var _Collapse3 = _interopRequireDefault(_Collapse2);

	var _FocusContainer2 = __webpack_require__(403);

	var _FocusContainer3 = _interopRequireDefault(_FocusContainer2);

	var _Layover2 = __webpack_require__(349);

	var _Layover3 = _interopRequireDefault(_Layover2);

	var _IconSeparator2 = __webpack_require__(284);

	var _IconSeparator3 = _interopRequireDefault(_IconSeparator2);

	var _Portal2 = __webpack_require__(375);

	var _Portal3 = _interopRequireDefault(_Portal2);

	var _ResizeObserver2 = __webpack_require__(357);

	var _ResizeObserver3 = _interopRequireDefault(_ResizeObserver2);

	var _injectInk2 = __webpack_require__(285);

	var _injectInk3 = _interopRequireDefault(_injectInk2);

	var _List2 = __webpack_require__(345);

	var _List3 = _interopRequireDefault(_List2);

	var _ListItem2 = __webpack_require__(338);

	var _ListItem3 = _interopRequireDefault(_ListItem2);

	var _ListItemControl2 = __webpack_require__(433);

	var _ListItemControl3 = _interopRequireDefault(_ListItemControl2);

	var _Media2 = __webpack_require__(307);

	var _Media3 = _interopRequireDefault(_Media2);

	var _MediaOverlay2 = __webpack_require__(308);

	var _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);

	var _Menu2 = __webpack_require__(348);

	var _Menu3 = _interopRequireDefault(_Menu2);

	var _DropdownMenu2 = __webpack_require__(412);

	var _DropdownMenu3 = _interopRequireDefault(_DropdownMenu2);

	var _MenuButton2 = __webpack_require__(411);

	var _MenuButton3 = _interopRequireDefault(_MenuButton2);

	var _NavigationDrawer2 = __webpack_require__(434);

	var _NavigationDrawer3 = _interopRequireDefault(_NavigationDrawer2);

	var _Paper2 = __webpack_require__(256);

	var _Paper3 = _interopRequireDefault(_Paper2);

	var _DatePickerContainer = __webpack_require__(440);

	var _DatePickerContainer2 = _interopRequireDefault(_DatePickerContainer);

	var _TimePickerContainer = __webpack_require__(464);

	var _TimePickerContainer2 = _interopRequireDefault(_TimePickerContainer);

	var _CircularProgress2 = __webpack_require__(304);

	var _CircularProgress3 = _interopRequireDefault(_CircularProgress2);

	var _LinearProgress2 = __webpack_require__(475);

	var _LinearProgress3 = _interopRequireDefault(_LinearProgress2);

	var _SelectionControl2 = __webpack_require__(390);

	var _SelectionControl3 = _interopRequireDefault(_SelectionControl2);

	var _SelectionControlGroup2 = __webpack_require__(476);

	var _SelectionControlGroup3 = _interopRequireDefault(_SelectionControlGroup2);

	var _Checkbox2 = __webpack_require__(478);

	var _Checkbox3 = _interopRequireDefault(_Checkbox2);

	var _Radio2 = __webpack_require__(479);

	var _Radio3 = _interopRequireDefault(_Radio2);

	var _Switch2 = __webpack_require__(480);

	var _Switch3 = _interopRequireDefault(_Switch2);

	var _SelectField2 = __webpack_require__(397);

	var _SelectField3 = _interopRequireDefault(_SelectField2);

	var _Slider2 = __webpack_require__(481);

	var _Slider3 = _interopRequireDefault(_Slider2);

	var _SnackbarContainer = __webpack_require__(491);

	var _SnackbarContainer2 = _interopRequireDefault(_SnackbarContainer);

	var _SVGIcon2 = __webpack_require__(494);

	var _SVGIcon3 = _interopRequireDefault(_SVGIcon2);

	var _Subheader2 = __webpack_require__(347);

	var _Subheader3 = _interopRequireDefault(_Subheader2);

	var _TabsContainer2 = __webpack_require__(495);

	var _TabsContainer3 = _interopRequireDefault(_TabsContainer2);

	var _Tabs2 = __webpack_require__(520);

	var _Tabs3 = _interopRequireDefault(_Tabs2);

	var _Tab2 = __webpack_require__(524);

	var _Tab3 = _interopRequireDefault(_Tab2);

	var _MenuTab2 = __webpack_require__(522);

	var _MenuTab3 = _interopRequireDefault(_MenuTab2);

	var _TabPanel2 = __webpack_require__(519);

	var _TabPanel3 = _interopRequireDefault(_TabPanel2);

	var _TextField2 = __webpack_require__(359);

	var _TextField3 = _interopRequireDefault(_TextField2);

	var _Toolbar2 = __webpack_require__(435);

	var _Toolbar3 = _interopRequireDefault(_Toolbar2);

	var _injectTooltip2 = __webpack_require__(299);

	var _injectTooltip3 = _interopRequireDefault(_injectTooltip2);

	var _Tooltipped2 = __webpack_require__(525);

	var _Tooltipped3 = _interopRequireDefault(_Tooltipped2);

	var _Version2 = __webpack_require__(526);

	var _Version3 = _interopRequireDefault(_Version2);

	var _bem2 = __webpack_require__(430);

	var _bem3 = _interopRequireDefault(_bem2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.Autocomplete = _Autocomplete3.default;
	exports.Avatar = _Avatar3.default;
	exports.Badge = _Badge3.default;
	exports.BottomNavigation = _BottomNavigation3.default;
	exports.Button = _Button3.default;
	exports.Card = _Card3.default;
	exports.CardActions = _CardActions3.default;
	exports.CardTitle = _CardTitle3.default;
	exports.CardText = _CardText3.default;
	exports.Chip = _Chip3.default;
	exports.DataTable = _DataTable3.default;
	exports.TableHeader = _TableHeader3.default;
	exports.TableBody = _TableBody3.default;
	exports.TableFooter = _TableFooter3.default;
	exports.TableRow = _TableRow3.default;
	exports.TableColumn = _TableColumn3.default;
	exports.TablePagination = _TablePagination3.default;
	exports.EditDialogColumn = _EditDialogColumn3.default;
	exports.SelectFieldColumn = _SelectFieldColumn3.default;
	exports.MenuButtonColumn = _MenuButtonColumn3.default;
	exports.DropdownMenuColumn = _DropdownMenuColumn3.default;
	exports.TableCardHeader = _TableCardHeader3.default;
	exports.DialogContainer = _DialogContainer3.default;
	exports.Dialog = _Dialog3.default;
	exports.Divider = _Divider3.default;
	exports.Drawer = _Drawer3.default;
	exports.ExpansionPanel = _ExpansionPanel3.default;
	exports.ExpansionList = _ExpansionList3.default;
	exports.FileInput = _FileInput3.default;
	exports.FileUpload = _FileUpload3.default;
	exports.FontIcon = _FontIcon3.default;
	exports.Grid = _Grid3.default;
	exports.Cell = _Cell3.default;
	exports.GridList = _GridList3.default;
	exports.AccessibleFakeButton = _AccessibleFakeButton3.default;
	exports.AccessibleFakeInkedButton = _AccessibleFakeInkedButton3.default;
	exports.Collapse = _Collapse3.default;
	exports.FocusContainer = _FocusContainer3.default;
	exports.Layover = _Layover3.default;
	exports.IconSeparator = _IconSeparator3.default;
	exports.Portal = _Portal3.default;
	exports.ResizeObserver = _ResizeObserver3.default;
	exports.injectInk = _injectInk3.default;
	exports.List = _List3.default;
	exports.ListItem = _ListItem3.default;
	exports.ListItemControl = _ListItemControl3.default;
	exports.Media = _Media3.default;
	exports.MediaOverlay = _MediaOverlay3.default;
	exports.Menu = _Menu3.default;
	exports.DropdownMenu = _DropdownMenu3.default;
	exports.MenuButton = _MenuButton3.default;
	exports.NavigationDrawer = _NavigationDrawer3.default;
	exports.Paper = _Paper3.default;
	exports.DatePicker = _DatePickerContainer2.default;
	exports.TimePicker = _TimePickerContainer2.default;
	exports.CircularProgress = _CircularProgress3.default;
	exports.LinearProgress = _LinearProgress3.default;
	exports.SelectionControl = _SelectionControl3.default;
	exports.SelectionControlGroup = _SelectionControlGroup3.default;
	exports.Checkbox = _Checkbox3.default;
	exports.Radio = _Radio3.default;
	exports.Switch = _Switch3.default;
	exports.SelectField = _SelectField3.default;
	exports.Slider = _Slider3.default;
	exports.Snackbar = _SnackbarContainer2.default;
	exports.SVGIcon = _SVGIcon3.default;
	exports.Subheader = _Subheader3.default;
	exports.TabsContainer = _TabsContainer3.default;
	exports.Tabs = _Tabs3.default;
	exports.Tab = _Tab3.default;
	exports.MenuTab = _MenuTab3.default;
	exports.TabPanel = _TabPanel3.default;
	exports.TextField = _TextField3.default;
	exports.Toolbar = _Toolbar3.default;
	exports.injectTooltip = _injectTooltip3.default;
	exports.Tooltipped = _Tooltipped3.default;
	exports.Version = _Version3.default;
	exports.bem = _bem3.default;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _CSSTransitionGroup = __webpack_require__(317);

	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _omit = __webpack_require__(326);

	var _omit2 = _interopRequireDefault(_omit);

	var _findIgnoreCase = __webpack_require__(327);

	var _findIgnoreCase2 = _interopRequireDefault(_findIgnoreCase);

	var _fuzzyFilter = __webpack_require__(328);

	var _fuzzyFilter2 = _interopRequireDefault(_fuzzyFilter);

	var _caseInsensitiveFilter = __webpack_require__(329);

	var _caseInsensitiveFilter2 = _interopRequireDefault(_caseInsensitiveFilter);

	var _getTextWidth = __webpack_require__(330);

	var _getTextWidth2 = _interopRequireDefault(_getTextWidth);

	var _oneRequiredForA11y = __webpack_require__(331);

	var _oneRequiredForA11y2 = _interopRequireDefault(_oneRequiredForA11y);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _invalidIf = __webpack_require__(282);

	var _invalidIf2 = _interopRequireDefault(_invalidIf);

	var _keyCodes = __webpack_require__(279);

	var _anchorShape = __webpack_require__(332);

	var _anchorShape2 = _interopRequireDefault(_anchorShape);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _positionShape = __webpack_require__(336);

	var _positionShape2 = _interopRequireDefault(_positionShape);

	var _ListItem = __webpack_require__(338);

	var _ListItem2 = _interopRequireDefault(_ListItem);

	var _Menu = __webpack_require__(348);

	var _Menu2 = _interopRequireDefault(_Menu);

	var _TextField = __webpack_require__(359);

	var _TextField2 = _interopRequireDefault(_TextField);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Autocomplete` component is useful for presenting real-time suggestions, completions,
	 * or filtering.
	 */
	var Autocomplete = function (_PureComponent) {
	  _inherits(Autocomplete, _PureComponent);

	  function Autocomplete(props) {
	    _classCallCheck(this, Autocomplete);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var defaultValue = props.defaultValue,
	        data = props.data,
	        dataLabel = props.dataLabel,
	        filter = props.filter;


	    var matches = [];
	    if (defaultValue && filter) {
	      matches = filter(data, defaultValue, dataLabel);
	    } else if (!filter) {
	      matches = data;
	    }

	    _this.state = {
	      value: defaultValue,
	      matches: matches,
	      visible: false,
	      matchIndex: -1,
	      manualFocus: false,
	      suggestion: '',
	      suggestionIndex: -1
	    };
	    return _this;
	  }

	  Autocomplete.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var nextValue = nextProps.value,
	        data = nextProps.data,
	        filter = nextProps.filter,
	        dataLabel = nextProps.dataLabel;

	    var dataDiff = data !== this.props.data;
	    if (nextValue !== this.props.value || dataDiff) {
	      var _state = this.state,
	          visible = _state.visible,
	          matches = _state.matches;

	      var value = (0, _getField2.default)(nextProps, this.state, 'value');

	      if (filter) {
	        matches = filter(data, value, dataLabel);
	      } else if (dataDiff) {
	        matches = data;
	      }

	      if (this.state.focus) {
	        visible = !!matches.length;
	      }

	      this.setState({ matches: matches, visible: visible });
	    }
	  };

	  Autocomplete.prototype.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {
	    if (this.state.visible !== nextState.visible) {
	      var menuFn = nextProps['onMenu' + (nextState.visible ? 'Open' : 'Close')];
	      if (menuFn) {
	        menuFn();
	      }
	    }
	  };

	  /**
	   * Gets the current value from the text field. This is used when you have an uncontrolled
	   * text field and simply need the value from a ref callback.
	   *
	   * @return {String} the text field's value
	   */


	  Autocomplete.prototype.render = function render() {
	    var _state2 = this.state,
	        visible = _state2.visible,
	        matches = _state2.matches,
	        tabbed = _state2.tabbed,
	        focus = _state2.focus,
	        suggestionStyle = _state2.suggestionStyle;

	    var _props = this.props,
	        fullWidth = _props.fullWidth,
	        block = _props.block,
	        style = _props.style,
	        className = _props.className,
	        listStyle = _props.listStyle,
	        listClassName = _props.listClassName,
	        textFieldStyle = _props.textFieldStyle,
	        textFieldClassName = _props.textFieldClassName,
	        inlineSuggestionStyle = _props.inlineSuggestionStyle,
	        inlineSuggestionClassName = _props.inlineSuggestionClassName,
	        menuId = _props.menuId,
	        inline = _props.inline,
	        anchor = _props.anchor,
	        belowAnchor = _props.belowAnchor,
	        position = _props.position,
	        fixedTo = _props.fixedTo,
	        listId = _props.listId,
	        listInline = _props.listInline,
	        listZDepth = _props.listZDepth,
	        listHeightRestricted = _props.listHeightRestricted,
	        xThreshold = _props.xThreshold,
	        yThreshold = _props.yThreshold,
	        closeOnOutsideClick = _props.closeOnOutsideClick,
	        transitionName = _props.transitionName,
	        transitionEnterTimeout = _props.transitionEnterTimeout,
	        transitionLeaveTimeout = _props.transitionLeaveTimeout,
	        centered = _props.centered,
	        sameWidth = _props.sameWidth,
	        repositionOnScroll = _props.repositionOnScroll,
	        repositionOnResize = _props.repositionOnResize,
	        simplifiedMenu = _props.simplifiedMenu,
	        minLeft = _props.minLeft,
	        minRight = _props.minRight,
	        minBottom = _props.minBottom,
	        fillViewportWidth = _props.fillViewportWidth,
	        fillViewportHeight = _props.fillViewportHeight,
	        propValue = _props.value,
	        total = _props.total,
	        offset = _props.offset,
	        filter = _props.filter,
	        data = _props.data,
	        dataLabel = _props.dataLabel,
	        dataValue = _props.dataValue,
	        deleteKeys = _props.deleteKeys,
	        defaultValue = _props.defaultValue,
	        clearOnAutocomplete = _props.clearOnAutocomplete,
	        autocompleteWithLabel = _props.autocompleteWithLabel,
	        findInlineSuggestion = _props.findInlineSuggestion,
	        inlineSuggestionPadding = _props.inlineSuggestionPadding,
	        onAutocomplete = _props.onAutocomplete,
	        onMenuOpen = _props.onMenuOpen,
	        onMenuClose = _props.onMenuClose,
	        onBlur = _props.onBlur,
	        onFocus = _props.onFocus,
	        onKeyDown = _props.onKeyDown,
	        onMouseDown = _props.onMouseDown,
	        onChange = _props.onChange,
	        props = _objectWithoutProperties(_props, ['fullWidth', 'block', 'style', 'className', 'listStyle', 'listClassName', 'textFieldStyle', 'textFieldClassName', 'inlineSuggestionStyle', 'inlineSuggestionClassName', 'menuId', 'inline', 'anchor', 'belowAnchor', 'position', 'fixedTo', 'listId', 'listInline', 'listZDepth', 'listHeightRestricted', 'xThreshold', 'yThreshold', 'closeOnOutsideClick', 'transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'centered', 'sameWidth', 'repositionOnScroll', 'repositionOnResize', 'simplifiedMenu', 'minLeft', 'minRight', 'minBottom', 'fillViewportWidth', 'fillViewportHeight', 'value', 'total', 'offset', 'filter', 'data', 'dataLabel', 'dataValue', 'deleteKeys', 'defaultValue', 'clearOnAutocomplete', 'autocompleteWithLabel', 'findInlineSuggestion', 'inlineSuggestionPadding', 'onAutocomplete', 'onMenuOpen', 'onMenuClose', 'onBlur', 'onFocus', 'onKeyDown', 'onMouseDown', 'onChange']);

	    delete props.focusInputOnAutocomplete;

	    var value = (0, _getField2.default)(this.props, this.state, 'value');

	    var autocomplete = _react2.default.createElement(_TextField2.default, _extends({}, props, {
	      'aria-autocomplete': inline ? 'inline' : 'list',
	      style: textFieldStyle,
	      className: (0, _classnames2.default)('md-autocomplete', textFieldClassName),
	      key: 'autocomplete',
	      ref: this._setField,
	      value: value,
	      onKeyDown: this._handleTextFieldKeyDown,
	      onMouseDown: this._toggleMenu,
	      onChange: this._handleChange,
	      onFocus: this._handleFocus,
	      onBlur: this._handleBlur,
	      fullWidth: fullWidth,
	      block: block
	    }));

	    if (inline) {
	      var suggestion = void 0;
	      if (focus && this.state.suggestion) {
	        suggestion = _react2.default.createElement(
	          'span',
	          {
	            key: 'suggestion',
	            style: _extends({}, suggestionStyle, inlineSuggestionStyle),
	            className: (0, _classnames2.default)('md-autocomplete-suggestion', {
	              'md-autocomplete-suggestion--floating': props.label,
	              'md-autocomplete-suggestion--block': block
	            }, inlineSuggestionClassName)
	          },
	          this.state.suggestion
	        );
	      }

	      return _react2.default.createElement(
	        _CSSTransitionGroup2.default,
	        {
	          component: 'div',
	          style: style,
	          className: (0, _classnames2.default)('md-menu-container md-autocomplete-container', className, {
	            'md-full-width': fullWidth || block
	          }),
	          transitionName: 'opacity',
	          transitionEnterTimeout: 150,
	          transitionLeave: !tabbed,
	          transitionLeaveTimeout: 150,
	          onTouchStart: this._handleTouchStart
	        },
	        autocomplete,
	        suggestion
	      );
	    }

	    return _react2.default.createElement(
	      _Menu2.default,
	      {
	        id: menuId || props.id + '-menu',
	        listId: listId,
	        ref: this._setMenu,
	        toggle: autocomplete,
	        visible: visible,
	        onClick: this._handleClick,
	        onClose: this._close,
	        onKeyDown: this._handleMenuKeyDown,
	        simplified: simplifiedMenu,
	        sameWidth: sameWidth,
	        centered: centered,
	        anchor: anchor,
	        belowAnchor: belowAnchor,
	        position: position,
	        fixedTo: fixedTo,
	        listInline: listInline,
	        listZDepth: listZDepth,
	        listHeightRestricted: listHeightRestricted,
	        xThreshold: xThreshold,
	        yThreshold: yThreshold,
	        closeOnOutsideClick: closeOnOutsideClick,
	        transitionName: transitionName,
	        transitionEnterTimeout: transitionEnterTimeout,
	        transitionLeaveTimeout: transitionLeaveTimeout,
	        fullWidth: fullWidth || block,
	        style: style,
	        className: (0, _classnames2.default)('md-autocomplete-container', className),
	        listStyle: listStyle,
	        listClassName: (0, _classnames2.default)('md-autocomplete-list', listClassName),
	        repositionOnScroll: repositionOnScroll,
	        repositionOnResize: repositionOnResize,
	        minLeft: minLeft,
	        minRight: minRight,
	        minBottom: minBottom,
	        fillViewportWidth: fillViewportWidth,
	        fillViewportHeight: fillViewportHeight
	      },
	      matches.map(this._mapToListItem)
	    );
	  };

	  _createClass(Autocomplete, [{
	    key: 'value',
	    get: function get() {
	      return (0, _getField2.default)(this.props, this.state, 'value');
	    }

	    /**
	     * Just check if the click target is in a list item.. if it is, autocomplete the text field
	     * with that item.
	     */


	    /**
	     * The `mousedown` event is used instead of `click` because of the order
	     * of the `mousedown`, `focus`, and `click` events.
	     */


	    /**
	     * Allows touch devices to autocomplete the inline view by tapping:
	     * - the suggestion text
	     * - the text field IF there is a suggestion visible
	     */

	  }]);

	  return Autocomplete;
	}(_react.PureComponent);

	Autocomplete.HorizontalAnchors = _Menu2.default.HorizontalAnchors;
	Autocomplete.VerticalAnchors = _Menu2.default.VerticalAnchors;
	Autocomplete.Positions = _Menu2.default.Positions;
	Autocomplete.fuzzyFilter = _fuzzyFilter2.default;
	Autocomplete.caseInsensitiveFilter = _caseInsensitiveFilter2.default;
	Autocomplete.findIgnoreCase = _findIgnoreCase2.default;
	Autocomplete.propTypes = {
	  /**
	   * An id to give the autocomplete. Either this or the `menuId` is required for accessibility.
	   *
	   * @see {@link #menuId}
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * The menu id to provide to the autocomplete. Either this prop or the `id` prop is required. If
	   * this props is omitted, the menuId will become: `${id}-menu`
	   */
	  menuId: (0, _oneRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), 'id'),

	  /**
	   * An optional id to provide to the menu's list.
	   *
	   * @see {@link Menus/Menu#listId}
	   */
	  listId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the menu that contains the autocomplete.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the menu that contains the autocomplete.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the autocomplete's text field.
	   */
	  textFieldStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the autocomplete's text field.
	   */
	  textFieldClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the autocomplete's text field input itself.
	   */
	  inputStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the autocomplete's input field itself.
	   */
	  inputClassName: _propTypes2.default.string,

	  /**
	   * The optional style to apply to the opened menu List if the
	   * `Autocomplete` is not using `inline` suggestions.
	   */
	  listStyle: _propTypes2.default.object,

	  /**
	   * The optional className to apply to the opened menu List if the
	   * `Autocomplete` is not using `inline` suggestions.
	   */
	  listClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the inline suggestion when using `inline` mode.
	   */
	  inlineSuggestionStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the inline suggestion when using `inline` mode.
	   */
	  inlineSuggestionClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the autocomplete is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * A label to display with the autocomplete.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * An optional value to use for the text field. This will force this component
	   * to be controlled and require the `onChange` function.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]), 'onChange'),

	  /**
	   * The default value for the autocomplete's text field.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

	  /**
	   * An object key to use to extract the text to be compared for filtering.
	   * This will only be applied if the given `data` prop is an array of objects.
	   */
	  dataLabel: _propTypes2.default.string.isRequired,

	  /**
	   * An optional object key to use to extract the `value` of the given `data` prop.
	   * This is really only used with generating a unique react key. The unique react
	   * key with either be:
	   * - the datum if it is a string or number
	   * - the `key` attribute of the datum object
	   * - the `datum[dataValue]`
	   * - or the `datum[dataLabel]`
	   */
	  dataValue: _propTypes2.default.string,

	  /**
	   * A single key or an array of keys to delete from your data object before passing
	   * to the `ListItem` component.
	   */
	  deleteKeys: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),

	  /**
	   * The data that will be used for autocomplete suggestions. This can either be
	   * an array of string, number, or object. If it is an array of objects, the key
	   * `dataLabel` is required.
	   *
	   * ```docgen
	   * PropTypes.arrayOf(PropTypes.oneOfType([
	   *   PropTypes.element,
	   *   PropTypes.string,
	   *   PropTypes.number,
	   *   PropTypes.shape({
	   *     [dataLabel]: PropTypes.oneOfType([
	   *       PropTypes.string,
	   *       PropTypes.number,
	   *       PropTypes.node,
	   *     ]).isRequired,
	   *   }),
	   * ])).isRequired
	   * ```
	   */
	  data: function data(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }

	    var _PropTypes$arrayOf, _PropTypes$shape;

	    var dataLabel = props.dataLabel;

	    return (_PropTypes$arrayOf = _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.shape((_PropTypes$shape = {}, _PropTypes$shape[dataLabel] = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.node]).isRequired, _PropTypes$shape))]))).isRequired.apply(_PropTypes$arrayOf, [props, propName, component].concat(others));
	  },

	  /**
	   * An optional number representing the total number of results in the `data` prop.
	   * This should really only be used when the data is paginated. When this is set,
	   * each item in the suggestion menu will be updated with the `aria-setsize` and
	   * `aria-posinset`.
	   *
	   * @see {@link #offset}
	   */
	  total: (0, _invalidIf2.default)(_propTypes2.default.number, 'inline'),

	  /**
	   * An optional number representing the data's offset if the results were paginated.
	   * This is used for accessibility with the `aria-posinset` attribute.
	   *
	   * @see {@link #total}
	   */
	  offset: _propTypes2.default.number.isRequired,

	  /**
	   * An optional function to use to filter the `data`. If you have a sexy backend
	   * using solr or some other search/indexer, it is recommended to set this prop to
	   * `null`.
	   */
	  filter: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `Autocomplete`'s text field has a `keydown` event.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `Autocomplete`'s text field has a `mousedown` event.
	   */
	  onMouseDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `Autocomplete`'s text field value changes.
	   * The callback will be given the new value and the change event.
	   *
	   * `onChange(textFeldValue, event)`
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `Autocomplete`'s text field is focused.
	   */
	  onFocus: _propTypes2.default.func,

	  /**
	   * An optional function to call when the entire `Autocomplete` component is blurred.
	   * This will be triggered when the window is clicked or when a user tabs away from
	   * the autocomplete.
	   */
	  onBlur: _propTypes2.default.func,

	  /**
	   * Boolean if this text field should be styled as a full width text field.
	   * Floating labels and the text field indicator will be removed automatically.
	   */
	  block: _propTypes2.default.bool,

	  /**
	   * Boolean if the autocomplete should span the entire width.
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * Boolean if the `Autocomplete` should display suggestions inline instead
	   * of in a `Menu`.
	   */
	  inline: _propTypes2.default.bool,

	  /**
	   * The amount of padding to use between the current text and the inline suggestion text.
	   */
	  inlineSuggestionPadding: _propTypes2.default.number.isRequired,

	  /**
	   * The function to call to find a suggestion for an inline autocomplete. This function
	   * expects to return a single result of a number or a string.
	   *
	   * ```js
	   * @param {Array<Object|String|Number>} data - The data prop to search.
	   * @param {String} value - The current value to use for searching.
	   * @param {String} dataLabel - The `dataLabel` prop to use if a datum is an object.
	   * @return {String|Number} the found suggestion or false-ish
	   * ```
	   */
	  findInlineSuggestion: _propTypes2.default.func,

	  /**
	   * An optional function to call when an autocomplete suggestion is clicked either
	   * by using the mouse, the enter/space key, or touch. The match index and current
	   * `dataLabel` will be given back.
	   *
	   * `onAutocomplete(suggestion, suggestionIndex, matches);`
	   *
	   * @see {@link #autocompleteWithLabel}
	   */
	  onAutocomplete: _propTypes2.default.func,

	  /**
	   * Boolean if the `onAutocomplete` should attempt send the `suggestion[dataLabel]` instead
	   * of `suggestion[dataValue]` when the data is an object.
	   *
	   * @see {@link #onAutocomplete}
	   */
	  autocompleteWithLabel: _propTypes2.default.bool,

	  /**
	   * A boolean if the text field's value should be reset to the empty string when
	   * an item is auto-completed. This is useful if you do not want a fully controlled
	   * component and the values are stored outside of the `TextField`. (like `Chips`).
	   */
	  clearOnAutocomplete: _propTypes2.default.bool,

	  /**
	   * An optional function to call when the `Autocomplete` suggestion menu opens.
	   */
	  onMenuOpen: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `Autocomplete` suggestion menu closes.
	   */
	  onMenuClose: _propTypes2.default.func,

	  /**
	   * This prop is used for disabling the browser's default autocomplete suggestions
	   * of previously typed values in the text field. By default, this is disabled.
	   */
	  autoComplete: _propTypes2.default.oneOf(['on', 'off']),

	  /**
	   * Boolean if the `input` should be focused again after a suggestion was clicked.
	   *
	   * This is really only added for keyboard support and the fact that each of suggestions
	   * are focusable.
	   */
	  focusInputOnAutocomplete: _propTypes2.default.bool,

	  /**
	   * This is how the menu's `List` gets anchored to the `toggle` element.
	   *
	   * @see {@link Helpers/Layover#anchor}
	   */
	  anchor: _anchorShape2.default,

	  /**
	   * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.
	   *
	   * @see {@link Helpers/Layover#belowAnchor}
	   */
	  belowAnchor: _anchorShape2.default,

	  /**
	   * This is the animation position for the list that appears.
	   *
	   * @see {@link Helpers/Layover#animationPosition}
	   */
	  position: _positionShape2.default,

	  /**
	   * This is how the menu's list will be "fixed" to the `toggle` component.
	   *
	   * @see {@link Helpers/Layover#fixedTo}
	   */
	  fixedTo: _fixedToShape2.default,

	  /**
	   * Boolean if the menu's list should appear horizontally instead of vertically.
	   */
	  listInline: _propTypes2.default.bool,

	  /**
	   * The list's z-depth for applying box shadow. This should be a number from 0 to 5.
	   */
	  listZDepth: _propTypes2.default.number,

	  /**
	   * Boolean if the list should have its height restricted to the `$md-menu-mobile-max-height`/
	   * `$md-menu-desktop-max-height` values.
	   *
	   * @see [md-menu-mobile-max-height](/components/menus?tab=2#variable-md-menu-mobile-max-height)
	   * @see [md-menu-desktop-max-height](/components/menus?tab=2#variable-md-menu-desktop-max-height)
	   */
	  listHeightRestricted: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#xThreshold}
	   */
	  xThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#yThreshold}
	   */
	  yThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#closeOnOutsideClick}
	   */
	  closeOnOutsideClick: _propTypes2.default.bool,

	  /**
	   * An optional transition name to use for the list appearing/disappearing.
	   *
	   * @see {@link Helpers/Layover#transitionName}
	   */
	  transitionName: _propTypes2.default.string,

	  /**
	   * @see {@link Helpers/Layover#transitionEnterTimeout}
	   */
	  transitionEnterTimeout: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#transitionLeaveTimeout}
	   */
	  transitionLeaveTimeout: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#centered}
	   */
	  centered: _Menu2.default.propTypes.centered,

	  /**
	   * @see {@link Helpers/Layover#sameWidth}
	   */
	  sameWidth: _Menu2.default.propTypes.sameWidth,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the `fixedTo` element scrolls.
	   *
	   * @see {@link Helpers/Layover#repositionOnScroll}
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the window resizes.
	   *
	   * @see {@link Helpers/Layover#repositionOnResize}
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu logic should be simplified without any viewport logic and position
	   * based on the relative position of the menu. This will most like require some additional
	   * styles applied to the menu.
	   *
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplifiedMenu: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#minLeft}
	   */
	  minLeft: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#minRight}
	   */
	  minRight: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#minBottom}
	   */
	  minBottom: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#fillViewportWidth}
	   */
	  fillViewportWidth: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#fillViewportHeight}
	   */
	  fillViewportHeight: _propTypes2.default.bool,

	  /**
	   * @see {@link TextFields#toolbar}
	   */
	  toolbar: _propTypes2.default.bool
	};
	Autocomplete.defaultProps = {
	  autocompleteWithLabel: false,
	  position: _Menu2.default.Positions.BELOW,
	  sameWidth: true,
	  offset: 0,
	  fullWidth: true,
	  defaultValue: '',
	  dataLabel: 'primaryText',
	  filter: Autocomplete.fuzzyFilter,
	  findInlineSuggestion: Autocomplete.findIgnoreCase,
	  autoComplete: 'off',
	  repositionOnScroll: true,
	  repositionOnResize: true,
	  inlineSuggestionPadding: 6
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._close = function (e) {
	    if (_this2.props.onBlur) {
	      _this2.props.onBlur(e);
	    }

	    _this2.setState({ visible: false });
	  };

	  this._handleChange = function (value, event) {
	    var _props2 = _this2.props,
	        onChange = _props2.onChange,
	        filter = _props2.filter,
	        findInlineSuggestion = _props2.findInlineSuggestion,
	        data = _props2.data,
	        dataLabel = _props2.dataLabel,
	        inline = _props2.inline;


	    if (onChange) {
	      onChange(value, event);
	    }

	    if (inline) {
	      // If findInlineSuggestion does not exist, assume that `onChange` will handle it.
	      return findInlineSuggestion ? _this2._findInlineSuggestions(value) : null;
	    }

	    var visible = _this2.state.visible;

	    var matches = value || !filter ? _this2.state.matches : [];
	    if (value && filter) {
	      matches = filter(data, value, dataLabel);
	    }

	    if (filter) {
	      visible = !!matches.length;
	    }

	    return _this2.setState({ matches: matches, visible: visible, value: value });
	  };

	  this._handleFocus = function (e) {
	    if (_this2.props.onFocus) {
	      _this2.props.onFocus(e);
	    }

	    var value = e.target.value;

	    if (_this2.props.inline && value) {
	      if (_this2.props.findInlineSuggestion) {
	        _this2._findInlineSuggestions(value);
	      }

	      return;
	    }

	    _this2.setState({
	      matchIndex: -1,
	      visible: !_this2.state.manualFocus && !!value && !!_this2.state.matches.length,
	      manualFocus: false,
	      focus: true
	    });
	  };

	  this._handleBlur = function (e) {
	    if (_this2.props.inline || !_this2.state.matches.length) {
	      if (_this2.props.onBlur) {
	        _this2.props.onBlur(e);
	      }
	    }

	    _this2.setState({ focus: false });
	  };

	  this._handleInlineAutocomplete = function () {
	    var _state3 = _this2.state,
	        suggestionIndex = _state3.suggestionIndex,
	        matches = _state3.matches;

	    if (suggestionIndex === -1) {
	      return;
	    }

	    var _props3 = _this2.props,
	        data = _props3.data,
	        dataLabel = _props3.dataLabel,
	        dataValue = _props3.dataValue,
	        label = _props3.autocompleteWithLabel,
	        onAutocomplete = _props3.onAutocomplete;


	    var value = data[suggestionIndex];
	    if (onAutocomplete) {
	      var v = value;
	      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	        if (!label) {
	          v = value[dataValue];
	        } else {
	          v = value[dataLabel];
	        }
	      }

	      onAutocomplete(v, suggestionIndex, matches);
	    }

	    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	      value = value[dataLabel];
	    }

	    _this2.setState({
	      value: value,
	      suggestion: '',
	      suggestionIndex: -1,
	      tabbed: true
	    });
	  };

	  this._handleTextFieldKeyDown = function (e) {
	    var _props4 = _this2.props,
	        inline = _props4.inline,
	        onKeyDown = _props4.onKeyDown;
	    var suggestionIndex = _this2.state.suggestionIndex;


	    var key = e.which || e.keyCode;
	    if (onKeyDown) {
	      onKeyDown(e);
	    }

	    if (inline && key === _keyCodes.TAB && suggestionIndex !== -1) {
	      // Autocomplete the text field
	      e.preventDefault();
	      _this2._handleInlineAutocomplete();
	    }
	  };

	  this._handleMenuKeyDown = function (e) {
	    var key = e.which || e.keyCode;
	    if (key === _keyCodes.TAB) {
	      if (_this2.props.onBlur) {
	        _this2.props.onBlur(e);
	      }

	      _this2.setState({ visible: false });
	    } else if (key === _keyCodes.UP || key === _keyCodes.DOWN) {
	      _this2._focusSuggestion(key === _keyCodes.UP, e);
	    }
	  };

	  this._handleClick = function (e) {
	    var target = e.target;
	    while (_this2._menu && _this2._menu.contains(target)) {
	      if (target.classList.contains('md-list-item')) {
	        var items = target.parentNode.querySelectorAll('.md-list-item');
	        items = Array.prototype.slice.call(items);

	        return _this2._handleItemClick(items.indexOf(target));
	      }

	      target = target.parentNode;
	    }

	    return null;
	  };

	  this._handleItemClick = function (index) {
	    if (index === -1) {
	      return;
	    }

	    var matches = _this2.state.matches;
	    var _props5 = _this2.props,
	        data = _props5.data,
	        dataLabel = _props5.dataLabel,
	        dataValue = _props5.dataValue,
	        filter = _props5.filter,
	        onAutocomplete = _props5.onAutocomplete,
	        clearOnAutocomplete = _props5.clearOnAutocomplete,
	        focusInputOnAutocomplete = _props5.focusInputOnAutocomplete,
	        label = _props5.autocompleteWithLabel;


	    var value = matches.filter(function (m) {
	      return !_react2.default.isValidElement(m);
	    })[index];
	    if (onAutocomplete) {
	      var v = value;
	      if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object') {
	        if (!label) {
	          v = value[dataValue];
	        } else {
	          v = value[dataLabel];
	        }
	      }

	      onAutocomplete(v, index, matches);
	    }

	    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	      value = value[dataLabel];
	    }

	    value = clearOnAutocomplete ? '' : value;
	    var callback = void 0;
	    if (focusInputOnAutocomplete) {
	      callback = function callback() {
	        _this2._field.focus();
	      };
	    }

	    _this2.setState({
	      visible: false,
	      manualFocus: focusInputOnAutocomplete,
	      matches: filter ? filter(data, value, dataLabel) : matches,
	      value: value
	    }, callback);
	  };

	  this._focusSuggestion = function (negative, e) {
	    e.preventDefault();
	    var _state4 = _this2.state,
	        matchIndex = _state4.matchIndex,
	        matches = _state4.matches;

	    var l = matches.length;

	    var index = void 0;
	    if (negative && matchIndex === -1 || !negative && matchIndex >= l) {
	      return;
	    } else if (negative) {
	      index = matchIndex - 1;
	      if (index === -1) {
	        _this2._field.focus();
	      }
	    } else {
	      index = Math.min(l, matchIndex + 1);
	    }

	    if (index !== -1 && index !== matchIndex) {
	      var item = _this2._menu.querySelectorAll('.md-list-tile')[index];
	      if (item) {
	        item.focus();
	      }
	    }

	    _this2.setState({ matchIndex: index });
	  };

	  this._findInlineSuggestions = function (value) {
	    var _props6 = _this2.props,
	        data = _props6.data,
	        dataLabel = _props6.dataLabel,
	        findInlineSuggestion = _props6.findInlineSuggestion,
	        inlineSuggestionPadding = _props6.inlineSuggestionPadding;


	    var suggestion = findInlineSuggestion(data, value, dataLabel);
	    if ((typeof suggestion === 'undefined' ? 'undefined' : _typeof(suggestion)) === 'object') {
	      throw new Error('`findInlineSuggestion` should return a string or a number, but got an object.', suggestion);
	    }

	    var suggestionStyle = _this2.state.suggestionStyle;

	    var suggestionIndex = -1;
	    if (suggestion) {
	      // Find index of suggestion
	      data.some(function (datum, i) {
	        var d = (typeof dataum === 'undefined' ? 'undefined' : _typeof(dataum)) === 'object' ? datum[dataLabel] : datum;
	        if (d === suggestion) {
	          suggestionIndex = i;
	        }

	        return suggestionIndex !== -1;
	      });

	      // Strip already used letters
	      suggestion = suggestion.toString().substring(value.length, suggestion.length);

	      // Position the inline suggestion next to the text
	      var width = (0, _getTextWidth2.default)(value, _this2._field);
	      if (width !== null) {
	        width += inlineSuggestionPadding;
	      }

	      if (width !== null && (!suggestionStyle || suggestionStyle.left !== width)) {
	        suggestionStyle = { left: width };
	      }
	    }

	    _this2.setState({
	      value: value,
	      suggestion: suggestion,
	      suggestionIndex: suggestionIndex,
	      suggestionStyle: suggestionStyle,
	      tabbed: false,
	      focus: true
	    });
	  };

	  this._mapToListItem = function (match, i) {
	    if (_react2.default.isValidElement(match)) {
	      return match;
	    }

	    var _props7 = _this2.props,
	        dataLabel = _props7.dataLabel,
	        dataValue = _props7.dataValue,
	        deleteKeys = _props7.deleteKeys,
	        total = _props7.total,
	        offset = _props7.offset,
	        data = _props7.data;

	    var props = void 0;
	    switch (typeof match === 'undefined' ? 'undefined' : _typeof(match)) {
	      case 'string':
	      case 'number':
	        props = {
	          key: match,
	          primaryText: match
	        };
	        break;
	      default:
	        if (deleteKeys) {
	          props = (0, _omit2.default)(match, typeof deleteKeys === 'string' ? [deleteKeys] : deleteKeys);
	        } else {
	          props = match;
	        }

	        props = _extends({}, props, {
	          key: match.key || dataValue && match[dataValue] || match[dataLabel],
	          primaryText: match[dataLabel]
	        });
	    }

	    if (typeof total !== 'undefined' && data.length < total) {
	      props['aria-setsize'] = total;
	      props['aria-posinset'] = i + 1 + offset;
	    }

	    // Allows focus, but does not let tab focus. This is so up and down keys work.
	    return _react2.default.createElement(_ListItem2.default, _extends({ tabIndex: -1 }, props));
	  };

	  this._toggleMenu = function (e) {
	    if (_this2.props.onMouseDown) {
	      _this2.props.onMouseDown(e);
	    }

	    if (!_this2.props.inline && _this2.state.matches.length && (0, _getField2.default)(_this2.props, _this2.state, 'value')) {
	      _this2.setState({ visible: !_this2.state.visible });
	    }
	  };

	  this._handleTouchStart = function (e) {
	    var target = e.target;
	    var suggestion = _this2.state.suggestion;

	    if (target.classList.contains('md-autocomplete-suggestion') && suggestion) {
	      _this2._handleInlineAutocomplete();
	    }
	  };

	  this._setField = function (field) {
	    if (field) {
	      _this2._field = field.getField();
	    }
	  };

	  this._setMenu = function (menu) {
	    _this2._menu = (0, _reactDom.findDOMNode)(menu);
	  };
	};

	exports.default = Autocomplete;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _TransitionGroup = __webpack_require__(288);

	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

	var _CSSTransitionGroupChild = __webpack_require__(318);

	var _CSSTransitionGroupChild2 = _interopRequireDefault(_CSSTransitionGroupChild);

	var _PropTypes = __webpack_require__(325);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var propTypes = {
	  transitionName: _PropTypes.nameShape.isRequired,

	  transitionAppear: _propTypes2.default.bool,
	  transitionEnter: _propTypes2.default.bool,
	  transitionLeave: _propTypes2.default.bool,
	  transitionAppearTimeout: (0, _PropTypes.transitionTimeout)('Appear'),
	  transitionEnterTimeout: (0, _PropTypes.transitionTimeout)('Enter'),
	  transitionLeaveTimeout: (0, _PropTypes.transitionTimeout)('Leave')
	};

	var defaultProps = {
	  transitionAppear: false,
	  transitionEnter: true,
	  transitionLeave: true
	};

	var CSSTransitionGroup = function (_React$Component) {
	  _inherits(CSSTransitionGroup, _React$Component);

	  function CSSTransitionGroup() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, CSSTransitionGroup);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this._wrapChild = function (child) {
	      return _react2.default.createElement(_CSSTransitionGroupChild2.default, {
	        name: _this.props.transitionName,
	        appear: _this.props.transitionAppear,
	        enter: _this.props.transitionEnter,
	        leave: _this.props.transitionLeave,
	        appearTimeout: _this.props.transitionAppearTimeout,
	        enterTimeout: _this.props.transitionEnterTimeout,
	        leaveTimeout: _this.props.transitionLeaveTimeout
	      }, child);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  // We need to provide this childFactory so that
	  // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	  // leave while it is leaving.


	  CSSTransitionGroup.prototype.render = function render() {
	    return _react2.default.createElement(_TransitionGroup2.default, _extends({}, this.props, { childFactory: this._wrapChild }));
	  };

	  return CSSTransitionGroup;
	}(_react2.default.Component);

	CSSTransitionGroup.displayName = 'CSSTransitionGroup';


	CSSTransitionGroup.propTypes =  false ? propTypes : {};
	CSSTransitionGroup.defaultProps = defaultProps;

	exports.default = CSSTransitionGroup;
	module.exports = exports['default'];

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _addClass = __webpack_require__(319);

	var _addClass2 = _interopRequireDefault(_addClass);

	var _removeClass = __webpack_require__(321);

	var _removeClass2 = _interopRequireDefault(_removeClass);

	var _requestAnimationFrame = __webpack_require__(322);

	var _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);

	var _properties = __webpack_require__(324);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _PropTypes = __webpack_require__(325);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var events = [];
	if (_properties.transitionEnd) events.push(_properties.transitionEnd);
	if (_properties.animationEnd) events.push(_properties.animationEnd);

	function addEndListener(node, listener) {
	  if (events.length) {
	    events.forEach(function (e) {
	      return node.addEventListener(e, listener, false);
	    });
	  } else {
	    setTimeout(listener, 0);
	  }

	  return function () {
	    if (!events.length) return;
	    events.forEach(function (e) {
	      return node.removeEventListener(e, listener, false);
	    });
	  };
	}

	var propTypes = {
	  children: _propTypes2.default.node,
	  name: _PropTypes.nameShape.isRequired,

	  // Once we require timeouts to be specified, we can remove the
	  // boolean flags (appear etc.) and just accept a number
	  // or a bool for the timeout flags (appearTimeout etc.)
	  appear: _propTypes2.default.bool,
	  enter: _propTypes2.default.bool,
	  leave: _propTypes2.default.bool,
	  appearTimeout: _propTypes2.default.number,
	  enterTimeout: _propTypes2.default.number,
	  leaveTimeout: _propTypes2.default.number
	};

	var CSSTransitionGroupChild = function (_React$Component) {
	  _inherits(CSSTransitionGroupChild, _React$Component);

	  function CSSTransitionGroupChild() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, CSSTransitionGroupChild);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.componentWillAppear = function (done) {
	      if (_this.props.appear) {
	        _this.transition('appear', done, _this.props.appearTimeout);
	      } else {
	        done();
	      }
	    }, _this.componentWillEnter = function (done) {
	      if (_this.props.enter) {
	        _this.transition('enter', done, _this.props.enterTimeout);
	      } else {
	        done();
	      }
	    }, _this.componentWillLeave = function (done) {
	      if (_this.props.leave) {
	        _this.transition('leave', done, _this.props.leaveTimeout);
	      } else {
	        done();
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  CSSTransitionGroupChild.prototype.componentWillMount = function componentWillMount() {
	    this.classNameAndNodeQueue = [];
	    this.transitionTimeouts = [];
	  };

	  CSSTransitionGroupChild.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unmounted = true;

	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	    this.transitionTimeouts.forEach(function (timeout) {
	      clearTimeout(timeout);
	    });

	    this.classNameAndNodeQueue.length = 0;
	  };

	  CSSTransitionGroupChild.prototype.transition = function transition(animationType, finishCallback, timeout) {
	    var node = (0, _reactDom.findDOMNode)(this);

	    if (!node) {
	      if (finishCallback) {
	        finishCallback();
	      }
	      return;
	    }

	    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
	    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
	    var timer = null;
	    var removeListeners = void 0;

	    (0, _addClass2.default)(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClassAndNode(activeClassName, node);

	    // Clean-up the animation after the specified delay
	    var finish = function finish(e) {
	      if (e && e.target !== node) {
	        return;
	      }

	      clearTimeout(timer);
	      if (removeListeners) removeListeners();

	      (0, _removeClass2.default)(node, className);
	      (0, _removeClass2.default)(node, activeClassName);

	      if (removeListeners) removeListeners();

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    if (timeout) {
	      timer = setTimeout(finish, timeout);
	      this.transitionTimeouts.push(timer);
	    } else if (_properties.transitionEnd) {
	      removeListeners = addEndListener(node, finish);
	    }
	  };

	  CSSTransitionGroupChild.prototype.queueClassAndNode = function queueClassAndNode(className, node) {
	    var _this2 = this;

	    this.classNameAndNodeQueue.push({
	      className: className,
	      node: node
	    });

	    if (!this.rafHandle) {
	      this.rafHandle = (0, _requestAnimationFrame2.default)(function () {
	        return _this2.flushClassNameAndNodeQueue();
	      });
	    }
	  };

	  CSSTransitionGroupChild.prototype.flushClassNameAndNodeQueue = function flushClassNameAndNodeQueue() {
	    if (!this.unmounted) {
	      this.classNameAndNodeQueue.forEach(function (obj) {
	        // This is for to force a repaint,
	        // which is necessary in order to transition styles when adding a class name.
	        /* eslint-disable no-unused-expressions */
	        obj.node.scrollTop;
	        /* eslint-enable no-unused-expressions */
	        (0, _addClass2.default)(obj.node, obj.className);
	      });
	    }
	    this.classNameAndNodeQueue.length = 0;
	    this.rafHandle = null;
	  };

	  CSSTransitionGroupChild.prototype.render = function render() {
	    var props = _extends({}, this.props);
	    delete props.name;
	    delete props.appear;
	    delete props.enter;
	    delete props.leave;
	    delete props.appearTimeout;
	    delete props.enterTimeout;
	    delete props.leaveTimeout;
	    delete props.children;
	    return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), props);
	  };

	  return CSSTransitionGroupChild;
	}(_react2.default.Component);

	CSSTransitionGroupChild.displayName = 'CSSTransitionGroupChild';


	CSSTransitionGroupChild.propTypes =  false ? propTypes : {};

	exports.default = CSSTransitionGroupChild;
	module.exports = exports['default'];

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = addClass;

	var _hasClass = __webpack_require__(320);

	var _hasClass2 = _interopRequireDefault(_hasClass);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass2.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
	}
	module.exports = exports['default'];

/***/ }),
/* 320 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hasClass;
	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}
	module.exports = exports["default"];

/***/ }),
/* 321 */
/***/ (function(module, exports) {

	'use strict';

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}

	module.exports = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	};

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _inDOM = __webpack_require__(323);

	var _inDOM2 = _interopRequireDefault(_inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var vendors = ['', 'webkit', 'moz', 'o', 'ms'];
	var cancel = 'clearTimeout';
	var raf = fallback;
	var compatRaf = void 0;

	var getKey = function getKey(vendor, k) {
	  return vendor + (!vendor ? k : k[0].toUpperCase() + k.substr(1)) + 'AnimationFrame';
	};

	if (_inDOM2.default) {
	  vendors.some(function (vendor) {
	    var rafKey = getKey(vendor, 'request');

	    if (rafKey in window) {
	      cancel = getKey(vendor, 'cancel');
	      return raf = function raf(cb) {
	        return window[rafKey](cb);
	      };
	    }
	  });
	}

	/* https://github.com/component/raf */
	var prev = new Date().getTime();
	function fallback(fn) {
	  var curr = new Date().getTime(),
	      ms = Math.max(0, 16 - (curr - prev)),
	      req = setTimeout(fn, ms);

	  prev = curr;
	  return req;
	}

	compatRaf = function compatRaf(cb) {
	  return raf(cb);
	};
	compatRaf.cancel = function (id) {
	  window[cancel] && typeof window[cancel] === 'function' && window[cancel](id);
	};
	exports.default = compatRaf;
	module.exports = exports['default'];

/***/ }),
/* 323 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	module.exports = exports['default'];

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = undefined;

	var _inDOM = __webpack_require__(323);

	var _inDOM2 = _interopRequireDefault(_inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var transform = 'transform';
	var prefix = void 0,
	    transitionEnd = void 0,
	    animationEnd = void 0;
	var transitionProperty = void 0,
	    transitionDuration = void 0,
	    transitionTiming = void 0,
	    transitionDelay = void 0;
	var animationName = void 0,
	    animationDuration = void 0,
	    animationTiming = void 0,
	    animationDelay = void 0;

	if (_inDOM2.default) {
	  var _getTransitionPropert = getTransitionProperties();

	  prefix = _getTransitionPropert.prefix;
	  exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
	  exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;


	  exports.transform = transform = prefix + '-' + transform;
	  exports.transitionProperty = transitionProperty = prefix + '-transition-property';
	  exports.transitionDuration = transitionDuration = prefix + '-transition-duration';
	  exports.transitionDelay = transitionDelay = prefix + '-transition-delay';
	  exports.transitionTiming = transitionTiming = prefix + '-transition-timing-function';

	  exports.animationName = animationName = prefix + '-animation-name';
	  exports.animationDuration = animationDuration = prefix + '-animation-duration';
	  exports.animationTiming = animationTiming = prefix + '-animation-delay';
	  exports.animationDelay = animationDelay = prefix + '-animation-timing-function';
	}

	exports.transform = transform;
	exports.transitionProperty = transitionProperty;
	exports.transitionTiming = transitionTiming;
	exports.transitionDelay = transitionDelay;
	exports.transitionDuration = transitionDuration;
	exports.transitionEnd = transitionEnd;
	exports.animationName = animationName;
	exports.animationDuration = animationDuration;
	exports.animationTiming = animationTiming;
	exports.animationDelay = animationDelay;
	exports.animationEnd = animationEnd;
	exports.default = {
	  transform: transform,
	  end: transitionEnd,
	  property: transitionProperty,
	  timing: transitionTiming,
	  delay: transitionDelay,
	  duration: transitionDuration
	};


	function getTransitionProperties() {
	  var style = document.createElement('div').style;

	  var vendorMap = {
	    O: function O(e) {
	      return 'o' + e.toLowerCase();
	    },
	    Moz: function Moz(e) {
	      return e.toLowerCase();
	    },
	    Webkit: function Webkit(e) {
	      return 'webkit' + e;
	    },
	    ms: function ms(e) {
	      return 'MS' + e;
	    }
	  };

	  var vendors = Object.keys(vendorMap);

	  var transitionEnd = void 0,
	      animationEnd = void 0;
	  var prefix = '';

	  for (var i = 0; i < vendors.length; i++) {
	    var vendor = vendors[i];

	    if (vendor + 'TransitionProperty' in style) {
	      prefix = '-' + vendor.toLowerCase();
	      transitionEnd = vendorMap[vendor]('TransitionEnd');
	      animationEnd = vendorMap[vendor]('AnimationEnd');
	      break;
	    }
	  }

	  if (!transitionEnd && 'transitionProperty' in style) transitionEnd = 'transitionend';

	  if (!animationEnd && 'animationName' in style) animationEnd = 'animationend';

	  style = null;

	  return { animationEnd: animationEnd, transitionEnd: transitionEnd, prefix: prefix };
	}

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.nameShape = undefined;
	exports.transitionTimeout = transitionTimeout;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function transitionTimeout(transitionType) {
	  var timeoutPropName = 'transition' + transitionType + 'Timeout';
	  var enabledPropName = 'transition' + transitionType;

	  return function (props) {
	    // If the transition is enabled
	    if (props[enabledPropName]) {
	      // If no timeout duration is provided
	      if (props[timeoutPropName] == null) {
	        return new Error(timeoutPropName + ' wasn\'t supplied to CSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');

	        // If the duration isn't a number
	      } else if (typeof props[timeoutPropName] !== 'number') {
	        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
	      }
	    }

	    return null;
	  };
	}

	var nameShape = exports.nameShape = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
	  enter: _propTypes2.default.string,
	  leave: _propTypes2.default.string,
	  active: _propTypes2.default.string
	}), _propTypes2.default.shape({
	  enter: _propTypes2.default.string,
	  enterActive: _propTypes2.default.string,
	  leave: _propTypes2.default.string,
	  leaveActive: _propTypes2.default.string,
	  appear: _propTypes2.default.string,
	  appearActive: _propTypes2.default.string
	})]);

/***/ }),
/* 326 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = omit;
	/** @module utils/omit */

	/**
	 * This should hopefully be very similar to lodash's omit function. It will
	 * take an object and return a new object without any of the given keys.
	 *
	 * @param {Object} obj - The object to omit keys from.
	 * @param {Array.<String>} keys - a list of keys to remove.
	 */
	function omit(obj, keys) {
	  if (!obj) {
	    return {};
	  } else if (!keys || !keys.length) {
	    return obj;
	  }

	  return Object.keys(obj).filter(function (key) {
	    return keys.indexOf(key) === -1;
	  }).reduce(function (newProps, key) {
	    newProps[key] = obj[key];

	    return newProps;
	  }, {});
	}

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /** @module utils/findIgnoreCase */


	exports.default = findIgnoreCase;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * This function finds the first item in a `haystack` that starts with every
	 * letter of the `value` in order. It will ignore:
	 *  - null or undefined
	 *  - valid React components
	 *
	 * @param {Array.<string|number|Object|function>} haystack - the haystack to search.
	 * @param {string} value - the current value to use.
	 * @param {string=} dataLabel - the object key to use to extract the comparing value.
	 *
	 * @return {string} the found element or the empty string.
	 */
	function findIgnoreCase(haystack, value, dataLabel) {
	  var needle = value ? value.toLowerCase() : '';

	  if (!needle) {
	    return needle;
	  }

	  var suggestion = '';
	  haystack.some(function (hay) {
	    if (hay === null || typeof hay === 'undefined' || _react2.default.isValidElement(hay)) {
	      return false;
	    }

	    var hayStr = (typeof hay === 'undefined' ? 'undefined' : _typeof(hay)) === 'object' ? hay[dataLabel] : hay.toString();

	    if (hayStr.toLowerCase().indexOf(needle) === 0) {
	      suggestion = hayStr;
	    }

	    return suggestion;
	  });

	  return suggestion;
	}

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /** @module utils/fuzzyFilter */


	exports.default = fuzzyFilter;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * This function does a simple fuzzy search of some `needle` for every
	 * item in a `haystack`. It will only include items that are:
	 *  - not null or undefined
	 *  - valid React Components
	 *  - a number or string that contains each letter/number in order ignoring case
	 *  - an object's `dataLabel` value that contains each letter/number in order ignoring case.
	 *
	 * Example:
	 * ```js
	 * const haystack = ['Apple', 'Banana', 'Orange'];
	 * fuzzyFilter(haystack, 'An') // ['Banana', 'Orange'];
	 * fuzzyFilter(haystack, 'ae') // ['Apple']
	 * ```
	 *
	 * @param {Array.<string|number|Object|function>} haystack - the haystack to search
	 * @param {string} needle - the filter text to use.
	 * @param {string=} dataLabel - the data label to use if the element is an object.
	 *
	 * @return {Array.<string|number|Object|function>} a filtered list.
	 */
	function fuzzyFilter(haystack, needle, dataLabel) {
	  // Create an amazing regex that matches the letters in order
	  // and escapes any strings that could be part of a regex.
	  var reg = new RegExp(('' + needle).split('').join('\\w*').replace(/(\(|\||\)|\\(?!w\*)|\[|\|-|\.|\^|\+|\$|\?|^(?!w)\*)/g, '\\$1')
	  // Couldn't get the matching of two '*' working, so replace them here..
	  .replace(/\*\*/g, '*\\*'), 'i');

	  return haystack.filter(function (hay) {
	    if (hay === null || typeof hay === 'undefined') {
	      return false;
	    } else if (_react2.default.isValidElement(hay)) {
	      return true;
	    }

	    var value = void 0;
	    switch (typeof hay === 'undefined' ? 'undefined' : _typeof(hay)) {
	      case 'string':
	      case 'number':
	        value = hay.toString();
	        break;
	      default:
	        value = hay[dataLabel];
	    }

	    return value && value.match(reg);
	  });
	}

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /** @module utils/caseInsensitiveFilter */


	exports.default = caseInsensitiveFilter;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * This function does a simple ignore case search of some `filterText` for every
	 * item in a `haystack`. It will only include items that are:
	 *  - not null or undefined
	 *  - valid React Components
	 *  - a number or string that contains each letter/number in exact order ignoring case
	 *  - an object's `dataLabel` value that contains each letter/number in exact order ignoring case.
	 *
	 * Example:
	 *
	 * ```js
	 * const haystack = ['Apple', 'Banana', 'Orange'];
	 * caseInsensitiveFilter(haystack, 'An') // ['Banana', 'Orange'];
	 * caseInsensitiveFilter(haystack, 'ae') // []
	 * ```
	 *
	 * @param {Array.<string|number|Object|function>} haystack - the haystack to search
	 * @param {string} filterText - the filter text to use.
	 * @param {string=} dataLabel - the data label to use if the element is an object.
	 *
	 * @return {Array.<string|number|Object|function>} a filtered list.
	 */
	function caseInsensitiveFilter(haystack, filterText, dataLabel) {
	  var needle = filterText.toLowerCase();

	  return haystack.filter(function (hay) {
	    if (hay === null || typeof hay === 'undefined') {
	      return false;
	    } else if (_react2.default.isValidElement(hay)) {
	      return true;
	    }

	    var value = void 0;
	    switch (typeof hay === 'undefined' ? 'undefined' : _typeof(hay)) {
	      case 'string':
	      case 'number':
	        value = hay.toString();
	        break;
	      default:
	        value = hay[dataLabel];
	    }

	    return value && value.toLowerCase().indexOf(needle) !== -1;
	  });
	}

/***/ }),
/* 330 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = getTextWidth;
	/** @module utils/Positioning/getTextWidth */

	var cachedCanvas = void 0;

	/**
	 * A utility function to measure the width (in px) of any text. It will require a canvas
	 * and an element to use to determine the current fonts to apply since different fonts will
	 * have different widths.
	 *
	 * This isn't fully accurate since some browsers handle the calculations a bit differently so
	 * they are off by a 0-3px
	 *
	 * @param {String} text - The text to measure the width
	 * @param {HTMLElement} el - The element to use to determine the current font for the text.
	 * @param {HTMLElement=} canvas - An optional canvas to use for doing the calculations. If this
	 *    is omitted, it will just use the locally created canvas to do the calculations.
	 * @return {number} this will either return null if there is a problem calculating the width or
	 *    the length (in px) of the text.
	 */
	function getTextWidth(text, el, canvas) {
	  if (!el) {
	    return null;
	  }

	  if (!canvas) {
	    if (!cachedCanvas) {
	      cachedCanvas = document.createElement('canvas');
	    }

	    canvas = cachedCanvas;
	  }

	  var context = canvas.getContext('2d');
	  if (!context) {
	    // context doesn't exist in testing without complicated mocks
	    return null;
	  }

	  var styles = window.getComputedStyle(el);
	  var font = styles.font;
	  // Some browsers do not actually supply the font style since they are on an older version of CSSProperties,
	  // so the font string needs to be made manually.
	  if (!font) {
	    // font-style font-variant font-weight font-size/line-height font-family
	    var sizing = styles.fontSize + ' / ' + styles.lineHeight + ' ' + styles.fontFamily;
	    font = styles.fontStyle + ' ' + styles.fontVariant + ' ' + styles.fontWeight + ' ' + sizing;
	  }

	  context.font = font;
	  return context.measureText(text).width;
	}

/***/ }),
/* 331 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = oneRequiredForA11y;
	/** @module utils/PropTypes/oneRequiredForA11y */

	/**
	 * This validator checks that either the current prop is defined and valid or that one of the
	 * other given prop names are defined. If it fails it returns an error for a11y.
	 *
	 * @param {function} validator - The React PropTypes validator to use for the given prop.
	 * @param {String[]} otherPropNames - Any other prop names to validate against.
	 * @return {Error} an error or null
	 */
	function oneRequiredForA11y(validator) {
	  for (var _len = arguments.length, otherPropNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    otherPropNames[_key - 1] = arguments[_key];
	  }

	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	    var allPropNames = [propFullNameSafe].concat(otherPropNames);

	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }

	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && !allPropNames.filter(function (pn) {
	      return typeof props[pn] !== 'undefined';
	    }).length) {
	      err = new Error('One of the following props are required to make ' + componentNameSafe + ' accessible ' + ('for users of assistive technologies such as screen readers. `' + allPropNames.join('`, `') + '`.'));
	    }

	    return err;
	  };
	}

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _HorizontalAnchors = __webpack_require__(333);

	var _HorizontalAnchors2 = _interopRequireDefault(_HorizontalAnchors);

	var _VerticalAnchors = __webpack_require__(334);

	var _VerticalAnchors2 = _interopRequireDefault(_VerticalAnchors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _propTypes2.default.shape({
	  x: _propTypes2.default.oneOf([_HorizontalAnchors2.default.LEFT, _HorizontalAnchors2.default.INNER_LEFT, _HorizontalAnchors2.default.CENTER, _HorizontalAnchors2.default.RIGHT, _HorizontalAnchors2.default.INNER_RIGHT]).isRequired,
	  y: _propTypes2.default.oneOf([_VerticalAnchors2.default.TOP, _VerticalAnchors2.default.CENTER, _VerticalAnchors2.default.OVERLAP, _VerticalAnchors2.default.BOTTOM]).isRequired
	});

/***/ }),
/* 333 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/** @module Helpers/HorizontalAnchors */

	/**
	 * An enum for all the different types of horizontal anchors on a layover.
	 *
	 * @readonly
	 * @enum {string}
	 */
	var HorizontalAnchors = {
	  /**
	   * Positions the layover to the outside left on the toggle component
	   * so that it does not overlap.
	   */
	  LEFT: 'left',

	  /**
	   * Positions the layover to the inner left of the toggle component so
	   * that it will overlap.
	   */
	  INNER_LEFT: 'inner left',

	  /**
	   * Positions the layover so that it overlaps the toggle component
	   * by positioning itself in the cetner of the toggle component's width.
	   */
	  CENTER: 'center',

	  /**
	   * Positions the layover to the outside right on the toggle component
	   * so that it does not overlap.
	   */
	  RIGHT: 'right',

	  /**
	   * Positions the layover to the outside right on the toggle component
	   * so that it will overlap.
	   */
	  INNER_RIGHT: 'inner right'
	};

	exports.default = HorizontalAnchors;

/***/ }),
/* 334 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/** @module Helpers/VerticalAnchors */

	/**
	 * An enum for all the different types of horizontal anchors on a layover.
	 *
	 * @readonly
	 * @enum {string}
	 */
	var VerticalAnchors = {
	  /**
	   * Positions the layover to be placed over the toggle component so that
	   * it will never overlay the toggle component.
	   */
	  TOP: 'top',

	  /**
	   * Positions the layover so that it will be centered over the toggle component
	   * based on the layover's height.
	   */
	  CENTER: 'center',

	  /**
	   * Positions the layover so that it will overlap the toggle component by
	   * fixing to the top of the toggle.
	   */
	  OVERLAP: 'overlap',

	  /**
	   * Positions the layover to be placed below the toggle component so that
	   * it will never overlay the toggle component.
	   */
	  BOTTOM: 'bottom'
	};

	exports.default = VerticalAnchors;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.shape({
	  x: _propTypes2.default.object,
	  y: _propTypes2.default.object
	})]);

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Positions = __webpack_require__(337);

	var _Positions2 = _interopRequireDefault(_Positions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _propTypes2.default.oneOfType([_propTypes2.default.oneOf([_Positions2.default.TOP_LEFT, _Positions2.default.TOP_RIGHT, _Positions2.default.BOTTOM_LEFT, _Positions2.default.BOTTOM_RIGHT, _Positions2.default.BELOW]), _propTypes2.default.string]);

/***/ }),
/* 337 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/** @module Helpers/Positions */

	/**
	 * An enum for all the animation positions for a layover appearing.
	 *
	 * @readonly
	 * @enum {string}
	 */
	var Positions = {
	  /**
	   * The layover will appear by transitioning from the top left and expand
	   * down right.
	   */
	  TOP_LEFT: 'tl',

	  /**
	   * The layover will appear by transitioning from the top right and expand
	   * down left.
	   */
	  TOP_RIGHT: 'tr',

	  /**
	   * The layover will appear by transitioning from the bottom left and expand
	   * top right.
	   */
	  BOTTOM_LEFT: 'bl',

	  /**
	   * The layover will appear by transitioning from the bottom right and expand
	   * top left.
	   */
	  BOTTOM_RIGHT: 'br',

	  /**
	   * The layover will appear by just transitioning downwards from the bottom
	   * of the toggle component.
	   */
	  BELOW: 'below'
	};

	exports.default = Positions;

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _getCollapserStyles = __webpack_require__(302);

	var _getCollapserStyles2 = _interopRequireDefault(_getCollapserStyles);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _keyCodes = __webpack_require__(279);

	var _anchorShape = __webpack_require__(332);

	var _anchorShape2 = _interopRequireDefault(_anchorShape);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _AccessibleFakeInkedButton = __webpack_require__(339);

	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);

	var _Collapse = __webpack_require__(259);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _TileAddon = __webpack_require__(343);

	var _TileAddon2 = _interopRequireDefault(_TileAddon);

	var _ListItemText = __webpack_require__(344);

	var _ListItemText2 = _interopRequireDefault(_ListItemText);

	var _List = __webpack_require__(345);

	var _List2 = _interopRequireDefault(_List);

	var _Menu = __webpack_require__(348);

	var _Menu2 = _interopRequireDefault(_Menu);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `ListItem` component is used for rendering a `li` tag with text and optional
	 * icons/avatars.
	 */
	var ListItem = function (_PureComponent) {
	  _inherits(ListItem, _PureComponent);

	  function ListItem(props) {
	    _classCallCheck(this, ListItem);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    _this.state = { active: false };

	    if (typeof props.isOpen === 'undefined' && typeof props.visible === 'undefined') {
	      var defined = function defined(v) {
	        return typeof v !== 'undefined';
	      };
	      var _this$props = _this.props,
	          initiallyOpen = _this$props.initiallyOpen,
	          defaultOpen = _this$props.defaultOpen,
	          defaultVisible = _this$props.defaultVisible;

	      var visible = defined(initiallyOpen) ? initiallyOpen : defaultVisible;
	      visible = defined(defaultOpen) ? defaultOpen : visible;
	      visible = !!visible;

	      _this.state.visible = visible;
	    }
	    return _this;
	  }

	  ListItem.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.state.active) {
	      window.removeEventListener('click', this._handleOutsideClick);
	    }

	    if (this._touchTimeout) {
	      clearTimeout(this._touchTimeout);
	    }
	  };

	  /**
	   * A utility function to focus the `AccessibleFakeInkedButton` in the `ListItem` and also
	   * inject an ink to indicate focus.
	   */


	  /**
	   * A utility function to blur the `AccessibleFakeInkedButton` in the `ListItem`.
	   */


	  ListItem.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        tileStyle = _props.tileStyle,
	        tileClassName = _props.tileClassName,
	        contentStyle = _props.contentStyle,
	        contentClassName = _props.contentClassName,
	        leftNodeStyle = _props.leftNodeStyle,
	        leftNodeClassName = _props.leftNodeClassName,
	        rightNodeStyle = _props.rightNodeStyle,
	        rightNodeClassName = _props.rightNodeClassName,
	        primaryTextStyle = _props.primaryTextStyle,
	        primaryTextClassName = _props.primaryTextClassName,
	        secondaryTextStyle = _props.secondaryTextStyle,
	        secondaryTextClassName = _props.secondaryTextClassName,
	        nestedListStyle = _props.nestedListStyle,
	        nestedListClassName = _props.nestedListClassName,
	        nestedListHeightRestricted = _props.nestedListHeightRestricted,
	        disabled = _props.disabled,
	        leftIcon = _props.leftIcon,
	        leftAvatar = _props.leftAvatar,
	        inset = _props.inset,
	        rightIcon = _props.rightIcon,
	        rightAvatar = _props.rightAvatar,
	        primaryText = _props.primaryText,
	        secondaryText = _props.secondaryText,
	        threeLines = _props.threeLines,
	        children = _props.children,
	        nestedItems = _props.nestedItems,
	        prependNested = _props.prependNested,
	        active = _props.active,
	        activeClassName = _props.activeClassName,
	        activeBoxStyle = _props.activeBoxStyle,
	        activeBoxClassName = _props.activeBoxClassName,
	        animateNestedItems = _props.animateNestedItems,
	        expanderIcon = _props.expanderIcon,
	        expanderLeft = _props.expanderLeft,
	        component = _props.component,
	        ItemComponent = _props.itemComponent,
	        itemProps = _props.itemProps,
	        tileProps = _props.tileProps,
	        passPropsToItem = _props.passPropsToItem,
	        ariaSize = _props['aria-setsize'],
	        ariaPos = _props['aria-posinset'],
	        isOpen = _props.isOpen,
	        expanderIconChildren = _props.expanderIconChildren,
	        expanderIconClassName = _props.expanderIconClassName,
	        propVisible = _props.visible,
	        defaultVisible = _props.defaultVisible,
	        itemRef = _props.itemRef,
	        defaultOpen = _props.defaultOpen,
	        initiallyOpen = _props.initiallyOpen,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'tileStyle', 'tileClassName', 'contentStyle', 'contentClassName', 'leftNodeStyle', 'leftNodeClassName', 'rightNodeStyle', 'rightNodeClassName', 'primaryTextStyle', 'primaryTextClassName', 'secondaryTextStyle', 'secondaryTextClassName', 'nestedListStyle', 'nestedListClassName', 'nestedListHeightRestricted', 'disabled', 'leftIcon', 'leftAvatar', 'inset', 'rightIcon', 'rightAvatar', 'primaryText', 'secondaryText', 'threeLines', 'children', 'nestedItems', 'prependNested', 'active', 'activeClassName', 'activeBoxStyle', 'activeBoxClassName', 'animateNestedItems', 'expanderIcon', 'expanderLeft', 'component', 'itemComponent', 'itemProps', 'tileProps', 'passPropsToItem', 'aria-setsize', 'aria-posinset', 'isOpen', 'expanderIconChildren', 'expanderIconClassName', 'visible', 'defaultVisible', 'itemRef', 'defaultOpen', 'initiallyOpen']);

	    var _context = this.context,
	        cascadingId = _context.cascadingId,
	        cascadingMenu = _context.cascadingMenu,
	        cascadingAnchor = _context.cascadingAnchor,
	        cascadingFixedTo = _context.cascadingFixedTo;

	    var visible = (0, _getField2.default)(this.props, this.state, 'visible');
	    if (typeof isOpen !== 'undefined') {
	      visible = isOpen;
	    }

	    var leftNode = _react2.default.createElement(_TileAddon2.default, {
	      key: 'left-addon',
	      style: leftNodeStyle,
	      className: leftNodeClassName,
	      active: active,
	      activeClassName: activeClassName,
	      icon: leftIcon,
	      avatar: leftAvatar
	    });

	    var rightNode = _react2.default.createElement(_TileAddon2.default, {
	      key: 'right-addon',
	      style: rightNodeStyle,
	      className: rightNodeClassName,
	      active: active,
	      activeClassName: activeClassName,
	      icon: rightIcon,
	      avatar: rightAvatar
	    });

	    var nestedList = void 0;
	    if (nestedItems) {
	      if (!cascadingMenu) {
	        nestedList = _react2.default.createElement(
	          _Collapse2.default,
	          { collapsed: !visible, animate: animateNestedItems },
	          _react2.default.createElement(
	            _List2.default,
	            { style: nestedListStyle, className: nestedListClassName },
	            nestedItems
	          )
	        );
	      }

	      var icon = _react2.default.Children.only((0, _getDeprecatedIcon2.default)(expanderIconClassName, expanderIconChildren, expanderIcon));
	      var collapser = _react2.default.createElement(_TileAddon2.default, {
	        key: 'expander-addon',
	        icon: _react2.default.cloneElement(icon, {
	          className: (0, _getCollapserStyles2.default)({ flipped: visible }, icon.props.className)
	        }),
	        avatar: null
	      });

	      if (expanderLeft) {
	        if (!leftIcon && !leftAvatar) {
	          leftNode = collapser;
	        }
	      } else if (!rightIcon && !rightAvatar) {
	        rightNode = collapser;
	      }
	    }

	    var icond = !!leftIcon || !!rightIcon || !!nestedItems;
	    var avatard = !!leftAvatar || !!rightAvatar;

	    var tile = _react2.default.createElement(
	      _AccessibleFakeInkedButton2.default,
	      _extends({}, tileProps, passPropsToItem ? undefined : props, {
	        component: component,
	        __SUPER_SECRET_REF__: this._setTile,
	        key: 'tile',
	        onClick: this._handleClick,
	        onMouseOver: this._handleMouseOver,
	        onMouseLeave: this._handleMouseLeave,
	        onTouchStart: this._handleTouchStart,
	        onTouchEnd: this._handleTouchEnd,
	        onKeyDown: this._handleKeyDown,
	        onKeyUp: this._handleKeyUp,
	        disabled: disabled,
	        style: tileStyle,
	        className: (0, _classnames2.default)('md-list-tile', {
	          'md-list-tile--active': this.state.active && !this._touched,
	          'md-list-tile--icon': !secondaryText && icond && !avatard,
	          'md-list-tile--avatar': !secondaryText && avatard,
	          'md-list-tile--two-lines': secondaryText && !threeLines,
	          'md-list-tile--three-lines': secondaryText && threeLines,
	          'md-list-item--inset': inset && !leftIcon && !leftAvatar
	        }, (0, _themeColors2.default)({ disabled: disabled, text: true }), tileClassName),
	        'aria-expanded': nestedList && !cascadingMenu ? visible : null
	      }),
	      leftNode,
	      _react2.default.createElement(_ListItemText2.default, {
	        active: active,
	        activeClassName: activeClassName,
	        disabled: disabled,
	        primaryText: primaryText,
	        secondaryText: secondaryText,
	        threeLines: threeLines,
	        style: contentStyle,
	        className: (0, _classnames2.default)({
	          'md-tile-content--left-icon': leftIcon || expanderLeft && nestedItems,
	          'md-tile-content--left-avatar': leftAvatar,
	          'md-tile-content--right-padding': rightIcon || rightAvatar
	        }, contentClassName),
	        primaryTextStyle: primaryTextStyle,
	        primaryTextClassName: primaryTextClassName,
	        secondaryTextStyle: secondaryTextStyle,
	        secondaryTextClassName: secondaryTextClassName
	      }),
	      rightNode,
	      children
	    );

	    var sharedProps = _extends({}, itemProps, passPropsToItem ? props : undefined, {
	      style: Object.assign({}, style, active ? activeBoxStyle : null),
	      className: (0, _classnames2.default)('md-list-item', (_cn = {
	        'md-list-item--nested-container': nestedItems
	      }, _cn[activeBoxClassName] = activeBoxClassName && active, _cn), className),
	      'aria-setsize': ariaSize,
	      'aria-posinset': ariaPos,
	      ref: this._setContainer
	    });
	    if (cascadingMenu && nestedItems) {
	      return _react2.default.createElement(
	        _Menu2.default,
	        _extends({
	          id: cascadingId,
	          visible: visible,
	          onClose: this._handleClick,
	          toggle: tile,
	          block: true,
	          simplified: false,
	          anchor: cascadingAnchor,
	          belowAnchor: null,
	          position: _Menu2.default.Positions.BELOW,
	          component: ItemComponent,
	          listStyle: nestedListStyle,
	          listClassName: nestedListClassName,
	          listHeightRestricted: nestedListHeightRestricted
	        }, sharedProps, {
	          fixedTo: cascadingFixedTo
	        }),
	        nestedItems
	      );
	    }

	    return _react2.default.createElement(
	      ItemComponent,
	      sharedProps,
	      prependNested ? nestedList : null,
	      tile,
	      prependNested ? null : nestedList
	    );
	  };

	  return ListItem;
	}(_react.PureComponent);

	ListItem.propTypes = {
	  /**
	   * An optional style to apply to the `li` tag.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `li` tag.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the `.md-list-tile`.
	   *
	   * @see {@link #component}
	   */
	  tileStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `.md-list-tile`.
	   *
	   * @see {@link #component}
	   */
	  tileClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the div that surrounds the `primaryText` and `secondaryText`
	   * nodes.
	   */
	  contentStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the div that surrounds the `primaryText` and `secondaryText`
	   * nodes.
	   */
	  contentClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the element that is rendered before content node.
	   */
	  leftNodeStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the element that is rendered before content node.
	   */
	  leftNodeClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the element that is rendered after content node.
	   */
	  rightNodeStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the element that is rendered after content node.
	   */
	  rightNodeClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the div surrounding the `primaryText`.
	   */
	  primaryTextStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the div surrounding the `primaryText`.
	   */
	  primaryTextClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the div surrounding the `secondaryText`.
	   */
	  secondaryTextStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the div surrounding the `secondaryText`.
	   */
	  secondaryTextClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the nested `List` that gets created when using `nestedItems`.
	   */
	  nestedListStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the nested `List` that gets created when using `nestedItems`.
	   */
	  nestedListClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the nested `List` in a cascading menu should be restricted.
	   */
	  nestedListHeightRestricted: _propTypes2.default.bool,

	  /**
	   * Any additional children to display in the `.md-list-tile`. If you use this prop,
	   * you will most likely need to override the `height` for the `.md-list-tile--icon`,
	   * `.md-list-tile--avatar`, `.md-list-tile--two-lines`, and/or `.md-list-tile--three-lines`
	   * to get it to display correctly unless the children are positioned `absolute`.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the `ListItem` is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional tab index for the `.md-list-tile`. If omitted, it will default to the
	   * `AccessibleFakeButton`'s `tabIndex` default prop value.
	   */
	  tabIndex: _propTypes2.default.number,

	  /**
	   * The primary text to display. This will only be rendered as a single line. Any overflown
	   * text will be converted to ellipsis.
	   */
	  primaryText: _propTypes2.default.node.isRequired,

	  /**
	   * An optional secondary text to display below the `primaryText`. This can be an additional
	   * one or two lines. Like the `primaryText`, and overflown text will be converted to ellipsis.
	   *
	   * You must set the `threeLines` prop to `true` if you want this to be displayed as two lines.
	   */
	  secondaryText: _propTypes2.default.node,

	  /**
	   * An optional `FontIcon` to display to the left of the text.
	   */
	  leftIcon: _propTypes2.default.node,

	  /**
	   * An optional `Avatar` to display to the left of the text. If you have a mixed `List` of
	   * `FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to
	   * `true` so that the `Avatar` will be scaled down to the `FontIcon` size.
	   */
	  leftAvatar: _propTypes2.default.node,

	  /**
	   * An optional `FontIcon` to display to the right of the text.
	   */
	  rightIcon: _propTypes2.default.node,

	  /**
	   * An optional `Avatar` to display to the right of the text. If you have a mixed `List` of
	   * `FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to
	   * `true` so that the `Avatar` will be scaled down to the `FontIcon` size.
	   */
	  rightAvatar: _propTypes2.default.node,

	  /**
	   * Boolean if the list item should be inset as if there is a `leftIcon` or a `leftAvatar`.
	   * This is used for some lists where only a parent contains the icon.
	   */
	  inset: _propTypes2.default.bool,

	  /**
	   * Boolean if the `secondaryText` should span two lines instead of one. This will include
	   * three lines of text in total when including the `primaryText`.
	   */
	  threeLines: _propTypes2.default.bool,

	  /**
	   * The component to render the `.md-list-tile` as. This is mostly useful if you
	   * want to use the `ListItem` for navigation and working with the `react-router`'s `Link`
	   * component.
	   *
	   * This prop is **not** the top-most element of the `ListItem` component. To change the
	   * top-most element, see the `itemComponent` prop.
	   *
	   * @see {@link #itemComponent}
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * The component to render the top-most element of the `ListItem` component. This is the
	   * `.md-list-item` and defaults to the `<li>` element.
	   *
	   * @see {@link #component}
	   * @see {@link #itemProps}
	   */
	  itemComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * An optional ref callback to get reference to the top-most element of the `ListItem` component.
	   * Just like other refs, this will provide null when it unmounts.
	   */
	  itemRef: _propTypes2.default.func,

	  /**
	   * An optional list of `ListItem`, `ListItemControl`, `Divider`, or `Subheader` components
	   * to render in a nested list. This will inject an expander icon to the right of the text
	   * in the `.md-list-tile` that rotates 180 degrees when open.
	   *
	   * The nested items will be visible once the user clicks on the `ListItem`.
	   *
	   * @see {@link #visible}
	   */
	  nestedItems: _propTypes2.default.arrayOf(_propTypes2.default.node),

	  /**
	   * An optional parameter determining whether `nestedItems` should be placed before or after `ListItemText`
	   */
	  prependNested: _propTypes2.default.bool,

	  /**
	   * Boolean if the `nestedItems` are visible by default.
	   */
	  defaultVisible: _propTypes2.default.bool,

	  /**
	   * Boolean if the `nestedItems` are visible. This will make the `nestedItems` controlled
	   * and require the `onClick` function to be defined.
	   *
	   * @see {@link #defaultVisible}
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onClick', 'defaultVisible'),

	  /**
	   * An icon to use for the expander icon when there are nested items.
	   */
	  expanderIcon: _propTypes2.default.element,

	  /**
	   * Boolean if the expander icon should appear as the left icon instead of the right.
	   */
	  expanderLeft: _propTypes2.default.bool,

	  /**
	   * An optional function to call when the `.md-list-tile` is clicked. This is required if the
	   * `visible` prop is defined.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `mouseover` event.
	   */
	  onMouseOver: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `mouseleave` event.
	   */
	  onMouseLeave: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `touchstart` event.
	   */
	  onTouchStart: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `touchend` event.
	   */
	  onTouchEnd: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `keydown` event.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `keyup` event.
	   */
	  onKeyUp: _propTypes2.default.func,

	  /**
	   * Boolean if the `ListItem` is currently active. This will apply the `activeClassName` prop
	   * to the `leftIcon`, `rightIcon`, and the `primaryText`.
	   */
	  active: _propTypes2.default.bool,

	  /**
	   * The className to apply to the `leftIcon`, `rightIcon`, and `primaryText` when the `active`
	   * prop is `true`.
	   */
	  activeClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the top-most element of the `ListItem` component (`.md-list-item`)
	   * when the `active` prop is `true`.
	   */
	  activeBoxStyle: _propTypes2.default.object,

	  /**
	   * The className to apply to the top-most element of the `ListItem` component (`.md-list-item`)
	   * when the `active` prop is `true`.
	   */
	  activeBoxClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the nested items should animate when they appear or disappear.
	   */
	  animateNestedItems: _propTypes2.default.bool,

	  /**
	   * Defines the number of items in the list. This is only required when all items in the
	   * list are not present in the DOM.
	   *
	   * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize
	   */
	  'aria-setsize': _propTypes2.default.number,

	  /**
	   * Defines the items position in the list. This is only required when all items in the list
	   * are not present in the DOM. The custom validation just requires this prop if the `aria-setsize`
	   * prop is defined as a helpful reminder.
	   *
	   * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset
	   */
	  'aria-posinset': function ariaPosinset(props, propName) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    var validator = _propTypes2.default.number;
	    if (typeof props['aria-setsize'] !== 'undefined') {
	      validator = validator.isRequired;
	    }

	    return validator.apply(undefined, [props, propName].concat(args));
	  },

	  /**
	   * Any additional props you would like to supply to the surrounding `<li>` tag for the `ListItem`.
	   * By default, all props will be provided to the inner `AccessibleFakeButton`. If the `passPropsToItem`
	   * prop is enabled, the remaining props will be provided to the `<li>` tag instead and this prop
	   * is probably useless.
	   */
	  itemProps: _propTypes2.default.object,

	  /**
	   * Any additional props you would like to add to the inner `AccessibleFakeButton`. By default, all the
	   * remaining props will be provided to the `AccessibleFakeButton`, so this prop is probably useless.
	   * Enabling the `passPropsToItem` prop will change the default behavior so that the remaining props
	   * are provided to the surrounding `<li>` node instead and this prop becomes useful.
	   */
	  tileProps: _propTypes2.default.object,

	  /**
	   * All the remaining props should be passed to the surrounding `<li>` node instead of the `AccessibleFakeButton`.
	   *
	   * > NOTE: This will most likely become the default in the next *major* release. Migration warnings will be added
	   * if that is the case.
	   */
	  passPropsToItem: _propTypes2.default.bool,
	  expanderIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `expanderIcon` instead'),
	  expanderIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `expanderIcon` instead'),
	  initiallyOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  defaultOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead')
	};
	ListItem.defaultProps = {
	  animateNestedItems: true,
	  activeClassName: 'md-text--theme-primary',
	  component: 'div',
	  itemComponent: 'li',
	  expanderIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'keyboard_arrow_down'
	  )
	};
	ListItem.contextTypes = {
	  cascadingId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  cascadingMenu: _propTypes2.default.bool,
	  cascadingAnchor: _anchorShape2.default,
	  cascadingFixedTo: _fixedToShape2.default
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this.focus = function () {
	    if (_this2._tile) {
	      _this2._tile.focus();
	    }
	  };

	  this.blur = function () {
	    if (_this2._tile) {
	      _this2._tile.blur();
	    }
	  };

	  this._setTile = function (tile) {
	    if (tile) {
	      _this2._tile = tile;
	      _this2._tileNode = (0, _reactDom.findDOMNode)(tile);
	    }
	  };

	  this._setContainer = function (container) {
	    var itemRef = _this2.props.itemRef;

	    if (container) {
	      _this2._container = (0, _reactDom.findDOMNode)(container);
	    }
	    if (itemRef) {
	      itemRef(container ? _this2._container : null);
	    }
	  };

	  this._handleOutsideClick = function (e) {
	    if (_this2._container && !_this2._container.contains(e.target)) {
	      window.removeEventListener('click', _this2._handleOutsideClick);
	      _this2.setState({ active: false });
	    }
	  };

	  this._handleClick = function (e) {
	    if (_this2.props.onClick) {
	      _this2.props.onClick(e);
	    }

	    if (typeof _this2.state.visible !== 'undefined') {
	      _this2.setState({ visible: !_this2.state.visible });
	    }
	  };

	  this._handleMouseOver = function (e) {
	    if (_this2.props.onMouseOver) {
	      _this2.props.onMouseOver(e);
	    }

	    if (!_this2.props.disabled) {
	      _this2.setState({ active: true });
	    }
	  };

	  this._handleMouseLeave = function (e) {
	    if (_this2.props.onMouseLeave) {
	      _this2.props.onMouseLeave(e);
	    }

	    if (!_this2.props.disabled) {
	      _this2.setState({ active: false });
	    }
	  };

	  this._handleTouchStart = function (e) {
	    if (_this2.props.onTouchStart) {
	      _this2.props.onTouchStart(e);
	    }

	    _this2._touched = true;

	    _this2.setState({ active: true, touchedAt: Date.now() });
	  };

	  this._handleTouchEnd = function (e) {
	    if (_this2.props.onTouchEnd) {
	      _this2.props.onTouchEnd(e);
	    }

	    var time = Date.now() - _this2.state.touchedAt;
	    _this2._touchTimeout = setTimeout(function () {
	      _this2._touchTimeout = null;

	      _this2.setState({ active: false });
	    }, time > 450 ? 0 : 450 - time);
	  };

	  this._handleKeyUp = function (e) {
	    if (_this2.props.onKeyUp) {
	      _this2.props.onKeyUp(e);
	    }

	    if ((e.which || e.keyCode) === _keyCodes.TAB) {
	      window.addEventListener('click', _this2._handleOutsideClick);
	      _this2.setState({ active: true });
	    }
	  };

	  this._handleKeyDown = function (e) {
	    if (_this2.props.onKeyDown) {
	      _this2.props.onKeyDown(e);
	    }

	    if ((e.which || e.keyCode) === _keyCodes.TAB) {
	      window.removeEventListener('click', _this2._handleOutsideClick);
	      _this2.setState({ active: false });
	    }
	  };
	};

	exports.default = ListItem;

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AccessibleFakeButton = __webpack_require__(340);

	var _AccessibleFakeButton2 = _interopRequireDefault(_AccessibleFakeButton);

	var _injectInk = __webpack_require__(285);

	var _injectInk2 = _interopRequireDefault(_injectInk);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _injectInk2.default)(_AccessibleFakeButton2.default);

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _keyCodes = __webpack_require__(279);

	var _handleKeyboardAccessibility = __webpack_require__(341);

	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `AccessibleFakeButton` is a generic component that can be used to render
	 * a `div` or any other non `button` components as a button. This should not be
	 * used often.
	 *
	 * The `AccessibleFakeButton` allows the user to tab focus the element, use the
	 * space or enter key to trigger the `onClick` event, and toggles the `aria-pressed`
	 * attribute.
	 */
	var AccessibleFakeButton = function (_PureComponent) {
	  _inherits(AccessibleFakeButton, _PureComponent);

	  function AccessibleFakeButton() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, AccessibleFakeButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { pressed: false, tabFocused: false }, _this.focus = function () {
	      if (_this._node) {
	        _this._node.focus();
	      }
	    }, _this.blur = function () {
	      if (_this._node) {
	        _this._node.blur();
	      }
	    }, _this._setNode = function (node) {
	      if (node) {
	        _this._node = (0, _reactDom.findDOMNode)(node);
	      }
	    }, _this._handleClick = function (e) {
	      if (_this.props.disabled) {
	        return;
	      }

	      if (_this.props.onClick) {
	        _this.props.onClick(e);
	      }

	      _this._node.focus();
	      _this.setState({ pressed: !_this.state.pressed });
	    }, _this._handleKeyDown = function (e) {
	      var _this$props = _this.props,
	          disabled = _this$props.disabled,
	          onKeyDown = _this$props.onKeyDown,
	          listenToEnter = _this$props.listenToEnter,
	          listenToSpace = _this$props.listenToSpace;

	      if (disabled) {
	        return;
	      }

	      if (onKeyDown) {
	        onKeyDown(e);
	      }

	      (0, _handleKeyboardAccessibility2.default)(e, _this._handleClick, listenToEnter, listenToSpace);
	    }, _this._handleKeyUp = function (e) {
	      var _this$props2 = _this.props,
	          onKeyUp = _this$props2.onKeyUp,
	          onTabFocus = _this$props2.onTabFocus;

	      if (onKeyUp) {
	        onKeyUp(e);
	      }

	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        if (onTabFocus) {
	          onTabFocus(e);
	        }

	        _this.setState({ tabFocused: true });
	      }
	    }, _this._handleBlur = function (e) {
	      if (_this.props.onBlur) {
	        _this.props.onBlur(e);
	      }

	      if (_this.state.tabFocused) {
	        _this.setState({ tabFocused: false });
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Focuses the button.
	   */


	  /**
	   * Blurs the button.
	   */


	  AccessibleFakeButton.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        Component = _props.component,
	        children = _props.children,
	        className = _props.className,
	        tabbedClassName = _props.tabbedClassName,
	        disabled = _props.disabled,
	        tabIndex = _props.tabIndex,
	        ink = _props.ink,
	        noFocusOutline = _props.noFocusOutline,
	        onBlur = _props.onBlur,
	        onClick = _props.onClick,
	        onKeyUp = _props.onKeyUp,
	        onKeyDown = _props.onKeyDown,
	        onTabFocus = _props.onTabFocus,
	        listenToEnter = _props.listenToEnter,
	        listenToSpace = _props.listenToSpace,
	        props = _objectWithoutProperties(_props, ['component', 'children', 'className', 'tabbedClassName', 'disabled', 'tabIndex', 'ink', 'noFocusOutline', 'onBlur', 'onClick', 'onKeyUp', 'onKeyDown', 'onTabFocus', 'listenToEnter', 'listenToSpace']);

	    var childElements = children;
	    if (ink) {
	      childElements = _react.Children.toArray(children);
	      childElements.unshift(ink);
	    }

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        ref: this._setNode,
	        className: (0, _classnames2.default)('md-fake-btn', (_cn = {
	          'md-pointer--hover': !disabled,
	          'md-fake-btn--no-outline': noFocusOutline
	        }, _cn[tabbedClassName] = tabbedClassName && this.state.tabFocused, _cn), className),
	        disabled: disabled,
	        tabIndex: disabled ? null : tabIndex,
	        onBlur: this._handleBlur,
	        onClick: this._handleClick,
	        onKeyUp: this._handleKeyUp,
	        onKeyDown: this._handleKeyDown,
	        'aria-pressed': this.state.pressed
	      }),
	      childElements
	    );
	  };

	  return AccessibleFakeButton;
	}(_react.PureComponent);

	AccessibleFakeButton.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional function to call only when the button has been focused with the tab key.
	   */
	  tabbedClassName: _propTypes2.default.string,

	  /**
	   * Any children to display in the Accessible Fake Button.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * An optional onClick function to call when the user clicks the
	   * button or presses space || enter.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional onKeyDown function to call.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * An optional onBlur function to call.
	   */
	  onBlur: _propTypes2.default.func,

	  /**
	   * An optional onKeyUp function to call.
	   */
	  onKeyUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when the element is focused with the tab key.
	   */
	  onTabFocus: _propTypes2.default.func,

	  /**
	   * The component to render the Fake button as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * Boolean if the default outline should be removed the when the fake button has been focused.
	   *
	   * @see {@link #tabbedClassName}
	   */
	  noFocusOutline: _propTypes2.default.bool,

	  /**
	   * The tab index to use for the Fake button so it is keyboard focusable.
	   */
	  tabIndex: _propTypes2.default.number,

	  /**
	   * Boolean if the Button is disabled. This will prevent tab focus.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * The role for the accessible fake button. It is recommended to keep it
	   * the default of `button` unless you are rendering it as an `a` tag.
	   */
	  role: _propTypes2.default.string,

	  /**
	   * The ink when coming from the AccessibleFakeInkedButton
	   * @access private
	   */
	  ink: _propTypes2.default.node,

	  /**
	   * Boolean if the spacebar should be used to trigger the click event. This _should_ be `true`
	   * is almost all cases.
	   */
	  listenToSpace: _propTypes2.default.bool,

	  /**
	   * Boolean if the enter key should be used to trigger the click event. This _should_ be `true`
	   * in most cases. By default, the param will be ignored if the `role` attribute is for a `checkbox`
	   * or `radio`. When it is a checkbox or radio, it will attempt to submit the form on the enter
	   * keypress instead like the native elements.
	   */
	  listenToEnter: _propTypes2.default.bool
	};
	AccessibleFakeButton.defaultProps = {
	  component: 'div',
	  tabIndex: 0,
	  role: 'button',
	  noFocusOutline: true,
	  listenToEnter: true,
	  listenToSpace: true
	};
	exports.default = AccessibleFakeButton;

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = handleKeyboardAccessibility;

	var _keyCodes = __webpack_require__(279);

	var _closest = __webpack_require__(342);

	var _closest2 = _interopRequireDefault(_closest);

	var _isFormPartRole = __webpack_require__(291);

	var _isFormPartRole2 = _interopRequireDefault(_isFormPartRole);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A utility function for adding keyboard accessibility to elements that are not a natively
	 * clickable (div, span, etc). When the space or enter key is pressed while focusing the
	 * element, different flows will happen.
	 *
	 * - space - The click event will be triggered and the default page scrolling behavior of the
	 *      spacebar will be prevented
	 * - enter - If the element has a form role ('checkbox' or 'radio'), the click event will not
	 *      be triggered. Instead, it will find out if the element is inside a form. If it is, it
	 *      will emulate the default behavior of attempting to submit the form. If the element does
	 *      not have a form role, the click event will be triggered.
	 *
	 * @param {Event} e - the keydown event
	 * @param {function} onClick - the on click event to be triggered if space or enter was pressed
	 * @param {boolean=true} listenToEnter - boolean if the enter key should be used to trigger the
	 *      the click event. Even if this is true, the click event will not be triggered if the role
	 *      is for a form role.
	 * @param {boolean=true} listenToSpace - boolean if the space key should be used to trigger the
	 *      click event.
	 * @return {Boolean} true if the enter or space keys were pressed while their listener is also active.
	 */
	function handleKeyboardAccessibility(e, onClick) {
	  var listenToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	  var listenToSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

	  var key = e.which || e.keyCode;
	  var space = listenToSpace && key === _keyCodes.SPACE;
	  var enter = key === _keyCodes.ENTER;

	  var tagName = e.target.tagName;
	  // it is valid to press space in text fields, contenteditable, and buttons

	  if (space && !tagName.match(/input|textarea|button/i) && e.target.getAttribute('contenteditable') !== 'true') {
	    // Stop page scrolling
	    e.preventDefault();
	  }

	  if (enter && (0, _isFormPartRole2.default)(e.target)) {
	    var form = (0, _closest2.default)(e.target, 'form');
	    var submit = form ? form.querySelector('*[type="submit"]') : null;
	    if (submit) {
	      submit.click();
	    }

	    return true;
	  }

	  if (enter && listenToEnter || space) {
	    onClick(e);

	    return true;
	  }

	  return false;
	} /** @module utils/EventUtils/handleKeyboardAccessibility */

/***/ }),
/* 342 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = closest;
	/** @module utils/closest */

	/**
	 * A _very_ primitive polyfill for the Element.closest function. If this is a browser that doesn't
	 * support it (IE, Edge, etc), it will just keep searching the parent elements until the nodeName
	 * matches the provided type.
	 *
	 * @param {Element} el - the html element to find a closest node type for
	 * @param {String} type - the html element type to find.
	 * @return {Element} the found element or null.
	 */
	function closest(el, type) {
	  if (typeof el.closest === 'function') {
	    return el.closest(type);
	  }

	  var nodeType = type.toUpperCase();
	  var node = el.parentElement;
	  while (node && node.parentElement) {
	    if (node.nodeName === nodeType) {
	      return node;
	    }

	    node = node.parentElement;
	  }

	  return null;
	}

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `TileAddon` component is used to render either a `FontIcon` or an `Avatar`
	 * next to the `ListTileText` for a `ListItem`.
	 */
	var TileAddon = function (_PureComponent) {
	  _inherits(TileAddon, _PureComponent);

	  function TileAddon() {
	    _classCallCheck(this, TileAddon);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  TileAddon.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        icon = _props.icon,
	        avatar = _props.avatar,
	        active = _props.active,
	        activeClassName = _props.activeClassName,
	        style = _props.style,
	        className = _props.className;

	    if (!icon && !avatar) {
	      return null;
	    }

	    var avatarIcon = false;
	    if (avatar) {
	      var avatarChild = _react2.default.Children.only(avatar);
	      if (avatarChild.props.iconSized) {
	        avatarIcon = true;
	      }
	    }
	    return _react2.default.createElement(
	      'div',
	      {
	        style: style,
	        className: (0, _classnames2.default)('md-tile-addon', (_cn = {
	          'md-tile-addon--icon': icon || avatarIcon,
	          'md-tile-addon--avatar': avatar && !avatarIcon
	        }, _cn[activeClassName] = active, _cn), className)
	      },
	      icon || avatar
	    );
	  };

	  return TileAddon;
	}(_react.PureComponent);

	TileAddon.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool,
	  activeClassName: _propTypes2.default.string,
	  icon: _propTypes2.default.node,
	  avatar: _propTypes2.default.node
	};
	exports.default = TileAddon;

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `ListItemText` component is used to render the `primaryText` and an optional
	 * `secondaryText` for a `ListItem`.
	 */
	var ListItemText = function (_PureComponent) {
	  _inherits(ListItemText, _PureComponent);

	  function ListItemText() {
	    _classCallCheck(this, ListItemText);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  ListItemText.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        active = _props.active,
	        activeClassName = _props.activeClassName,
	        disabled = _props.disabled,
	        primaryText = _props.primaryText,
	        primaryTextStyle = _props.primaryTextStyle,
	        primaryTextClassName = _props.primaryTextClassName,
	        secondaryText = _props.secondaryText,
	        secondaryTextStyle = _props.secondaryTextStyle,
	        secondaryTextClassName = _props.secondaryTextClassName,
	        className = _props.className,
	        threeLines = _props.threeLines,
	        props = _objectWithoutProperties(_props, ['active', 'activeClassName', 'disabled', 'primaryText', 'primaryTextStyle', 'primaryTextClassName', 'secondaryText', 'secondaryTextStyle', 'secondaryTextClassName', 'className', 'threeLines']);

	    var secondaryTextNode = void 0;
	    if (secondaryText) {
	      secondaryTextNode = _react2.default.createElement(
	        'div',
	        {
	          style: secondaryTextStyle,
	          className: (0, _classnames2.default)('md-tile-text--secondary', {
	            'md-tile-text--three-lines': threeLines
	          }, (0, _themeColors2.default)({ disabled: disabled, hint: !disabled }), secondaryTextClassName)
	        },
	        secondaryText
	      );
	    }

	    return _react2.default.createElement(
	      'div',
	      _extends({}, props, { className: (0, _classnames2.default)('md-tile-content', className) }),
	      _react2.default.createElement(
	        'div',
	        {
	          style: primaryTextStyle,
	          className: (0, _classnames2.default)('md-tile-text--primary', (_cn = {}, _cn[activeClassName] = !disabled && active, _cn), (0, _themeColors2.default)({ disabled: disabled, text: !active }), primaryTextClassName)
	        },
	        primaryText
	      ),
	      secondaryTextNode
	    );
	  };

	  return ListItemText;
	}(_react.PureComponent);

	ListItemText.propTypes = {
	  active: _propTypes2.default.bool,
	  activeClassName: _propTypes2.default.string,
	  disabled: _propTypes2.default.bool,
	  primaryText: _propTypes2.default.node.isRequired,
	  primaryTextStyle: _propTypes2.default.object,
	  primaryTextClassName: _propTypes2.default.string,
	  secondaryText: _propTypes2.default.node,
	  secondaryTextStyle: _propTypes2.default.object,
	  secondaryTextClassName: _propTypes2.default.string,
	  className: _propTypes2.default.string,
	  threeLines: _propTypes2.default.bool
	};
	exports.default = ListItemText;

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _Subheaders = __webpack_require__(346);

	var _Subheaders2 = _interopRequireDefault(_Subheaders);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Lists present multiple line items vertically as a single continuous element.
	 */
	var List = function (_PureComponent) {
	  _inherits(List, _PureComponent);

	  function List() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, List);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {}, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  List.prototype.getChildContext = function getChildContext() {
	    var _context = this.context,
	        listLevel = _context.listLevel,
	        context = _objectWithoutProperties(_context, ['listLevel']);

	    var cascadingFixedTo = (0, _getField2.default)(this.state, this.context, 'cascadingFixedTo');
	    return _extends({}, context, {
	      cascadingFixedTo: cascadingFixedTo,
	      listLevel: typeof listLevel === 'undefined' ? 1 : listLevel + 1
	    });
	  };

	  List.prototype.componentDidMount = function componentDidMount() {
	    if (this.context.cascadingMenu) {
	      var list = (0, _reactDom.findDOMNode)(this);
	      if (list.offsetHeight < list.scrollHeight) {
	        var cascadingFixedTo = { y: (0, _reactDom.findDOMNode)(this) };
	        this.setState({ cascadingFixedTo: cascadingFixedTo }); // eslint-disable-line react/no-did-mount-set-state
	      }
	    }
	  };

	  List.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        className = _props.className,
	        ordered = _props.ordered,
	        children = _props.children,
	        subheader = _props.subheader,
	        inline = _props.inline,
	        primarySubheader = _props.primarySubheader,
	        props = _objectWithoutProperties(_props, ['className', 'ordered', 'children', 'subheader', 'inline', 'primarySubheader']);

	    var _context2 = this.context,
	        cascadingMenu = _context2.cascadingMenu,
	        cascadingZDepth = _context2.cascadingZDepth,
	        listLevel = _context2.listLevel;


	    var subheaderEl = void 0;
	    if (subheader) {
	      subheaderEl = _react2.default.createElement(_Subheaders2.default, { key: 'subheader', primaryText: subheader, primary: primarySubheader });
	    }

	    var Component = ordered ? 'ol' : 'ul';
	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-list', (_cn = {
	          'md-list--inline': inline,
	          'md-list--menu-cascading': cascadingMenu
	        }, _cn['md-paper md-paper--' + cascadingZDepth] = cascadingZDepth && cascadingMenu && listLevel > 0, _cn['md-list--nested-' + listLevel] = listLevel && !cascadingMenu, _cn), className)
	      }),
	      subheaderEl,
	      children
	    );
	  };

	  return List;
	}(_react.PureComponent);

	List.propTypes = {
	  /**
	   * An optional style to apply to the list.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the list.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Boolean if this should be an ordered list (`<ol>`) component. Otherwise, it will
	   * be rendered as `<ul>`.
	   */
	  ordered: _propTypes2.default.bool,

	  /**
	   * This *should* be a list of `ListItem`, `ListItemControl`, `Divider`, or
	   * `Subheader`.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the list should appear horizontally instead of vertically.
	   */
	  inline: _propTypes2.default.bool,
	  subheader: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `Subheader` component as a child instead'),
	  primarySubheader: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use the `Subheader` component as a child instead')
	};
	List.childContextTypes = {
	  listLevel: _propTypes2.default.number,
	  cascadingMenu: _propTypes2.default.bool,
	  cascadingFixedTo: _fixedToShape2.default,
	  cascadingZDepth: _propTypes2.default.number
	};
	List.contextTypes = {
	  listLevel: _propTypes2.default.number,
	  cascadingMenu: _propTypes2.default.bool,
	  cascadingFixedTo: _fixedToShape2.default,
	  cascadingZDepth: _propTypes2.default.number
	};
	exports.default = List;

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.Subheader = undefined;

	var _Subheader2 = __webpack_require__(347);

	var _Subheader3 = _interopRequireDefault(_Subheader2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Subheader3.default;
	exports.Subheader = _Subheader3.default;

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Subheader` component is generally used inside of lists or menus.
	 */
	var Subheader = function (_PureComponent) {
	  _inherits(Subheader, _PureComponent);

	  function Subheader() {
	    _classCallCheck(this, Subheader);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Subheader.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.component,
	        inset = _props.inset,
	        primary = _props.primary,
	        primaryText = _props.primaryText,
	        className = _props.className,
	        children = _props.children,
	        props = _objectWithoutProperties(_props, ['component', 'inset', 'primary', 'primaryText', 'className', 'children']);

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-subheader', {
	          'md-list-item--inset': inset
	        }, (0, _themeColors2.default)({ primary: primary, hint: !primary }), className)
	      }),
	      primaryText,
	      children
	    );
	  };

	  return Subheader;
	}(_react.PureComponent);

	Subheader.propTypes = {
	  /**
	   * An optional style to apply to the subheader.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the subheader.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Boolean if the subheader should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the subheader is inset in the list. This will add additional
	   * spacing to align the subheader.
	   */
	  inset: _propTypes2.default.bool,

	  /**
	   * The primary text to use in the subheader.
	   */
	  primaryText: _propTypes2.default.node.isRequired,

	  /**
	   * Any optional children to display after the `primaryText`. This prop is
	   * not recommended.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * The component to render the Subheader as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired
	};
	Subheader.defaultProps = {
	  component: 'li'
	};
	exports.default = Subheader;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _CSSTransitionGroupTick = __webpack_require__(280);

	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _handleKeyboardAccessibility = __webpack_require__(341);

	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);

	var _anchorShape = __webpack_require__(332);

	var _anchorShape2 = _interopRequireDefault(_anchorShape);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _positionShape = __webpack_require__(336);

	var _positionShape2 = _interopRequireDefault(_positionShape);

	var _Layover = __webpack_require__(349);

	var _Layover2 = _interopRequireDefault(_Layover);

	var _List = __webpack_require__(345);

	var _List2 = _interopRequireDefault(_List);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Menu` controlled component is used to display a list of children in the `List`
	 * component once the `visible` prop is true.
	 */
	var Menu = function (_PureComponent) {
	  _inherits(Menu, _PureComponent);

	  function Menu() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Menu);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._handleClose = function (e) {
	      var _this$props = _this.props,
	          close = _this$props.close,
	          onClose = _this$props.onClose;

	      if (close || onClose) {
	        (close || onClose)(e);
	      }
	    }, _this._handleClick = function (e) {
	      if (_this.props.onClick) {
	        _this.props.onClick(e);
	      }

	      var node = e.target;
	      while (_this._container && _this._container.contains(node)) {
	        if (_this._isIgnoreTarget(node)) {
	          return;
	        } else if (_this._isCloseTarget(node)) {
	          e.persist();
	          // set a timeout so item click events still trigger, and then close
	          _this._timeout = setTimeout(function () {
	            _this._timeout = null;
	            _this._handleClose(e);
	          }, _CSSTransitionGroupTick2.default);

	          return;
	        }

	        node = node.parentNode;
	      }
	    }, _this._handleKeyDown = function (e) {
	      if (_this.props.onKeyDown) {
	        _this.props.onKeyDown(e);
	      }

	      (0, _handleKeyboardAccessibility2.default)(e, _this._handleClick, true, true);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Menu.prototype.getChildContext = function getChildContext() {
	    var _props = this.props,
	        cascading = _props.cascading,
	        id = _props.id,
	        fixedTo = _props.fixedTo,
	        cascadingAnchor = _props.cascadingAnchor;

	    var listLevel = this.context.listLevel || 0;
	    var cascadingMenu = typeof cascading !== 'undefined' ? cascading : this.context.cascadingMenu;
	    var cascadingZDepth = (0, _getField2.default)(this.context, this.props, 'cascadingZDepth');
	    var cascadingFixedTo = typeof fixedTo !== 'undefined' ? fixedTo : this.context.cascadingFixedTo;

	    return {
	      listLevel: listLevel,
	      cascadingId: id + '-level-' + (listLevel + 1),
	      cascadingMenu: cascadingMenu,
	      cascadingAnchor: cascadingAnchor,
	      cascadingZDepth: cascadingZDepth,
	      cascadingFixedTo: cascadingFixedTo
	    };
	  };

	  Menu.prototype.componentDidMount = function componentDidMount() {
	    this._container = (0, _reactDom.findDOMNode)(this);
	  };

	  Menu.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }
	  };

	  /**
	   * Checks if a provided event target or HTML Element is considered a menu click target.
	   * This normally is just a ListItem.
	   */
	  Menu.prototype._isCloseTarget = function _isCloseTarget(target) {
	    return target.classList.contains('md-list-item') && !target.classList.contains('md-list-item--nested-container');
	  };

	  /**
	   * Checks if a provided event target or HTML Element is something that should shortcut/break
	   * out of the click event loop because it **should not** close menus when clicked.
	   */


	  Menu.prototype._isIgnoreTarget = function _isIgnoreTarget(target) {
	    return target.getAttribute('disabled') !== null || target.classList.contains('md-list-control');
	  };

	  Menu.prototype.render = function render() {
	    var _cn;

	    var _props2 = this.props,
	        id = _props2.id,
	        className = _props2.className,
	        listStyle = _props2.listStyle,
	        listClassName = _props2.listClassName,
	        visible = _props2.visible,
	        children = _props2.children,
	        listProps = _props2.listProps,
	        listZDepth = _props2.listZDepth,
	        listInline = _props2.listInline,
	        listHeightRestricted = _props2.listHeightRestricted,
	        cascading = _props2.cascading,
	        sameWidth = _props2.sameWidth,
	        simplified = _props2.simplified,
	        contained = _props2.contained,
	        isOpen = _props2.isOpen,
	        propFixedTo = _props2.fixedTo,
	        propListId = _props2.listId,
	        cascadingAnchor = _props2.cascadingAnchor,
	        cascadingZDepth = _props2.cascadingZDepth,
	        onClose = _props2.onClose,
	        propPosition = _props2.position,
	        close = _props2.close,
	        autoclose = _props2.autoclose,
	        limitHeight = _props2.limitHeight,
	        expanderIconChildren = _props2.expanderIconChildren,
	        expanderIconClassName = _props2.expanderIconClassName,
	        props = _objectWithoutProperties(_props2, ['id', 'className', 'listStyle', 'listClassName', 'visible', 'children', 'listProps', 'listZDepth', 'listInline', 'listHeightRestricted', 'cascading', 'sameWidth', 'simplified', 'contained', 'isOpen', 'fixedTo', 'listId', 'cascadingAnchor', 'cascadingZDepth', 'onClose', 'position', 'close', 'autoclose', 'limitHeight', 'expanderIconChildren', 'expanderIconClassName']);

	    var _props3 = this.props,
	        listId = _props3.listId,
	        position = _props3.position;

	    if (!listId) {
	      listId = id + '-list';
	    }

	    // can't have a simplified menu for cascading and context menus
	    var simple = !cascading && !props.onContextMenu && position !== 'context' && simplified;
	    if (position === 'context') {
	      position = Menu.Positions.BELOW;
	    }

	    var below = position === Menu.Positions.BELOW;
	    var fixedTo = typeof propFixedTo !== 'undefined' ? propFixedTo : this.context.cascadingFixedTo;
	    var listVisible = typeof isOpen !== 'undefined' ? isOpen : visible;
	    return _react2.default.createElement(
	      _Layover2.default,
	      _extends({}, props, {
	        id: id,
	        className: (0, _classnames2.default)('md-menu-container', {
	          'md-menu-container--menu-below': simplified && below
	        }, className),
	        simplified: simple,
	        sameWidth: contained || sameWidth,
	        fixedTo: fixedTo,
	        onClick: this._handleClick,
	        onKeyDown: this._handleKeyDown,
	        onClose: this._handleClose,
	        animationPosition: position,
	        visible: listVisible,
	        'aria-haspopup': true,
	        'aria-expanded': listVisible,
	        'aria-owns': listId
	      }),
	      _react2.default.createElement(
	        _List2.default,
	        _extends({}, listProps, {
	          id: listId,
	          key: 'menu-list',
	          style: listStyle,
	          className: (0, _classnames2.default)('md-list--menu', (_cn = {
	            'md-list--menu-restricted': listHeightRestricted,
	            'md-list--menu-contained': simplified && (sameWidth || contained)
	          }, _cn['md-list--menu-' + position] = simplified, _cn['md-paper md-paper--' + listZDepth] = listZDepth, _cn), listClassName),
	          inline: listInline
	        }),
	        children
	      )
	    );
	  };

	  return Menu;
	}(_react.PureComponent);

	Menu.HorizontalAnchors = _Layover2.default.HorizontalAnchors;
	Menu.VerticalAnchors = _Layover2.default.VerticalAnchors;
	Menu.Positions = {
	  // Can't do ...Layover.Positions since it triggers the get for CONTEXT
	  TOP_LEFT: _Layover2.default.Positions.TOP_LEFT,
	  TOP_RIGHT: _Layover2.default.Positions.TOP_RIGHT,
	  BOTTOM_LEFT: _Layover2.default.Positions.BOTTOM_LEFT,
	  BOTTOM_RIGHT: _Layover2.default.Positions.BOTTOM_RIGHT,
	  BELOW: _Layover2.default.Positions.BELOW,
	  _warned: false,
	  get CONTEXT() {
	    if (!this._warned) {
	      /* eslint-disable no-console */
	      console.error('The `Menu.Positions.CONTEXT` position has been deprecated and will be removed ' + 'in the next major release. To make the `Menu` behave as a context menu, provide ' + 'the `onContextMenu` prop instead.');
	      /* eslint-enable no-console */
	    }

	    this._warned = true;
	    return 'context';
	  }
	};
	Menu.propTypes = {
	  /**
	   * An id to provide to the menu's container. This is required for accessibility as it generates
	   * the `aria-` attributes for dynamic content.
	   *
	   * @see {@link #listId}
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * An optional id to provide to the menu's list. If this prop is omitted, the list's id will be
	   * `\`${id}-list\``
	   */
	  listId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the main container for the menu.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional class name to apply to the main container for the menu.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the list once the menu has opened.
	   */
	  listStyle: _propTypes2.default.object,

	  /**
	   * An optional class name to apply to the list once the menu has opened.
	   */
	  listClassName: _propTypes2.default.string,

	  /**
	   * The component to render the main container as.
	   *
	   * @see {@link Helpers/Layover#component}
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

	  /**
	   * This is how the menu's `List` gets anchored to the `toggle` element.
	   *
	   * @see {@link Helpers/Layover#anchor}
	   */
	  anchor: _anchorShape2.default,

	  /**
	   * This is the optional anchor to use when the `position` is set to `Menu.Positions.BELOW`.
	   * Set this to `null` to use the default `anchor` prop.
	   *
	   * @see {@link Helpers/Layover#belowAnchor}
	   */
	  belowAnchor: _anchorShape2.default,

	  /**
	   * This is the animation position for the list that appears.
	   *
	   * @see {@link Helpers/Layover#animationPosition}
	   */
	  position: _positionShape2.default,

	  /**
	   * This is the component/element that should toggle the menu open.
	   *
	   * @see {@link Helpers/Layover#toggle}
	   */
	  toggle: _propTypes2.default.node,

	  /**
	   * This is how the menu's list will be "fixed" to the `toggle` component.
	   *
	   * @see {@link Helpers/Layover#fixedTo}
	   */
	  fixedTo: _fixedToShape2.default,

	  /**
	   * Any additional props that should be applied to the list in the menu. This is really used
	   * when additional `aria-` tags need to be applied.
	   */
	  listProps: _propTypes2.default.object,

	  /**
	   * Boolean if the menu's list should appear horizontally instead of vertically.
	   */
	  listInline: _propTypes2.default.bool,

	  /**
	   * The list's z-depth for applying box shadow. This should be a number from 0 to 5.
	   */
	  listZDepth: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the list should have its height restricted to the `$md-menu-mobile-max-height`/
	   * `$md-menu-desktop-max-height` values.
	   *
	   * @see [md-menu-mobile-max-height](/components/menus?tab=2#variable-md-menu-mobile-max-height)
	   * @see [md-menu-desktop-max-height](/components/menus?tab=2#variable-md-menu-desktop-max-height)
	   */
	  listHeightRestricted: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu's list is visible.
	   */
	  visible: _propTypes2.default.bool.isRequired,

	  /**
	   * Any children to render in the menu's list. This _should_ normally be `ListItem`, or
	   * `ListItemControl`.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * An optional function to call when en element in the menu has been clicked.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when a key is pressed anywhere in the menu.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * A function to call to close the menu. This is used for closing on outside clicks,
	   * closing when a list item has been clicked, or the user presses escape.
	   */
	  onClose: _propTypes2.default.func.isRequired,

	  /**
	   * Boolean if the menu should be cascading. This means that the menu will pop the additional
	   * `nestedItems` on any `ListItem` to be appear either to the right or left of the visible list.
	   */
	  cascading: _propTypes2.default.bool,

	  /**
	   * This is how the cascading lists get anchored to the list item.
	   *
	   * @see {@link Helpers/Layover#anchor}
	   */
	  cascadingAnchor: _Layover2.default.propTypes.anchor,

	  /**
	   * This is the z-depth the list should gain for a cascading menu. This only gets applied on
	   * items that are more than 1 level deep.
	   */
	  cascadingZDepth: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the `md-full-width` class name should get applied to the menu's container.
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should be displayed as a block instead of as an inline block.
	   *
	   * @see {@link #fullWidth}
	   */
	  block: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#centered}
	   */
	  centered: _Layover2.default.propTypes.centered,

	  /**
	   * @see {@link Helpers/Layover#sameWidth}
	   */
	  sameWidth: _Layover2.default.propTypes.sameWidth,

	  /**
	   * If you would like the menu to interact as a context menu, provide this prop.
	   *
	   * @see {@link Helpers/Layover#onContextMenu}
	   */
	  onContextMenu: _Layover2.default.propTypes.onContextMenu,

	  /**
	   * Boolean if the default behavior of the context menu should be prevented when using the
	   * `onContextMenu` prop.
	   *
	   * @see {@link Helpers/Layover#preventContextMenu}
	   */
	  preventContextMenu: _Layover2.default.propTypes.preventContextMenu,

	  /**
	   * @see {@link Helpers/Layover#xThreshold}
	   */
	  xThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#yThreshold}
	   */
	  yThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#closeOnOutsideClick}
	   */
	  closeOnOutsideClick: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#toggleQuery}
	   */
	  toggleQuery: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object, _propTypes2.default.string]),

	  /**
	   * An optional transition name to use for the list appearing/disappearing.
	   *
	   * @see {@link Helpers/Layover#transitionName}
	   */
	  transitionName: _propTypes2.default.string,

	  /**
	   * @see {@link Helpers/Layover#transitionEnterTimeout}
	   */
	  transitionEnterTimeout: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#transitionLeaveTimeout}
	   */
	  transitionLeaveTimeout: _propTypes2.default.number,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the `fixedTo` element scrolls.
	   *
	   * @see {@link Helpers/Layover#repositionOnScroll}
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the window resizes.
	   *
	   * @see {@link Helpers/Layover#repositionOnResize}
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplified: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#minLeft}
	   */
	  minLeft: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * @see {@link Helpers/Layover#minRight}
	   */
	  minRight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * @see {@link Helpers/Layover#minBottom}
	   */
	  minBottom: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * @see {@link Helpers/Layover#fillViewportWidth}
	   */
	  fillViewportWidth: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#fillViewportHeight}
	   */
	  fillViewportHeight: _propTypes2.default.bool,

	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead'),
	  close: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onClose` instead'),
	  autoclose: (0, _deprecated2.default)(_propTypes2.default.bool, 'The menus will always autoclose as according to the specs'),
	  contained: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `sameWidth` instead'),
	  limitHeight: (0, _deprecated2.default)(_propTypes2.default.bool, 'The menus will always be limited in height as according to the specs'),
	  expanderIconClassName: (0, _deprecated2.default)(_propTypes2.default.node, 'The expander for cascading menus will now just be a simple rotate of the existing `ListItem` ' + 'expander icon'),
	  expanderIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'The expander for cascading menus will now just be a simple rotate of the existing `ListItem` ' + 'expander icon')
	};
	Menu.defaultProps = {
	  anchor: {
	    x: _Layover2.default.HorizontalAnchors.INNER_RIGHT,
	    y: _Layover2.default.VerticalAnchors.OVERLAP
	  },
	  cascadingAnchor: {
	    x: _Layover2.default.HorizontalAnchors.RIGHT,
	    y: _Layover2.default.VerticalAnchors.OVERLAP
	  },
	  position: _Layover2.default.Positions.TOP_RIGHT,
	  fixedTo: typeof window !== 'undefined' ? window : {},
	  listZDepth: 2,
	  listHeightRestricted: true,
	  cascadingZDepth: 3,
	  repositionOnScroll: true,
	  repositionOnResize: false,
	  simplified: true
	};
	Menu.contextTypes = {
	  listLevel: _propTypes2.default.number,
	  cascadingId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  cascadingMenu: _propTypes2.default.bool,
	  cascadingAnchor: _anchorShape2.default,
	  cascadingZDepth: _propTypes2.default.number
	};
	Menu.childContextTypes = {
	  listLevel: _propTypes2.default.number,
	  cascadingId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  cascadingMenu: _propTypes2.default.bool,
	  cascadingFixedTo: _fixedToShape2.default,
	  cascadingAnchor: _anchorShape2.default,
	  cascadingZDepth: _propTypes2.default.number
	};
	exports.default = Menu;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(31);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _CSSTransitionGroup = __webpack_require__(317);

	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _handleWindowClickListeners = __webpack_require__(350);

	var _handleWindowClickListeners2 = _interopRequireDefault(_handleWindowClickListeners);

	var _getSelectedTextPosition = __webpack_require__(351);

	var _getSelectedTextPosition2 = _interopRequireDefault(_getSelectedTextPosition);

	var _getScroll = __webpack_require__(353);

	var _getScroll2 = _interopRequireDefault(_getScroll);

	var _viewport = __webpack_require__(354);

	var _viewport2 = _interopRequireDefault(_viewport);

	var _isOutOfBounds = __webpack_require__(356);

	var _isOutOfBounds2 = _interopRequireDefault(_isOutOfBounds);

	var _anchorShape = __webpack_require__(332);

	var _anchorShape2 = _interopRequireDefault(_anchorShape);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _positionShape = __webpack_require__(336);

	var _positionShape2 = _interopRequireDefault(_positionShape);

	var _HorizontalAnchors = __webpack_require__(333);

	var _HorizontalAnchors2 = _interopRequireDefault(_HorizontalAnchors);

	var _VerticalAnchors = __webpack_require__(334);

	var _VerticalAnchors2 = _interopRequireDefault(_VerticalAnchors);

	var _Positions = __webpack_require__(337);

	var _Positions2 = _interopRequireDefault(_Positions);

	var _ResizeObserver = __webpack_require__(357);

	var _ResizeObserver2 = _interopRequireDefault(_ResizeObserver);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The Layover component is used to keep a component fixed to another component
	 * while the page is scrolling or a container is scrolling. When the fixed component
	 * is considered out of view, it will be closed.
	 *
	 * > NOTE: Don't look at source code. Plz.
	 */
	var Layover = function (_PureComponent) {
	  _inherits(Layover, _PureComponent);

	  function Layover(props) {
	    _classCallCheck(this, Layover);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

	    _initialiseProps.call(_this);

	    var child = _react2.default.Children.only(props.children);
	    _this.state = {
	      below: false,
	      right: false,
	      styles: child.props.style
	    };

	    _this._lastXFix = null;
	    _this._lastYFix = null;
	    _this._initialX = null;
	    _this._initialY = null;
	    _this._initialTop = null;
	    _this._initialLeft = null;
	    _this._child = null;
	    _this._toggle = null;
	    return _this;
	  }

	  Layover.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;

	    if (false) {
	      window.addEventListener('load', function () {
	        _this2._setContainer(_this2._container);
	      });
	    }

	    var _props = this.props,
	        visible = _props.visible,
	        fixedTo = _props.fixedTo,
	        sameWidth = _props.sameWidth,
	        centered = _props.centered,
	        simplified = _props.simplified;

	    var anchor = this._getAnchor(this.props);
	    if (visible) {
	      (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, true);

	      // Don't worry about any of the other logic for a "simple" layover
	      if (simplified) {
	        return;
	      }

	      var rect = this._contextRect || this._toggle.getBoundingClientRect();
	      if (this._dialog) {
	        this._manageFixedToListener(this._dialog, true);
	      } else if (!this._inFixed) {
	        this._manageFixedToListener(fixedTo, true);
	      }

	      this._init(fixedTo, anchor, sameWidth, centered, rect);
	    }
	  };

	  Layover.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var fixedTo = nextProps.fixedTo,
	        visible = nextProps.visible,
	        children = nextProps.children,
	        sameWidth = nextProps.sameWidth,
	        centered = nextProps.centered,
	        simplified = nextProps.simplified;

	    if (simplified) {
	      if (this.props.simplified !== simplified) {
	        this._reset();
	      }
	      return;
	    }

	    var anchor = this._getAnchor(nextProps);
	    var visibileDiff = visible !== this.props.visible;
	    var childStyle = _react2.default.Children.only(children).props.style;

	    if (visibileDiff) {
	      if (!visible) {
	        this._reset();
	      } else {
	        // Initialize the layover logic
	        var rect = this._contextRect || this._toggle.getBoundingClientRect();
	        if (this._dialog) {
	          this._manageFixedToListener(this._dialog, true);
	        } else if (!this._inFixed) {
	          this._manageFixedToListener(fixedTo, true);
	        }

	        this._init(fixedTo, anchor, sameWidth, centered, rect);
	      }
	    } else if (fixedTo !== this.props.fixedTo && visible) {
	      // swap the fixedTo listeners
	      this._manageFixedToListener(this.props.fixedTo, false);
	      this._manageFixedToListener(fixedTo, true);
	    } else if (childStyle !== _react2.default.Children.only(this.props.children).props.style) {
	      // Re-merge styles... This is only required if all the others fail since all the other
	      // logic always merges styles with the children styles
	      this.setState({ styles: _extends({}, this.state.styles, childStyle) });
	    }
	  };

	  Layover.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var _this3 = this;

	    var _props2 = this.props,
	        visible = _props2.visible,
	        closeOnOutsideClick = _props2.closeOnOutsideClick;

	    var enabled = visible && closeOnOutsideClick;
	    var prevEnabled = prevProps.visible && prevProps.closeOnOutsideClick;
	    if (enabled !== prevEnabled) {
	      if (this._clickTimeout) {
	        clearTimeout(this._clickTimeout);
	        this._clickTimeout = null;
	      }

	      // This is really an arbitrary timeout time, but firefox needs to have a timeout
	      // so the context menu doesn't close automatically due to an "outside click" being
	      // triggered
	      this._clickTimeout = setTimeout(function () {
	        _this3._clickTimeout = null;
	        (0, _handleWindowClickListeners2.default)(_this3._handleOutsideClick, enabled);
	      }, enabled ? 300 : 0);
	    }
	  };

	  Layover.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._clickTimeout) {
	      clearTimeout(this._clickTimeout);
	      this._clickTimeout = null;
	    }
	    (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);

	    if (!this.props.simplified) {
	      this._manageFixedToListener(this.props.fixedTo, false);
	      this._manageWindowResizeListener(false);
	    }
	  };

	  Layover.prototype._getAnchor = function _getAnchor(_ref) {
	    var anchor = _ref.anchor,
	        belowAnchor = _ref.belowAnchor,
	        animationPosition = _ref.animationPosition;

	    return animationPosition === Layover.Positions.BELOW && belowAnchor || anchor;
	  };

	  /**
	   * Whew. Ok. So since the fixedTo prop can either be two elements or a single item,
	   * this utility function is used to add/remove the scrolling event listeners for
	   * this prop.
	   *
	   * When the fixedTo prop has a horizontal and/or vertical attribute, the `window`
	   * will be the fallback option. If both the horizontal and vertical attributes are
	   * defined, the `window` still needs to have a scroll listener to make sure it
	   * doesn't go off screen.
	   */


	  /**
	   * This is just a simple utility function to merge the existing state styles,
	   * any new styles, and the children's styles (with most precedence).
	   */


	  /**
	   * This initializes the popover with the default styles, and the initial bookkeeping
	   * variables to update while it is open.
	   */


	  /**
	   * Attempts to fix the child by setting it's location ONLY for the entire
	   * page viewport. I didn't bother attempting to fix it for additional fixedTo
	   * stuff.
	   */


	  /**
	   * When the child is initially mounted, it will update the styles for centering
	   * the element (if enabled) and then attempt to fix any viewport issues.
	   */


	  /**
	   * This is the meat of the stuff. Do lots of viewport / container checks to make sure
	   * the element should still be visible. If it is still visible, it will update its
	   * x and y position for the new scroll position.
	   */


	  /**
	   * Attempts to fix a viewport problem by swapping the positioning. This only does
	   * vertical switching right now.
	   *
	   * @param {Object} vp - The result of the viewport function
	   * @return {boolean} true if the fix was able to be done and successful.
	   */


	  Layover.prototype.render = function render() {
	    var _props3 = this.props,
	        className = _props3.className,
	        block = _props3.block,
	        toggle = _props3.toggle,
	        visible = _props3.visible,
	        children = _props3.children,
	        fullWidth = _props3.fullWidth,
	        animationPosition = _props3.animationPosition,
	        simplified = _props3.simplified,
	        fillViewportWidth = _props3.fillViewportWidth,
	        fillViewportHeight = _props3.fillViewportHeight,
	        anchor = _props3.anchor,
	        belowAnchor = _props3.belowAnchor,
	        onClose = _props3.onClose,
	        repositionOnScroll = _props3.repositionOnScroll,
	        repositionOnResize = _props3.repositionOnResize,
	        sameWidth = _props3.sameWidth,
	        centered = _props3.centered,
	        fixedTo = _props3.fixedTo,
	        toggleQuery = _props3.toggleQuery,
	        yThreshold = _props3.yThreshold,
	        xThreshold = _props3.xThreshold,
	        onContextMenu = _props3.onContextMenu,
	        preventContextMenu = _props3.preventContextMenu,
	        closeOnOutsideClick = _props3.closeOnOutsideClick,
	        minLeft = _props3.minLeft,
	        minRight = _props3.minRight,
	        minBottom = _props3.minBottom,
	        props = _objectWithoutProperties(_props3, ['className', 'block', 'toggle', 'visible', 'children', 'fullWidth', 'animationPosition', 'simplified', 'fillViewportWidth', 'fillViewportHeight', 'anchor', 'belowAnchor', 'onClose', 'repositionOnScroll', 'repositionOnResize', 'sameWidth', 'centered', 'fixedTo', 'toggleQuery', 'yThreshold', 'xThreshold', 'onContextMenu', 'preventContextMenu', 'closeOnOutsideClick', 'minLeft', 'minRight', 'minBottom']);

	    var child = void 0;
	    var childId = void 0;
	    if (visible) {
	      child = _react2.default.Children.only(children);
	      if (child.props.id) {
	        childId = child.props.id;
	      } else if (props.id) {
	        childId = props.id + '-layover';
	      }

	      child = _react2.default.cloneElement(children, {
	        ref: this._fixateChild,
	        id: childId,
	        style: simplified ? child.props.style : this.state.styles,
	        className: (0, _classnames2.default)('md-layover-child md-layover-child--' + animationPosition, {
	          'md-layover-child--simplified': simplified
	        }, child.props.className)
	      });
	    }

	    var observer = null;
	    if (!simplified && !fillViewportWidth && !fillViewportHeight) {
	      observer = _react2.default.createElement(_ResizeObserver2.default, {
	        watchWidth: !fillViewportWidth,
	        watchHeight: !fillViewportHeight,
	        target: this._child,
	        onResize: this._handleResize
	      });
	    }

	    return _react2.default.createElement(
	      _CSSTransitionGroup2.default,
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-layover', {
	          'md-layover--simplified': simplified,
	          'md-inline-block': !block && !fullWidth,
	          'md-full-width': fullWidth
	        }, className),
	        ref: this._setContainer,
	        'aria-haspopup': true,
	        'aria-owns': childId,
	        'aria-expanded': visible,
	        transitionEnter: props.transitionEnterTimeout !== 0,
	        transitionLeave: props.transitionLeaveTimeout !== 0,
	        onContextMenu: this._handleContextMenu
	      }),
	      observer,
	      toggle,
	      child
	    );
	  };

	  return Layover;
	}(_react.PureComponent);

	Layover.HorizontalAnchors = _HorizontalAnchors2.default;
	Layover.VerticalAnchors = _VerticalAnchors2.default;
	Layover.Positions = _Positions2.default;
	Layover.propTypes = {
	  /**
	   * A id to give the layover itself. This is generally recommended for accessibility. If the
	   * child does not have an id, the child will automatically be updated to be `${id}-layover`.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the layover.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the layover.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Boolean if the layover's child is currently visible.
	   */
	  visible: _propTypes2.default.bool.isRequired,

	  /**
	   * This should either be a single element or two elements that the layover recalculates
	   * its fixed position when scrolling for horizontal and vertical.
	   *
	   * When it is a single element, it will recalculate for both horizontal and vertical
	   * scrolling. Otherwise, you can specify the element for horizontal scrolling and a
	   * separate element for vertical scrolling. If one is omitted, it will default to `window`.
	   *
	   * If the component is no longer considered to be in view after scrolling, the `onClose`
	   * prop will be called.
	   */
	  fixedTo: _fixedToShape2.default.isRequired,

	  /**
	   * The renderable item that causes the Layover to become visible. This _should_
	   * most likely be an `element` or `arrayOf(element)`, but anything is allowed.
	   */
	  toggle: _propTypes2.default.node,

	  /**
	   * Since the `toggle` prop can be anything, I need a way to be able to find an
	   * element to base all the calculations on. This can either be a string that
	   * gets passed to `layover.querySelector`, a DOM Element, or a function that
	   * returns a DOM Element.
	   */
	  toggleQuery: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object, _propTypes2.default.string]).isRequired,

	  /**
	   * A single child that should be fixed to the toggle element.
	   */
	  children: _propTypes2.default.element.isRequired,

	  /**
	   * Boolean if the Layover should be displayed as a block instead of as an inline block.
	   */
	  block: _propTypes2.default.bool,

	  /**
	   * Boolean if the `children` should be centered horizontally and vertically while keeping
	   * its height in mind as well. This is *only* valid if both the x and y `anchor` targets
	   * are `CENTER`.
	   */
	  centered: _propTypes2.default.bool,

	  /**
	   * Boolean if the layover should gain the `md-full-width` class name.
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * Boolean if the width of the children should be updated automatically to be the width
	   * of the toggle element.
	   */
	  sameWidth: _propTypes2.default.bool,

	  /**
	   * The minimum value the `left` style can be for the child component. This is really just used
	   * to make sure it doesn't scroll off the left of the page. It can also be used to make
	   * full screen layovers on devices when when the `fillViewportWidth` prop is enabled.
	   *
	   * This can either be a number of pixels or a string for percentages. If this value is a string
	   * **it will always be used over the calculated values** so it is preferred to use a number.
	   *
	   * @see {@link #minRight}
	   * @see {@link #fillViewportWidth}
	   */
	  minLeft: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,

	  /**
	   * The minimum value the `right` style can be for the child component. This is really just used
	   * to make sure it doesn't scroll off the right of the page when the `fillViewportWidth` prop is
	   * enabled.
	   *
	   * This can either be a number of pixels or a string for percentages. If this value is a string
	   * **it will always be used over the calculated values** so it is preferred to use a number.
	   *
	   * @see {@link #minLeft}
	   * @see {@link #fillViewportWidth}
	   */
	  minRight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,

	  /**
	   * The minimum value that can be used for the `bottom` prop when the `fillViewportHeight` prop is enabled.
	   * It is generally recommended to keep this value at `0` to keep it stretched to the bottom of the viewport
	   * or setting it to a small positive number to add some padding.
	   *
	   * This can either be a number of pixels or a string for percentages. If this value is a string
	   * **it will always be used over the calculated values** so it is preferred to use a number.
	   *
	   * @see {@link #fillViewportHeight}
	   */
	  minBottom: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the layover should make the child fill the entire viewport's width. This will just
	   * style the child element with:
	   *
	   * ```js
	   * childStyle = {
	   *   left: this.props.minLeft,
	   *   right: this.props.minRight,
	   * };
	   * ```
	   *
	   * If you add any additional constraints such as `width` or `max-width`, it will not span the entire viewport's
	   * width. This prop should generally really only be used on mobile devices. Using this prop along with
	   * `fillViewportHeight` for Autocompletes can create great Android mobile searches. See the `fillViewportHeight`
	   * for more information about why it is *only Android*.
	   *
	   * @see {@link #minLeft}
	   * @see {@link #minRight}
	   * @see {@link #fillViewportHeight}
	   */
	  fillViewportWidth: _propTypes2.default.bool,

	  /**
	   * Boolean if the layover should fill the height of the viewport from the current calculated `top`. This will just
	   * style the child element with:
	   *
	   * ```js
	   * childStyle = {
	   *   top: currentCalculatedTop,
	   *   bottom: this.props.minBottom,
	   *   maxHeight: 'none',
	   * };
	   * ```
	   *
	   * This is *super* nice on Android devices since it will allow you to create nice toolbar search autocompletes
	   * in your app and the list of items will grow until it reaches the soft keyboard. It isn't as nice on iOS since
	   * iOS does not subtract the soft keyboard from the viewport's size so the list will still extend to the bottom
	   * of the page.
	   *
	   * @see {@link #minBottom}
	   * @see {@link #fillViewportWidth}
	   */
	  fillViewportHeight: _propTypes2.default.bool,

	  /**
	   * A function used to hide the visibility of the children when the children are no longer
	   * visible or an element outside of the layover is clicked.
	   */
	  onClose: _propTypes2.default.func.isRequired,

	  /**
	   * The component to render the Layover as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * The transition name to use for the children appearing/disappearing.
	   */
	  transitionName: _propTypes2.default.string.isRequired,

	  /**
	   * The transition duration for the enter animation. The animation can be disabled by setting
	   * this value to 0.
	   */
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * The transition duration for the leave animation. The animation can be disabled by setting
	   * this value to 0.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * This is a threshold that is used to calculate if the `children` is still in
	   * view by applying this multiplier to the `children`'s width.
	   */
	  xThreshold: _propTypes2.default.number.isRequired,

	  /**
	   * This is a threshold that is used to calculate if the `children` is still in
	   * view by applying this multiplier to the `toggle`'s height.
	   */
	  yThreshold: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the `children` should be hidden when an element outside
	   * of the `Layout` component has been clicked.
	   */
	  closeOnOutsideClick: _propTypes2.default.bool.isRequired,

	  /**
	   * This is how the children get "anchored" to the `toggle` element and how the
	   * auto-fix attempts will be made. Right now, the auto fixes will only be handled
	   * on viewport boundaries instead of `fixedTo` boundaries. It was too hard for
	   * first attempt.
	   *
	   * The general behavior will be that an equal-opposite of an anchor will be chosen
	   * when that direction is out of viewport. So for example, the children are out
	   * of viewport for the right of the screen, and the `anchor.x` value is
	   * `Layover.HorizontalPositions.RIGHT`, the children will be swapped to be the `LEFT`
	   * of the `toggle` component now.
	   *
	   * So a full list:
	   * - `LEFT` / `RIGHT`
	   * - `INNER_LEFT` / `INNER_RIGHT`
	   * - `TOP` / `BOTTOM`
	   *
	   * The `CENTER` and `OVERLAP` positions can not be automatically adjusted.
	   *
	   * > To be safe, you should use the enum values for the `x` and `y` values.
	   * @see {@link #VerticalAnchors}
	   * @see {@link #HorizontalAnchors}
	   */
	  anchor: _anchorShape2.default.isRequired,

	  /**
	   * This is how the children get "anchored" when the `animationPositions` is set to `Layover.Positions.BELOW`.
	   * Set this to `null` to continue using the base `anchor` prop instead of switching to this anchor.
	   *
	   * @see {@link #anchor}
	   */
	  belowAnchor: _anchorShape2.default,

	  /**
	   * This is the position that the children should animate from. It directly ties into
	   * the `$md-layover-child-positions` Sass variable.
	   */
	  animationPosition: _positionShape2.default.isRequired,

	  /**
	   * If you would like the layover to interact as a context menu, provide this prop. It will
	   * make the children appear relative to the context menu origin automatically.
	   *
	   * @see {@link #preventContextMenu}
	   */
	  onContextMenu: _propTypes2.default.func,

	  /**
	   * Boolean if the default behavior of the context menu should be prevented when using the
	   * `onContextMenu` prop.
	   *
	   * @see {@link #onContextMenu}
	   */
	  preventContextMenu: _propTypes2.default.bool,

	  /**
	   * Boolean if the layover should attempt to automatically adjust the position of the element to
	   * keep it within the viewport. If this value is set to `false`, the `onClose` prop will be called
	   * instead.
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the layover should attempt to automatically adjust the position of the element to
	   * keep it within the viewport. If this value is set to `false`, the `onClose` prop will be called
	   * instead.
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * Boolean if the layover should become "simplified". This basically disables all the logic for
	   * keeping the child within the viewport and allows you to manage all the positioning via CSS.
	   *
	   * When this is enabled, it updates the `Layover` to have `position: relative` while the child will
	   * have `position: absolute` which will allow for simple `top`, `right`, `bottom`, and/or `left` CSS
	   * to position as wanted.
	   *
	   * This is really only helpful in cases where the layover can't calculate things correctly due to
	   * being in fixed containers somewhere in the page or some other weird stuff. Hopefully this won't
	   * really need to be used much.
	   */
	  simplified: _propTypes2.default.bool
	};
	Layover.defaultProps = {
	  anchor: {
	    x: Layover.HorizontalAnchors.INNER_LEFT,
	    y: Layover.VerticalAnchors.OVERLAP
	  },
	  belowAnchor: {
	    x: Layover.HorizontalAnchors.CENTER,
	    y: Layover.VerticalAnchors.BOTTOM
	  },
	  animationPosition: Layover.Positions.BELOW,
	  repositionOnScroll: true,
	  repositionOnResize: false,
	  component: 'div',
	  fixedTo: typeof window !== 'undefined' ? window : {},
	  toggleQuery: '.md-text-field-container,button,*[role="button"],*[role="listbox"]',
	  transitionName: 'md-layover',
	  transitionEnterTimeout: 200,
	  transitionLeaveTimeout: 200,
	  yThreshold: 0.38,
	  xThreshold: 0.38,
	  closeOnOutsideClick: true,
	  preventContextMenu: true,
	  simplified: false,
	  minLeft: 0,
	  minRight: 0,
	  minBottom: 0,
	  fillViewportWidth: false,
	  fillViewportHeight: false
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this4 = this;

	  this._isCenteredDialog = function () {
	    return _this4._dialog && _this4._dialog.classList.contains('md-dialog--centered');
	  };

	  this._createStyles = function (anchor, centered, child, rect) {
	    var x = anchor.x,
	        y = anchor.y;
	    var offsetWidth = child.offsetWidth,
	        offsetHeight = child.offsetHeight;


	    var left = void 0;
	    var top = void 0;
	    if (x === _HorizontalAnchors2.default.CENTER) {
	      left = rect.left + rect.width / 2 - offsetWidth / 2;
	    } else if (x === _HorizontalAnchors2.default.INNER_RIGHT) {
	      left = rect.right - offsetWidth;
	    } else if (x === _HorizontalAnchors2.default.LEFT) {
	      left = rect.left - offsetWidth;
	    } else if (x === _HorizontalAnchors2.default.RIGHT) {
	      left = rect.right;
	    }

	    if (centered && x === _HorizontalAnchors2.default.CENTER && y === _VerticalAnchors2.default.CENTER) {
	      top = rect.top - offsetHeight / 2 + rect.height / 2;
	    } else if (y === _VerticalAnchors2.default.TOP) {
	      top = rect.top - offsetHeight;
	    } else if (y === _VerticalAnchors2.default.CENTER) {
	      top = rect.top + rect.height / 2;
	    } else if (y === _VerticalAnchors2.default.BOTTOM) {
	      top = rect.bottom;
	    }

	    if (_this4._isCenteredDialog()) {
	      var dialogRect = _this4._dialog.getBoundingClientRect();
	      left -= dialogRect.left;
	      top -= dialogRect.top;
	    }

	    var style = {};
	    if (top) {
	      style.top = top;
	    }

	    if (left) {
	      style.left = left;
	    }

	    return style;
	  };

	  this._manageFixedToListener = function (fixedTo, add) {
	    var listener = (add ? 'add' : 'remove') + 'EventListener';
	    if (fixedTo !== window && (fixedTo.x || fixedTo.y)) {
	      var x = fixedTo.x,
	          y = fixedTo.y;

	      if (x) {
	        x[listener]('scroll', _this4._handleScroll);
	      } else {
	        window[listener]('scroll', _this4._handleScroll);
	      }

	      if (y) {
	        y[listener]('scroll', _this4._handleScroll);
	      } else if (!x) {
	        // Only add the window event listener once
	        window[listener]('scroll', _this4._handleScroll);
	      }

	      if (y && y !== window && x && x !== window) {
	        window[listener]('scroll', _this4._handleScroll);
	      }
	    } else {
	      fixedTo[listener]('scroll', _this4._handleScroll);

	      if (fixedTo !== window) {
	        window[listener]('scroll', _this4._handleScroll);
	      }
	    }
	  };

	  this._manageWindowResizeListener = function (enabled) {
	    if (_this4._windowResizeTimeout) {
	      clearTimeout(_this4._windowResizeTimeout);
	      _this4._windowResizeTimeout = null;
	    }

	    if (enabled) {
	      // add a 2 second delay before watching resize events since Android soft keyboards trigger a resize event.
	      _this4._windowResizeTimeout = setTimeout(function () {
	        _this4._windowResizeTimeout = null;
	        window.addEventListener('resize', _this4._handleWindowResize);
	      }, 2000);
	    } else {
	      window.removeEventListener('resize', _this4._handleWindowResize);
	    }
	  };

	  this._mergeStyles = function (style) {
	    var _props4 = _this4.props,
	        minLeft = _props4.minLeft,
	        minRight = _props4.minRight,
	        minBottom = _props4.minBottom,
	        fillViewportWidth = _props4.fillViewportWidth,
	        fillViewportHeight = _props4.fillViewportHeight;

	    if (fillViewportWidth) {
	      style.left = minLeft;
	      style.right = minRight;
	    } else {
	      if (style.left) {
	        style.left = Math.max(minLeft, style.left);
	      }

	      if (style.right) {
	        style.right = Math.max(minRight, style.right);
	      }
	    }

	    if (fillViewportHeight) {
	      style.bottom = minBottom;
	      style.maxHeight = 'none';
	    } else {
	      // These styles are only created when filling the viewport height, so clear
	      // them out again
	      style.bottom = null;
	      style.maxHeight = null;
	    }

	    return _extends({}, _this4.state.styles, style, _react2.default.Children.only(_this4.props.children).props.style);
	  };

	  this._init = function (fixedTo, anchor, sameWidth, centered, rect) {
	    if (_this4._child) {
	      // The init function can be called again if the user quickly toggles the layover. If that
	      // is the case, we want the styles that were set after the _positionChild _attemptFix.
	      return;
	    }

	    var height = rect.height,
	        width = rect.width;
	    var top = rect.top,
	        left = rect.left,
	        right = rect.right;

	    var x = void 0;
	    var y = void 0;
	    if (_this4._dialog) {
	      var scroll = (0, _getScroll2.default)(_this4._dialog);
	      x = scroll.x;
	      y = scroll.y;

	      if (_this4._isCenteredDialog()) {
	        var dialogRect = _this4._dialog.getBoundingClientRect();
	        left -= dialogRect.left;
	        top -= dialogRect.top;
	        right -= dialogRect.right;
	      }
	    } else if (fixedTo !== window && (fixedTo.y || fixedTo.x)) {
	      x = (0, _getScroll2.default)(fixedTo.x || window).x;
	      y = (0, _getScroll2.default)(fixedTo.y || window).y;
	    } else {
	      var _scroll = (0, _getScroll2.default)(fixedTo);
	      x = _scroll.x;
	      y = _scroll.y;
	    }

	    _this4._initialX = x;
	    _this4._initialY = y;
	    _this4._initialLeft = left;
	    _this4._initialTop = top;

	    if (anchor.x === _HorizontalAnchors2.default.INNER_RIGHT) {
	      _this4._initialLeft = left + width;
	    } else if (anchor.x === _HorizontalAnchors2.default.RIGHT) {
	      _this4._initialLeft = right;
	    }

	    if (!centered) {
	      _this4._lastYFix = anchor.y === _VerticalAnchors2.default.TOP ? 'bottom' : 'top';
	    } else {
	      // Centered is not fixable
	      _this4._lastYFix = null;
	    }
	    if (anchor.x === _HorizontalAnchors2.default.LEFT || anchor.x === _HorizontalAnchors2.default.INNER_LEFT) {
	      _this4._lastXFix = 'right';
	    } else if (anchor.x === _HorizontalAnchors2.default.RIGHT || anchor.x === _HorizontalAnchors2.default.INNER_RIGHT) {
	      _this4._lastXFix = 'left';
	    } else {
	      // Can't fix others
	      _this4._lastXFix = null;
	    }

	    if (anchor.y === _VerticalAnchors2.default.BOTTOM) {
	      _this4._initialTop = top + height;
	    }

	    if (fixedTo !== window && !fixedTo.y && !fixedTo.x) {
	      var _scroll2 = (0, _getScroll2.default)(window);
	      _this4._initialWinX = _scroll2.x;
	      _this4._initialWinY = _scroll2.y;
	    }

	    var styles = _this4._mergeStyles({
	      left: _this4._initialLeft,
	      top: _this4._initialTop,
	      transformOrigin: undefined,
	      width: sameWidth ? width : undefined
	    });

	    _this4.setState({ styles: styles });
	  };

	  this._reset = function () {
	    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this4.props,
	        fixedTo = _ref2.fixedTo;

	    // Reset all the bookkeeping variables for a fresh start on re-visible
	    _this4._lastXFix = null;
	    _this4._lastYFix = null;
	    _this4._initialX = null;
	    _this4._initialY = null;
	    _this4._initialTop = null;
	    _this4._initialLeft = null;

	    if (!_this4._inFixed) {
	      if (_this4._dialog) {
	        _this4._manageFixedToListener(_this4._dialog, false);
	      }

	      _this4._manageFixedToListener(fixedTo, false);
	    }
	  };

	  this._setContainer = function (container) {
	    _this4._container = (0, _reactDom.findDOMNode)(container);
	    _this4._toggle = null;
	    if (!_this4._container) {
	      return;
	    }

	    var _props5 = _this4.props,
	        toggleQuery = _props5.toggleQuery,
	        onContextMenu = _props5.onContextMenu;

	    if (typeof toggleQuery === 'function') {
	      _this4._toggle = toggleQuery();
	    } else if (typeof toggleQuery === 'string') {
	      _this4._toggle = _this4._container.querySelector(toggleQuery);
	    } else {
	      _this4._toggle = toggleQuery;
	    }

	    if (!_this4._toggle && !onContextMenu && ("production") !== 'production') {
	      var error = new Error('Unable to find a toggle component with the provided `toggleQuery` and `toggle` element. \n' + ('`toggleQuery`: `' + toggleQuery + '`'));
	      error.toggleQuery = toggleQuery;
	      error.toggle = _this4.props.toggle;

	      throw error;
	    }

	    var node = _this4._container;
	    while (node) {
	      var fixed = window.getComputedStyle(node).position === 'fixed';
	      if (fixed && node.className.match(/md-dialog--(full-page|centered)/)) {
	        _this4._dialog = node;
	        return;
	      } else if (fixed && !node.classList.contains('md-layover-child')) {
	        _this4._inFixed = true;
	        return;
	      }

	      node = node.offsetParent;
	    }
	  };

	  this._initialFix = function () {
	    // Need to make a clone that disables any transitions to calculate positioning stuff
	    var clone = _this4._child.cloneNode(true);
	    clone.style.webkitTransform = 'none';
	    clone.style.transfrom = 'none';
	    clone.style.webkitTransition = 'none';
	    clone.style.transition = 'none';

	    _this4._child.parentNode.appendChild(clone);
	    var vp = (0, _viewport2.default)(clone);
	    var childHeight = clone.offsetHeight,
	        childWidth = clone.offsetWidth;

	    _this4._child.parentNode.removeChild(clone);

	    if (vp === true || !_this4._toggle || !_this4._child) {
	      return;
	    }

	    var _getAnchor2 = _this4._getAnchor(_this4.props),
	        x = _getAnchor2.x,
	        y = _getAnchor2.y;

	    var toggleHeight = void 0;
	    var toggleWidth = void 0;
	    if (_this4._contextRect) {
	      toggleHeight = _this4._contextRect.height;
	      toggleWidth = _this4._contextRect.width;
	    } else {
	      toggleHeight = _this4._toggle.offsetHeight;
	      toggleWidth = _this4._toggle.offsetWidth;
	    }

	    var addToTop = 0;
	    var addToLeft = 0;

	    // Android devices will never get this far because they consider the keyboard as part
	    // of the viewport, iOS will and cause it to be a giant negative number. *sigh*
	    // Prevent any additional vertical positioning for iOS
	    if (!_this4.props.fillViewportHeight && (!vp.top || !vp.bottom)) {
	      var multiplier = vp.top ? -1 : 1;
	      if (!vp.bottom && y === _VerticalAnchors2.default.OVERLAP) {
	        addToTop += toggleHeight;
	      } else if (y === _VerticalAnchors2.default.TOP || y === _VerticalAnchors2.default.BOTTOM) {
	        addToTop += multiplier * toggleHeight;
	      }

	      addToTop += multiplier * childHeight;

	      _this4._lastYFix = vp.top ? 'bottom' : 'top';
	    }

	    if (!_this4.props.fillViewportWidth && x !== _HorizontalAnchors2.default.CENTER && (!vp.left || !vp.right)) {
	      if (!vp.left && x === _HorizontalAnchors2.default.LEFT) {
	        addToLeft += toggleWidth + childWidth;
	        _this4._lastXFix = 'left';
	      } else if (!vp.left && x === _HorizontalAnchors2.default.INNER_LEFT) {
	        addToLeft += toggleWidth;
	        _this4._lastXFix = 'left';
	      } else if (!vp.right && x === _HorizontalAnchors2.default.RIGHT) {
	        addToLeft -= toggleWidth + childWidth;
	        _this4._lastXFix = 'right';
	      } else if (!vp.right && x === _HorizontalAnchors2.default.INNER_RIGHT) {
	        addToLeft -= toggleWidth;
	        _this4._lastXFix = 'right';
	      }
	    }

	    if (addToTop !== 0 || addToLeft !== 0) {
	      _this4._initialTop += addToTop;
	      _this4._initialLeft += addToLeft;

	      _this4.setState({ styles: _this4._mergeStyles({ top: _this4._initialTop, left: _this4._initialLeft }) });
	    }
	  };

	  this._fixateChild = function (child) {
	    _this4._child = (0, _reactDom.findDOMNode)(child);

	    if (_this4._child !== null) {
	      _this4._childComponent = _react2.default.Children.only(_this4.props.children);

	      // If child also has a ref callback, simulate the same thing
	      if (typeof _this4._childComponent.ref === 'function') {
	        _this4._childComponent.ref(child);
	      }

	      if (_this4.props.simplified || !_this4._child || !_this4._toggle && !_this4._contextRect) {
	        return;
	      }

	      if (_this4._dialog && _this4._dialog.classList.contains('md-dialog--centered')) {
	        return;
	      }

	      _this4._manageWindowResizeListener(true);
	      _this4._positionChild();
	    } else if (_this4._childComponent && typeof _this4._childComponent.ref === 'function') {
	      _this4._childComponent.ref(child);
	    }
	  };

	  this._positionChild = function () {
	    var centered = _this4.props.centered;

	    var anchor = _this4._getAnchor(_this4.props);
	    var rect = _this4._contextRect || _this4._toggle.getBoundingClientRect();
	    _this4._height = rect.height;
	    _this4._width = rect.width;
	    var styles = _this4._createStyles(anchor, centered, _this4._child, rect);
	    if (styles.top || styles.left) {
	      _this4._initialLeft = styles.left || _this4._initialLeft;
	      _this4._initialTop = styles.top || _this4._initialTop;
	      _this4.setState({ styles: _this4._mergeStyles(styles) }, _this4._initialFix);
	    } else {
	      _this4._initialFix();
	    }
	  };

	  this._handleResize = function () {
	    if (_this4.props.visible) {
	      _this4._positionChild();
	    }
	  };

	  this._handleScroll = function (e) {
	    if (!_this4.props.repositionOnScroll) {
	      _this4._manageFixedToListener(_this4.props.fixedTo, false);
	      _this4.props.onClose(e);
	    }

	    if (!_this4._ticking) {
	      requestAnimationFrame(function () {
	        return _this4._handleTick(e);
	      });
	    }

	    _this4._ticking = true;
	  };

	  this._handleTick = function (e) {
	    var _props6 = _this4.props,
	        fixedTo = _props6.fixedTo,
	        xThreshold = _props6.xThreshold,
	        yThreshold = _props6.yThreshold;

	    var vp = (0, _viewport2.default)(_this4._child);
	    if (vp !== true && vp.left && vp.right) {
	      var fixed = !_this4._contextRect && _this4._attemptFix(vp);
	      if (!fixed) {
	        _this4.props.onClose(e);
	        _this4._ticking = false;
	      }

	      return;
	    } else if ((0, _isOutOfBounds2.default)(fixedTo, _this4._child, _this4._toggle, yThreshold, xThreshold)) {
	      _this4.props.onClose(e);
	      _this4._ticking = false;
	      return;
	    }

	    var x = void 0;
	    var y = void 0;
	    if (_this4._dialog) {
	      var scroll = (0, _getScroll2.default)(_this4._dialog);
	      x = scroll.x;
	      y = scroll.y;
	    } else if (fixedTo !== window && (fixedTo.x || fixedTo.y)) {
	      x = (0, _getScroll2.default)(fixedTo.x || window).x;
	      y = (0, _getScroll2.default)(fixedTo.y || window).y;
	    } else {
	      var _scroll3 = (0, _getScroll2.default)(fixedTo);
	      x = _scroll3.x;
	      y = _scroll3.y;
	    }

	    var winX = void 0;
	    var winY = void 0;
	    // When using the additional fixedTo stuff, need to also keep track of the entire
	    // window's scrolling..
	    if (fixedTo !== window && !fixedTo.x && !fixedTo.y) {
	      var _scroll4 = (0, _getScroll2.default)(window);
	      winX = _scroll4.x;
	      winY = _scroll4.y;
	    }

	    var styles = _this4.state.styles;
	    var left = styles.left,
	        top = styles.top;

	    if (_this4._initialX !== x) {
	      left = _this4._initialX - x + _this4._initialLeft;
	    }

	    if (winX && _this4._initialWinX !== winX) {
	      left = _this4._initialWinX - winX + _this4._initialX;
	    }

	    if (_this4._initialY !== y) {
	      top = _this4._initialY - y + _this4._initialTop;
	    }

	    if (winY && _this4._initialWinY !== winY) {
	      top = _this4._initialWinY - winY + _this4._initialTop + (_this4._initialY - y);
	    }

	    if (styles.top !== top || styles.left !== left) {
	      _this4.setState({ styles: _this4._mergeStyles({ left: left, top: top }) }, function () {
	        _this4._ticking = false;
	      });
	    } else {
	      _this4._ticking = false;
	    }
	  };

	  this._handleOutsideClick = function (e) {
	    if (_this4._contextRect && _this4._child && !_this4._child.contains(e.target) || _this4._container && !_this4._container.contains(e.target)) {
	      _this4.props.onClose(e);
	    }
	  };

	  this._handleWindowResize = function (e) {
	    var _props7 = _this4.props,
	        onClose = _props7.onClose,
	        repositionOnResize = _props7.repositionOnResize;

	    if (repositionOnResize) {
	      _this4._handleResize();
	    } else {
	      onClose(e);
	      _this4._manageWindowResizeListener(false);
	    }
	  };

	  this._attemptFix = function (vp) {
	    var _getAnchor3 = _this4._getAnchor(_this4.props),
	        x = _getAnchor3.x,
	        y = _getAnchor3.y;

	    var centered = x === _HorizontalAnchors2.default.CENTER && y === _VerticalAnchors2.default.CENTER && _this4.props.centered;
	    if (centered || _this4._lastYFix === 'top' && !vp.top || _this4._lastYFix === 'bottom' && !vp.bottom) {
	      return false;
	    }

	    var toggleTop = _this4._toggle.getBoundingClientRect().top;
	    var toggleHeight = _this4._toggle.offsetHeight;
	    var childHeight = _this4._child.offsetHeight;

	    // Can;t fix if the child can't fit on the page based on the toggle's position

	    if (toggleTop + toggleHeight + childHeight > window.innerHeight) {
	      return false;
	    }

	    var _child$getBoundingCli = _this4._child.getBoundingClientRect(),
	        top = _child$getBoundingCli.top;

	    var newTop = _this4._initialTop;
	    var addToTop = childHeight * (vp.top ? -1 : 1);
	    if (y === _VerticalAnchors2.default.OVERLAP) {
	      addToTop += (vp.top ? 1 : -1) * toggleHeight;
	    } else if (y === _VerticalAnchors2.default.TOP || y === _VerticalAnchors2.default.BOTTOM) {
	      addToTop += (_this4._lastYFix === 'top' ? -1 : 1) * toggleHeight;
	    }

	    if (addToTop !== 0) {
	      newTop = top + addToTop;
	      _this4._lastYFix = vp.top ? 'bottom' : 'top';
	    }

	    if (newTop !== _this4._initialTop) {
	      _this4._initialTop = newTop;
	      var fixedTo = _this4.props.fixedTo;

	      var scrollEl = fixedTo;
	      if (fixedTo !== window && (fixedTo.y || fixedTo.x)) {
	        scrollEl = fixedTo.y || window;
	      }

	      _this4._initialY = (0, _getScroll2.default)(scrollEl).y;

	      _this4.setState({ styles: _this4._mergeStyles({ top: _this4._initialTop }) }, function () {
	        _this4._ticking = false;
	      });
	      return true;
	    }

	    return false;
	  };

	  this._handleContextMenu = function (e) {
	    var anchor = _this4._getAnchor(_this4.props);
	    var _props8 = _this4.props,
	        onContextMenu = _props8.onContextMenu,
	        preventContextMenu = _props8.preventContextMenu,
	        fixedTo = _props8.fixedTo,
	        sameWidth = _props8.sameWidth,
	        centered = _props8.centered,
	        visible = _props8.visible;

	    if (!onContextMenu) {
	      return;
	    }

	    _this4._contextRect = (0, _getSelectedTextPosition2.default)(e);
	    if (preventContextMenu && (!_this4._child || !_this4._child.contains(e.target))) {
	      e.preventDefault();
	    }

	    onContextMenu(e);
	    if (visible) {
	      _this4._init(fixedTo, anchor, sameWidth, centered, _this4._contextRect);
	    }
	  };
	};

	exports.default = Layover;

/***/ }),
/* 350 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = handleWindowClickListeners;
	/** @module utils/EventUtils/handleWindowClickListeners */
	var mobileSafari = void 0;

	/**
	 * Since mobile safari doesn't delegate click events to the window (it only does touch events),
	 * this utility function will hack a fix to allow the delegation by updaging the body's cursor
	 * to be a pointer.
	 *
	 * Hopefully this can be removed one day....
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile
	 * @param {function} cb - the callback function to use for a window click event.
	 * @param {boolean} enabled - boolean if the click event is enabled.
	 */
	function handleWindowClickListeners(cb) {
	  var enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (typeof mobileSafari === 'undefined' && typeof window !== 'undefined') {
	    var ua = window.navigator.userAgent;
	    var iOS = ua.match(/iP(ad|hone)/i);
	    var webkit = ua.match(/WebKit/i);
	    mobileSafari = iOS && webkit && !ua.match(/CriOS/i);

	    if (mobileSafari) {
	      document.body.style.cursor = 'pointer';
	    }
	  }

	  var listener = window[(enabled ? 'add' : 'remove') + 'EventListener'];
	  listener('click', cb);
	}

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = getSelectedTextPosition;

	var _getSelectedText = __webpack_require__(352);

	var _getSelectedText2 = _interopRequireDefault(_getSelectedText);

	var _getTextWidth = __webpack_require__(330);

	var _getTextWidth2 = _interopRequireDefault(_getTextWidth);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @module utils/Positoning/getSelectedTextPosition */
	var ZERO_WIDTH_CHARACTER = '\u200B';

	/**
	 * A utility function to attempt to get the current highlighted text position.
	 *
	 * When a context menu is opened, this function attempts to find the bounding client rect
	 * for the highlighted text. However, if the text is in the text field, some weird stuff
	 * happens and it is unable to get it correctly.
	 */
	function getSelectedTextPosition(e) {
	  var height = void 0;
	  var target = e.target,
	      clientX = e.clientX,
	      clientY = e.clientY;

	  var text = (0, _getSelectedText2.default)();
	  var width = Math.round((0, _getTextWidth2.default)(text, target) || 0);
	  if (!text || target.classList.contains('md-text-field')) {
	    height = parseInt(window.getComputedStyle(target).fontSize, 10);
	    return {
	      width: width,
	      height: height,
	      left: clientX - width,
	      top: clientY
	    };
	  }

	  // All browsers I am supporting have window.getSelection, but better safe than sorry
	  if (window.getSelection) {
	    var selection = window.getSelection();
	    if (selection.rangeCount) {
	      var range = selection.getRangeAt(0).cloneRange();
	      var rect = null;
	      if (range.getClientRects) {
	        var rects = range.getClientRects();
	        if (rects.length > 0) {
	          rect = rects[0];
	        }
	      }

	      if (!rect) {
	        var span = document.createElement('span');
	        span.appendChild(document.createTextNode(ZERO_WIDTH_CHARACTER));
	        range.insertNode(span);
	        rect = span.getBoundingClientRect();

	        var spanParent = span.parentNode;
	        spanParent.removeChild(span);
	        spanParent.normalize();
	      }

	      return rect;
	    }
	  }

	  return null;
	}

/***/ }),
/* 352 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = getSelectedText;
	/** @module utils/getSelectedText */

	/**
	 * A utility function that gets the current selected text in the document. I think
	 * that all the browsers I support have `window.getSelection`, but it falls back to
	 * support others.
	 *
	 * @return {String} the current selection on the page
	 */
	function getSelectedText() {
	  if (typeof window.getSelection !== 'undefined') {
	    return window.getSelection().toString();
	  } else if (typeof document.selection !== 'undefined' && document.selection.type === 'Text') {
	    return document.selection.createRange().text;
	  }

	  return '';
	}

/***/ }),
/* 353 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = getScroll;
	/** @module utils/Positioning/getScroll */

	/**
	 * A utility function to just get an element's scroll x and y
	 * values. This is really just needed because `window` uses
	 * different attributes.
	 *
	 * @param {Object} el - The element to get a scroll value from.
	 * @return {Object} an object containing the scrollX and scrollY of the element.
	 */
	function getScroll(el) {
	  if (typeof el.scrollX !== 'undefined' && typeof el.scrollY !== 'undefined') {
	    return { x: el.scrollX, y: el.scrollY };
	  } else if (typeof el.scrollLeft !== 'undefined' && typeof el.scrollTop !== 'undefined') {
	    return { x: el.scrollLeft, y: el.scrollTop };
	  }

	  return { x: 0, y: 0 };
	}

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = viewport;

	var _getScreenSize = __webpack_require__(355);

	var _getScreenSize2 = _interopRequireDefault(_getScreenSize);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Determines if an element is still in the viewport. If it is,
	 * it will return a `true` boolean. If it is not, it will return
	 * an object containing booleans for top, right, bottom, and left
	 * where a `false` value will mean it is out of the viewport for that
	 * position.
	 *
	 * @param {Object} el - The element to test.
	 * @return {boolean|Object} the results.
	 */
	function viewport(el) {
	  if (!el) {
	    return {};
	  }

	  var rect = el.getBoundingClientRect();
	  var top = rect.top >= 0;
	  var right = rect.right <= (0, _getScreenSize2.default)('Width');
	  var bottom = rect.bottom <= (0, _getScreenSize2.default)('Height');
	  var left = rect.left >= 0;

	  return top && right && bottom && left || { top: top, right: right, bottom: bottom, left: left };
	} /** @module utils/Positioning/viewport */

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = getScreenSize;
	/** @module utils/Positioning/getScreenSize */

	/**
	 * A utility function to get the height or width of the of the browser with
	 * a fallback for older browsers.
	 *
	 * @param {String} position - the position to get the screen size for
	 * @return {number} the screen size for the provided position.
	 */
	function getScreenSize(position) {
	  if (position !== 'Height' && position !== 'Width' && ("production") !== 'production') {
	    throw new Error('The \'getScreenSize\' function requires either a position of \'Height\' or \'Width\' ' + ('but received `' + position + '`'));
	  }

	  return window['inner' + position] || document.documentElement['client' + position];
	}

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = isOutOfBounds;

	var _getScreenSize = __webpack_require__(355);

	var _getScreenSize2 = _interopRequireDefault(_getScreenSize);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isOutHorizontally(fixedTo, child, threshold) {
	  var _fixedTo$getBoundingC = fixedTo.getBoundingClientRect(),
	      fixedLeft = _fixedTo$getBoundingC.left,
	      fixedRight = _fixedTo$getBoundingC.right;

	  var _child$getBoundingCli = child.getBoundingClientRect(),
	      childLeft = _child$getBoundingCli.left,
	      childRight = _child$getBoundingCli.right;

	  var offset = child.offsetWidth * threshold;

	  var left = childLeft + offset;
	  var right = childRight - offset;

	  var screenEdge = childLeft === 0 || (0, _getScreenSize2.default)('Width') === childRight;
	  return fixedLeft > left || fixedRight < right || screenEdge;
	} /** @module utils/Positioning/isOutOfBounds */

	function isOutVertically(fixedTo, child, toggle, threshold) {
	  var _fixedTo$getBoundingC2 = fixedTo.getBoundingClientRect(),
	      fixedTop = _fixedTo$getBoundingC2.top,
	      fixedBottom = _fixedTo$getBoundingC2.bottom;

	  var _child$getBoundingCli2 = child.getBoundingClientRect(),
	      childTop = _child$getBoundingCli2.top,
	      childBottom = _child$getBoundingCli2.bottom;

	  var offset = toggle.offsetHeight * threshold;

	  var screenEdge = childTop === 0 || (0, _getScreenSize2.default)('Height') === childBottom;
	  return fixedTop > childTop + offset || fixedBottom < childTop - offset || screenEdge;
	}

	/**
	 * Checks if the fixedTo object for the Layover component is considered
	 * out of bounds relative to the container.
	 *
	 * @param {Object} fixedTo - The Layover's `fixedTo` prop.
	 * @param {Object} child - The Layover's `children` prop as a DOM element.
	 * @param {Object} toggle - The Layover's `toggle` prop as a DOM element.
	 * @param {number} verticalThreshold - The vertical threshold multiplier to apply.
	 * @param {number} horizontalThreshold - The horizontal threshold multiplier to apply.
	 * @return {boolean} true if the Layover's `fixedTo` prop is considered out of bounds.
	 */
	function isOutOfBounds(fixedTo, child, toggle, verticalThreshold, horizontalThreshold) {
	  if (fixedTo === window) {
	    return false;
	  } else if (fixedTo.x || fixedTo.y) {
	    var x = fixedTo.x,
	        y = fixedTo.y;

	    return !!y && isOutVertically(y, child, toggle, verticalThreshold) || !!x && isOutHorizontally(x, child, horizontalThreshold);
	  }

	  return isOutVertically(fixedTo, child, toggle, verticalThreshold) || isOutHorizontally(fixedTo, child, horizontalThreshold);
	}

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _resizeObserverPolyfill = __webpack_require__(358);

	var _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `ResizeObserver` component is a component hook for the
	 * [ResizeObserver](http://rawgit.com/WICG/ResizeObserver/master/index.html)
	 * using the [resize-observer-polyfill](https://github.com/que-etc/resize-observer-polyfill)
	 * for browsers that don't support it yet.
	 *
	 * This component displays an empty `span` with `aria-hidden` to allow access to the DOM. By
	 * default it will attempt to watch changes on its parent component, but it can be configured
	 * to watch any element by using the `target` prop.
	 */
	var ResizeObserver = function (_PureComponent) {
	  _inherits(ResizeObserver, _PureComponent);

	  function ResizeObserver() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, ResizeObserver);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._container = null, _this._target = null, _this._observer = null, _this._height = null, _this._width = null, _this._scrollHeight = null, _this._scrollWidth = null, _this._measure = function (entries) {
	      if (!_this._observer || !_this._target) {
	        return;
	      }

	      for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var entry = _ref;

	        if (!entry) {
	          return;
	        }

	        var _entry$contentRect = entry.contentRect,
	            height = _entry$contentRect.height,
	            width = _entry$contentRect.width;
	        var _entry$target = entry.target,
	            scrollHeight = _entry$target.scrollHeight,
	            scrollWidth = _entry$target.scrollWidth;

	        if (_this._isHeightChange(height, scrollHeight) || _this._isWidthChange(width, scrollWidth)) {
	          _this._height = height;
	          _this._width = width;
	          _this._scrollHeight = scrollHeight;
	          _this._scrollWidth = scrollWidth;
	          _this.props.onResize({ height: height, width: width, scrollHeight: scrollHeight, scrollWidth: scrollWidth, el: entry.target });
	        }
	      }
	    }, _this._isHeightChange = function (height, scrollHeight) {
	      return _this.props.watchHeight && (height !== _this._height || scrollHeight !== _this._scrollHeight);
	    }, _this._isWidthChange = function (width, scrollWidth) {
	      return _this.props.watchWidth && (width !== _this._width || scrollWidth !== _this._scrollWidth);
	    }, _this._handleRef = function (container) {
	      if (container) {
	        _this._container = container;
	        _this._target = _this._getTarget(container, _this.props.target);
	        _this._observer = new _resizeObserverPolyfill2.default(_this._measure);

	        if (_this._target) {
	          _this._observer.observe(_this._target);
	        }
	      } else {
	        if (_this._observer) {
	          _this._observer.disconnect();
	        }

	        _this._container = null;
	        _this._target = null;
	        _this._observer = null;
	        _this._height = null;
	        _this._width = null;
	        _this._scrollHeight = null;
	        _this._scrollWidth = null;
	      }

	      if (_this.props.elRef) {
	        _this.props.elRef(_this._target);
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  ResizeObserver.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var target = this.props.target;

	    var nextTarget = nextProps.target;
	    if (target === nextTarget) {
	      return;
	    } else if (nextTarget) {
	      if (this._target) {
	        this._observer.unobserve(this._target);
	      }
	      this._target = this._getTarget(this._container, nextTarget);
	      this._observer.observe(this._target);
	    }
	  };

	  ResizeObserver.prototype._getTarget = function _getTarget(container, target) {
	    if (target === null || target && typeof target !== 'string') {
	      return target;
	    }

	    var t = null;
	    if (target) {
	      t = document.getElementById(target) || document.querySelector(target);
	    } else {
	      t = container.parentNode;
	    }

	    if (!t) {
	      throw new Error('An HTMLDOMNode is required as the `ResizeObserver`\'s watch target but none were provided/found. ' + ('Please update the target prop to find a valid node since the provided target is invalid. `' + target + '`.'));
	    }

	    return t;
	  };

	  ResizeObserver.prototype.render = function render() {
	    var Component = this.props.component;

	    return _react2.default.createElement(Component, { ref: this._handleRef, 'aria-hidden': true });
	  };

	  return ResizeObserver;
	}(_react.PureComponent);

	ResizeObserver.propTypes = {
	  /**
	   * Boolean if the height should be watched for the resize target.
	   */
	  watchHeight: _propTypes2.default.bool,

	  /**
	   * Boolean if the width should be watched for the resize target.
	   */
	  watchWidth: _propTypes2.default.bool,

	  /**
	   * An optional target that should be used for detecting resize events. This can either
	   * be a HTMLDOMNode or a string to use with `document.getElementById` or `document.querySelector`.
	   *
	   * If this prop is not provided and not null, it will default to the parent node of this component.
	   * If the provided `target={null}`, the observer will not begin until the `target` is `undefined` or
	   * it has been correctly passed a target string or object.
	   */
	  target: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),

	  /**
	   * The component to be rendered as. This should normally just be the default `span`, but there are cases
	   * where the component should be switched to something else for valid html.
	   */
	  component: _propTypes2.default.string,

	  /**
	   * A function to call when the height or width has been changed and that attribute is being watched.
	   * The callback will include the current height, width, scrollHeight and scrollWidth of the target.
	   *
	   * ```js
	   * onResize({
	   *   height: nextHeight,
	   *   width: nextWidth,
	   *   scrollHeight: nextScrollHeight,
	   *   scrollWidth: nextScrollWidth,
	   *   el: resizeTarget,
	   * });
	   * ```
	   */
	  onResize: _propTypes2.default.func.isRequired,

	  /**
	   * An optional ref callback that will include the `target` or the parent node of the resize observer. Just
	   * like other refs, this will provide null when it unmounts.
	   *
	   * This is really only helpful if you'd like the DOM node for a parent Component without needing to use
	   * `ReactDOM.findDOMNode(this)`.
	   */
	  elRef: _propTypes2.default.func
	};
	ResizeObserver.defaultProps = {
	  watchHeight: false,
	  watchWidth: false,
	  component: 'span'
	};
	exports.default = ResizeObserver;

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.ResizeObserver = factory());
	}(this, (function () { 'use strict';

	/**
	 * A collection of shims that provide minimal functionality of the ES6 collections.
	 *
	 * These implementations are not meant to be used outside of the ResizeObserver
	 * modules as they cover only a limited range of use cases.
	 */
	/* eslint-disable require-jsdoc, valid-jsdoc */
	var MapShim = (function () {
	    if (typeof Map !== 'undefined') {
	        return Map;
	    }

	    /**
	     * Returns index in provided array that matches the specified key.
	     *
	     * @param {Array<Array>} arr
	     * @param {*} key
	     * @returns {number}
	     */
	    function getIndex(arr, key) {
	        var result = -1;

	        arr.some(function (entry, index) {
	            if (entry[0] === key) {
	                result = index;

	                return true;
	            }

	            return false;
	        });

	        return result;
	    }

	    return (function () {
	        function anonymous() {
	            this.__entries__ = [];
	        }

	        var prototypeAccessors = { size: { configurable: true } };

	        /**
	         * @returns {boolean}
	         */
	        prototypeAccessors.size.get = function () {
	            return this.__entries__.length;
	        };

	        /**
	         * @param {*} key
	         * @returns {*}
	         */
	        anonymous.prototype.get = function (key) {
	            var index = getIndex(this.__entries__, key);
	            var entry = this.__entries__[index];

	            return entry && entry[1];
	        };

	        /**
	         * @param {*} key
	         * @param {*} value
	         * @returns {void}
	         */
	        anonymous.prototype.set = function (key, value) {
	            var index = getIndex(this.__entries__, key);

	            if (~index) {
	                this.__entries__[index][1] = value;
	            } else {
	                this.__entries__.push([key, value]);
	            }
	        };

	        /**
	         * @param {*} key
	         * @returns {void}
	         */
	        anonymous.prototype.delete = function (key) {
	            var entries = this.__entries__;
	            var index = getIndex(entries, key);

	            if (~index) {
	                entries.splice(index, 1);
	            }
	        };

	        /**
	         * @param {*} key
	         * @returns {void}
	         */
	        anonymous.prototype.has = function (key) {
	            return !!~getIndex(this.__entries__, key);
	        };

	        /**
	         * @returns {void}
	         */
	        anonymous.prototype.clear = function () {
	            this.__entries__.splice(0);
	        };

	        /**
	         * @param {Function} callback
	         * @param {*} [ctx=null]
	         * @returns {void}
	         */
	        anonymous.prototype.forEach = function (callback, ctx) {
	            var this$1 = this;
	            if ( ctx === void 0 ) ctx = null;

	            for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {
	                var entry = list[i];

	                callback.call(ctx, entry[1], entry[0]);
	            }
	        };

	        Object.defineProperties( anonymous.prototype, prototypeAccessors );

	        return anonymous;
	    }());
	})();

	/**
	 * Detects whether window and document objects are available in current environment.
	 */
	var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

	// Returns global object of a current environment.
	var global$1 = (function () {
	    if (typeof global !== 'undefined' && global.Math === Math) {
	        return global;
	    }

	    if (typeof self !== 'undefined' && self.Math === Math) {
	        return self;
	    }

	    if (typeof window !== 'undefined' && window.Math === Math) {
	        return window;
	    }

	    // eslint-disable-next-line no-new-func
	    return Function('return this')();
	})();

	/**
	 * A shim for the requestAnimationFrame which falls back to the setTimeout if
	 * first one is not supported.
	 *
	 * @returns {number} Requests' identifier.
	 */
	var requestAnimationFrame$1 = (function () {
	    if (typeof requestAnimationFrame === 'function') {
	        // It's required to use a bounded function because IE sometimes throws
	        // an "Invalid calling object" error if rAF is invoked without the global
	        // object on the left hand side.
	        return requestAnimationFrame.bind(global$1);
	    }

	    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
	})();

	// Defines minimum timeout before adding a trailing call.
	var trailingTimeout = 2;

	/**
	 * Creates a wrapper function which ensures that provided callback will be
	 * invoked only once during the specified delay period.
	 *
	 * @param {Function} callback - Function to be invoked after the delay period.
	 * @param {number} delay - Delay after which to invoke callback.
	 * @returns {Function}
	 */
	var throttle = function (callback, delay) {
	    var leadingCall = false,
	        trailingCall = false,
	        lastCallTime = 0;

	    /**
	     * Invokes the original callback function and schedules new invocation if
	     * the "proxy" was called during current request.
	     *
	     * @returns {void}
	     */
	    function resolvePending() {
	        if (leadingCall) {
	            leadingCall = false;

	            callback();
	        }

	        if (trailingCall) {
	            proxy();
	        }
	    }

	    /**
	     * Callback invoked after the specified delay. It will further postpone
	     * invocation of the original function delegating it to the
	     * requestAnimationFrame.
	     *
	     * @returns {void}
	     */
	    function timeoutCallback() {
	        requestAnimationFrame$1(resolvePending);
	    }

	    /**
	     * Schedules invocation of the original function.
	     *
	     * @returns {void}
	     */
	    function proxy() {
	        var timeStamp = Date.now();

	        if (leadingCall) {
	            // Reject immediately following calls.
	            if (timeStamp - lastCallTime < trailingTimeout) {
	                return;
	            }

	            // Schedule new call to be in invoked when the pending one is resolved.
	            // This is important for "transitions" which never actually start
	            // immediately so there is a chance that we might miss one if change
	            // happens amids the pending invocation.
	            trailingCall = true;
	        } else {
	            leadingCall = true;
	            trailingCall = false;

	            setTimeout(timeoutCallback, delay);
	        }

	        lastCallTime = timeStamp;
	    }

	    return proxy;
	};

	// Minimum delay before invoking the update of observers.
	var REFRESH_DELAY = 20;

	// A list of substrings of CSS properties used to find transition events that
	// might affect dimensions of observed elements.
	var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];

	// Check if MutationObserver is available.
	var mutationObserverSupported = typeof MutationObserver !== 'undefined';

	/**
	 * Singleton controller class which handles updates of ResizeObserver instances.
	 */
	var ResizeObserverController = function() {
	    this.connected_ = false;
	    this.mutationEventsAdded_ = false;
	    this.mutationsObserver_ = null;
	    this.observers_ = [];

	    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
	    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
	};

	/**
	 * Adds observer to observers list.
	 *
	 * @param {ResizeObserverSPI} observer - Observer to be added.
	 * @returns {void}
	 */


	/**
	 * Holds reference to the controller's instance.
	 *
	 * @private {ResizeObserverController}
	 */


	/**
	 * Keeps reference to the instance of MutationObserver.
	 *
	 * @private {MutationObserver}
	 */

	/**
	 * Indicates whether DOM listeners have been added.
	 *
	 * @private {boolean}
	 */
	ResizeObserverController.prototype.addObserver = function (observer) {
	    if (!~this.observers_.indexOf(observer)) {
	        this.observers_.push(observer);
	    }

	    // Add listeners if they haven't been added yet.
	    if (!this.connected_) {
	        this.connect_();
	    }
	};

	/**
	 * Removes observer from observers list.
	 *
	 * @param {ResizeObserverSPI} observer - Observer to be removed.
	 * @returns {void}
	 */
	ResizeObserverController.prototype.removeObserver = function (observer) {
	    var observers = this.observers_;
	    var index = observers.indexOf(observer);

	    // Remove observer if it's present in registry.
	    if (~index) {
	        observers.splice(index, 1);
	    }

	    // Remove listeners if controller has no connected observers.
	    if (!observers.length && this.connected_) {
	        this.disconnect_();
	    }
	};

	/**
	 * Invokes the update of observers. It will continue running updates insofar
	 * it detects changes.
	 *
	 * @returns {void}
	 */
	ResizeObserverController.prototype.refresh = function () {
	    var changesDetected = this.updateObservers_();

	    // Continue running updates if changes have been detected as there might
	    // be future ones caused by CSS transitions.
	    if (changesDetected) {
	        this.refresh();
	    }
	};

	/**
	 * Updates every observer from observers list and notifies them of queued
	 * entries.
	 *
	 * @private
	 * @returns {boolean} Returns "true" if any observer has detected changes in
	 *  dimensions of it's elements.
	 */
	ResizeObserverController.prototype.updateObservers_ = function () {
	    // Collect observers that have active observations.
	    var activeObservers = this.observers_.filter(function (observer) {
	        return observer.gatherActive(), observer.hasActive();
	    });

	    // Deliver notifications in a separate cycle in order to avoid any
	    // collisions between observers, e.g. when multiple instances of
	    // ResizeObserver are tracking the same element and the callback of one
	    // of them changes content dimensions of the observed target. Sometimes
	    // this may result in notifications being blocked for the rest of observers.
	    activeObservers.forEach(function (observer) { return observer.broadcastActive(); });

	    return activeObservers.length > 0;
	};

	/**
	 * Initializes DOM listeners.
	 *
	 * @private
	 * @returns {void}
	 */
	ResizeObserverController.prototype.connect_ = function () {
	    // Do nothing if running in a non-browser environment or if listeners
	    // have been already added.
	    if (!isBrowser || this.connected_) {
	        return;
	    }

	    // Subscription to the "Transitionend" event is used as a workaround for
	    // delayed transitions. This way it's possible to capture at least the
	    // final state of an element.
	    document.addEventListener('transitionend', this.onTransitionEnd_);

	    window.addEventListener('resize', this.refresh);

	    if (mutationObserverSupported) {
	        this.mutationsObserver_ = new MutationObserver(this.refresh);

	        this.mutationsObserver_.observe(document, {
	            attributes: true,
	            childList: true,
	            characterData: true,
	            subtree: true
	        });
	    } else {
	        document.addEventListener('DOMSubtreeModified', this.refresh);

	        this.mutationEventsAdded_ = true;
	    }

	    this.connected_ = true;
	};

	/**
	 * Removes DOM listeners.
	 *
	 * @private
	 * @returns {void}
	 */
	ResizeObserverController.prototype.disconnect_ = function () {
	    // Do nothing if running in a non-browser environment or if listeners
	    // have been already removed.
	    if (!isBrowser || !this.connected_) {
	        return;
	    }

	    document.removeEventListener('transitionend', this.onTransitionEnd_);
	    window.removeEventListener('resize', this.refresh);

	    if (this.mutationsObserver_) {
	        this.mutationsObserver_.disconnect();
	    }

	    if (this.mutationEventsAdded_) {
	        document.removeEventListener('DOMSubtreeModified', this.refresh);
	    }

	    this.mutationsObserver_ = null;
	    this.mutationEventsAdded_ = false;
	    this.connected_ = false;
	};

	/**
	 * "Transitionend" event handler.
	 *
	 * @private
	 * @param {TransitionEvent} event
	 * @returns {void}
	 */
	ResizeObserverController.prototype.onTransitionEnd_ = function (ref) {
	        var propertyName = ref.propertyName; if ( propertyName === void 0 ) propertyName = '';

	    // Detect whether transition may affect dimensions of an element.
	    var isReflowProperty = transitionKeys.some(function (key) {
	        return !!~propertyName.indexOf(key);
	    });

	    if (isReflowProperty) {
	        this.refresh();
	    }
	};

	/**
	 * Returns instance of the ResizeObserverController.
	 *
	 * @returns {ResizeObserverController}
	 */
	ResizeObserverController.getInstance = function () {
	    if (!this.instance_) {
	        this.instance_ = new ResizeObserverController();
	    }

	    return this.instance_;
	};

	ResizeObserverController.instance_ = null;

	/**
	 * Defines non-writable/enumerable properties of the provided target object.
	 *
	 * @param {Object} target - Object for which to define properties.
	 * @param {Object} props - Properties to be defined.
	 * @returns {Object} Target object.
	 */
	var defineConfigurable = (function (target, props) {
	    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {
	        var key = list[i];

	        Object.defineProperty(target, key, {
	            value: props[key],
	            enumerable: false,
	            writable: false,
	            configurable: true
	        });
	    }

	    return target;
	});

	/**
	 * Returns the global object associated with provided element.
	 *
	 * @param {Object} target
	 * @returns {Object}
	 */
	var getWindowOf = (function (target) {
	    // Assume that the element is an instance of Node, which means that it
	    // has the "ownerDocument" property from which we can retrieve a
	    // corresponding global object.
	    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;

	    // Return the local global object if it's not possible extract one from
	    // provided element.
	    return ownerGlobal || global$1;
	});

	// Placeholder of an empty content rectangle.
	var emptyRect = createRectInit(0, 0, 0, 0);

	/**
	 * Converts provided string to a number.
	 *
	 * @param {number|string} value
	 * @returns {number}
	 */
	function toFloat(value) {
	    return parseFloat(value) || 0;
	}

	/**
	 * Extracts borders size from provided styles.
	 *
	 * @param {CSSStyleDeclaration} styles
	 * @param {...string} positions - Borders positions (top, right, ...)
	 * @returns {number}
	 */
	function getBordersSize(styles) {
	    var positions = [], len = arguments.length - 1;
	    while ( len-- > 0 ) positions[ len ] = arguments[ len + 1 ];

	    return positions.reduce(function (size, position) {
	        var value = styles['border-' + position + '-width'];

	        return size + toFloat(value);
	    }, 0);
	}

	/**
	 * Extracts paddings sizes from provided styles.
	 *
	 * @param {CSSStyleDeclaration} styles
	 * @returns {Object} Paddings box.
	 */
	function getPaddings(styles) {
	    var positions = ['top', 'right', 'bottom', 'left'];
	    var paddings = {};

	    for (var i = 0, list = positions; i < list.length; i += 1) {
	        var position = list[i];

	        var value = styles['padding-' + position];

	        paddings[position] = toFloat(value);
	    }

	    return paddings;
	}

	/**
	 * Calculates content rectangle of provided SVG element.
	 *
	 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
	 *      to be calculated.
	 * @returns {DOMRectInit}
	 */
	function getSVGContentRect(target) {
	    var bbox = target.getBBox();

	    return createRectInit(0, 0, bbox.width, bbox.height);
	}

	/**
	 * Calculates content rectangle of provided HTMLElement.
	 *
	 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
	 * @returns {DOMRectInit}
	 */
	function getHTMLElementContentRect(target) {
	    // Client width & height properties can't be
	    // used exclusively as they provide rounded values.
	    var clientWidth = target.clientWidth;
	    var clientHeight = target.clientHeight;

	    // By this condition we can catch all non-replaced inline, hidden and
	    // detached elements. Though elements with width & height properties less
	    // than 0.5 will be discarded as well.
	    //
	    // Without it we would need to implement separate methods for each of
	    // those cases and it's not possible to perform a precise and performance
	    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
	    // gives wrong results for elements with width & height less than 0.5.
	    if (!clientWidth && !clientHeight) {
	        return emptyRect;
	    }

	    var styles = getWindowOf(target).getComputedStyle(target);
	    var paddings = getPaddings(styles);
	    var horizPad = paddings.left + paddings.right;
	    var vertPad = paddings.top + paddings.bottom;

	    // Computed styles of width & height are being used because they are the
	    // only dimensions available to JS that contain non-rounded values. It could
	    // be possible to utilize the getBoundingClientRect if only it's data wasn't
	    // affected by CSS transformations let alone paddings, borders and scroll bars.
	    var width = toFloat(styles.width),
	        height = toFloat(styles.height);

	    // Width & height include paddings and borders when the 'border-box' box
	    // model is applied (except for IE).
	    if (styles.boxSizing === 'border-box') {
	        // Following conditions are required to handle Internet Explorer which
	        // doesn't include paddings and borders to computed CSS dimensions.
	        //
	        // We can say that if CSS dimensions + paddings are equal to the "client"
	        // properties then it's either IE, and thus we don't need to subtract
	        // anything, or an element merely doesn't have paddings/borders styles.
	        if (Math.round(width + horizPad) !== clientWidth) {
	            width -= getBordersSize(styles, 'left', 'right') + horizPad;
	        }

	        if (Math.round(height + vertPad) !== clientHeight) {
	            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
	        }
	    }

	    // Following steps can't be applied to the document's root element as its
	    // client[Width/Height] properties represent viewport area of the window.
	    // Besides, it's as well not necessary as the <html> itself neither has
	    // rendered scroll bars nor it can be clipped.
	    if (!isDocumentElement(target)) {
	        // In some browsers (only in Firefox, actually) CSS width & height
	        // include scroll bars size which can be removed at this step as scroll
	        // bars are the only difference between rounded dimensions + paddings
	        // and "client" properties, though that is not always true in Chrome.
	        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
	        var horizScrollbar = Math.round(height + vertPad) - clientHeight;

	        // Chrome has a rather weird rounding of "client" properties.
	        // E.g. for an element with content width of 314.2px it sometimes gives
	        // the client width of 315px and for the width of 314.7px it may give
	        // 314px. And it doesn't happen all the time. So just ignore this delta
	        // as a non-relevant.
	        if (Math.abs(vertScrollbar) !== 1) {
	            width -= vertScrollbar;
	        }

	        if (Math.abs(horizScrollbar) !== 1) {
	            height -= horizScrollbar;
	        }
	    }

	    return createRectInit(paddings.left, paddings.top, width, height);
	}

	/**
	 * Checks whether provided element is an instance of the SVGGraphicsElement.
	 *
	 * @param {Element} target - Element to be checked.
	 * @returns {boolean}
	 */
	var isSVGGraphicsElement = (function () {
	    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
	    // interface.
	    if (typeof SVGGraphicsElement !== 'undefined') {
	        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
	    }

	    // If it's so, then check that element is at least an instance of the
	    // SVGElement and that it has the "getBBox" method.
	    // eslint-disable-next-line no-extra-parens
	    return function (target) { return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function'; };
	})();

	/**
	 * Checks whether provided element is a document element (<html>).
	 *
	 * @param {Element} target - Element to be checked.
	 * @returns {boolean}
	 */
	function isDocumentElement(target) {
	    return target === getWindowOf(target).document.documentElement;
	}

	/**
	 * Calculates an appropriate content rectangle for provided html or svg element.
	 *
	 * @param {Element} target - Element content rectangle of which needs to be calculated.
	 * @returns {DOMRectInit}
	 */
	function getContentRect(target) {
	    if (!isBrowser) {
	        return emptyRect;
	    }

	    if (isSVGGraphicsElement(target)) {
	        return getSVGContentRect(target);
	    }

	    return getHTMLElementContentRect(target);
	}

	/**
	 * Creates rectangle with an interface of the DOMRectReadOnly.
	 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
	 *
	 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
	 * @returns {DOMRectReadOnly}
	 */
	function createReadOnlyRect(ref) {
	    var x = ref.x;
	    var y = ref.y;
	    var width = ref.width;
	    var height = ref.height;

	    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
	    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
	    var rect = Object.create(Constr.prototype);

	    // Rectangle's properties are not writable and non-enumerable.
	    defineConfigurable(rect, {
	        x: x, y: y, width: width, height: height,
	        top: y,
	        right: x + width,
	        bottom: height + y,
	        left: x
	    });

	    return rect;
	}

	/**
	 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
	 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
	 *
	 * @param {number} x - X coordinate.
	 * @param {number} y - Y coordinate.
	 * @param {number} width - Rectangle's width.
	 * @param {number} height - Rectangle's height.
	 * @returns {DOMRectInit}
	 */
	function createRectInit(x, y, width, height) {
	    return { x: x, y: y, width: width, height: height };
	}

	/**
	 * Class that is responsible for computations of the content rectangle of
	 * provided DOM element and for keeping track of it's changes.
	 */
	var ResizeObservation = function(target) {
	    this.broadcastWidth = 0;
	    this.broadcastHeight = 0;
	    this.contentRect_ = createRectInit(0, 0, 0, 0);

	    this.target = target;
	};

	/**
	 * Updates content rectangle and tells whether it's width or height properties
	 * have changed since the last broadcast.
	 *
	 * @returns {boolean}
	 */


	/**
	 * Reference to the last observed content rectangle.
	 *
	 * @private {DOMRectInit}
	 */


	/**
	 * Broadcasted width of content rectangle.
	 *
	 * @type {number}
	 */
	ResizeObservation.prototype.isActive = function () {
	    var rect = getContentRect(this.target);

	    this.contentRect_ = rect;

	    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
	};

	/**
	 * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
	 * from the corresponding properties of the last observed content rectangle.
	 *
	 * @returns {DOMRectInit} Last observed content rectangle.
	 */
	ResizeObservation.prototype.broadcastRect = function () {
	    var rect = this.contentRect_;

	    this.broadcastWidth = rect.width;
	    this.broadcastHeight = rect.height;

	    return rect;
	};

	var ResizeObserverEntry = function(target, rectInit) {
	    var contentRect = createReadOnlyRect(rectInit);

	    // According to the specification following properties are not writable
	    // and are also not enumerable in the native implementation.
	    //
	    // Property accessors are not being used as they'd require to define a
	    // private WeakMap storage which may cause memory leaks in browsers that
	    // don't support this type of collections.
	    defineConfigurable(this, { target: target, contentRect: contentRect });
	};

	var ResizeObserverSPI = function(callback, controller, callbackCtx) {
	    this.activeObservations_ = [];
	    this.observations_ = new MapShim();

	    if (typeof callback !== 'function') {
	        throw new TypeError('The callback provided as parameter 1 is not a function.');
	    }

	    this.callback_ = callback;
	    this.controller_ = controller;
	    this.callbackCtx_ = callbackCtx;
	};

	/**
	 * Starts observing provided element.
	 *
	 * @param {Element} target - Element to be observed.
	 * @returns {void}
	 */


	/**
	 * Registry of the ResizeObservation instances.
	 *
	 * @private {Map<Element, ResizeObservation>}
	 */


	/**
	 * Public ResizeObserver instance which will be passed to the callback
	 * function and used as a value of it's "this" binding.
	 *
	 * @private {ResizeObserver}
	 */

	/**
	 * Collection of resize observations that have detected changes in dimensions
	 * of elements.
	 *
	 * @private {Array<ResizeObservation>}
	 */
	ResizeObserverSPI.prototype.observe = function (target) {
	    if (!arguments.length) {
	        throw new TypeError('1 argument required, but only 0 present.');
	    }

	    // Do nothing if current environment doesn't have the Element interface.
	    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	        return;
	    }

	    if (!(target instanceof getWindowOf(target).Element)) {
	        throw new TypeError('parameter 1 is not of type "Element".');
	    }

	    var observations = this.observations_;

	    // Do nothing if element is already being observed.
	    if (observations.has(target)) {
	        return;
	    }

	    observations.set(target, new ResizeObservation(target));

	    this.controller_.addObserver(this);

	    // Force the update of observations.
	    this.controller_.refresh();
	};

	/**
	 * Stops observing provided element.
	 *
	 * @param {Element} target - Element to stop observing.
	 * @returns {void}
	 */
	ResizeObserverSPI.prototype.unobserve = function (target) {
	    if (!arguments.length) {
	        throw new TypeError('1 argument required, but only 0 present.');
	    }

	    // Do nothing if current environment doesn't have the Element interface.
	    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	        return;
	    }

	    if (!(target instanceof getWindowOf(target).Element)) {
	        throw new TypeError('parameter 1 is not of type "Element".');
	    }

	    var observations = this.observations_;

	    // Do nothing if element is not being observed.
	    if (!observations.has(target)) {
	        return;
	    }

	    observations.delete(target);

	    if (!observations.size) {
	        this.controller_.removeObserver(this);
	    }
	};

	/**
	 * Stops observing all elements.
	 *
	 * @returns {void}
	 */
	ResizeObserverSPI.prototype.disconnect = function () {
	    this.clearActive();
	    this.observations_.clear();
	    this.controller_.removeObserver(this);
	};

	/**
	 * Collects observation instances the associated element of which has changed
	 * it's content rectangle.
	 *
	 * @returns {void}
	 */
	ResizeObserverSPI.prototype.gatherActive = function () {
	        var this$1 = this;

	    this.clearActive();

	    this.observations_.forEach(function (observation) {
	        if (observation.isActive()) {
	            this$1.activeObservations_.push(observation);
	        }
	    });
	};

	/**
	 * Invokes initial callback function with a list of ResizeObserverEntry
	 * instances collected from active resize observations.
	 *
	 * @returns {void}
	 */
	ResizeObserverSPI.prototype.broadcastActive = function () {
	    // Do nothing if observer doesn't have active observations.
	    if (!this.hasActive()) {
	        return;
	    }

	    var ctx = this.callbackCtx_;

	    // Create ResizeObserverEntry instance for every active observation.
	    var entries = this.activeObservations_.map(function (observation) {
	        return new ResizeObserverEntry(observation.target, observation.broadcastRect());
	    });

	    this.callback_.call(ctx, entries, ctx);
	    this.clearActive();
	};

	/**
	 * Clears the collection of active observations.
	 *
	 * @returns {void}
	 */
	ResizeObserverSPI.prototype.clearActive = function () {
	    this.activeObservations_.splice(0);
	};

	/**
	 * Tells whether observer has active observations.
	 *
	 * @returns {boolean}
	 */
	ResizeObserverSPI.prototype.hasActive = function () {
	    return this.activeObservations_.length > 0;
	};

	// Registry of internal observers. If WeakMap is not available use current shim
	// for the Map collection as it has all required methods and because WeakMap
	// can't be fully polyfilled anyway.
	var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();

	/**
	 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
	 * exposing only those methods and properties that are defined in the spec.
	 */
	var ResizeObserver = function(callback) {
	    if (!(this instanceof ResizeObserver)) {
	        throw new TypeError('Cannot call a class as a function.');
	    }
	    if (!arguments.length) {
	        throw new TypeError('1 argument required, but only 0 present.');
	    }

	    var controller = ResizeObserverController.getInstance();
	    var observer = new ResizeObserverSPI(callback, controller, this);

	    observers.set(this, observer);
	};

	// Expose public methods of ResizeObserver.
	['observe', 'unobserve', 'disconnect'].forEach(function (method) {
	    ResizeObserver.prototype[method] = function () {
	        return (ref = observers.get(this))[method].apply(ref, arguments);
	        var ref;
	    };
	});

	var index = (function () {
	    // Export existing implementation if available.
	    if (typeof global$1.ResizeObserver !== 'undefined') {
	        return global$1.ResizeObserver;
	    }

	    return ResizeObserver;
	})();

	return index;

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _isValued = __webpack_require__(360);

	var _isValued2 = _interopRequireDefault(_isValued);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _getTextWidth = __webpack_require__(330);

	var _getTextWidth2 = _interopRequireDefault(_getTextWidth);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _invalidIf = __webpack_require__(282);

	var _invalidIf2 = _interopRequireDefault(_invalidIf);

	var _minNumber = __webpack_require__(361);

	var _minNumber2 = _interopRequireDefault(_minNumber);

	var _addSuffix = __webpack_require__(362);

	var _addSuffix2 = _interopRequireDefault(_addSuffix);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _FloatingLabel = __webpack_require__(363);

	var _FloatingLabel2 = _interopRequireDefault(_FloatingLabel);

	var _TextFieldMessage = __webpack_require__(364);

	var _TextFieldMessage2 = _interopRequireDefault(_TextFieldMessage);

	var _PasswordButton = __webpack_require__(366);

	var _PasswordButton2 = _interopRequireDefault(_PasswordButton);

	var _InputField = __webpack_require__(367);

	var _InputField2 = _interopRequireDefault(_InputField);

	var _TextFieldDivider = __webpack_require__(369);

	var _TextFieldDivider2 = _interopRequireDefault(_TextFieldDivider);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DEFAULT_TEXT_FIELD_SIZE = 180;

	var WILL_RECEIVE_KEYS = ['style', 'value', 'resize'];
	var DID_UPDATE_KEYS = ['leftIcon', 'rightIcon', 'passwordIcon', 'inlineIndicator'];

	/**
	 * The `TextField` component can either be a single line `input` field or a multiline
	 * `textarea` field. `FontIcon`s, messages, and password indicators can also be added
	 * to this field.
	 *
	 * The optional mouse and touch events will be added to the entire container while the
	 * text specific events will be added to the `input` or `textarea` tags.
	 */

	var TextField = function (_PureComponent) {
	  _inherits(TextField, _PureComponent);

	  function TextField(props) {
	    _classCallCheck(this, TextField);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var currentLength = _this._getLength(typeof props.value !== 'undefined' ? props.value : props.defaultValue);

	    _this._canvas = null;
	    var width = null;
	    if (typeof props.resize !== 'undefined') {
	      width = typeof props.resize.min === 'number' ? props.resize.min : DEFAULT_TEXT_FIELD_SIZE;
	    }

	    _this.state = {
	      active: false,
	      error: props.maxLength ? props.maxLength < currentLength : false,
	      floating: (0, _isValued2.default)(props.defaultValue) || (0, _isValued2.default)(props.value),
	      passwordVisible: props.passwordInitiallyVisible,
	      currentLength: currentLength,
	      styles: width ? _extends({ width: width }, props.style) : props.style
	    };
	    return _this;
	  }

	  TextField.prototype.componentDidMount = function componentDidMount() {
	    var _props = this.props,
	        value = _props.value,
	        defaultValue = _props.defaultValue,
	        resize = _props.resize,
	        style = _props.style;

	    var v = typeof value !== 'undefined' ? value : defaultValue;
	    /* eslint-disable react/no-did-mount-set-state */
	    if (resize) {
	      // always want to set width on mount
	      this.setState({ styles: _extends({ width: this._calcWidth(v, this.props) }, style) });
	    }
	  };

	  TextField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    var value = nextProps.value,
	        resize = nextProps.resize,
	        style = nextProps.style;

	    var nextState = {};
	    if (value !== this.props.value) {
	      nextState.error = this._isErrored(nextProps);
	      nextState.floating = this._focus || (0, _isValued2.default)(value);
	      nextState.currentLength = this._getLength(value);
	    }

	    if (WILL_RECEIVE_KEYS.some(function (key) {
	      return _this2.props[key] !== nextProps[key];
	    })) {
	      if (!resize) {
	        nextState.styles = style;
	      } else {
	        var width = this._calcWidth(value, nextProps);
	        nextState.styles = _extends({ width: width }, style);
	      }
	    }

	    this.setState(nextState);
	  };

	  TextField.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var _this3 = this;

	    var _props2 = this.props,
	        resize = _props2.resize,
	        value = _props2.value,
	        style = _props2.style;

	    if (resize && DID_UPDATE_KEYS.some(function (key) {
	      return _this3.props[key] !== prevProps[key];
	    })) {
	      var width = this._calcWidth(value, this.props);
	      this.setState({ styles: _extends({ width: width }, style) }); // eslint-disable-line react/no-did-update-set-state
	    }
	  };

	  /**
	   * A helper function for getting the specific `input` field or the `textarea` in the `TextField`.
	   * This is accessible if you use `refs`.
	   *
	   * Example:
	   *
	   * ```js
	   * <TextField ref={field => this._field = field;} label="Hello" />;
	   *
	   * this._field.getField(); // `input` node
	   * ```
	   */


	  /**
	   * A helper function for focusing the `input` field or the `textarea` in the `TextField`.
	   * This is accessibile if you use `refs`.
	   * Example:
	   *
	   * ```js
	   * <TextField ref={field => this._field = field;} label="Hello" />;
	   *
	   * this._field.focus();
	   * ```
	   */


	  /**
	   * A helper function for blurring the `input` field or the `textarea` in the `TextField`.
	   * This is accessible if you use `refs`.
	   * Example:
	   *
	   * ```js
	   * <TextField ref={field => this._field = field;} label="Hello" />;
	   *
	   * this._field.blur();
	   * ```
	   */
	  TextField.prototype.blur = function blur() {
	    this._field.blur();
	  };

	  TextField.prototype._cloneIcon = function _cloneIcon(icon, active, error, disabled, stateful, block, dir) {
	    if (!icon) {
	      return icon;
	    }

	    try {
	      var iconEl = _react.Children.only(icon);
	      return (0, _react.cloneElement)(iconEl, {
	        key: iconEl.key || 'icon-' + dir,
	        disabled: stateful ? disabled : undefined,
	        primary: stateful ? !error && active : undefined,
	        error: stateful ? error : undefined,
	        className: (0, _classnames2.default)('md-text-field-icon', {
	          'md-text-field-icon--positioned': !block
	        }, iconEl.props.className)
	      });
	    } catch (e) {
	      return icon;
	    }
	  };

	  /**
	   * A small utility function for calculating an inline-icon's width keeping the SVG Icons
	   * in mind and any margin that gets applied for spacing.
	   */


	  TextField.prototype.render = function render() {
	    var _state = this.state,
	        currentLength = _state.currentLength,
	        passwordVisible = _state.passwordVisible,
	        styles = _state.styles;

	    var _props3 = this.props,
	        id = _props3.id,
	        type = _props3.type,
	        className = _props3.className,
	        inputStyle = _props3.inputStyle,
	        inputClassName = _props3.inputClassName,
	        block = _props3.block,
	        fullWidth = _props3.fullWidth,
	        required = _props3.required,
	        customSize = _props3.customSize,
	        maxLength = _props3.maxLength,
	        errorText = _props3.errorText,
	        helpText = _props3.helpText,
	        helpOnFocus = _props3.helpOnFocus,
	        disabled = _props3.disabled,
	        leftIconStateful = _props3.leftIconStateful,
	        rightIconStateful = _props3.rightIconStateful,
	        lineDirection = _props3.lineDirection,
	        paddedBlock = _props3.paddedBlock,
	        onDoubleClick = _props3.onDoubleClick,
	        onTouchStart = _props3.onTouchStart,
	        onTouchMove = _props3.onTouchMove,
	        onTouchCancel = _props3.onTouchCancel,
	        onTouchEnd = _props3.onTouchEnd,
	        onMouseDown = _props3.onMouseDown,
	        onMouseUp = _props3.onMouseUp,
	        onMouseOver = _props3.onMouseOver,
	        onMouseLeave = _props3.onMouseLeave,
	        ink = _props3.ink,
	        inlineIndicator = _props3.inlineIndicator,
	        toolbar = _props3.toolbar,
	        propPasswordIcon = _props3.passwordIcon,
	        icon = _props3.icon,
	        passwordIconChildren = _props3.passwordIconChildren,
	        passwordIconClassName = _props3.passwordIconClassName,
	        style = _props3.style,
	        propLabel = _props3.label,
	        propPlaceholder = _props3.placeholder,
	        propError = _props3.error,
	        propActive = _props3.active,
	        propFloating = _props3.floating,
	        propLeftIcon = _props3.leftIcon,
	        propRightIcon = _props3.rightIcon,
	        onClick = _props3.onClick,
	        onChange = _props3.onChange,
	        onBlur = _props3.onBlur,
	        onFocus = _props3.onFocus,
	        resize = _props3.resize,
	        adjustMinWidth = _props3.adjustMinWidth,
	        propFloatingLabel = _props3.floatingLabel,
	        props = _objectWithoutProperties(_props3, ['id', 'type', 'className', 'inputStyle', 'inputClassName', 'block', 'fullWidth', 'required', 'customSize', 'maxLength', 'errorText', 'helpText', 'helpOnFocus', 'disabled', 'leftIconStateful', 'rightIconStateful', 'lineDirection', 'paddedBlock', 'onDoubleClick', 'onTouchStart', 'onTouchMove', 'onTouchCancel', 'onTouchEnd', 'onMouseDown', 'onMouseUp', 'onMouseOver', 'onMouseLeave', 'ink', 'inlineIndicator', 'toolbar', 'passwordIcon', 'icon', 'passwordIconChildren', 'passwordIconClassName', 'style', 'label', 'placeholder', 'error', 'active', 'floating', 'leftIcon', 'rightIcon', 'onClick', 'onChange', 'onBlur', 'onFocus', 'resize', 'adjustMinWidth', 'floatingLabel']);

	    var _props4 = this.props,
	        label = _props4.label,
	        placeholder = _props4.placeholder,
	        error = _props4.error,
	        active = _props4.active,
	        floating = _props4.floating,
	        leftIcon = _props4.leftIcon,
	        rightIcon = _props4.rightIcon;

	    active = active || this.state.active;
	    error = error || this.state.error;
	    floating = floating || this.state.floating;

	    if (required) {
	      if (label) {
	        label = (0, _addSuffix2.default)(label, '*');
	      }

	      if (placeholder && !label) {
	        placeholder = (0, _addSuffix2.default)(placeholder, '*');
	      }
	    }

	    if (label && !floating) {
	      placeholder = null;
	    }

	    leftIcon = this._cloneIcon(icon || leftIcon, active, error, disabled, leftIconStateful, block, 'left');
	    var passwordIcon = (0, _getDeprecatedIcon2.default)(passwordIconClassName, passwordIconChildren, propPasswordIcon);
	    if (passwordIcon !== null && type === 'password' && !disabled) {
	      rightIcon = _react2.default.createElement(_PasswordButton2.default, {
	        key: 'password-btn',
	        onClick: this._togglePasswordField,
	        active: active,
	        passwordVisible: passwordVisible,
	        icon: passwordIcon,
	        block: block,
	        floating: !!label
	      });
	    } else if (inlineIndicator) {
	      var el = _react.Children.only(inlineIndicator);
	      rightIcon = (0, _react.cloneElement)(inlineIndicator, {
	        key: 'icon-right',
	        className: (0, _classnames2.default)('md-text-field-inline-indicator', {
	          'md-text-field-inline-indicator--floating': label,
	          'md-text-field-inline-indicator--block': block
	        }, el.props.className)
	      });
	    } else {
	      rightIcon = this._cloneIcon(rightIcon, active, error, disabled, rightIconStateful, block, 'right');
	    }
	    var rightIconed = !!rightIcon && type !== 'password' && !inlineIndicator;

	    var floatingLabel = _react2.default.createElement(_FloatingLabel2.default, {
	      key: 'label',
	      label: label,
	      htmlFor: id,
	      active: active,
	      error: error,
	      floating: floating,
	      customSize: customSize,
	      disabled: disabled,
	      iconOffset: !!leftIcon
	    });

	    var message = _react2.default.createElement(_TextFieldMessage2.default, {
	      key: 'message',
	      active: active,
	      error: error,
	      errorText: errorText,
	      helpText: helpText,
	      helpOnFocus: helpOnFocus,
	      block: block,
	      maxLength: maxLength,
	      leftIcon: !!leftIcon,
	      rightIcon: !!rightIcon,
	      currentLength: currentLength
	    });

	    var field = _react2.default.createElement(_InputField2.default, _extends({}, props, {
	      required: required,
	      key: 'field',
	      ref: this._setField,
	      id: id,
	      type: type,
	      label: label,
	      style: inputStyle,
	      className: (0, _classnames2.default)({ 'md-text-field--toolbar': toolbar }, inputClassName),
	      disabled: disabled,
	      customSize: customSize,
	      fullWidth: fullWidth,
	      passwordVisible: passwordVisible,
	      placeholder: placeholder,
	      block: block,
	      onFocus: this._handleFocus,
	      onBlur: this._handleBlur,
	      onChange: this._handleChange,
	      inlineIndicator: !!inlineIndicator
	    }));

	    var divider = void 0;
	    if (!block) {
	      divider = _react2.default.createElement(_TextFieldDivider2.default, {
	        key: 'text-divider',
	        active: active,
	        error: error,
	        lineDirection: lineDirection
	      });
	    }

	    var children = void 0;
	    if (leftIcon || rightIconed) {
	      children = _react2.default.createElement(
	        'div',
	        { key: 'icon-divider', className: 'md-text-field-icon-container' },
	        leftIcon,
	        _react2.default.createElement(
	          'div',
	          {
	            key: 'divider-container',
	            className: (0, _classnames2.default)('md-text-field-divider-container', {
	              'md-text-field-divider-container--grow': fullWidth
	            })
	          },
	          field,
	          divider
	        ),
	        rightIcon
	      );
	    } else {
	      children = [leftIcon, field, divider, rightIcon];
	    }

	    children = [floatingLabel, children, message];

	    var multiline = typeof props.rows !== 'undefined';
	    return _react2.default.createElement(
	      'div',
	      {
	        style: styles,
	        className: (0, _classnames2.default)('md-text-field-container', {
	          'md-inline-block': !fullWidth && !block,
	          'md-full-width': block || fullWidth,
	          'md-text-field-container--disabled': disabled,
	          'md-text-field-container--input': !multiline,
	          'md-text-field-container--input-block': block && !multiline,
	          'md-text-field-container--multiline': multiline,
	          'md-text-field-container--multiline-block': multiline && block,
	          'md-text-field-container--padded-block': block && paddedBlock
	        }, className),
	        onClick: this._handleContainerClick,
	        onDoubleClick: onDoubleClick,
	        onMouseOver: onMouseOver,
	        onMouseLeave: onMouseLeave,
	        onMouseDown: onMouseDown,
	        onMouseUp: onMouseUp,
	        onTouchStart: onTouchStart,
	        onTouchEnd: onTouchEnd,
	        onTouchCancel: onTouchCancel,
	        onTouchMove: onTouchMove,
	        ref: this._setContainer
	      },
	      ink,
	      children
	    );
	  };

	  _createClass(TextField, [{
	    key: 'value',


	    /**
	     * Gets the current value from the text field. This is used when you have an uncontrolled
	     * text field and simply need the value from a ref callback.
	     *
	     * @return {String} the text field's value
	     */
	    get: function get() {
	      return this.getField().value;
	    }
	  }]);

	  return TextField;
	}(_react.PureComponent);

	TextField.propTypes = {
	  /**
	   * The id for a text field. This is required when using the `label` prop for accessibility,
	   * but normally a good idea to include one anyways.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * An optional style to apply to the text field's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the text field's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the `input` or `textarea` tag.
	   */
	  inputStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `input` or `textarea` tag.
	   */
	  inputClassName: _propTypes2.default.string,

	  /**
	   * An optional value to apply to the text field. This will make the component
	   * controlled and require the `onChange` prop.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]), 'onChange'),

	  /**
	   * An optional default value for the text field.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

	  /**
	   * Boolean if the text field should be displayed as a `block`. This is equivalent to
	   * the `full width` text field in the Material Design specs. This view will disable
	   * floating labels and remove the text divider from the component.
	   */
	  block: _propTypes2.default.bool,

	  /**
	   * Boolean if the `block` text field should include padding to the left and right of
	   * the text field.
	   */
	  paddedBlock: _propTypes2.default.bool,

	  /**
	   * Boolean if the text field is currently disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional label to display with the text field. This will convert the text field
	   * into a floating label text field. You can make it single line by only using the
	   * `placeholder` prop.
	   */
	  label: (0, _invalidIf2.default)(_propTypes2.default.node, 'block'),

	  /**
	   * An optional placeholder text to display in the text field. If there is no `label` prop,
	   * the text field will be displayed as a single line text field. If there is a `label` prop,
	   * this will only be visible when there is no value and the user focused the text field.
	   */
	  placeholder: _propTypes2.default.string,

	  /**
	   * The type for the text field. This is one of the most import props for mobile accessibility
	   * as it will update the keyboard for the text type. This does not get applied on multiline
	   * text fields.
	   */
	  type: _propTypes2.default.oneOf(['text', 'number', 'email', 'search', 'tel', 'url', 'password']).isRequired,

	  /**
	   * An optional function to call when the text field's container triggers the `click` event.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field's container triggers the `doubleclick`
	   * event.
	   */
	  onDoubleClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field's container triggers the `touchstart`
	   * event.
	   */
	  onTouchStart: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field's container triggers the `touchmove`
	   * event.
	   */
	  onTouchMove: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field's container triggers the `touchcancel`
	   * event.
	   */
	  onTouchCancel: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field's container triggers the `touchend`
	   * event.
	   */
	  onTouchEnd: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field's container triggers the `mousedown`
	   * event.
	   */
	  onMouseDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field's container triggers the `mouseup`
	   * event.
	   */
	  onMouseUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field's container triggers the `mouseover`
	   * event.
	   */
	  onMouseOver: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field's container triggers the `mouseleave`
	   * event.
	   */
	  onMouseLeave: _propTypes2.default.func,

	  /**
	   * An optional onChange function to call. If the `value` prop is defined, this is
	   * required.
	   *
	   * When the value changes in the text field, this will be called with the new text
	   * field's value and the change event.
	   *
	   * ```js
	   * onChange(e.target.value, e);
	   * ```
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field is blurred.
	   */
	  onBlur: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field is focused.
	   */
	  onFocus: _propTypes2.default.func,

	  /**
	   * An optional boolean if the `active` state of the text field can be externally
	   * modified as well. The text field is usually considered active when it gains focus.
	   *
	   * If this prop is set, it will check both the active prop and the active state to
	   * determine if one is true.
	   */
	  active: _propTypes2.default.bool,

	  /**
	   * An optional boolean if the `error` state of the text field can be externally
	   * modified as well. The text field is usually considered errored when it is required
	   * and there is no value or the current length of the text field's value is greater
	   * than the `maxLength` prop.
	   *
	   * If this prop is set, it will check both the error prop and the error state to
	   * determine if one is true.
	   */
	  error: _propTypes2.default.bool,

	  /**
	   * An optional boolean if the `floating` state of the text field's floating label can be
	   * externally modified as well. The floating state is true when the text field gains focus
	   * or there is a value in the text field.
	   *
	   * If this prop is set, it will check both the floating prop and the floating state to
	   * determine if one is true.
	   */
	  floating: _propTypes2.default.bool,

	  /**
	   * Boolean if the text field is required. If the user blurs the text field while there is
	   * no value and it is required, the `error` state will be set to true.
	   */
	  required: _propTypes2.default.bool,

	  /**
	   * The direction that the underline should appear from.
	   */
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right']).isRequired,

	  /**
	   * An optional icon to place to the left of the text field.
	   */
	  leftIcon: _propTypes2.default.element,

	  /**
	   * Boolean if the left icon should be stateful. This means that the icon will
	   * gain the active or error colors with the text field.
	   */
	  leftIconStateful: _propTypes2.default.bool,

	  /**
	   * An optional icon to place to the right of the text field.
	   */
	  rightIcon: _propTypes2.default.element,

	  /**
	   * Boolean if the right icon should be stateful. This means that the icon will
	   * gain the active or error colors with the text field.
	   */
	  rightIconStateful: _propTypes2.default.bool,

	  /**
	   * The icon to use for a password text field.
	   */
	  passwordIcon: _propTypes2.default.element,

	  /**
	   * Boolean if the password is initially visible.
	   */
	  passwordInitiallyVisible: _propTypes2.default.bool,

	  /**
	   * Boolean if the text field should be displayed as full width.
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * The number of rows for the `multiline` text field. This value must be greater than
	   * or equal to 1. When this value is set, the text field will be converted to a multiline
	   * field.
	   */
	  rows: (0, _minNumber2.default)(1, false),

	  /**
	   * The maximum number of rows for a `multiline` text field. If this value is
	   * `undefined`, `0`, or a number less than `0`, the multiline text field will
	   * infinitely expand.
	   */
	  maxRows: _propTypes2.default.number,

	  /**
	   * An optional custom size to apply to the text field. This is used along with
	   * the `$md-text-field-custom-sizes` variable. It basically applies a className of
	   * `md-text-field--NAME`.
	   */
	  customSize: _propTypes2.default.string,

	  /**
	   * An optional error text to display below the text field. This will only appear when
	   * the text field has the `error` state through the `error` prop, the current length
	   * of the text field's value is greater than the `maxLength` prop, or the field is
	   * required and the user blurs the text field with no value.
	   */
	  errorText: _propTypes2.default.node,

	  /**
	   * An optional help text to display below the text field. This will always be visible
	   * unless the `helpOnFocus` prop is set to true. Otherwise it will appear on focus.
	   */
	  helpText: _propTypes2.default.node,

	  /**
	   * Boolean if the help text should display on focus only.
	   */
	  helpOnFocus: _propTypes2.default.bool,

	  /**
	   * An optional max length for the text field. This will insert a counter underneath the
	   * text field that appears on focus.
	   */
	  maxLength: _propTypes2.default.number,

	  /**
	   * The ink when there is an injectInk above the text field. Used from the SelectField.
	   *
	   * @access private
	   */
	  ink: _propTypes2.default.node,

	  /**
	   * An optional element to display inside of the `TextField` to the farthest right. This will
	   * position the indicator absolutely and add some additional padding to the `TextField`.
	   */
	  inlineIndicator: _propTypes2.default.element,

	  /**
	   * This prop allows the text field to resize its width to stay between the min and max sizes provided. By
	   * default, the field will expand and collapse based on the amount of text provided. The collapsing can
	   * be disabled by providing `disableShrink` to the configuration object.
	   *
	   * If the `min` prop is not provided, it will default to `180` which is about the same size as a default
	   * text field.
	   */
	  resize: _propTypes2.default.shape({
	    min: _propTypes2.default.number,
	    max: _propTypes2.default.number.isRequired,
	    disableShrink: _propTypes2.default.bool
	  }),

	  /**
	   * Boolean if the TextField is in a toolbar and acting as a title. This will apply additional styles to the
	   * text field to make it look like the toolbar's title.
	   */
	  toolbar: _propTypes2.default.bool,

	  passwordIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `passwordIcon` prop instead'),
	  passwordIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `passwordIcon` prop instead'),
	  icon: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `leftIcon` or `rightIcon` prop instead'),
	  floatingLabel: (0, _deprecated2.default)(_propTypes2.default.bool, 'The `label` prop is now always floating. To create a non-floating text field, only use the `placeholder` prop'),
	  adjustMinWidth: (0, _deprecated2.default)(_propTypes2.default.bool, 'Manually add a min width style instead')
	};
	TextField.defaultProps = {
	  type: 'text',
	  lineDirection: 'left',
	  passwordIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'remove_red_eye'
	  ),
	  leftIconStateful: true,
	  rightIconStateful: true,
	  fullWidth: true
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this4 = this;

	  this.getField = function () {
	    return _this4._field.getField();
	  };

	  this.focus = function () {
	    _this4._field.focus();
	  };

	  this._getLength = function (v) {
	    if ((0, _isValued2.default)(v)) {
	      return String(v).length;
	    }

	    return 0;
	  };

	  this._setContainer = function (div) {
	    _this4._container = div;
	  };

	  this._setField = function (field) {
	    if (field !== null) {
	      _this4._field = field;
	    }
	  };

	  this._calcIconWidth = function (icon) {
	    var style = window.getComputedStyle(icon);

	    return icon.getBoundingClientRect().width + parseInt(style.marginLeft, 10);
	  };

	  this._calcWidth = function (value) {
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this4.props;

	    var text = value;
	    // if it is a password, use the bullet unicode instead
	    if (props.type === 'password') {
	      text = Array.from(Array(value.length)).reduce(function (s) {
	        return s + '\u2022';
	      }, '');
	    }

	    var field = _this4._field && _this4._field.getField();
	    if (!(0, _isValued2.default)(text) && field) {
	      text = field.value;
	    }

	    var min = (0, _getField2.default)(props.resize, { min: DEFAULT_TEXT_FIELD_SIZE }, 'min');
	    var width = (0, _getTextWidth2.default)(text, field);
	    if (width === null || !field) {
	      // some error happened, don't do other logic
	      return width || min;
	    }

	    var max = props.resize.max;


	    if (_this4._container) {
	      var indicator = _this4._container.querySelector('.md-text-field-inline-indicator');
	      if (indicator) {
	        width += indicator.getBoundingClientRect().width;
	      }

	      var iconContainer = _this4._container.querySelector('.md-text-field-icon-container');
	      if (iconContainer) {
	        // There is conditionally an icon before and after the text field, or only an icon before/after
	        var _iconContainer$childr = iconContainer.children,
	            first = _iconContainer$childr[0],
	            second = _iconContainer$childr[1],
	            third = _iconContainer$childr[2];

	        if (first.classList.contains('md-icon')) {
	          width += first.getBoundingClientRect().width;
	          width += parseInt(window.getComputedStyle(second).marginLeft, 10);

	          if (third) {
	            width += _this4._calcIconWidth(third);
	          }
	        } else if (second) {
	          width += _this4._calcIconWidth(second);
	        }
	      }
	    }

	    return Math.ceil(Math.min(max, Math.max(min, width)));
	  };

	  this._isErrored = function () {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this4.props,
	        value = _ref.value,
	        maxLength = _ref.maxLength,
	        required = _ref.required;

	    var error = _this4.state.error;

	    var currentLength = _this4._getLength(value);
	    if (required && error) {
	      error = !(0, _isValued2.default)(value);
	    }

	    if (maxLength) {
	      error = error || currentLength > maxLength;
	    }

	    return error;
	  };

	  this._handleContainerClick = function (e) {
	    if (_this4.props.onClick) {
	      _this4.props.onClick(e);
	    }

	    if (!_this4.props.disabled) {
	      _this4.focus();
	    }
	  };

	  this._handleBlur = function (e) {
	    _this4._focus = false;
	    var _props5 = _this4.props,
	        required = _props5.required,
	        maxLength = _props5.maxLength,
	        onBlur = _props5.onBlur;

	    if (onBlur) {
	      onBlur(e);
	    }

	    var value = e.target.value;

	    var state = {
	      active: false,
	      error: required && !(0, _isValued2.default)(value) || maxLength && String(value).length > maxLength
	    };

	    if (!_this4.props.block) {
	      state.floating = (0, _isValued2.default)(value);
	    }

	    _this4.setState(state);
	  };

	  this._handleFocus = function (e) {
	    _this4._focus = true;
	    var _props6 = _this4.props,
	        onFocus = _props6.onFocus,
	        block = _props6.block;

	    if (onFocus) {
	      onFocus(e);
	    }

	    var state = { active: true };
	    if (!block) {
	      state.floating = true;
	    }

	    _this4.setState(state);
	  };

	  this._handleChange = function (e) {
	    var _props7 = _this4.props,
	        onChange = _props7.onChange,
	        maxLength = _props7.maxLength,
	        required = _props7.required,
	        resize = _props7.resize;
	    var value = e.target.value;

	    if (onChange) {
	      onChange(e.target.value, e);
	    }

	    var currentLength = value.length;
	    var state = void 0;
	    if (typeof maxLength !== 'undefined') {
	      state = { currentLength: currentLength, error: currentLength > maxLength };
	    } else if (required && _this4.state.error) {
	      state = { error: !currentLength };
	    }

	    if (typeof _this4.props.value === 'undefined' && resize) {
	      var width = _this4._calcWidth(value);
	      if (!resize.disableShrink || !_this4.state.styles || width > _this4.state.styles.width) {
	        state = state || {};
	        state.styles = _extends({}, _this4.state.styles, { width: width });
	      }
	    }

	    if (state) {
	      _this4.setState(state);
	    }
	  };

	  this._togglePasswordField = function () {
	    _this4.setState({ passwordVisible: !_this4.state.passwordVisible }, _this4.focus);
	  };
	};

	exports.default = TextField;

/***/ }),
/* 360 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = isValued;
	/** @module utils/isValied */

	/**
	 * A really simple utility function to check if an input's value is considered "valued".
	 *
	 * @param {string|number} v - the value to check
	 * @return {boolean} true if the value is a number or a non-empty string.
	 */
	function isValued(v) {
	  return v === 0 || !!v;
	}

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = minNumber;

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Validates the a prop's value is greater than or equal to the minimum value.
	 *
	 * @param {Number} min - the minimum value for the prop.
	 * @param {Boolean} required - Boolean if the prop is required.
	 * @return {Error} an error or null.
	 */
	function minNumber(min, required) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;

	    var validator = _propTypes2.default.number;
	    if (required) {
	      validator = validator.isRequired;
	    }

	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }

	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!required && !err && props[propName] < min) {
	      err = new Error('The ' + location + ' `' + propFullNameSafe + '` must be greater than or equal to the min value ' + ('`' + min + '` but received `' + props[propName] + '` for the `' + componentNameSafe + '` component.'));
	    }

	    return err;
	  };
	} /** @module utils/PropTypes/minNumber */

/***/ }),
/* 362 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = addSuffix;
	/** @module utils/StringUtils/addSuffix */

	/**
	 * Optionally adds a suffix to a string if it does
	 * not already contain that string.
	 *
	 * @param {String} str - The string to modify
	 * @param {String} suffix - The suffix to add
	 *
	 * @return {String} the string with a suffix
	 */
	function addSuffix(str, suffix) {
	  if (!str || typeof str !== 'string') {
	    return str;
	  }

	  return str.indexOf(suffix) === -1 ? str.trim() + ' ' + suffix : str;
	}

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var FloatingLabel = function (_PureComponent) {
	  _inherits(FloatingLabel, _PureComponent);

	  function FloatingLabel() {
	    _classCallCheck(this, FloatingLabel);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  FloatingLabel.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        label = _props.label,
	        htmlFor = _props.htmlFor,
	        className = _props.className,
	        floating = _props.floating,
	        active = _props.active,
	        error = _props.error,
	        disabled = _props.disabled,
	        iconOffset = _props.iconOffset,
	        customSize = _props.customSize,
	        props = _objectWithoutProperties(_props, ['label', 'htmlFor', 'className', 'floating', 'active', 'error', 'disabled', 'iconOffset', 'customSize']);

	    if (!label) {
	      return null;
	    }

	    return _react2.default.createElement(
	      'label',
	      _extends({}, props, {
	        htmlFor: htmlFor,
	        className: (0, _classnames2.default)('md-floating-label', (_cn = {
	          'md-floating-label--inactive': !floating,
	          'md-floating-label--inactive-sized': !floating && !customSize
	        }, _cn['md-floating-label--' + customSize] = customSize, _cn['md-floating-label--inactive-' + customSize] = customSize && !floating, _cn['md-floating-label--floating'] = floating, _cn['md-floating-label--icon-offset'] = iconOffset, _cn), (0, _themeColors2.default)({
	          disabled: disabled,
	          error: error,
	          hint: !active,
	          primary: active
	        }, className))
	      }),
	      label
	    );
	  };

	  return FloatingLabel;
	}(_react.PureComponent);

	FloatingLabel.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  label: _propTypes2.default.node,
	  floating: _propTypes2.default.bool,
	  error: _propTypes2.default.bool,
	  active: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  iconOffset: _propTypes2.default.bool,
	  customSize: _propTypes2.default.string,
	  htmlFor: _propTypes2.default.string
	};
	exports.default = FloatingLabel;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _Message = __webpack_require__(365);

	var _Message2 = _interopRequireDefault(_Message);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TextFieldMessage = function (_PureComponent) {
	  _inherits(TextFieldMessage, _PureComponent);

	  function TextFieldMessage(props) {
	    _classCallCheck(this, TextFieldMessage);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this.state = {
	      message: props.error && props.errorText || props.helpText || props.errorText,
	      isMessageVisible: _this._isMessageVisible(props)
	    };
	    return _this;
	  }

	  TextFieldMessage.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var keys = ['active', 'error', 'helpOnFocus', 'helpText', 'errorText'];
	    if (this._anyChanges(keys, this.props, nextProps)) {
	      this.setState({
	        isMessageVisible: this._isMessageVisible(nextProps),
	        message: nextProps.error && nextProps.errorText || nextProps.helpText || nextProps.errorText
	      });
	    }
	  };

	  TextFieldMessage.prototype._anyChanges = function _anyChanges(keys, p1, p2) {
	    var changed = false;
	    keys.some(function (key) {
	      if (p1[key] !== p2[key]) {
	        changed = true;
	      }

	      return changed;
	    });

	    return changed;
	  };

	  TextFieldMessage.prototype._isMessageVisible = function _isMessageVisible(props) {
	    var error = props.error,
	        errorText = props.errorText,
	        helpText = props.helpText,
	        helpOnFocus = props.helpOnFocus,
	        active = props.active;

	    if (error && errorText) {
	      return true;
	    }

	    return !!(helpText && (!helpOnFocus || active));
	  };

	  TextFieldMessage.prototype.render = function render() {
	    var _props = this.props,
	        maxLength = _props.maxLength,
	        error = _props.error,
	        className = _props.className,
	        errorText = _props.errorText,
	        helpText = _props.helpText,
	        currentLength = _props.currentLength,
	        leftIcon = _props.leftIcon,
	        rightIcon = _props.rightIcon,
	        block = _props.block,
	        active = _props.active;
	    var _state = this.state,
	        isMessageVisible = _state.isMessageVisible,
	        message = _state.message;


	    if (currentLength === 'undefined' || !helpText && !errorText && !maxLength) {
	      return null;
	    }

	    return _react2.default.createElement(
	      'div',
	      {
	        className: (0, _classnames2.default)('md-text-field-message-container', {
	          'md-text-field-message-container--count-only': !message || !isMessageVisible,
	          'md-text-field-message-container--left-icon-offset': leftIcon,
	          'md-text-field-message-container--right-icon-offset': rightIcon,
	          'md-full-width': !block
	        }, (0, _themeColors2.default)({ error: error, disabled: !error }), className)
	      },
	      _react2.default.createElement(
	        _Message2.default,
	        { key: 'message', active: isMessageVisible },
	        message
	      ),
	      _react2.default.createElement(
	        _Message2.default,
	        { key: 'counter', className: 'md-text-field-message--counter', active: active },
	        maxLength ? currentLength + ' / ' + maxLength : null
	      )
	    );
	  };

	  return TextFieldMessage;
	}(_react.PureComponent);

	TextFieldMessage.propTypes = {
	  className: _propTypes2.default.string,
	  error: _propTypes2.default.bool,
	  helpText: _propTypes2.default.node,
	  errorText: _propTypes2.default.node,
	  active: _propTypes2.default.bool,
	  helpOnFocus: _propTypes2.default.bool,
	  maxLength: _propTypes2.default.number,
	  currentLength: _propTypes2.default.number,
	  leftIcon: _propTypes2.default.bool,
	  rightIcon: _propTypes2.default.bool,
	  block: _propTypes2.default.bool
	};
	exports.default = TextFieldMessage;

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Message = function (_PureComponent) {
	  _inherits(Message, _PureComponent);

	  function Message() {
	    _classCallCheck(this, Message);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Message.prototype.render = function render() {
	    var _props = this.props,
	        active = _props.active,
	        children = _props.children,
	        className = _props.className;


	    if (!children) {
	      return null;
	    }

	    return _react2.default.createElement(
	      'div',
	      {
	        'aria-hidden': !active,
	        className: (0, _classnames2.default)('md-text-field-message', 'md-text-field-message--' + (active ? '' : 'in') + 'active', className)
	      },
	      children
	    );
	  };

	  return Message;
	}(_react.PureComponent);

	Message.propTypes = {
	  active: _propTypes2.default.bool,
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node
	};
	exports.default = Message;

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _keyCodes = __webpack_require__(279);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PasswordButton = function (_PureComponent) {
	  _inherits(PasswordButton, _PureComponent);

	  function PasswordButton() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, PasswordButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { keyboardFocus: false }, _this._handleOutsideClick = function (e) {
	      if (_this._button && !_this._button.contains(e.target)) {
	        window.removeEventListener('click', _this._handleOutsideClick);
	        _this.setState({ keyboardFocus: false });
	      }
	    }, _this._handleBlur = function () {
	      if (_this.state.keyboardFocus) {
	        _this.setState({ keyboardFocus: false });
	      }
	    }, _this._handleKeyUp = function (e) {
	      var key = e.which || e.keyCode;
	      if (key === _keyCodes.TAB) {
	        _this.setState({ keyboardFocus: true });
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  PasswordButton.prototype.render = function render() {
	    var keyboardFocus = this.state.keyboardFocus;

	    var _props = this.props,
	        active = _props.active,
	        passwordVisible = _props.passwordVisible,
	        block = _props.block,
	        floating = _props.floating,
	        icon = _props.icon,
	        props = _objectWithoutProperties(_props, ['active', 'passwordVisible', 'block', 'floating', 'icon']);

	    return _react2.default.createElement(
	      'button',
	      _extends({}, props, {
	        onBlur: this._handleBlur,
	        onKeyUp: this._handleKeyUp,
	        type: 'button',
	        className: (0, _classnames2.default)('md-text-field-inline-indicator md-password-btn md-pointer--hover', {
	          'md-password-btn--focus': keyboardFocus,
	          'md-password-btn--invisible': active && !passwordVisible,
	          'md-text-field-inline-indicator--floating': floating,
	          'md-text-field-inline-indicator--block': block
	        }, (0, _themeColors2.default)({ disabled: !active, hint: active }))
	      }),
	      icon
	    );
	  };

	  return PasswordButton;
	}(_react.PureComponent);

	PasswordButton.propTypes = {
	  active: _propTypes2.default.bool,
	  passwordVisible: _propTypes2.default.bool,
	  icon: _propTypes2.default.element,
	  block: _propTypes2.default.bool,
	  floating: _propTypes2.default.bool
	};
	exports.default = PasswordButton;

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _TextArea = __webpack_require__(368);

	var _TextArea2 = _interopRequireDefault(_TextArea);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This component either renders a base `input` tag or the `TextArea` component.
	 */
	var InputField = function (_PureComponent) {
	  _inherits(InputField, _PureComponent);

	  function InputField() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, InputField);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.getField = function () {
	      // eslint-disable-line arrow-body-style
	      return typeof _this.props.rows === 'undefined' ? _this._field : _this._field.getField();
	    }, _this.getValue = function () {
	      if (typeof _this.props.rows === 'undefined') {
	        return _this._field.value;
	      }

	      return _this._field.getValue();
	    }, _this.focus = function () {
	      _this._field.focus();
	    }, _this.blur = function () {
	      _this._field.blur();
	    }, _this._setField = function (field) {
	      _this._field = field;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  InputField.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        className = _props.className,
	        rows = _props.rows,
	        label = _props.label,
	        customSize = _props.customSize,
	        fullWidth = _props.fullWidth,
	        type = _props.type,
	        passwordVisible = _props.passwordVisible,
	        block = _props.block,
	        inlineIndicator = _props.inlineIndicator,
	        maxRows = _props.maxRows,
	        props = _objectWithoutProperties(_props, ['className', 'rows', 'label', 'customSize', 'fullWidth', 'type', 'passwordVisible', 'block', 'inlineIndicator', 'maxRows']);

	    var multiline = typeof rows !== 'undefined';
	    var Component = multiline ? _TextArea2.default : 'input';
	    if (!multiline) {
	      props.type = passwordVisible ? 'text' : type;
	    } else {
	      props.label = label;
	      props.block = block;
	      props.maxRows = maxRows;
	    }

	    return (0, _react.createElement)(Component, _extends({}, props, {
	      rows: rows,
	      ref: this._setField,
	      className: (0, _classnames2.default)('md-text-field', (_cn = {
	        'md-text-field--inline-indicator': inlineIndicator || !multiline && type === 'password',
	        'md-text-field--multiline': multiline,
	        'md-text-field--margin': !block && !multiline && !label,
	        'md-text-field--floating-margin': !block && !multiline && label
	      }, _cn['md-text-field--' + customSize] = customSize, _cn['md-full-width'] = fullWidth, _cn), (0, _themeColors2.default)({ disabled: props.disabled, text: !props.disabled }, className))
	    }));
	  };

	  return InputField;
	}(_react.PureComponent);

	InputField.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  type: _propTypes2.default.string,
	  placeholder: _propTypes2.default.string,
	  block: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  rows: _propTypes2.default.number,
	  maxRows: _propTypes2.default.number,
	  label: _propTypes2.default.node,
	  fullWidth: _propTypes2.default.bool,
	  customSize: _propTypes2.default.string,
	  passwordVisible: _propTypes2.default.bool,
	  inlineIndicator: _propTypes2.default.bool
	};
	exports.default = InputField;

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _ResizeObserver = __webpack_require__(357);

	var _ResizeObserver2 = _interopRequireDefault(_ResizeObserver);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `TextArea` component is used to allow a dynamic height for the
	 * `textarea`. The height will keep on changing until the maxRows prop
	 * is met or infinitely if it does not exist, or is 0.
	 */
	var TextArea = function (_PureComponent) {
	  _inherits(TextArea, _PureComponent);

	  function TextArea() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, TextArea);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { height: null }, _this.getField = function () {
	      return _this._field;
	    }, _this.getValue = function () {
	      return _this._field.value;
	    }, _this.focus = function () {
	      _this._field.focus();
	    }, _this.blur = function () {
	      _this._field.blur();
	    }, _this._calcRowHeight = function () {
	      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props,
	          rows = _ref.rows;

	      if (!_this._field) {
	        return 19;
	      }

	      var height = _this._field.style.height;
	      _this._field.style.height = 'auto';
	      var rowHeight = _this._field.offsetHeight / rows;
	      _this._field.style.height = height;
	      return rowHeight;
	    }, _this._setMask = function (mask) {
	      _this._mask = mask;
	    }, _this._setField = function (field) {
	      _this._field = field;
	    }, _this._handleResize = function () {
	      _this._rowHeight = _this._calcRowHeight();
	      _this._syncHeightWithMask();
	    }, _this._syncHeightWithMask = function (value) {
	      // The mask is always null in snapshot teseting
	      if (!_this._mask) {
	        return;
	      }

	      if (value !== undefined) {
	        _this._mask.value = value;
	      }

	      var height = _this._mask.scrollHeight;
	      if (height === undefined) {
	        return;
	      }

	      var _this$props = _this.props,
	          rows = _this$props.rows,
	          maxRows = _this$props.maxRows;

	      if (maxRows && maxRows > 0) {
	        height = Math.min(height, _this._rowHeight * maxRows);
	      }

	      height = Math.max(_this._rowHeight * rows, height);
	      _this.setState({ height: height });
	    }, _this._handleChange = function (e) {
	      _this._syncHeightWithMask(e.target.value, e);

	      if (_this.props.onChange) {
	        _this.props.onChange(e);
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  TextArea.prototype.componentDidMount = function componentDidMount() {
	    this._rowHeight = this._calcRowHeight();
	    this._syncHeightWithMask();
	  };

	  TextArea.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.rows !== nextProps.rows) {
	      this._rowHeight = this._calcRowHeight(nextProps);
	    }

	    if (this.props.value !== nextProps.value || this.props.maxRows !== nextProps.maxRows) {
	      this._syncHeightWithMask(nextProps.value);
	    }
	  };

	  TextArea.prototype.render = function render() {
	    var height = this.state.height;

	    var _props = this.props,
	        style = _props.style,
	        defaultValue = _props.defaultValue,
	        value = _props.value,
	        className = _props.className,
	        label = _props.label,
	        block = _props.block,
	        maxRows = _props.maxRows,
	        onChange = _props.onChange,
	        props = _objectWithoutProperties(_props, ['style', 'defaultValue', 'value', 'className', 'label', 'block', 'maxRows', 'onChange']);

	    return _react2.default.createElement(
	      'div',
	      {
	        style: { height: height && height + 5 },
	        className: (0, _classnames2.default)('md-text-field-multiline-container', {
	          'md-text-field--margin': !label && !block,
	          'md-text-field--floating-margin': label && !block
	        })
	      },
	      _react2.default.createElement(_ResizeObserver2.default, { watchWidth: true, onResize: this._handleResize }),
	      _react2.default.createElement('textarea', {
	        ref: this._setMask,
	        className: (0, _classnames2.default)(className, 'md-text-field--multiline-mask'),
	        readOnly: true,
	        rows: props.rows,
	        tabIndex: -1,
	        style: style,
	        defaultValue: defaultValue,
	        'aria-hidden': true,
	        value: value
	      }),
	      _react2.default.createElement('textarea', _extends({}, props, {
	        ref: this._setField,
	        style: Object.assign({}, style, { height: height }),
	        className: className,
	        defaultValue: defaultValue,
	        value: value,
	        onChange: this._handleChange
	      }))
	    );
	  };

	  return TextArea;
	}(_react.PureComponent);

	TextArea.propTypes = {
	  id: _propTypes2.default.string,
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  rows: _propTypes2.default.number.isRequired,
	  maxRows: _propTypes2.default.number,
	  onChange: _propTypes2.default.func,
	  defaultValue: _propTypes2.default.string,
	  floatingLabel: _propTypes2.default.bool,
	  value: _propTypes2.default.string,
	  block: _propTypes2.default.bool,
	  label: _propTypes2.default.node
	};
	exports.default = TextArea;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _Divider = __webpack_require__(370);

	var _Divider2 = _interopRequireDefault(_Divider);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TextFieldDivider = function (_PureComponent) {
	  _inherits(TextFieldDivider, _PureComponent);

	  function TextFieldDivider() {
	    _classCallCheck(this, TextFieldDivider);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  TextFieldDivider.prototype.render = function render() {
	    var _props = this.props,
	        active = _props.active,
	        error = _props.error,
	        lineDirection = _props.lineDirection,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['active', 'error', 'lineDirection', 'className']);

	    return _react2.default.createElement(_Divider2.default, _extends({}, props, {
	      className: (0, _classnames2.default)('md-divider--text-field md-divider--expand-from-' + lineDirection, {
	        'md-divider--text-field-expanded': active,
	        'md-divider--text-field-active': !error && active,
	        'md-divider--text-field-error': error
	      }, className)
	    }));
	  };

	  return TextFieldDivider;
	}(_react.PureComponent);

	TextFieldDivider.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool,
	  error: _propTypes2.default.bool,
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right'])
	};
	exports.default = TextFieldDivider;

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The divider component will pass all other props such as style or
	 * event listeners on to the component.
	 */
	var Divider = function (_PureComponent) {
	  _inherits(Divider, _PureComponent);

	  function Divider() {
	    _classCallCheck(this, Divider);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Divider.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        inset = _props.inset,
	        vertical = _props.vertical,
	        props = _objectWithoutProperties(_props, ['className', 'inset', 'vertical']);

	    var Component = vertical ? 'div' : 'hr';

	    return _react2.default.createElement(Component, _extends({}, props, {
	      className: (0, _classnames2.default)('md-divider', {
	        'md-divider--vertical': vertical,
	        'md-divider--inset': inset
	      }, className)
	    }));
	  };

	  return Divider;
	}(_react.PureComponent);

	Divider.propTypes = {
	  /*
	   * An optional style to apply to the divider.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the divider.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Boolean if this divider should be inset relative to it's container
	   * component. This means that if it is in a `List` with `Avatar`, it
	   * will start the divider  to the left of the main text in the list.
	   */
	  inset: _propTypes2.default.bool,

	  /**
	   * Boolean if the divider should be vertical instead of horizontal.
	   */
	  vertical: _propTypes2.default.bool
	};
	exports.default = Divider;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _oneRequiredForA11yIf = __webpack_require__(372);

	var _oneRequiredForA11yIf2 = _interopRequireDefault(_oneRequiredForA11yIf);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The avatar component is used to convert a `FontIcon`, an image, or
	 * a letter into an avatar.
	 *
	 * Any other props given to the Avatar component such as event listeners
	 * or styles will also be applied.
	 */
	var Avatar = function (_PureComponent) {
	  _inherits(Avatar, _PureComponent);

	  function Avatar() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Avatar);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { color: null }, _this._setRandomColor = function () {
	      var suffixes = _this.props.suffixes;


	      var i = Math.floor(Math.random() * (suffixes.length - 1)) + 1;
	      _this.setState({ color: suffixes[i] });
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Avatar.prototype.componentWillMount = function componentWillMount() {
	    if (this.props.random) {
	      this._setRandomColor();
	    }
	  };

	  Avatar.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.random && (this.props.src !== nextProps.src || this.props.icon !== nextProps.icon)) {
	      this._setRandomColor();
	    } else if (this.props.random && !nextProps.random) {
	      this.setState({ color: null });
	    }
	  };

	  Avatar.prototype._getColor = function _getColor(suffix, suffixes, color) {
	    if (suffix) {
	      return 'md-avatar--' + suffix;
	    } else if (!!suffixes && !color) {
	      return 'md-avatar--default';
	    }

	    return 'md-avatar--' + color;
	  };

	  Avatar.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        contentStyle = _props.contentStyle,
	        contentClassName = _props.contentClassName,
	        src = _props.src,
	        alt = _props.alt,
	        icon = _props.icon,
	        children = _props.children,
	        suffix = _props.suffix,
	        suffixes = _props.suffixes,
	        iconSized = _props.iconSized,
	        role = _props.role,
	        random = _props.random,
	        props = _objectWithoutProperties(_props, ['className', 'contentStyle', 'contentClassName', 'src', 'alt', 'icon', 'children', 'suffix', 'suffixes', 'iconSized', 'role', 'random']);

	    var content = void 0;
	    if (src) {
	      content = _react2.default.createElement('img', {
	        src: src,
	        alt: alt,
	        role: role,
	        style: contentStyle,
	        className: (0, _classnames2.default)('md-avatar-img', contentClassName)
	      });
	    } else {
	      content = _react2.default.createElement(
	        'div',
	        {
	          style: contentStyle,
	          className: (0, _classnames2.default)('md-avatar-content', contentClassName)
	        },
	        icon || children
	      );
	    }
	    return _react2.default.createElement(
	      'div',
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-inline-block md-avatar', this._getColor(suffix, suffixes, this.state.color), {
	          'md-avatar--icon-sized': iconSized
	        }, className)
	      }),
	      content
	    );
	  };

	  return Avatar;
	}(_react.PureComponent);

	Avatar.propTypes = {
	  /**
	   * An optional className to apply to the avatar.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to either the `<img>` or `<div>` surrounding the content. The `<img>` tag
	   * will be used with the `src` prop is defined.
	   */
	  contentStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to either the `<img>` or `<div>` surrounding the content. The `<img>` tag
	   * will be used with the `src` prop is defined.
	   */
	  contentClassName: _propTypes2.default.string,

	  /**
	   * An optional image source to use for the avatar.
	   */
	  src: (0, _oneRequiredForA11yIf2.default)(_propTypes2.default.string, 'role', 'alt'),

	  /**
	   * An optional image alt to use for the avatar if it is
	   * an image.
	   */
	  alt: _propTypes2.default.string,

	  /**
	   * An optional `FontIcon` to convert into an avatar.
	   */
	  icon: _propTypes2.default.node,

	  /**
	   * An optional letter to display in the avatar.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * A boolean if a random color should be applied to the avatar.
	   * This will be one of the `suffixes`.
	   */
	  random: _propTypes2.default.bool,

	  /**
	   * A list of available suffixes to use when generating a random
	   * color for the avatar.
	   */
	  suffixes: _propTypes2.default.arrayOf(_propTypes2.default.string),

	  /**
	   * The suffix to use for a color. This can be any value but
	   * *should* be one of the available `suffixes`.
	   */
	  suffix: _propTypes2.default.string,

	  /**
	   * Boolean if the `Avatar` should be sized to a `FontIcon` size. This
	   * will just set the width and height to the `$md-font-icon-size`.
	   */
	  iconSized: _propTypes2.default.bool,

	  /**
	   * A role for the avatar's image. When the `src` prop is set, either a `role` of `presentation`
	   * or the `alt` prop must be defined for a11y.
	   */
	  role: _propTypes2.default.oneOf(['presentation'])
	};
	Avatar.defaultProps = {
	  suffixes: ['red', 'pink', 'purple', 'deep-purple', 'indigo', 'blue', 'light-blue', 'cyan', 'teal', 'green', 'light-green', 'lime', 'yellow', 'amber', 'orange', 'deep-orange', 'brown', 'grey', 'blue-grey']
	};
	exports.default = Avatar;

/***/ }),
/* 372 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = oneRequiredForA11yIf;
	/** @module utils/PropTypes/oneRequiredForA11yIf */

	/**
	 * A PropType validator to make sure that any of the other prop names have been defined
	 * if the current prop is also defined.
	 *
	 * This is mostly useful for when adding a prop requires additional accessibility props defined
	 * as well.
	 *
	 * @param {function} validator - The current prop's validator.
	 */
	function oneRequiredForA11yIf(validator) {
	  for (var _len = arguments.length, otherPropNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    otherPropNames[_key - 1] = arguments[_key];
	  }

	  return function validate(props, propName, componentName, location, propFullName) {
	    var filterUndefined = function filterUndefined(pn) {
	      return typeof props[pn] !== 'undefined';
	    };
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	    var defined = typeof props[propName] !== 'undefined';
	    var allPropNames = [propFullNameSafe].concat(otherPropNames);

	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }

	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && defined && !allPropNames.filter(filterUndefined).length) {
	      err = new Error('One of the following props are required to make `' + componentNameSafe + '` accessible ' + ('for users of assistive technologies such as screen readers when using the `' + propFullNameSafe + '` ') + ('prop. `' + allPropNames.join('`, `') + '`.'));
	    }

	    return err;
	  };
	}

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The main use case of the `Badge` component is for notifications. It can
	 * however also place any content floating to whatever children are supplied.
	 */
	var Badge = function (_PureComponent) {
	  _inherits(Badge, _PureComponent);

	  function Badge(props) {
	    _classCallCheck(this, Badge);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    var single = _this._isSingleChild(props);
	    _this.state = {
	      single: single,
	      element: single && (0, _react.isValidElement)(props.children),
	      count: _this._normalizeCount(props)
	    };
	    return _this;
	  }

	  Badge.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        badgeContent = _props.badgeContent,
	        max = _props.max,
	        children = _props.children;

	    var nextState = void 0;
	    if (badgeContent !== nextProps.badgeContent || max !== nextProps.max) {
	      nextState = { count: this._normalizeCount(nextProps) };
	    }

	    if (children !== nextProps.children) {
	      nextState = nextState || {};
	      nextState.single = this._isSingleChild(nextProps);
	      nextState.element = nextState.single && (0, _react.isValidElement)(nextProps.children);
	    }

	    if (nextState) {
	      this.setState(nextState);
	    }
	  };

	  Badge.prototype._isSingleChild = function _isSingleChild(_ref) {
	    var children = _ref.children;

	    return _react.Children.count(children) === 1;
	  };

	  Badge.prototype._normalizeCount = function _normalizeCount(_ref2) {
	    var badgeContent = _ref2.badgeContent,
	        max = _ref2.max;

	    var count = void 0;
	    if (max) {
	      var n = parseInt(badgeContent, 10);
	      if (!Number.isNaN(n) && n.toString() === badgeContent.toString()) {
	        count = n > max ? max + '+' : n;
	      }
	    }

	    return count;
	  };

	  Badge.prototype.render = function render() {
	    var _state = this.state,
	        count = _state.count,
	        single = _state.single,
	        element = _state.element;

	    var _props2 = this.props,
	        className = _props2.className,
	        badgeStyle = _props2.badgeStyle,
	        badgeClassName = _props2.badgeClassName,
	        badgeContent = _props2.badgeContent,
	        Component = _props2.component,
	        children = _props2.children,
	        primary = _props2.primary,
	        secondary = _props2.secondary,
	        defaultTheme = _props2.default,
	        circular = _props2.circular,
	        badgeId = _props2.badgeId,
	        invisibleOnZero = _props2.invisibleOnZero,
	        max = _props2.max,
	        props = _objectWithoutProperties(_props2, ['className', 'badgeStyle', 'badgeClassName', 'badgeContent', 'component', 'children', 'primary', 'secondary', 'default', 'circular', 'badgeId', 'invisibleOnZero', 'max']);

	    var useCircular = typeof circular !== 'undefined' ? circular : typeof count !== 'undefined';
	    var content = children;
	    if (single && element) {
	      var c = _react.Children.only(content);
	      if (!c.props['aria-describedby']) {
	        content = (0, _react.cloneElement)(c, { 'aria-describedby': badgeId });
	      }
	    } else if (single && !element && !props['aria-describedby']) {
	      props['aria-describedby'] = badgeId;
	    }

	    var badge = _react2.default.createElement(
	      'span',
	      {
	        id: badgeId,
	        key: 'badge',
	        role: 'status',
	        style: badgeStyle,
	        className: (0, _classnames2.default)('md-badge', {
	          'md-badge--circular': useCircular,
	          'md-badge--default': defaultTheme
	        }, (0, _themeColors2.default)({
	          primary: primary,
	          secondary: secondary,
	          text: useCircular,
	          themeText: !primary && !secondary
	        }, badgeClassName))
	      },
	      count || badgeContent
	    );

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-badge-container md-inline-block', className)
	      }),
	      content,
	      invisibleOnZero && count === 0 ? null : badge
	    );
	  };

	  return Badge;
	}(_react.PureComponent);

	Badge.propTypes = {
	  /**
	   * An optional style to apply to the badge's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the badge's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the badge.
	   */
	  badgeStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the badge.
	   */
	  badgeClassName: _propTypes2.default.string,

	  /**
	   * The id to give the badge's content. This is required to help with the
	   * `aria-describedby` attribute that should be applied to one of the children.
	   *
	   * If there is only one child that is a valid React element, the `aria-describedby`
	   * will automatically be cloned into that child (so make sure your component passes
	   * that prop correctly).
	   *
	   * If there is only one child, but it is a string or number, the badge's container
	   * will be updated to include the `aria-describedby`.
	   *
	   * If there is more than child, you are required to add it to a child yourself.
	   */
	  badgeId: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * The content to display with the badge's content. The size of this
	   * element is determinate of the location of the content. You might have
	   * to update the positioning yourself.
	   */
	  children: _propTypes2.default.node.isRequired,

	  /**
	   * The component to render the badge as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * The content to display in the badge. If the content is a number or a number string,
	   * the number will be normalized if `normalizeContent` is enabled.
	   */
	  badgeContent: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.node]).isRequired,

	  /**
	   * This will basically update the display value of the content to only be 2 digits. If
	   * a number is greater than 99, 99+ will be displayed instead. This is really just to
	   * keep the count inside the circular bubble.
	   */
	  max: _propTypes2.default.number,

	  /**
	   * Boolean if the primary color background should get applied to the badge's content.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the secondary color background should get applied to the badge's content.
	   */
	  secondary: _propTypes2.default.bool,

	  /**
	   * Boolean if the default styles should be applied.
	   */
	  default: _propTypes2.default.bool,

	  /**
	   * Boolean if the badge's content should appear in a circular container. If this is
	   * undefined, the content will be in a circular container if the badgeContent is a number.
	   */
	  circular: _propTypes2.default.bool,

	  /**
	   * Boolean if the badge's notification should be invisible when the count is 0.
	   */
	  invisibleOnZero: _propTypes2.default.bool
	};
	Badge.defaultProps = {
	  max: 99,
	  component: 'div'
	};
	exports.default = Badge;

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _touches = __webpack_require__(295);

	var _Portal = __webpack_require__(375);

	var _Portal2 = _interopRequireDefault(_Portal);

	var _Paper = __webpack_require__(256);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _BottomNav = __webpack_require__(376);

	var _BottomNav2 = _interopRequireDefault(_BottomNav);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `BottomNavigation` component is an alternative to the `NavigationDrawer` for handling navigation
	 * only on mobile devices.
	 */
	var BottomNavigation = function (_PureComponent) {
	  _inherits(BottomNavigation, _PureComponent);

	  function BottomNavigation(props) {
	    _classCallCheck(this, BottomNavigation);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var visible = typeof props.initiallyVisible === 'boolean' ? props.initiallyVisible : props.defaultVisible;
	    _this.state = {
	      visible: visible,
	      portalVisible: visible
	    };

	    if (typeof props.activeIndex === 'undefined') {
	      _this.state.activeIndex = props.defaultActiveIndex;
	    }
	    return _this;
	  }

	  BottomNavigation.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.dynamic) {
	      this._addTouchEvents();
	    }
	  };

	  BottomNavigation.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var dynamic = nextProps.dynamic;

	    if (this.props.dynamic === dynamic) {
	      return;
	    }

	    if (dynamic) {
	      this._addTouchEvents();
	    } else {
	      this._removeTouchEvents();
	    }
	  };

	  BottomNavigation.prototype.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {
	    if (this.state.visible !== nextState.visible && nextProps.onVisibilityChange) {
	      nextProps.onVisibilityChange(nextState.visible);
	    }
	  };

	  BottomNavigation.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.props.dynamic) {
	      this._removeTouchEvents();
	    }

	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }
	  };

	  BottomNavigation.prototype.render = function render() {
	    var _this2 = this;

	    var _state = this.state,
	        visible = _state.visible,
	        portalVisible = _state.portalVisible;

	    var _props = this.props,
	        className = _props.className,
	        actions = _props.actions,
	        colored = _props.colored,
	        dynamic = _props.dynamic,
	        lastChild = _props.lastChild,
	        animate = _props.animate,
	        portal = _props.portal,
	        propLinks = _props.links,
	        propActiveIndex = _props.activeIndex,
	        propRenderNode = _props.renderNode,
	        onNavChange = _props.onNavChange,
	        onVisibilityChange = _props.onVisibilityChange,
	        defaultVisible = _props.defaultVisible,
	        defaultActiveIndex = _props.defaultActiveIndex,
	        dynamicThreshold = _props.dynamicThreshold,
	        transitionDuration = _props.transitionDuration,
	        onChange = _props.onChange,
	        initiallyVisible = _props.initiallyVisible,
	        containerStyle = _props.containerStyle,
	        containerClassName = _props.containerClassName,
	        transitionName = _props.transitionName,
	        transitionEnterTimeout = _props.transitionEnterTimeout,
	        transitionLeaveTimeout = _props.transitionLeaveTimeout,
	        props = _objectWithoutProperties(_props, ['className', 'actions', 'colored', 'dynamic', 'lastChild', 'animate', 'portal', 'links', 'activeIndex', 'renderNode', 'onNavChange', 'onVisibilityChange', 'defaultVisible', 'defaultActiveIndex', 'dynamicThreshold', 'transitionDuration', 'onChange', 'initiallyVisible', 'containerStyle', 'containerClassName', 'transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout']);

	    var links = this.props.links;

	    if (actions) {
	      links = actions;
	    }

	    var fixed = links.length === 3;
	    var activeIndex = (0, _getField2.default)(this.props, this.state, 'activeIndex');
	    var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');
	    var navigation = _react2.default.createElement(
	      _Paper2.default,
	      _extends({}, props, {
	        key: 'navigation',
	        className: (0, _classnames2.default)('md-bottom-navigation', {
	          'md-background--card': !colored,
	          'md-background--primary': colored,
	          'md-bottom-navigation--dynamic': dynamic,
	          'md-bottom-navigation--dynamic-inactive': dynamic && !visible
	        }, className),
	        role: 'navigation'
	      }),
	      links.map(function (action, index) {
	        return _react2.default.createElement(_BottomNav2.default, _extends({}, action, {
	          animate: animate,
	          key: action.key || index,
	          index: index,
	          onNavChange: _this2._handleNavChange,
	          active: activeIndex === index,
	          colored: colored,
	          fixed: fixed
	        }));
	      })
	    );

	    if (!portal) {
	      return portalVisible ? navigation : null;
	    }

	    return _react2.default.createElement(
	      _Portal2.default,
	      { renderNode: renderNode, visible: portalVisible, lastChild: lastChild },
	      navigation
	    );
	  };

	  return BottomNavigation;
	}(_react.PureComponent);

	BottomNavigation.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * A list of objects to generate a bottom navigation link. There must be at least 3 and no more
	   * than 5 links. A link gets rendered as the `AccessibleFakeButton` component, so any additional
	   * props in the link's shape will be passed along.
	   *
	   * ```docgen
	   * PropTypes.arrayOf(PropTypes.shape({
	   *   label: PropTypes.node.isRequired,
	   *   icon: PropTypes.element,
	   *   component: PropTypes.oneOfType([
	   *      PropTypes.func,
	   *      PropTypes.string,
	   *   ]),
	   * }).isRequired
	   * ```
	   */
	  links: function links(props, propName, component) {
	    for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      args[_key - 3] = arguments[_key];
	    }

	    var _PropTypes$arrayOf;

	    var links = props[propName] || props.actions;
	    var len = links.length;

	    if (len < 3) {
	      return new Error('Only ' + len + ' `' + propName + '` were given to the ' + component + '. At least 3 are required.');
	    } else if (len > 5) {
	      return new Error(len + ' `' + propName + '` were given to the ' + component + '. No more than 5 may be given.');
	    }

	    return (_PropTypes$arrayOf = _propTypes2.default.arrayOf(_propTypes2.default.shape({
	      label: _propTypes2.default.node.isRequired,
	      icon: _propTypes2.default.element,
	      iconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `icon` instead'),
	      iconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `icon` instead'),
	      component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])
	    }))).isRequired.apply(_PropTypes$arrayOf, [props, propName, component].concat(args));
	  },

	  /**
	   * Boolean if the bottom navigation should be colored with the primary color or whatever color
	   * was a result of the `react-md-theme-bottom-navigations-colored` mixin.
	   */
	  colored: _propTypes2.default.bool,

	  /**
	   * Boolean if the bottom navigation should dynamically appear based on scrolling. When the user
	   * scrolls the `dynamicThreshold` amount, this component will either disappear (scrolling down)
	   * or appear (scrolling up).
	   */
	  dynamic: _propTypes2.default.bool,

	  /**
	   * The distance a user must scroll before the bottom navigation appears or disappears when it is `dynamic`.
	   */
	  dynamicThreshold: _propTypes2.default.number.isRequired,

	  /**
	   * An optional function to call when a link has been clicked. The callback will
	   * include the new active index and the click event.
	   *
	   * ```js
	   * onNavChange(newActiveIndex, event);
	   * ```
	   */
	  onNavChange: _propTypes2.default.func,

	  /**
	   * An optional active index to use. This will make the component controlled and require the
	   * `onNavChange` prop to be defined.
	   */
	  activeIndex: (0, _controlled2.default)(_propTypes2.default.number, 'onNavChange', 'defaultActiveIndex'),

	  /**
	   * The index for the link that is active by default.
	   */
	  defaultActiveIndex: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the bottom navigation is visible by default. This *should* probably always
	   * be true.
	   */
	  defaultVisible: _propTypes2.default.bool.isRequired,

	  /**
	   * The component to render the bottom navigation as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * Boolean if the Portal's functionality of rendering in a separate react tree should be applied
	   * to the bottom navigation.
	   *
	   * @see {@link Helpers/Portal}
	   */
	  portal: _propTypes2.default.bool,

	  /**
	   * Since the `BottomNavigation` component uses the `Portal` component, you can pass an optional
	   * HTML Node to render in.
	   */
	  renderNode: _propTypes2.default.object,

	  /**
	   * Boolean if the bottom navigation should render as the last child in the `renderNode` or `body`
	   * instead of as the first.
	   */
	  lastChild: _propTypes2.default.bool,

	  /**
	   * The transition duration for the dynamic bottom navigation to appear or disappear. This should
	   * match the `$md-bottom-navigation-transition-time` variable.
	   */
	  transitionDuration: _propTypes2.default.number.isRequired,

	  /**
	   * An optional function to call when the visibility of the bottom navigation changes. The callback
	   * will include the new visibility.
	   *
	   * ```js
	   * onVisibilityChange(!visible);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,

	  /**
	   * Boolean if the label on a shifting navigation should animate in and out.
	   */
	  animate: _propTypes2.default.bool,

	  onChange: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onNavChange` instead'),
	  initiallyVisible: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  initialActiveIndex: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `defaultActiveIndex` instead'),
	  containerStyle: (0, _deprecated2.default)(_propTypes2.default.object, 'Use `style` instead'),
	  containerClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `className` instead'),
	  transitionName: (0, _deprecated2.default)(_propTypes2.default.string, 'There is no CSSTransitionGroup used anymore'),
	  transitionEnterTimeout: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `transitionDuration` instead'),
	  transitionLeaveTimeout: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `transitionDuration` instead'),
	  actions: (0, _deprecated2.default)(_propTypes2.default.array, 'Use `links` instead')
	};
	BottomNavigation.defaultProps = {
	  animate: true,
	  defaultActiveIndex: 0,
	  component: 'footer',
	  defaultVisible: true,
	  transitionDuration: 300,
	  portal: false,
	  dynamicThreshold: 5
	};
	BottomNavigation.contextTypes = {
	  renderNode: _propTypes2.default.object
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this3 = this;

	  this._addTouchEvents = function () {
	    (0, _touches.addTouchEvent)(window, 'start', _this3._handleTouchStart);
	    (0, _touches.addTouchEvent)(window, 'move', _this3._handleTouchMove);
	    (0, _touches.addTouchEvent)(window, 'end', _this3._handleTouchEnd);
	  };

	  this._removeTouchEvents = function () {
	    (0, _touches.removeTouchEvent)(window, 'start', _this3._handleTouchStart);
	    (0, _touches.removeTouchEvent)(window, 'move', _this3._handleTouchMove);
	    (0, _touches.removeTouchEvent)(window, 'end', _this3._handleTouchEnd);
	  };

	  this._animateIn = function () {
	    if (_this3._timeout) {
	      clearTimeout(_this3._timeout);
	    }

	    _this3._timeout = setTimeout(function () {
	      _this3._timeout = null;
	      _this3.setState({ visible: true });
	    }, 17);

	    _this3.setState({ portalVisible: true });
	  };

	  this._animateOut = function () {
	    if (_this3._timeout) {
	      clearTimeout(_this3._timeout);
	    }

	    _this3._timeout = setTimeout(function () {
	      _this3._timeout = null;
	      _this3.setState({ portalVisible: false });
	    }, _this3.props.transitionDuration);

	    _this3.setState({ visible: false });
	  };

	  this._handleTouchStart = function (e) {
	    var pageY = e.changedTouches[0].pageY;


	    _this3._pageY = pageY;
	    _this3._scrolling = true;
	  };

	  this._handleTouchMove = function (e) {
	    var visible = _this3.state.visible;

	    if (!_this3._scrolling) {
	      return;
	    }

	    var touchY = e.changedTouches[0].pageY;
	    var dynamicThreshold = _this3.props.dynamicThreshold;

	    var passedThreshold = Math.abs(_this3._pageY - touchY) >= dynamicThreshold;
	    if (_this3._pageY > touchY && visible && passedThreshold) {
	      _this3._pageY = touchY;
	      _this3._animateOut();
	    } else if (_this3._pageY < touchY && !visible && passedThreshold) {
	      _this3._pageY = touchY;
	      _this3._animateIn();
	    }
	  };

	  this._handleTouchEnd = function () {
	    _this3._scrolling = false;
	  };

	  this._handleNavChange = function (index, e) {
	    if (_this3.props.onNavChange || _this3.props.onChange) {
	      (_this3.props.onNavChange || _this3.props.onChange)(index, e);
	    }

	    if (typeof _this3.props.activeIndex === 'undefined') {
	      _this3.setState({ activeIndex: index });
	    }
	  };
	};

	exports.default = BottomNavigation;

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isReact16 = typeof _reactDom.createPortal === 'function';

	/**
	 * Creates a "Portal" for the children to be rendered in. Basically it will render the
	 * children only when the `visible` prop is `true`. When it is visible, a new `component`
	 * will be rendered as the first child in the body with the children inside.
	 *
	 * Unlike all the other components, `style` will not be applied for the `Portal`.
	 */

	var Portal = function (_PureComponent) {
	  _inherits(Portal, _PureComponent);

	  function Portal() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Portal);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._container = null, _this._portal = null, _this._applyStyles = function (props) {
	      if (props.className) {
	        _this._container.className = props.className;
	      }
	    }, _this._renderPortal = function (props) {
	      if (!_this._container) {
	        _this._container = document.createElement(props.component);

	        _this._applyStyles(props);
	        var node = props.renderNode || document.body;
	        if (props.lastChild) {
	          node.appendChild(_this._container);
	        } else {
	          node.insertBefore(_this._container, node.firstChild);
	        }
	      } else {
	        _this._applyStyles(props);
	      }

	      if (!isReact16) {
	        _this._portal = (0, _reactDom.unstable_renderSubtreeIntoContainer)(_this, props.children, _this._container);
	      }
	    }, _this._removePortal = function () {
	      if (_this.props.onClose) {
	        _this.props.onClose();
	      }

	      if (_this._container) {
	        if (!isReact16) {
	          (0, _reactDom.unmountComponentAtNode)(_this._container);
	        }

	        (_this.props.renderNode || document.body).removeChild(_this._container);
	      }

	      _this._portal = null;
	      _this._container = null;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Portal.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.visible) {
	      this._renderPortal(this.props);

	      if (isReact16) {
	        // Need to update after the renderPortal created the DOM element.
	        this.forceUpdate();
	      }
	    }
	  };

	  Portal.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var visible = nextProps.visible,
	        onOpen = nextProps.onOpen;

	    if (this.props.visible === visible) {
	      if (visible && !isReact16) {
	        // Need to just re-render the subtree
	        this._renderPortal(nextProps);
	      }

	      return;
	    }

	    if (visible) {
	      if (onOpen) {
	        onOpen();
	      }

	      this._renderPortal(nextProps);
	    } else {
	      this._removePortal();
	    }
	  };

	  Portal.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.props.visible && this.props.onClose) {
	      this.props.onClose();
	    }
	    this._removePortal();
	  };

	  Portal.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.component,
	        className = _props.className,
	        children = _props.children,
	        visible = _props.visible;

	    // When doing server side rendering, actually render the component as a direct child of its parent.
	    // Once it has been rendered and working client side, it will be removed correctly.

	    if (typeof window === 'undefined' && visible) {
	      return _react2.default.createElement(
	        Component,
	        { className: className },
	        children
	      );
	    } else if (isReact16 && visible && this._container && typeof window !== 'undefined') {
	      return (0, _reactDom.createPortal)(children, this._container);
	    }

	    return null;
	  };

	  return Portal;
	}(_react.PureComponent);

	Portal.propTypes = {
	  /**
	   * An optional className to apply to the newly created `component` when visible.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Boolean if the children are visible.
	   */
	  visible: _propTypes2.default.bool.isRequired,

	  /**
	   * The children to render when visible.
	   */
	  children: _propTypes2.default.element,

	  /**
	   * The component to render as. This should be a valid DOM element.
	   */
	  component: _propTypes2.default.string.isRequired,

	  /**
	   * An optional function to call when the portal is opened.
	   */
	  onOpen: _propTypes2.default.func,

	  /**
	   * An optional function to call when the portal is closed
	   */
	  onClose: _propTypes2.default.func,

	  /**
	   * An optional DOM Node to render the portal into. The default is to render as
	   * the first child in the `body`.
	   */
	  renderNode: _propTypes2.default.object,

	  /**
	   * Boolean if the portal should render the children as the last child of the `renderNode`
	   * or `body` instead of the first.
	   */
	  lastChild: _propTypes2.default.bool
	};
	Portal.defaultProps = {
	  component: 'span'
	};
	exports.default = Portal;

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _AccessibleFakeInkedButton = __webpack_require__(339);

	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);

	var _Collapse = __webpack_require__(259);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var _FontIcons = __webpack_require__(377);

	var _FontIcons2 = _interopRequireDefault(_FontIcons);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `BottomNav` component is used for rendering the navigation tab/link in the `BottomNavigation`
	 * component.
	 */
	var BottomNav = function (_PureComponent) {
	  _inherits(BottomNav, _PureComponent);

	  function BottomNav() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, BottomNav);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._handleClick = function (e) {
	      var _this$props = _this.props,
	          onClick = _this$props.onClick,
	          onNavChange = _this$props.onNavChange,
	          index = _this$props.index;

	      if (onClick) {
	        onClick(index, e);
	      }

	      if (onNavChange) {
	        onNavChange(index, e);
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  BottomNav.prototype.render = function render() {
	    var _props = this.props,
	        active = _props.active,
	        fixed = _props.fixed,
	        className = _props.className,
	        colored = _props.colored,
	        animate = _props.animate,
	        iconClassName = _props.iconClassName,
	        iconChildren = _props.iconChildren,
	        index = _props.index,
	        propIcon = _props.icon,
	        propLabel = _props.label,
	        onClick = _props.onClick,
	        onNavChange = _props.onNavChange,
	        props = _objectWithoutProperties(_props, ['active', 'fixed', 'className', 'colored', 'animate', 'iconClassName', 'iconChildren', 'index', 'icon', 'label', 'onClick', 'onNavChange']);

	    var _props2 = this.props,
	        label = _props2.label,
	        icon = _props2.icon;

	    var labelClassName = (0, _classnames2.default)('md-bottom-nav-label', { 'md-bottom-nav-label--shifting-inactive': !active && !fixed });
	    if (_react.Children.count(label) === 1 && (0, _react.isValidElement)(label)) {
	      var labelEl = _react.Children.only(label);
	      label = (0, _react.cloneElement)(label, {
	        className: (0, _classnames2.default)(labelClassName, labelEl.props.className)
	      });
	    } else {
	      label = _react2.default.createElement(
	        'div',
	        { className: labelClassName },
	        label
	      );
	    }

	    if (!icon && (iconClassName || iconChildren)) {
	      // Deprecated
	      icon = _react2.default.createElement(
	        _FontIcons2.default,
	        { iconClassName: iconClassName, inherit: true },
	        iconChildren
	      );
	    } else if (icon) {
	      icon = _react2.default.cloneElement(icon, { inherit: true });
	    }

	    return _react2.default.createElement(
	      _AccessibleFakeInkedButton2.default,
	      _extends({}, props, {
	        onClick: this._handleClick,
	        className: (0, _classnames2.default)('md-bottom-nav', {
	          'md-bottom-nav--active': active,
	          'md-bottom-nav--fixed': fixed,
	          'md-bottom-nav--shifting': !fixed,
	          'md-bottom-nav--shifting-active': !fixed && active,
	          'md-bottom-nav--shifting-inactive': !fixed && !active
	        }, (0, _themeColors2.default)({ primary: !colored && active, text: !active && !colored }, className))
	      }),
	      icon,
	      _react2.default.createElement(
	        _Collapse2.default,
	        { collapsed: !fixed && !active, animate: animate },
	        label
	      )
	    );
	  };

	  return BottomNav;
	}(_react.PureComponent);

	BottomNav.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
	  active: _propTypes2.default.bool,
	  fixed: _propTypes2.default.bool,
	  children: _propTypes2.default.node,
	  index: _propTypes2.default.number.isRequired,
	  label: _propTypes2.default.node.isRequired,
	  colored: _propTypes2.default.bool,
	  iconChildren: _propTypes2.default.node,
	  iconClassName: _propTypes2.default.string,
	  onClick: _propTypes2.default.func,
	  onNavChange: _propTypes2.default.func,
	  role: _propTypes2.default.string,
	  animate: _propTypes2.default.bool,
	  icon: _propTypes2.default.element
	};
	BottomNav.defaultProps = {
	  component: 'a',
	  role: null
	};
	exports.default = BottomNav;

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.FontIcon = undefined;

	var _FontIcon2 = __webpack_require__(254);

	var _FontIcon3 = _interopRequireDefault(_FontIcon2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _FontIcon3.default;
	exports.FontIcon = _FontIcon3.default;

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `CardText` component is a simple wrapper for text or any content in a `Card`.
	 * It really just adds correct padding and font color.
	 */
	var CardText = function (_PureComponent) {
	  _inherits(CardText, _PureComponent);

	  function CardText() {
	    _classCallCheck(this, CardText);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  CardText.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.component,
	        className = _props.className,
	        expandable = _props.expandable,
	        props = _objectWithoutProperties(_props, ['component', 'className', 'expandable']);

	    return _react2.default.createElement(Component, _extends({}, props, { className: (0, _classnames2.default)('md-card-text', className) }));
	  };

	  return CardText;
	}(_react.PureComponent);

	CardText.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The children to display.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * The component to render as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * Boolean if this component should be expandable when there is a `CardExpander`
	   * above it in the `Card`.
	   */
	  expandable: _propTypes2.default.bool
	};
	CardText.defaultProps = {
	  component: 'section'
	};
	exports.default = CardText;

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Chip = function (_PureComponent) {
	  _inherits(Chip, _PureComponent);

	  function Chip() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Chip);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { hover: false }, _this._handleMouseEnter = function (e) {
	      if (_this.props.onMouseEnter) {
	        _this.props.onMouseEnter(e);
	      }

	      _this.setState({ hover: true });
	    }, _this._handleMouseLeave = function (e) {
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(e);
	      }

	      _this.setState({ hover: false });
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Chip.prototype.render = function render() {
	    var hover = this.state.hover;

	    var _props = this.props,
	        label = _props.label,
	        className = _props.className,
	        labelStyle = _props.labelStyle,
	        labelClassName = _props.labelClassName,
	        avatar = _props.avatar,
	        children = _props.children,
	        removable = _props.removable,
	        remove = _props.remove,
	        onClick = _props.onClick,
	        rotateIcon = _props.rotateIcon,
	        iconClassName = _props.iconClassName,
	        removeIconChildren = _props.removeIconChildren,
	        removeIconClassName = _props.removeIconClassName,
	        props = _objectWithoutProperties(_props, ['label', 'className', 'labelStyle', 'labelClassName', 'avatar', 'children', 'removable', 'remove', 'onClick', 'rotateIcon', 'iconClassName', 'removeIconChildren', 'removeIconClassName']);

	    var icon = void 0;
	    if (removable || remove) {
	      var chipIconCN = (0, _classnames2.default)('md-chip-icon', {
	        'md-chip-icon--rotate': rotateIcon,
	        'md-chip-text--hover': hover
	      });

	      if (_react2.default.isValidElement(children)) {
	        icon = _react2.default.Children.only(children);
	        icon = _react2.default.cloneElement(icon, { className: (0, _classnames2.default)(chipIconCN, icon.props.className) });
	      } else {
	        icon = _react2.default.createElement(
	          _FontIcon2.default,
	          { className: chipIconCN, iconClassName: iconClassName },
	          children
	        );
	      }
	    }

	    return _react2.default.createElement(
	      'button',
	      _extends({
	        type: 'button'
	      }, props, {
	        className: (0, _classnames2.default)('md-chip', {
	          'md-chip--avatar': avatar,
	          'md-chip--remove': removable,
	          'md-chip--hover': hover
	        }, className),
	        onClick: remove || onClick,
	        onMouseEnter: this._handleMouseEnter,
	        onMouseLeave: this._handleMouseLeave
	      }),
	      avatar,
	      _react2.default.createElement(
	        'span',
	        {
	          style: labelStyle,
	          className: (0, _classnames2.default)('md-chip-text', {
	            'md-chip-text--hover': hover
	          }, labelClassName)
	        },
	        label
	      ),
	      icon
	    );
	  };

	  return Chip;
	}(_react.PureComponent);

	Chip.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the chip's label.
	   */
	  labelStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the chip's label.
	   */
	  labelClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the `.md-chip-icon--rotate` style should be applied to the remove icon.
	   * The `.md-chip-icon--rotate` just rotates the icon 45 degrees.
	   */
	  rotateIcon: _propTypes2.default.bool,

	  /**
	   * Any children used to display the remove icon when `removable`.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * The label to display on the chip.
	   */
	  label: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the chip is removable.
	   */
	  removable: _propTypes2.default.bool,

	  /**
	   * An optional avatar to display on the chip.
	   */
	  avatar: _propTypes2.default.element,

	  /**
	   * An optional function to call when the `click` event is triggered.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseenter` event is triggered.
	   */
	  onMouseEnter: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseleave` event is triggered.
	   */
	  onMouseLeave: _propTypes2.default.func,

	  iconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `children` prop as a single FontIcon or SVGIcon instead'),
	  remove: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `removable` and `onClick` instead'),
	  removeIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `children` instead'),
	  removeIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `children` prop as a single FontIcon or SVGIcon instead')
	};
	Chip.defaultProps = {
	  rotateIcon: true,
	  children: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'add_circle'
	  )
	};
	exports.default = Chip;

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _requiredForA11yIfNot = __webpack_require__(381);

	var _requiredForA11yIfNot2 = _interopRequireDefault(_requiredForA11yIfNot);

	var _invalidIf = __webpack_require__(282);

	var _invalidIf2 = _interopRequireDefault(_invalidIf);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _contextTypes = __webpack_require__(382);

	var _contextTypes2 = _interopRequireDefault(_contextTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `DataTable` component is used to manage the state of all rows.
	 * This can either be a __plain__ table or a __data__ table.
	 *
	 * A __data__ table will include checkboxes on each row while a __plain__ table
	 * will not.
	 */
	var DataTable = function (_PureComponent) {
	  _inherits(DataTable, _PureComponent);

	  function DataTable(props) {
	    _classCallCheck(this, DataTable);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

	    _initialiseProps.call(_this);

	    var rows = props.defaultSelectedRows;
	    _this.state = {
	      header: false,
	      indeterminate: props.indeterminate ? false : undefined,
	      allSelected: _this._allSelected(rows),
	      selectedRows: rows
	    };

	    _this._removed = 0;
	    _this._initial = true;
	    return _this;
	  }

	  DataTable.prototype.getChildContext = function getChildContext() {
	    var _props = this.props,
	        checkedIcon = _props.checkedIcon,
	        uncheckedIcon = _props.uncheckedIcon,
	        indeterminateIcon = _props.indeterminateIcon,
	        plain = _props.plain,
	        baseId = _props.baseId,
	        selectableRows = _props.selectableRows,
	        checkboxHeaderLabel = _props.checkboxHeaderLabel,
	        checkboxLabelTemplate = _props.checkboxLabelTemplate,
	        fixedHeader = _props.fixedHeader,
	        fixedFooter = _props.fixedFooter,
	        checkedIconChildren = _props.checkedIconChildren,
	        checkedIconClassName = _props.checkedIconClassName,
	        uncheckedIconChildren = _props.uncheckedIconChildren,
	        uncheckedIconClassName = _props.uncheckedIconClassName,
	        indeterminateIconChildren = _props.indeterminateIconChildren,
	        indeterminateIconClassName = _props.indeterminateIconClassName;


	    return {
	      checkedIcon: (0, _getDeprecatedIcon2.default)(checkedIconClassName, checkedIconChildren, checkedIcon),
	      uncheckedIcon: (0, _getDeprecatedIcon2.default)(uncheckedIconClassName, uncheckedIconChildren, uncheckedIcon),
	      indeterminateIcon: (0, _getDeprecatedIcon2.default)(indeterminateIconClassName, indeterminateIconChildren, indeterminateIcon),
	      indeterminate: this.state.indeterminate,
	      plain: plain,
	      allSelected: this.state.allSelected,
	      selectedRows: this.state.selectedRows,
	      toggleSelectedRow: this._toggleSelectedRow,
	      createCheckbox: this._createCheckbox,
	      removeCheckbox: this._removeCheckbox,
	      baseId: baseId,
	      baseName: baseId + '-control',
	      selectableRows: selectableRows,
	      checkboxHeaderLabel: checkboxHeaderLabel,
	      checkboxLabelTemplate: checkboxLabelTemplate,
	      fixedHeader: fixedHeader,
	      fixedFooter: fixedFooter
	    };
	  };

	  DataTable.prototype.componentDidUpdate = function componentDidUpdate() {
	    this._removed = 0;
	    this._initial = false;
	  };

	  DataTable.prototype._allSelected = function _allSelected(rows) {
	    var all = rows.length !== 0;
	    rows.some(function (checked) {
	      if (!checked) {
	        all = false;
	      }

	      return !all;
	    });

	    return all;
	  };

	  DataTable.prototype.render = function render() {
	    var _cn;

	    var _props2 = this.props,
	        style = _props2.style,
	        className = _props2.className,
	        tableStyle = _props2.tableStyle,
	        tableClassName = _props2.tableClassName,
	        fixedWrapperStyle = _props2.fixedWrapperStyle,
	        fixedWrapperClassName = _props2.fixedWrapperClassName,
	        fixedScrollWrapperStyle = _props2.fixedScrollWrapperStyle,
	        fixedScrollWrapperClassName = _props2.fixedScrollWrapperClassName,
	        children = _props2.children,
	        plain = _props2.plain,
	        responsive = _props2.responsive,
	        fixedHeader = _props2.fixedHeader,
	        fixedFooter = _props2.fixedFooter,
	        fixedDividers = _props2.fixedDividers,
	        fixedHeight = _props2.fixedHeight,
	        fixedWidth = _props2.fixedWidth,
	        headerHeight = _props2.headerHeight,
	        footerHeight = _props2.footerHeight,
	        fullWidth = _props2.fullWidth,
	        indeterminate = _props2.indeterminate,
	        indeterminateIcon = _props2.indeterminateIcon,
	        checkedIcon = _props2.checkedIcon,
	        uncheckedIcon = _props2.uncheckedIcon,
	        defaultSelectedRows = _props2.defaultSelectedRows,
	        baseId = _props2.baseId,
	        onRowToggle = _props2.onRowToggle,
	        selectableRows = _props2.selectableRows,
	        checkboxHeaderLabel = _props2.checkboxHeaderLabel,
	        checkboxLabelTemplate = _props2.checkboxLabelTemplate,
	        checkedIconChildren = _props2.checkedIconChildren,
	        checkedIconClassName = _props2.checkedIconClassName,
	        uncheckedIconChildren = _props2.uncheckedIconChildren,
	        uncheckedIconClassName = _props2.uncheckedIconClassName,
	        indeterminateIconChildren = _props2.indeterminateIconChildren,
	        indeterminateIconClassName = _props2.indeterminateIconClassName,
	        props = _objectWithoutProperties(_props2, ['style', 'className', 'tableStyle', 'tableClassName', 'fixedWrapperStyle', 'fixedWrapperClassName', 'fixedScrollWrapperStyle', 'fixedScrollWrapperClassName', 'children', 'plain', 'responsive', 'fixedHeader', 'fixedFooter', 'fixedDividers', 'fixedHeight', 'fixedWidth', 'headerHeight', 'footerHeight', 'fullWidth', 'indeterminate', 'indeterminateIcon', 'checkedIcon', 'uncheckedIcon', 'defaultSelectedRows', 'baseId', 'onRowToggle', 'selectableRows', 'checkboxHeaderLabel', 'checkboxLabelTemplate', 'checkedIconChildren', 'checkedIconClassName', 'uncheckedIconChildren', 'uncheckedIconClassName', 'indeterminateIconChildren', 'indeterminateIconClassName']);

	    var table = _react2.default.createElement(
	      'table',
	      _extends({}, props, {
	        ref: this._setTable,
	        style: responsive ? tableStyle : style,
	        className: (0, _classnames2.default)('md-data-table', (_cn = {
	          'md-data-table--plain': plain,
	          'md-data-table--full-width': fullWidth
	        }, _cn[className] = !responsive && className, _cn[tableClassName] = responsive && tableClassName, _cn))
	      }),
	      children
	    );

	    if (!responsive) {
	      return table;
	    }

	    var content = table;
	    if (fixedHeader || fixedFooter) {
	      var height = fixedHeight;
	      if (fixedHeight) {
	        if (fixedHeader) {
	          height -= headerHeight;
	        }

	        if (fixedFooter) {
	          height -= footerHeight;
	        }
	      }

	      var borderTop = fixedHeader;
	      var borderBot = fixedFooter;
	      if (typeof fixedDividers === 'boolean') {
	        borderTop = borderTop && fixedDividers;
	        borderBot = borderBot && fixedDividers;
	      } else {
	        borderTop = borderTop && (typeof fixedDividers.header === 'undefined' || fixedDividers.header);
	        borderBot = borderBot && (typeof fixedDividers.footer === 'undefined' || fixedDividers.footer);
	      }

	      content = _react2.default.createElement(
	        'div',
	        {
	          style: fixedWrapperStyle,
	          className: (0, _classnames2.default)('md-data-table__fixed-wrapper', {
	            'md-data-table__fixed-wrapper--header': fixedHeader,
	            'md-data-table__fixed-wrapper--footer': fixedFooter
	          }, fixedWrapperClassName)
	        },
	        _react2.default.createElement(
	          'div',
	          {
	            style: _extends({ height: height }, fixedScrollWrapperStyle),
	            className: (0, _classnames2.default)('md-data-table__scroll-wrapper', {
	              'md-divider-border': fixedDividers,
	              'md-divider-border--top': borderTop,
	              'md-divider-border--bottom': borderBot
	            }, fixedScrollWrapperClassName)
	          },
	          table
	        )
	      );
	    }

	    return _react2.default.createElement(
	      'div',
	      {
	        style: _extends({ width: fixedWidth }, style),
	        className: (0, _classnames2.default)('md-data-table--responsive', {
	          'md-data-table--fixed': fixedHeader || fixedFooter
	        }, className)
	      },
	      content
	    );
	  };

	  return DataTable;
	}(_react.PureComponent);

	DataTable.propTypes = {
	  /**
	   * A base id to use for every checkbox or `EditDialogColumn` in the data table. This is
	   * required for a11y if the data table is not plain. It is recommended to always provide
	   * this prop if you are using any of the advanced table components to auto-generate unique
	   * ids for each element.
	   *
	   * @see {@link DataTables/EditDialogColumn}
	   * @see {@link DataTables/SelectFieldColumn}
	   * @see {@link DataTables/DropdownMenuColumn}
	   * @see {@link DataTables/MenuButtonColumn}
	   * @see {@link DataTables/TablePagination}
	   */
	  baseId: (0, _requiredForA11yIfNot2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), 'plain'),

	  /**
	   * Optional style to apply to the table. If the table is `responsive`, this will be applied to the surrounding `div`
	   * instead of the table itself. Use the `tableStyle` in this case.
	   *
	   * @see {@link #tableStyle}
	   * @see {@link #responsive}
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the table. If the table is `responsive`, this will be applied to the
	   * surrounding `div` instead of the table itself. Use the `tableClassName` in this case.
	   *
	   * @see {@link #tableClassName}
	   * @see {@link #responsive}
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the `table` itself when the `responsive` prop is enabled. If the table is not
	   * `responsive`, use the `style` prop.
	   *
	   * @see {@link #style}
	   * @see {@link #responsive}
	   */
	  tableStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `table` itself when the `responsive` prop is enabled. If the table is not
	   * `responsive`, use the `className` prop.
	   *
	   * @see {@link #className}
	   * @see {@link #responsive}
	   */
	  tableClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the fixed table wrapper that appears when there is a fixed
	   * header or a fixed footer.
	   *
	   * @see {@link #fixedHeader}
	   * @see {@link #fixedFooter}
	   * @see {@link #fixedWrapperClassName}
	   * @see {@link #fixedScrollWrapperStyle}
	   * @see {@link #fixedScrollWrapperClassName}
	   */
	  fixedWrapperStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the fixed table wrapper that appears when there is a fixed
	   * header or a fixed footer.
	   *
	   * @see {@link #fixedHeader}
	   * @see {@link #fixedFooter}
	   * @see {@link #fixedWrapperStyle}
	   * @see {@link #fixedScrollWrapperStyle}
	   * @see {@link #fixedScrollWrapperClassName}
	   */
	  fixedWrapperClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the fixed table wrapper's scroll container that appears when there is a fixed
	   * header or a fixed footer.
	   *
	   * @see {@link #fixedHeader}
	   * @see {@link #fixedFooter}
	   * @see {@link #fixedWrapperStyle}
	   * @see {@link #fixedWrapperClassName}
	   * @see {@link #fixedScrollWrapperStyle}
	   */
	  fixedScrollWrapperStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the fixed table wrapper's scroll container that appears when there is a fixed
	   * header or a fixed footer.
	   *
	   * @see {@link #fixedHeader}
	   * @see {@link #fixedFooter}
	   * @see {@link #fixedWrapperStyle}
	   * @see {@link #fixedWrapperClassName}
	   * @see {@link #fixedScrollWrapperStyle}
	   */
	  fixedScrollWrapperClassName: _propTypes2.default.string,

	  /**
	   * The table contents to display. This *should* be a list of `TableHeader` and `TableBody`
	   * components.
	   */
	  children: _propTypes2.default.node.isRequired,

	  /**
	   * An optional array of booleans denoting if a row is selected.
	   * This is an associative array so the index must match the row
	   * number in the `TableBody` component.
	   */
	  defaultSelectedRows: _propTypes2.default.arrayOf(_propTypes2.default.bool).isRequired,

	  /**
	   * Boolean if the table is responsive. This will wrap the table in a container
	   * that allows scrolling to the right if overflow exists.
	   */
	  responsive: _propTypes2.default.bool.isRequired,

	  /**
	   * Boolean if this table should not include the checkboxes on each row.
	   * This really means that the entire table is unselectable and you wish
	   * to display as a normal table.
	   */
	  plain: _propTypes2.default.bool,

	  /**
	   * The checked checkbox icon to display when a row is selected. This really defaults
	   * to the `checkedCheckboxIcon` prop from the `SelectionControl`.
	   *
	   * @see {@link SelectionControls/SelectionControl#checkedCheckboxIcon}
	   */
	  checkedIcon: _propTypes2.default.element,

	  /**
	   * The unchecked checkbox icon to display when a row is selected. This really defaults
	   * to the `uncheckedCheckboxIcon` prop from the `SelectionControl`.
	   *
	   * @see {@link SelectionControls/SelectionControl#uncheckedCheckboxIcon}
	   */
	  uncheckedIcon: _propTypes2.default.element,

	  /**
	   * An optional function to call when a non-plain data table has a row toggled. The callback
	   * will include:
	   * - the row id
	   * - boolean if the row is now checked
	   * - the total count of rows selected
	   * - the change event
	   *
	   * All rows will be toggled on or off when the row id is 0 and a `thead` exists in the table.
	   */
	  onRowToggle: (0, _invalidIf2.default)(_propTypes2.default.func, 'plain'),

	  /**
	   * Boolean if the `DataTable` should inject checkboxes at the start of each row.
	   */
	  selectableRows: _propTypes2.default.bool,

	  /**
	   * Boolean if the checkboxes in the table should also include an _indeterminate_ state.
	   * It will use the `indeterminateIconChildren` and `indeterminateIconClassName` when at least
	   * 1 row has been checked, but not all rows.
	   */
	  indeterminate: _propTypes2.default.bool,

	  /**
	   * An optional icon to display when the selected state is indeterminate.
	   *
	   * @see {@link #indeterminate}
	   */
	  indeterminateIcon: _propTypes2.default.element,

	  /**
	   * This is the aria-label to apply to the checkbox in the table's header. This
	   * is just used for accessibility since the checkboxes have no visible label.
	   */
	  checkboxHeaderLabel: _propTypes2.default.string.isRequired,

	  /**
	   * This is the aria-label to apply to a checkbox in the table's body. This can either
	   * be a constant string that will replace `{{row}}` with the current row index, or
	   * a function that takes the row index and returns a string.
	   *
	   * ```js
	   * checkboxLabelTemplate={rowIndex => `Toggle row ${row}`}
	   * ```
	   */
	  checkboxLabelTemplate: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * Boolean if the table should include a fixed header. This will allow the `TableHeader` component
	   * to stay fixed to the top of the table while the `TableBody` scrolls horizontally.
	   *
	   * @see {@link #fixedFooter}
	   * @see [react-md-make-fixed-table](/components/data-tables?tab=2#mixin-react-md-make-fixed-table)
	   */
	  fixedHeader: _propTypes2.default.bool,

	  /**
	   * Boolean if the table should include a fixed footer. This will allow the `TableFooter` component
	   * to stay fixed to the bottom of the table while the `TableBody` scrolls horizontally.
	   *
	   * @see {@link #fixedHeader}
	   * @see [react-md-make-fixed-table](/components/data-tables?tab=2#mixin-react-md-make-fixed-table)
	   */
	  fixedFooter: _propTypes2.default.bool,

	  /**
	   * Either a boolean or a shape of booleans for if a divider should appear at the top or bottom of the table
	   * when there is a fixed header/footer. By default, this will automatically create dividers.
	   *
	   * @see {@link #fixedHeader}
	   * @see {@link #fixedFooter}
	   */
	  fixedDividers: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.shape({
	    header: _propTypes2.default.bool,
	    footer: _propTypes2.default.bool
	  })]),

	  /**
	   * An optional height to set for a table with a fixed header and/or a fixed footer. It is recommended to use
	   * the related `react-md-make-fixed-table` mixin instead.
	   *
	   * @see {@link #headerHeight}
	   * @see {@link #footerHeight}
	   */
	  fixedHeight: _propTypes2.default.number,

	  /**
	   * An optional width to set for a table with a fixed header and/or a fixed footer. It is recommended to use
	   * the related `react-md-make-fixed-table` mixin instead.
	   */
	  fixedWidth: _propTypes2.default.number,

	  /**
	   * This is the height of the table's header columns. This should be equal to the `md-data-table-header-height`
	   * variable.
	   *
	   * @see [md-data-table-header-height](/components/data-tables?tab=2#variable-md-data-table-header-height)
	   * @see {@link #fixedHeight}
	   */
	  headerHeight: _propTypes2.default.number.isRequired,

	  /**
	   * This is the height of the table's header columns. This should be equal to the `md-data-table-header-height`
	   * variable.
	   *
	   * @see [md-data-table-column-height](/components/data-tables?tab=2#variable-md-data-table-column-height)
	   * @see {@link #fixedHeight}
	   */
	  footerHeight: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the `<table>` element should always span the entire width of its container.
	   */
	  fullWidth: _propTypes2.default.bool,

	  indeterminateIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `indeterminateIcon` prop instead'),
	  indeterminateIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `indeterminateIcon` prop instead'),
	  checkedIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `checkedIcon` prop instead'),
	  checkedIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `checkedIcon` prop instead'),
	  uncheckedIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `uncheckedIcon` prop instead'),
	  uncheckedIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `uncheckedIcon` prop instead')
	};
	DataTable.defaultProps = {
	  indeterminateIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'indeterminate_check_box'
	  ),
	  defaultSelectedRows: [],
	  responsive: true,
	  selectableRows: true,
	  checkboxHeaderLabel: 'Toggle All Rows',
	  checkboxLabelTemplate: 'Toggle row {{row}}',
	  fixedHeader: false,
	  fixedFooter: false,
	  fixedDividers: true,
	  headerHeight: 56,
	  footerHeight: 48,
	  fullWidth: true
	};
	DataTable.childContextTypes = _contextTypes2.default;

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._setTable = function (table) {
	    _this2._table = table;
	  };

	  this._createCheckbox = function (index) {
	    _this2.setState(function (state, props) {
	      var selectedRows = state.selectedRows.slice();
	      // Only use the default selected rows prop on first mount. If other changes occur after,
	      // default to false.
	      var selected = _this2._initial && props.defaultSelectedRows[index] || false;
	      selectedRows.splice(index, 0, selected);
	      return { selectedRows: selectedRows, allSelected: _this2._allSelected(selectedRows) };
	    });
	  };

	  this._removeCheckbox = function (index) {
	    _this2.setState(function (state) {
	      // When multiple checkboxes are removed in a render cycle, they are removed in list order.
	      // So to keep the index correct while removing, need to keep subtract the provided index by
	      // the current number of removed elements. This value gets reset to 0 after a finished cycle.
	      var selectedRows = state.selectedRows.slice();

	      // This is really ugly. React 16 doesn't need to track all this while React 15 does
	      if (_react2.default.version && _react2.default.version.match(/^16\./)) {
	        selectedRows.splice(index, 1);
	      } else {
	        selectedRows.splice(index - _this2._removed, 1);
	        _this2._removed += 1;
	      }
	      return { selectedRows: selectedRows, allSelected: _this2._allSelected(selectedRows) };
	    });
	  };

	  this._toggleSelectedRow = function (row, header, e) {
	    var selectedRows = void 0;
	    var allSelected = _this2.state.allSelected;
	    var selectedCount = 0;
	    var i = _this2._table && _this2._table.querySelector('.md-table-header') ? row - 1 : row;
	    var checked = e.target.checked;

	    if (header) {
	      selectedRows = _this2.state.selectedRows.map(function () {
	        return checked;
	      });
	      allSelected = checked;
	      selectedCount = !checked ? 0 : selectedRows.length;
	    } else {
	      selectedRows = _this2.state.selectedRows.slice();
	      selectedRows[i] = !selectedRows[i];
	      selectedCount = selectedRows.filter(function (b) {
	        return b;
	      }).length;
	      allSelected = selectedCount === selectedRows.length;
	    }

	    if (_this2.props.onRowToggle) {
	      _this2.props.onRowToggle(row, checked, selectedCount, e);
	    }

	    var indeterminate = _this2.props.indeterminate && !allSelected && selectedCount > 0;

	    _this2.setState({ selectedRows: selectedRows, allSelected: allSelected, indeterminate: indeterminate });
	  };
	};

	exports.default = DataTable;

/***/ }),
/* 381 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = requiredForA11yIfNot;
	/** @module utils/PropTypes/requiredForA11yIfNot */

	/**
	 * This validator checks that the current prop is valid and defined ONLY if
	 * any of the `otherPropNames` are not true or defined.
	 *
	 * @param {function} validator - The React PropTypes validator to use for the given prop.
	 * @param {String[]} otherPropNames - Any other prop names to validate against.
	 * @return {Error} an error or null
	 */
	function requiredForA11yIfNot(validator) {
	  for (var _len = arguments.length, otherPropNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    otherPropNames[_key - 1] = arguments[_key];
	  }

	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	    var defined = typeof props[propName] !== 'undefined';

	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }

	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && !defined && !otherPropNames.filter(function (pn) {
	      return !!props[pn];
	    }).length) {
	      err = new Error('The `' + propFullNameSafe + '` ' + location + ' is required to make `' + componentNameSafe + '` accessible ' + 'for users of assistive technologies such as screen readers.');
	    }

	    return err;
	  };
	}

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  checkedIcon: _propTypes2.default.element,
	  uncheckedIcon: _propTypes2.default.element,
	  indeterminateIcon: _propTypes2.default.element,
	  indeterminate: _propTypes2.default.bool,
	  plain: _propTypes2.default.bool,
	  selectableRows: _propTypes2.default.bool.isRequired,
	  allSelected: _propTypes2.default.bool.isRequired,
	  selectedRows: _propTypes2.default.arrayOf(_propTypes2.default.bool).isRequired,
	  createCheckbox: _propTypes2.default.func.isRequired,
	  removeCheckbox: _propTypes2.default.func.isRequired,
	  toggleSelectedRow: _propTypes2.default.func.isRequired,
	  baseId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  baseName: _propTypes2.default.string,
	  checkboxHeaderLabel: _propTypes2.default.string.isRequired,
	  checkboxLabelTemplate: _propTypes2.default.string.isRequired,
	  fixedHeader: _propTypes2.default.bool.isRequired,
	  fixedFooter: _propTypes2.default.bool.isRequired
	};

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _contextTypes = __webpack_require__(382);

	var _contextTypes2 = _interopRequireDefault(_contextTypes);

	var _headerContextTypes = __webpack_require__(384);

	var _headerContextTypes2 = _interopRequireDefault(_headerContextTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * A `thead` component to use in the `DataTable` component. This
	 * will automatically update the header row to check if it is selected
	 * and inject a function to toggle all rows selected if the row is
	 * uncontrolled. It will also automatically attempt to set the `TableColumn`
	 * components to be the header type.
	 */
	var TableHeader = function (_Component) {
	  _inherits(TableHeader, _Component);

	  function TableHeader() {
	    _classCallCheck(this, TableHeader);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  TableHeader.prototype.getChildContext = function getChildContext() {
	    return _extends({}, this.context, {
	      header: true
	    });
	  };

	  TableHeader.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        children = _props.children,
	        props = _objectWithoutProperties(_props, ['className', 'children']);

	    var allSelected = this.context.allSelected;

	    var header = _react2.default.Children.only(children);
	    var selected = typeof header.props.selected === 'undefined' ? allSelected : header.props.selected;

	    var row = _react2.default.cloneElement(header, { selected: selected });

	    return _react2.default.createElement(
	      'thead',
	      _extends({}, props, { className: (0, _classnames2.default)('md-table-header', className) }),
	      row
	    );
	  };

	  return TableHeader;
	}(_react.Component);

	TableHeader.contextTypes = _contextTypes2.default;
	TableHeader.childContextTypes = _headerContextTypes2.default;
	TableHeader.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the table header
	   */
	  className: _propTypes2.default.string,

	  /**
	   * This should be a single `TableRow` component. The `custom` validation will
	   * warn you if there are more than one children given or none at all.
	   */
	  children: function children(props, propName, component) {
	    try {
	      _react2.default.Children.only(props.children);
	      return null;
	    } catch (e) {
	      var amt = props.children ? props.children.length : 0;
	      return new Error('There must only be one child in a \'' + component + '\', but ' + amt + ' were given.');
	    }
	  }
	};
	exports.default = TableHeader;

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _contextTypes = __webpack_require__(382);

	var _contextTypes2 = _interopRequireDefault(_contextTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _extends({}, _contextTypes2.default, { header: _propTypes2.default.bool });

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _contextTypes = __webpack_require__(382);

	var _contextTypes2 = _interopRequireDefault(_contextTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `TableBody` component is used for managing the state of all
	 * `TableRow` inside of it.
	 */
	var TableBody = function (_Component) {
	  _inherits(TableBody, _Component);

	  function TableBody() {
	    _classCallCheck(this, TableBody);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  TableBody.prototype.render = function render() {
	    var _props = this.props,
	        children = _props.children,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['children', 'className']);

	    var selectedRows = this.context.selectedRows;


	    var rows = children ? _react.Children.map(_react.Children.toArray(children), function (row, i) {
	      var uncontrolled = typeof row.props.selected === 'undefined';
	      return _react2.default.cloneElement(row, {
	        selected: uncontrolled ? selectedRows[i] : row.props.selected
	      });
	    }) : null;

	    return _react2.default.createElement(
	      'tbody',
	      _extends({}, props, { className: (0, _classnames2.default)('md-table-body', className) }),
	      rows
	    );
	  };

	  return TableBody;
	}(_react.Component);

	TableBody.propTypes = {
	  /**
	   * An optional style to apply to the tbody.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the tbody.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * A list or a single item of `TableRow` components to render.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)])
	};
	TableBody.contextTypes = _contextTypes2.default;
	exports.default = TableBody;

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This is just a simple <tfoot> component.
	 */
	var TableFooter = function (_PureComponent) {
	  _inherits(TableFooter, _PureComponent);

	  function TableFooter() {
	    _classCallCheck(this, TableFooter);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  TableFooter.prototype.getChildContext = function getChildContext() {
	    return { footer: true };
	  };

	  TableFooter.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        children = _props.children,
	        props = _objectWithoutProperties(_props, ['className', 'children']);

	    return _react2.default.createElement(
	      'tfoot',
	      _extends({ className: (0, _classnames2.default)('md-table-footer', className) }, props),
	      children
	    );
	  };

	  return TableFooter;
	}(_react.PureComponent);

	TableFooter.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The children to display. This should really be one or a list of `TableRow`
	   * components.
	   */
	  children: _propTypes2.default.node
	};
	TableFooter.childContextTypes = {
	  footer: _propTypes2.default.bool
	};
	exports.default = TableFooter;

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _headerContextTypes = __webpack_require__(384);

	var _headerContextTypes2 = _interopRequireDefault(_headerContextTypes);

	var _rowContextTypes = __webpack_require__(388);

	var _rowContextTypes2 = _interopRequireDefault(_rowContextTypes);

	var _TableCheckbox = __webpack_require__(389);

	var _TableCheckbox2 = _interopRequireDefault(_TableCheckbox);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * A component for displaying a row in a `DataTable`. This will
	 * automatically add a `Checkbox` component to the row if it is not
	 * a `plain` table.
	 */
	var TableRow = function (_Component) {
	  _inherits(TableRow, _Component);

	  function TableRow(props, context) {
	    _classCallCheck(this, TableRow);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this._handleMouseOver = function (e) {
	      if (_this.props.onMouseOver) {
	        _this.props.onMouseOver(e);
	      }

	      if (_this.context.header) {
	        return;
	      }

	      var target = e.target;
	      while (target && target.parentNode) {
	        if (target.classList && _this._ignoreHoverState(target.classList)) {
	          _this.setState({ hover: false });
	          return;
	        }

	        target = target.parentNode;
	      }

	      _this.setState({ hover: true });
	    };

	    _this._handleMouseLeave = function (e) {
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(e);
	      }

	      if (_this.context.header) {
	        return;
	      }

	      _this.setState({ hover: false });
	    };

	    _this._handleCheckboxClick = function (checked, e) {
	      var rowIndex = _this._row.rowIndex;

	      if (_this.props.onCheckboxClick) {
	        _this.props.onCheckboxClick(rowIndex, checked, e);
	      }

	      _this.context.toggleSelectedRow(rowIndex, _this.context.header, e);
	    };

	    _this._setRow = function (row) {
	      _this._row = row;
	    };

	    _this.state = { hover: false };
	    return _this;
	  }

	  TableRow.prototype.getChildContext = function getChildContext() {
	    var _context = this.context,
	        baseId = _context.baseId,
	        context = _objectWithoutProperties(_context, ['baseId']);

	    var id = baseId + '-' + (this._row ? this._row.rowIndex : null);
	    return _extends({}, context, {
	      rowId: context.header ? baseId + '-toggle-all' : id
	    });
	  };

	  /**
	   * Need to ignore adding the hover state if the mouse is over a menu/menu item
	   * or the edit dialog is open.
	   *
	   * @param {Function} classList - the classList to use for checking cn
	   * @return {Boolean} true if the hover state should be ignored for this classList
	   */


	  TableRow.prototype._ignoreHoverState = function _ignoreHoverState(classList) {
	    return classList.contains('md-list--menu') || classList.contains('md-edit-dialog');
	  };

	  TableRow.prototype.render = function render() {
	    var _this2 = this;

	    var _props = this.props,
	        className = _props.className,
	        children = _props.children,
	        selected = _props.selected,
	        selectable = _props.selectable,
	        onCheckboxClick = _props.onCheckboxClick,
	        autoAdjust = _props.autoAdjust,
	        props = _objectWithoutProperties(_props, ['className', 'children', 'selected', 'selectable', 'onCheckboxClick', 'autoAdjust']);

	    var hover = this.state.hover;


	    var checkbox = void 0;
	    if (typeof selectable !== 'undefined' ? selectable : !this.context.plain && this.context.selectableRows) {
	      checkbox = _react2.default.createElement(_TableCheckbox2.default, {
	        key: 'checkbox',
	        checked: selected,
	        onChange: this._handleCheckboxClick,
	        index: this._row ? this._row.rowIndex : null
	      });
	    }

	    var length = _react.Children.count(children) - 1;
	    var columns = _react.Children.map(_react.Children.toArray(children), function (col, i) {
	      var adjusted = col.props.adjusted;
	      if (typeof adjusted === 'undefined') {
	        adjusted = i === length ? false : undefined;
	      }

	      return (0, _react.cloneElement)(col, {
	        cellIndex: i + (checkbox ? 1 : 0),
	        header: (0, _getField2.default)(col.props, _this2.context, 'header'),
	        adjusted: adjusted
	      });
	    });

	    return _react2.default.createElement(
	      'tr',
	      _extends({}, props, {
	        ref: this._setRow,
	        className: (0, _classnames2.default)('md-table-row', className, {
	          'md-table-row--hover': hover,
	          'md-table-row--active': !this.context.header && selected
	        }),
	        onMouseOver: this._handleMouseOver,
	        onMouseLeave: this._handleMouseLeave
	      }),
	      checkbox,
	      columns
	    );
	  };

	  return TableRow;
	}(_react.Component);

	TableRow.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the row.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * A single or list of `TableColumn` to display in the table.
	   *
	   * > The specs "require" at least 3 columns for a non-plain data table, but that isn't
	   * strictly enforced here.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]).isRequired,

	  /**
	   * An optional onClick function to call when a row is clicked.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * A function to call when the checkbox is clicked. This
	   * function will will be called with `(rowIndex, checked, event)`.
	   * The `TableBody` and `TableHeader` components will automatically
	   * merge in a function to toggle the checkbox.
	   */
	  onCheckboxClick: _propTypes2.default.func,

	  /**
	   * An optional function to call onMouseOver.
	   */
	  onMouseOver: _propTypes2.default.func,

	  /**
	   * An optional function to call onMouseLeave.
	   */
	  onMouseLeave: _propTypes2.default.func,

	  /**
	   * Boolean if the row is currently selected. If this value will be
	   * injected by the `TableHeader` or `TableBody` component.
	   */
	  selected: _propTypes2.default.bool,

	  /**
	   * Boolean if the current row is selectable. This value will take precedence over anything inherited
	   * by the `DataTable`.
	   */
	  selectable: _propTypes2.default.bool,

	  autoAdjust: (0, _deprecated2.default)(_propTypes2.default.bool, 'Manually specify `grow` on one of the columns instead')
	};
	TableRow.contextTypes = _headerContextTypes2.default;
	TableRow.childContextTypes = _rowContextTypes2.default;
	exports.default = TableRow;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _headerContextTypes = __webpack_require__(384);

	var _headerContextTypes2 = _interopRequireDefault(_headerContextTypes);

	var _omit = __webpack_require__(326);

	var _omit2 = _interopRequireDefault(_omit);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var rowContextTypes = (0, _omit2.default)(_extends({}, _headerContextTypes2.default, {
	  rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
	}), ['baseId']);

	exports.default = rowContextTypes;

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _SelectionControl = __webpack_require__(390);

	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);

	var _findTable = __webpack_require__(394);

	var _findTable2 = _interopRequireDefault(_findTable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TableCheckbox = function (_Component) {
	  _inherits(TableCheckbox, _Component);

	  function TableCheckbox() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, TableCheckbox);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this._td = null, _this._header = false, _this._handleMount = function (td) {
	      if (td) {
	        var header = (0, _findTable2.default)(td).querySelector('thead');
	        var index = td.parentNode.rowIndex - (header ? 1 : 0);

	        if (td.parentNode.parentNode.tagName === 'TBODY') {
	          _this.context.createCheckbox(index);
	        }
	        _this._td = td;
	        _this._header = header;
	      } else if (_this._td) {
	        var _index = _this._td.parentNode.rowIndex;
	        _this.context.removeCheckbox(_index - (_this._header ? 1 : 0));
	        _this._td = null;
	        _this._header = false;
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  TableCheckbox.prototype.render = function render() {
	    var _props = this.props,
	        checked = _props.checked,
	        index = _props.index,
	        props = _objectWithoutProperties(_props, ['checked', 'index']);

	    var _context = this.context,
	        checkedIcon = _context.checkedIcon,
	        uncheckedIcon = _context.uncheckedIcon,
	        indeterminateIcon = _context.indeterminateIcon,
	        indeterminate = _context.indeterminate,
	        header = _context.header,
	        footer = _context.footer,
	        rowId = _context.rowId,
	        baseName = _context.baseName,
	        checkboxHeaderLabel = _context.checkboxHeaderLabel,
	        checkboxLabelTemplate = _context.checkboxLabelTemplate;


	    var Cell = header ? 'th' : 'td';
	    var label = void 0;
	    if (header) {
	      label = checkboxHeaderLabel;
	    } else if (typeof checkboxLabelTemplate === 'function') {
	      label = checkboxLabelTemplate(index);
	    } else {
	      label = checkboxLabelTemplate.replace(/{{row}}/g, index);
	    }

	    var content = _react2.default.createElement(_SelectionControl2.default, _extends({}, props, {
	      id: rowId,
	      name: baseName + '-checkbox',
	      type: 'checkbox',
	      checked: checked,
	      checkedCheckboxIcon: checkedIcon,
	      uncheckedCheckboxIcon: header && indeterminate ? indeterminateIcon : uncheckedIcon,
	      'aria-label': label
	    }));
	    var fixedHeader = header && this.context.fixedHeader;
	    var fixedFooter = footer && this.context.fixedFooter;

	    if (fixedHeader) {
	      content = _react2.default.createElement(
	        'div',
	        {
	          className: (0, _classnames2.default)('md-table-column__fixed', {
	            'md-table-column__fixed--header': fixedHeader,
	            'md-table-column__fixed--footer': fixedFooter
	          })
	        },
	        _react2.default.cloneElement(content, {
	          className: (0, _classnames2.default)({
	            'md-table-checkbox--header': header,
	            'md-table-checkbox--footer': footer
	          })
	        })
	      );
	    }

	    return _react2.default.createElement(
	      Cell,
	      {
	        className: (0, _classnames2.default)('md-table-checkbox', {
	          'md-table-column--fixed': fixedHeader
	        }),
	        scope: header ? 'col' : undefined,
	        ref: this._handleMount
	      },
	      content
	    );
	  };

	  return TableCheckbox;
	}(_react.Component);

	TableCheckbox.propTypes = {
	  index: _propTypes2.default.number,
	  checked: _propTypes2.default.bool
	};
	TableCheckbox.contextTypes = {
	  rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	  baseName: _propTypes2.default.string.isRequired,
	  indeterminate: _propTypes2.default.bool,
	  checkedIcon: _propTypes2.default.element,
	  uncheckedIcon: _propTypes2.default.element,
	  indeterminateIcon: _propTypes2.default.element,
	  checkboxHeaderLabel: _propTypes2.default.string.isRequired,
	  checkboxLabelTemplate: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	  createCheckbox: _propTypes2.default.func.isRequired,
	  removeCheckbox: _propTypes2.default.func.isRequired,
	  header: _propTypes2.default.bool,
	  footer: _propTypes2.default.bool,
	  fixedHeader: _propTypes2.default.bool.isRequired,
	  fixedFooter: _propTypes2.default.bool.isRequired
	};
	exports.default = TableCheckbox;

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _keyCodes = __webpack_require__(279);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _oneRequiredForA11y = __webpack_require__(331);

	var _oneRequiredForA11y2 = _interopRequireDefault(_oneRequiredForA11y);

	var _capitalizeFirst = __webpack_require__(391);

	var _capitalizeFirst2 = _interopRequireDefault(_capitalizeFirst);

	var _AccessibleFakeInkedButton = __webpack_require__(339);

	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _SwitchTrack = __webpack_require__(392);

	var _SwitchTrack2 = _interopRequireDefault(_SwitchTrack);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Prevents a second warning from appearing when using the deprecated or a11y required
	 * props by using the `__superSecretProp`.... So secret!
	 */
	function preventDouble(validator) {
	  return function validate(props, propName) {
	    for (var _len = arguments.length, others = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      others[_key - 2] = arguments[_key];
	    }

	    var err = validator.apply(undefined, [props, propName].concat(others));
	    if (err && props.__superSecreteProp) {
	      err = null;
	    }

	    return err;
	  };
	}

	/**
	 * The `SelectionControl` component is used to render any of the `Radio`, `Checkbox`, or `Switch`
	 * selection control type. This component might eventually replace all three since they use this
	 * anyways. I am not sure yet though.
	 */

	var SelectionControl = function (_PureComponent) {
	  _inherits(SelectionControl, _PureComponent);

	  function SelectionControl(props) {
	    _classCallCheck(this, SelectionControl);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._setInput = function (input) {
	      _this._input = input;
	    };

	    _this._setControl = function (control) {
	      _this._control = control;
	    };

	    _this._setContainer = function (container) {
	      _this._container = container;
	    };

	    _this._getIcon = function () {
	      var _this$props = _this.props,
	          checkedIcon = _this$props.checkedIcon,
	          uncheckedIcon = _this$props.uncheckedIcon,
	          type = _this$props.type;

	      var checked = (0, _getField2.default)(_this.props, _this.state, 'checked');
	      if (checkedIcon || uncheckedIcon) {
	        return checked ? checkedIcon : uncheckedIcon;
	      }

	      var prefix = (checked ? '' : 'un') + 'checked' + (0, _capitalizeFirst2.default)(type) + 'Icon';
	      var iconClassName = _this.props[prefix + 'ClassName'];
	      var children = _this.props[prefix + 'Children'];

	      if (iconClassName || children) {
	        return _react2.default.createElement(
	          _FontIcon2.default,
	          { iconClassName: iconClassName, inherit: true },
	          children
	        );
	      }

	      var icon = _this.props[prefix];
	      return icon ? _react2.default.cloneElement(icon, { inherit: true }) : null;
	    };

	    _this._handleKeyDown = function (e) {
	      if (_this.props.onKeyDown) {
	        _this.props.onKeyDown(e);
	      }

	      var key = e.which || e.keyCode;
	      if (key === _keyCodes.SPACE) {
	        _this._input.click();
	      }
	    };

	    _this._handleChange = function (e) {
	      var _this$props2 = _this.props,
	          type = _this$props2.type,
	          onChange = _this$props2.onChange;

	      var checked = !(0, _getField2.default)(_this.props, _this.state, 'checked');
	      if (onChange) {
	        onChange(type === 'radio' ? e.target.value : checked, e);
	      }

	      if (typeof _this.props.checked === 'undefined') {
	        _this.setState({ checked: checked });
	      }
	    };

	    _this.state = {};
	    if (typeof props.checked === 'undefined') {
	      _this.state.checked = !!props.defaultChecked;
	    }
	    return _this;
	  }

	  /**
	   * Gets the current checked value from the selection control. This is used when you have
	   * an uncontrolled selection control and simply need the checked state from a ref callback.
	   *
	   * @return {boolean} the checked state for the selection control.\
	   */


	  SelectionControl.prototype.render = function render() {
	    var _props = this.props,
	        id = _props.id,
	        style = _props.style,
	        className = _props.className,
	        inline = _props.inline,
	        type = _props.type,
	        name = _props.name,
	        value = _props.value,
	        disabled = _props.disabled,
	        labelBefore = _props.labelBefore,
	        tabIndex = _props.tabIndex,
	        inkDisabled = _props.inkDisabled,
	        disabledInteractions = _props.disabledInteractions,
	        ariaLabel = _props['aria-label'],
	        ariaLabelledBy = _props['aria-labelledby'],
	        ariaDescribedBy = _props['aria-describedby'],
	        propLabel = _props.label,
	        propChildren = _props.checked,
	        onChange = _props.onChange,
	        tooltip = _props.tooltip,
	        checkedCheckboxIcon = _props.checkedCheckboxIcon,
	        uncheckedCheckboxIcon = _props.uncheckedCheckboxIcon,
	        checkedRadioIcon = _props.checkedRadioIcon,
	        uncheckedRadioIcon = _props.uncheckedRadioIcon,
	        __superSecreteProp = _props.__superSecreteProp,
	        checkedIcon = _props.checkedIcon,
	        uncheckedIcon = _props.uncheckedIcon,
	        checkedRadioIconChildren = _props.checkedRadioIconChildren,
	        checkedRadioIconClassName = _props.checkedRadioIconClassName,
	        uncheckedRadioIconChildren = _props.uncheckedRadioIconChildren,
	        uncheckedRadioIconClassName = _props.uncheckedRadioIconClassName,
	        checkedCheckboxIconChildren = _props.checkedCheckboxIconChildren,
	        checkedCheckboxIconClassName = _props.checkedCheckboxIconClassName,
	        uncheckedCheckboxIconChildren = _props.uncheckedCheckboxIconChildren,
	        uncheckedCheckboxIconClassName = _props.uncheckedCheckboxIconClassName,
	        props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'inline', 'type', 'name', 'value', 'disabled', 'labelBefore', 'tabIndex', 'inkDisabled', 'disabledInteractions', 'aria-label', 'aria-labelledby', 'aria-describedby', 'label', 'checked', 'onChange', 'tooltip', 'checkedCheckboxIcon', 'uncheckedCheckboxIcon', 'checkedRadioIcon', 'uncheckedRadioIcon', '__superSecreteProp', 'checkedIcon', 'uncheckedIcon', 'checkedRadioIconChildren', 'checkedRadioIconClassName', 'uncheckedRadioIconChildren', 'uncheckedRadioIconClassName', 'checkedCheckboxIconChildren', 'checkedCheckboxIconClassName', 'uncheckedCheckboxIconChildren', 'uncheckedCheckboxIconClassName']);

	    var checked = (0, _getField2.default)(this.props, this.state, 'checked');
	    var isSwitch = type === 'switch';
	    var label = this.props.label && _react2.default.createElement(
	      'span',
	      { id: id + '-label' },
	      this.props.label
	    );

	    var control = void 0;
	    if (isSwitch) {
	      control = _react2.default.createElement(_SwitchTrack2.default, { disabled: disabled, checked: checked });
	    } else {
	      control = _react2.default.createElement(
	        _AccessibleFakeInkedButton2.default,
	        {
	          inkDisabled: inkDisabled,
	          disabledInteractions: disabledInteractions,
	          role: type,
	          className: (0, _classnames2.default)('md-selection-control-toggle md-btn md-btn--icon', (0, _themeColors2.default)({
	            disabled: disabled,
	            hint: !checked,
	            secondary: checked
	          })),
	          'aria-checked': checked,
	          'aria-label': ariaLabel,
	          'aria-labelledby': ariaLabelledBy || id + '-label',
	          'aria-describedby': ariaDescribedBy,
	          tabIndex: tabIndex,
	          disabled: disabled
	        },
	        tooltip,
	        this._getIcon()
	      );
	    }

	    return _react2.default.createElement(
	      'div',
	      _extends({}, props, {
	        style: style,
	        className: (0, _classnames2.default)('md-selection-control-container', {
	          'md-selection-control-container--inline': inline,
	          'md-switch-container': isSwitch
	        }, className),
	        onKeyDown: this._handleKeyDown
	      }),
	      _react2.default.createElement('input', {
	        ref: this._setInput,
	        id: id,
	        type: isSwitch ? 'checkbox' : type,
	        checked: checked,
	        onChange: this._handleChange,
	        disabled: disabled,
	        className: 'md-selection-control-input',
	        name: name,
	        value: value,
	        'aria-hidden': true
	      }),
	      _react2.default.createElement(
	        'label',
	        {
	          htmlFor: id,
	          className: (0, _classnames2.default)('md-selection-control-label', {
	            'md-pointer--hover': !disabled
	          }, (0, _themeColors2.default)({ disabled: disabled, text: !disabled }))
	        },
	        labelBefore && label,
	        control,
	        !labelBefore && label
	      )
	    );
	  };

	  _createClass(SelectionControl, [{
	    key: 'checked',
	    get: function get() {
	      return (0, _getField2.default)(this.props, this.state, 'checked');
	    }
	  }]);

	  return SelectionControl;
	}(_react.PureComponent);

	SelectionControl.propTypes = {
	  /**
	   * An id to use with the selection control. This is used for accessibility and so that the label
	   * triggers the selection control toggle.
	   */
	  id: preventDouble((0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))),

	  /**
	   * An optional label to apply to the checkbox when there is no visible label.
	   */
	  'aria-label': (0, _oneRequiredForA11y2.default)(_propTypes2.default.string, 'label', 'aria-labelledby'),

	  /**
	   * An optional id that points to a label for the selection control when there is no visible label.
	   */
	  'aria-labelledby': _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id of an element that describes this selection control.
	   * In the case of a fieldset, this should be the id of the fieldset legend which ensures
	   * screen readers provides additional context about the selection control
	   */
	  'aria-describedby': _propTypes2.default.string,

	  /**
	   * An optional style to apply to the selection control's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the selection control's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The type of selection control to render.
	   */
	  type: _propTypes2.default.oneOf(['checkbox', 'radio', 'switch']).isRequired,

	  /**
	   * A label to display with the selection control. This is required for accessibility and triggering
	   * the toggle.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * Boolean if the label should appear before the checkbox/radio icon or switch.
	   */
	  labelBefore: _propTypes2.default.bool,

	  /**
	   * A name to use for the `SelectionControl`. This is required for accessibility. If the `type`
	   * is a `checkbox` and it is part of a group, it is recommended to make this a string ending
	   * in `[]` so that the value can be found from `document.querySelector('input[name="someName[]"]').value`.
	   */
	  name: preventDouble((0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]))),

	  /**
	   * Boolean if the `Radio` is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * A function to call when the `SelectionControl` triggers the `change` event. The `onChange`
	   * callback will either include:
	   * - the currently changed radio's value
	   * - the next checked state for the `Switch` or `Checkbox`.
	   *
	   * as the first parameter followed by the change event.
	   *
	   * ```js
	   * // Radio
	   * onChange(changeEvent.target.value, changeEvent);
	   *
	   * // Checkbox or Switch
	   * onChange(changeEvent.target.checked, changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `keydown` event is triggered.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * The value for the `SelectionControl`. It is not required for `Checkbox` and `Switch`,
	   * but it is recommended.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * A boolean if the `SelectionControl` is currently checked. This _really_ makes the `onChange`
	   * prop required, but since there are cases you might want to have the `onChange` listener on a
	   * `fieldset` or something above the component, it is never set to `required`. It will however
	   * prevent updates if there is no change listener.
	   */
	  checked: _propTypes2.default.bool,

	  /**
	   * Boolean if the `Checkbox` or `Switch` are checked by default. This prop is invalid for a
	   * `Radio`.
	   */
	  defaultChecked: _propTypes2.default.bool,

	  /**
	   * Boolean if the `SelectionControl` should be displayed inline instead of a block.
	   */
	  inline: _propTypes2.default.bool,

	  /**
	   * The icon to use for a checked `checkbox` selection control.
	   */
	  checkedCheckboxIcon: _propTypes2.default.element,

	  /**
	   * The icon to use for an unchecked `checkbox` selection control.
	   */
	  uncheckedCheckboxIcon: _propTypes2.default.element,

	  /**
	   * The icon to use for a checked `radio` selection control.
	   */
	  checkedRadioIcon: _propTypes2.default.element,

	  /**
	   * The icon to use for an unchecked `radio` selection control.
	   */
	  uncheckedRadioIcon: _propTypes2.default.element,

	  /**
	   * An optional tooltip to render with the control. This is only used if you inject the
	   * tooltip manually yourself.
	   *
	   * `const TooltippedSelectionControl = injectTooltip(SelectionControl);`
	   */
	  tooltip: _propTypes2.default.node,

	  /**
	   * Boolean if the ink should be disabled for radios or checkboxes.
	   *
	   * @see {@link Inks#inkDisabled}
	   */
	  inkDisabled: _propTypes2.default.bool,

	  /**
	   * An optional list of ink interactions that should be disabled.
	   *
	   * @see {@link Inks#disabledInteractions}
	   */
	  disabledInteractions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['keyboard', 'touch', 'mouse'])),

	  /**
	   * An optional tab index to apply to the selection control.
	   */
	  tabIndex: _propTypes2.default.number,

	  checkedIcon: preventDouble((0, _deprecated2.default)(_propTypes2.default.node, 'Use the `checkedCheckboxIconChildren` and `checkedCheckboxIconClassName`  or the ' + '`checkedRadioIconChildren` and `checkedRadioIconClassName` props instead')),
	  uncheckedIcon: preventDouble((0, _deprecated2.default)(_propTypes2.default.node, 'Use the `uncheckedCheckboxIconChildren` and `uncheckedCheckboxIconClassName`  or the ' + '`uncheckedRadioIconChildren` and `uncheckedRadioIconClassName` props instead')),
	  checkedCheckboxIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `checkedCheckboxIcon` prop instead'),
	  checkedCheckboxIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `checkedCheckboxIcon` prop instead'),
	  uncheckedCheckboxIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `uncheckedCheckboxIcon` prop instead'),
	  uncheckedCheckboxIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `uncheckedCheckboxIcon` prop instead'),
	  checkedRadioIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `checkedRadioIcon` prop instead'),
	  checkedRadioIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `checkedRadioIcon` prop instead'),
	  uncheckedRadioIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `uncheckedRadioIcon` prop instead'),
	  uncheckedRadioIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `uncheckedRadioIcon` prop instead'),

	  /* maybe removed once upgrade again? */
	  __superSecreteProp: _propTypes2.default.bool
	};
	SelectionControl.defaultProps = {
	  checkedCheckboxIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'check_box'
	  ),
	  uncheckedCheckboxIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'check_box_outline_blank'
	  ),
	  checkedRadioIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'radio_button_checked'
	  ),
	  uncheckedRadioIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'radio_button_unchecked'
	  )
	};
	exports.default = SelectionControl;

/***/ }),
/* 391 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = capitalizeFirst;
	/** @module utils/StringUtils/capitlizeFirst */

	/**
	 * Capitalizes the first letter of a string. If the string is falsish, it will be
	 * returned as is. If the string is only one letter long, it will be capitalized;
	 *
	 * @param {String} str - The string to capitalize.
	 * @return {String} the updated string or false-ish self.
	 */
	function capitalizeFirst(str) {
	  if (!str) {
	    return str;
	  } else if (str.length === 1) {
	    return str.toUpperCase();
	  }

	  return "" + str.charAt(0).toUpperCase() + str.substring(1, str.length);
	}

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _SwitchThumb = __webpack_require__(393);

	var _SwitchThumb2 = _interopRequireDefault(_SwitchThumb);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SwitchTrack = function (_PureComponent) {
	  _inherits(SwitchTrack, _PureComponent);

	  function SwitchTrack() {
	    _classCallCheck(this, SwitchTrack);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  SwitchTrack.prototype.render = function render() {
	    var _props = this.props,
	        disabled = _props.disabled,
	        checked = _props.checked,
	        className = _props.className,
	        inkDisabled = _props.inkDisabled,
	        disabledInteractions = _props.disabledInteractions,
	        props = _objectWithoutProperties(_props, ['disabled', 'checked', 'className', 'inkDisabled', 'disabledInteractions']);

	    return _react2.default.createElement(
	      'div',
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-switch-track', {
	          'md-pointer--hover': !disabled,
	          'md-switch-track--disabled': disabled,
	          'md-switch-track--on': checked,
	          'md-switch-track--off': !checked
	        }, className)
	      }),
	      _react2.default.createElement(_SwitchThumb2.default, {
	        disabled: disabled,
	        checked: checked,
	        onClick: props.onClick,
	        inkDisabled: inkDisabled,
	        disabledInteractions: disabledInteractions
	      })
	    );
	  };

	  return SwitchTrack;
	}(_react.PureComponent);

	SwitchTrack.propTypes = {
	  className: _propTypes2.default.string,
	  disabled: _propTypes2.default.bool,
	  checked: _propTypes2.default.bool,
	  inkDisabled: _propTypes2.default.bool,
	  disabledInteractions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['keyboard', 'touch', 'mouse']))
	};
	exports.default = SwitchTrack;

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _AccessibleFakeInkedButton = __webpack_require__(339);

	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DISABLED_INTERACTIONS = ['mouse'];

	/**
	 * This is the `Thumb` for the switch. The `ink` in the Thumb is only active on touch and keyboard
	 * interactions, so the `AccessibleFakeInkButton` does not work for this case.
	 *
	 * This component really just is used for custom inkage.
	 */

	var SwitchThumb = function (_PureComponent) {
	  _inherits(SwitchThumb, _PureComponent);

	  function SwitchThumb() {
	    _classCallCheck(this, SwitchThumb);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  SwitchThumb.prototype.render = function render() {
	    var _props = this.props,
	        disabled = _props.disabled,
	        checked = _props.checked,
	        className = _props.className,
	        disabledInteractions = _props.disabledInteractions,
	        props = _objectWithoutProperties(_props, ['disabled', 'checked', 'className', 'disabledInteractions']);

	    return _react2.default.createElement(_AccessibleFakeInkedButton2.default, _extends({}, props, {
	      disabled: disabled,
	      disabledInteractions: disabledInteractions || DISABLED_INTERACTIONS,
	      inkContainerClassName: 'md-ink-container--2x',
	      className: (0, _classnames2.default)('md-switch-thumb', {
	        'md-switch-thumb--disabled': disabled,
	        'md-switch-thumb--on': checked,
	        'md-switch-thumb--off': !checked
	      }, className)
	    }));
	  };

	  return SwitchThumb;
	}(_react.PureComponent);

	SwitchThumb.propTypes = {
	  className: _propTypes2.default.string,
	  disabled: _propTypes2.default.bool,
	  checked: _propTypes2.default.bool,
	  onClick: _propTypes2.default.func,
	  disabledInteractions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['keyboard', 'touch', 'mouse']))
	};
	exports.default = SwitchThumb;

/***/ }),
/* 394 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = findTable;
	/**
	 * Attempts fo find the base table component from an element in the table.
	 * This will either be the wrapper for responsive data tables, or the table element.
	 *
	 * @param {Object} el - The element to traverse from
	 * @param {Object} the table or null.
	 */
	function findTable(el) {
	  var table = void 0;
	  var node = el;
	  while (node && node.parentNode) {
	    if (node.classList) {
	      if (node.classList.contains('md-data-table')) {
	        table = node;
	      } else if (node.classList.contains('md-data-table--responsive')) {
	        return node;
	      } else if (node.classList.contains('md-data-table__scroll-wrapper')) {
	        // fixed-wrapper then responsive
	        return node.parentNode.parentNode;
	      } else if (table) {
	        return table;
	      }
	    }

	    node = node.parentNode;
	  }

	  return null;
	}

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _getCollapserStyles = __webpack_require__(302);

	var _getCollapserStyles2 = _interopRequireDefault(_getCollapserStyles);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _injectTooltip = __webpack_require__(299);

	var _injectTooltip2 = _interopRequireDefault(_injectTooltip);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _IconSeparator = __webpack_require__(284);

	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CELL_SCOPE = {
	  header: {
	    scope: 'col'
	  },
	  noop: {}
	};

	/**
	 * A column in a table. This is either the `th` or `td` component.
	 */

	var TableColumn = function (_PureComponent) {
	  _inherits(TableColumn, _PureComponent);

	  function TableColumn() {
	    _classCallCheck(this, TableColumn);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  TableColumn.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        className = _props.className,
	        fixedStyle = _props.fixedStyle,
	        fixedClassName = _props.fixedClassName,
	        numeric = _props.numeric,
	        header = _props.header,
	        children = _props.children,
	        sorted = _props.sorted,
	        sortIcon = _props.sortIcon,
	        tooltip = _props.tooltip,
	        selectColumnHeader = _props.selectColumnHeader,
	        adjusted = _props.adjusted,
	        grow = _props.grow,
	        sortIconBefore = _props.sortIconBefore,
	        propPlain = _props.plain,
	        propScope = _props.scope,
	        cellIndex = _props.cellIndex,
	        sortIconChildren = _props.sortIconChildren,
	        sortIconClassName = _props.sortIconClassName,
	        props = _objectWithoutProperties(_props, ['className', 'fixedStyle', 'fixedClassName', 'numeric', 'header', 'children', 'sorted', 'sortIcon', 'tooltip', 'selectColumnHeader', 'adjusted', 'grow', 'sortIconBefore', 'plain', 'scope', 'cellIndex', 'sortIconChildren', 'sortIconClassName']);

	    var sortable = typeof sorted === 'boolean';
	    var plain = (0, _getField2.default)(this.props, this.context, 'plain');
	    var Component = header ? 'th' : 'td';
	    var scope = (0, _getField2.default)(this.props, CELL_SCOPE[header ? 'header' : 'noop'], 'scope');

	    var displayedChildren = children;
	    var ariaSort = void 0;
	    if (sortable) {
	      ariaSort = sorted ? 'ascending' : 'descending';
	      var icon = _react2.default.Children.only((0, _getDeprecatedIcon2.default)(sortIconClassName, sortIconChildren, sortIcon));
	      displayedChildren = _react2.default.createElement(
	        _IconSeparator2.default,
	        { label: children, iconBefore: sortIconBefore },
	        _react2.default.cloneElement(icon, { className: (0, _getCollapserStyles2.default)({ flipped: !sorted }, icon.props.className) })
	      );
	    }

	    var fixedHeader = header && this.context.fixedHeader;
	    var fixedFooter = this.context.footer && this.context.fixedFooter;
	    var fixed = fixedHeader || fixedFooter;
	    var baseClassNames = (0, _themeColors2.default)({ text: !header, hint: header }, {
	      'md-table-column--relative': tooltip,
	      'md-table-column--select-field': selectColumnHeader
	    });

	    var mergedClassNames = (0, _classnames2.default)((_cn = {
	      'md-table-column--header': header,
	      'md-table-column--data': !header && !plain,
	      'md-table-column--plain': !header && plain,
	      'md-table-column--adjusted': adjusted && !grow && !selectColumnHeader,
	      'md-table-column--grow': grow,
	      'md-table-column--sortable md-pointer--hover': sortable
	    }, _cn[baseClassNames] = !fixed, _cn), className);

	    if (fixed) {
	      displayedChildren = _react2.default.createElement(
	        'div',
	        {
	          className: (0, _classnames2.default)('md-table-column__fixed', {
	            'md-table-column__fixed--header': fixedHeader,
	            'md-table-column__fixed--footer': fixedFooter
	          })
	        },
	        _react2.default.createElement(
	          'div',
	          {
	            style: fixedStyle,
	            className: (0, _classnames2.default)(baseClassNames, mergedClassNames, 'md-table-column__fixed--flex', {
	              'md-table-column__fixed--flex-right': numeric
	            }, fixedClassName)
	          },
	          tooltip,
	          displayedChildren
	        )
	      );
	    }

	    return _react2.default.createElement(
	      Component,
	      _extends({
	        'aria-sort': ariaSort
	      }, props, {
	        scope: scope,
	        className: (0, _classnames2.default)('md-table-column', {
	          'md-table-column--fixed': fixed,
	          'md-text-left': !numeric && !fixed,
	          'md-text-right': numeric && !fixed
	        }, mergedClassNames)
	      }),
	      !fixedHeader && !fixedFooter && tooltip,
	      displayedChildren
	    );
	  };

	  return TableColumn;
	}(_react.PureComponent);

	TableColumn.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * The optional className for the table column
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the surrounding div when the DataTable has been
	   * set to include a fixed header or a fixed footer.
	   */
	  fixedStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the surrounding div when the DataTable has been
	   * set to include a fixed header or a fixed footer.
	   */
	  fixedClassName: _propTypes2.default.string,

	  /**
	   * The children to display in the column.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the column is currently sorted. If this prop is not `undefined`,
	   * it will add the sort icon unto this column. You will also need to use the
	   * `onClick` function to toggle the `sorted` prop as well as handling the sorting
	   * of data.
	   *
	   * This value should really only be set in the `TableHeader` component.
	   */
	  sorted: _propTypes2.default.bool,

	  /**
	   * The icon to show when a column is sortable.
	   */
	  sortIcon: _propTypes2.default.element,

	  /**
	   * Boolean if the sortIcon should appear before the text in the column.
	   */
	  sortIconBefore: _propTypes2.default.bool,

	  /**
	   * A boolean if the column has numeric data. It will right-align the data.
	   */
	  numeric: _propTypes2.default.bool,

	  /**
	   * Boolean if the table column should gain the `.md-data-table--adjusted` class name. By default,
	   * every column will gain this class name unless it is an `EditDialogColumn`, a `SelectFieldColumn`,
	   * or the `grow` prop is enabled.
	   */
	  adjusted: _propTypes2.default.bool,

	  /**
	   * Boolean if the column should expand to fill any remaining width in the container. There should
	   * really only be one column with the `grow` prop enabled. In addition, it should really only be
	   * applied to one of the columns in the TableHeader.
	   */
	  grow: _propTypes2.default.bool,

	  /**
	   * Boolean if this column is the `th` for a column of `SelectFieldColumn`. This will apply
	   * additional styling to the column to position with the select field.
	   */
	  selectColumnHeader: _propTypes2.default.bool,

	  /**
	   * Boolean if this is a `th` component. This value **should** be set
	   * automatically for you if it is in the `TableHeader` component.
	   */
	  header: _propTypes2.default.bool.isRequired,

	  /**
	   * The optional tooltip to render on hover.
	   */
	  tooltipLabel: _propTypes2.default.node,

	  /**
	   * An optional delay to apply to the tooltip before it appears.
	   */
	  tooltipDelay: _propTypes2.default.number,

	  /**
	   * The position of the tooltip.
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * The injected tooltip.
	   * @access private
	   */
	  tooltip: _propTypes2.default.node,

	  /**
	   * Boolean if the `TableColumn` should gain the `plain` styles. This means that the text
	   * in the column can wrap and there is no height limit enforced with some additional padding.
	   */
	  plain: _propTypes2.default.bool,

	  /**
	   * An optional scope to apply to the table column. If omitted, the scope will be set to
	   * `'col'` if inside of the `TableHeader` component. This is really only needed for
	   * header columns.
	   */
	  scope: _propTypes2.default.oneOf(['row', 'col']),

	  /**
	   * This is injected by the `TableRow` component to help with generating ids
	   * @access private
	   */
	  cellIndex: _propTypes2.default.number,
	  sortIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `sortIcon` prop instead'),
	  sortIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `sortIcon` prop instead')
	};
	TableColumn.defaultProps = {
	  header: false,
	  adjusted: true,
	  sortIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'arrow_upward'
	  ),
	  sortIconBefore: true
	};
	TableColumn.contextTypes = {
	  plain: _propTypes2.default.bool,
	  footer: _propTypes2.default.bool,
	  fixedHeader: _propTypes2.default.bool,
	  fixedFooter: _propTypes2.default.bool
	};
	exports.default = (0, _injectTooltip2.default)(TableColumn);

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _ResizeObserver = __webpack_require__(357);

	var _ResizeObserver2 = _interopRequireDefault(_ResizeObserver);

	var _SelectField = __webpack_require__(397);

	var _SelectField2 = _interopRequireDefault(_SelectField);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _findTable = __webpack_require__(394);

	var _findTable2 = _interopRequireDefault(_findTable);

	var _TableFooter = __webpack_require__(386);

	var _TableFooter2 = _interopRequireDefault(_TableFooter);

	var _TableColumn = __webpack_require__(395);

	var _TableColumn2 = _interopRequireDefault(_TableColumn);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `TablePagination` component is used to generate the table footer that helps
	 * pagination through a large dataset by limiting the number of rows per page.
	 * The pagination will always be placed persistently at the bottom of the table
	 * so that when a user scrolls to the right, they will always be able to use the
	 * pagination.
	 */
	var TablePagination = function (_PureComponent) {
	  _inherits(TablePagination, _PureComponent);

	  function TablePagination(props, context) {
	    _classCallCheck(this, TablePagination);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));

	    _initialiseProps.call(_this);

	    var controlledPage = typeof props.page !== 'undefined';
	    var controlledRowsPerPage = typeof props.rowsPerPage !== 'undefined';
	    var rowsPerPage = controlledRowsPerPage ? props.rowsPerPage : props.defaultRowsPerPage;
	    var page = controlledPage ? props.page : props.defaultPage;
	    _this.state = {
	      start: (page - 1) * rowsPerPage,
	      controlsMarginLeft: 0
	    };

	    if (!controlledPage) {
	      _this.state.page = page;
	    }

	    if (!controlledRowsPerPage) {
	      _this.state.rowsPerPage = props.defaultRowsPerPage;
	    }

	    _this._table = null;
	    _this._ticking = false;
	    return _this;
	  }

	  TablePagination.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        rowsPerPage = _props.rowsPerPage,
	        page = _props.page;

	    if (page !== nextProps.page || rowsPerPage !== nextProps.rowsPerPage) {
	      var rpp = (0, _getField2.default)(nextProps, this.state, 'rowsPerPage');
	      var p = (0, _getField2.default)(nextProps, this.state, 'page');

	      this.setState({ start: (p - 1) * rpp });
	    }
	  };

	  TablePagination.prototype.render = function render() {
	    var _state = this.state,
	        controlsMarginLeft = _state.controlsMarginLeft,
	        start = _state.start;

	    var _props2 = this.props,
	        className = _props2.className,
	        selectFieldStyle = _props2.selectFieldStyle,
	        selectFieldClassName = _props2.selectFieldClassName,
	        selectFieldInputStyle = _props2.selectFieldInputStyle,
	        selectFieldInputClassName = _props2.selectFieldInputClassName,
	        rows = _props2.rows,
	        rowsPerPageLabel = _props2.rowsPerPageLabel,
	        rowsPerPageItems = _props2.rowsPerPageItems,
	        incrementIcon = _props2.incrementIcon,
	        decrementIcon = _props2.decrementIcon,
	        simplifiedMenu = _props2.simplifiedMenu,
	        incrementIconChildren = _props2.incrementIconChildren,
	        incrementIconClassName = _props2.incrementIconClassName,
	        decrementIconChildren = _props2.decrementIconChildren,
	        decrementIconClassName = _props2.decrementIconClassName,
	        propId = _props2.id,
	        propIncrementId = _props2.incrementId,
	        propDecrementId = _props2.decrementId,
	        onPagination = _props2.onPagination,
	        propRowsPerPage = _props2.rowsPerPage,
	        propPage = _props2.page,
	        defaultPage = _props2.defaultPage,
	        defaultRowsPerPage = _props2.defaultRowsPerPage,
	        props = _objectWithoutProperties(_props2, ['className', 'selectFieldStyle', 'selectFieldClassName', 'selectFieldInputStyle', 'selectFieldInputClassName', 'rows', 'rowsPerPageLabel', 'rowsPerPageItems', 'incrementIcon', 'decrementIcon', 'simplifiedMenu', 'incrementIconChildren', 'incrementIconClassName', 'decrementIconChildren', 'decrementIconClassName', 'id', 'incrementId', 'decrementId', 'onPagination', 'rowsPerPage', 'page', 'defaultPage', 'defaultRowsPerPage']);

	    var baseId = this.context.baseId;

	    var rowsPerPage = (0, _getField2.default)(this.props, this.state, 'rowsPerPage');
	    var _props3 = this.props,
	        id = _props3.id,
	        incrementId = _props3.incrementId,
	        decrementId = _props3.decrementId;

	    if (!id) {
	      id = baseId + '-pagination';
	    }

	    if (!incrementId) {
	      incrementId = id + '-increment-btn';
	    }

	    if (!decrementId) {
	      decrementId = id + '-decrement-btn';
	    }

	    var pagination = start + 1 + '-' + Math.min(rows, start + rowsPerPage) + ' of ' + rows;
	    return _react2.default.createElement(
	      _TableFooter2.default,
	      _extends({}, props, { className: (0, _classnames2.default)('md-table-footer--pagination', className) }),
	      _react2.default.createElement(_ResizeObserver2.default, { watchWidth: true, component: 'tr', onResize: this._throttledPosition }),
	      _react2.default.createElement(_ResizeObserver2.default, { watchWidth: true, component: 'tr', target: this._table, onResize: this._throttledPosition }),
	      _react2.default.createElement(
	        'tr',
	        null,
	        _react2.default.createElement(
	          _TableColumn2.default,
	          { colSpan: '100%' },
	          _react2.default.createElement(
	            'div',
	            {
	              ref: this._setControls,
	              className: 'md-table-pagination md-table-pagination--controls md-text',
	              style: { marginLeft: controlsMarginLeft }
	            },
	            _react2.default.createElement(
	              'span',
	              { className: 'md-table-pagination__label' },
	              rowsPerPageLabel
	            ),
	            _react2.default.createElement(_SelectField2.default, {
	              id: id,
	              menuItems: rowsPerPageItems,
	              position: _SelectField2.default.Positions.BELOW,
	              style: selectFieldStyle,
	              className: selectFieldClassName,
	              inputStyle: selectFieldInputStyle,
	              inputClassName: (0, _classnames2.default)('md-select-field--pagination', selectFieldInputClassName),
	              value: rowsPerPage,
	              onChange: this._setRowsPerPage,
	              simplifiedMenu: simplifiedMenu
	            }),
	            _react2.default.createElement(
	              'span',
	              { className: 'md-table-pagination--label' },
	              pagination
	            ),
	            _react2.default.createElement(_Button2.default, {
	              id: decrementId,
	              icon: true,
	              onClick: this._decrement,
	              disabled: start === 0,
	              iconEl: (0, _getDeprecatedIcon2.default)(decrementIconClassName, decrementIconChildren, decrementIcon)
	            }),
	            _react2.default.createElement(_Button2.default, {
	              id: incrementId,
	              icon: true,
	              onClick: this._increment,
	              disabled: start + rowsPerPage >= rows,
	              iconEl: (0, _getDeprecatedIcon2.default)(incrementIconClassName, incrementIconChildren, incrementIcon)
	            })
	          ),
	          _react2.default.createElement('div', { className: 'md-table-pagination' })
	        )
	      )
	    );
	  };

	  return TablePagination;
	}(_react.PureComponent);

	TablePagination.propTypes = {
	  /**
	   * An optional id to provide to the select field. If this is omitted, it will be
	   * the `DataTable`'s `baseId` with '-pagination'.
	   *
	   * @see {@link DataTables/DataTable#baseId}
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the increment icon button. If this is omitted, it will be
	   * the `id` with '-increment-btn'.
	   *
	   * @see {@link #id}
	   */
	  incrementId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the decrement icon button. If this is omitted, it will be
	   * the `id` with '-decrement-btn'.
	   *
	   * @see {@link #id}
	   */
	  decrementId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the `tfoot` tag.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `tfoot` tag.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the select field.
	   *
	   * @see {@link SelectFields/SelectField#style}
	   */
	  selectFieldStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the select field.
	   *
	   * @see {@link SelectFields/SelectField#className}
	   */
	  selectFieldClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the select field's input.
	   *
	   * @see {@link SelectFields/SelectField#inputStyle}
	   */
	  selectFieldInputStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the select field's input.
	   *
	   * @see {@link SelectFields/SelectField#inputClassName}
	   */
	  selectFieldInputClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the select field should use the simplified menu logic.
	   *
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplifiedMenu: _propTypes2.default.bool,

	  /**
	   * A function to call when a user clicks the increment or decrement pagination
	   * icon button. This function will be given the new start index and the number
	   * or rows per page as well as the current page.
	   *
	   * ```js
	   * onPagination(newStart, rowsPerPage, currentPage);
	   * ```
	   */
	  onPagination: _propTypes2.default.func.isRequired,

	  /**
	   * The current value for the select field holding the number of rows per page.
	   */
	  rowsPerPage: _propTypes2.default.number,

	  /**
	   * The current page for the pagination. This will make the component controlled, so the only way to get pagination
	   * is making sure you are updating this prop after the `onPagination` callback is called.
	   *
	   * Pages start from 1 instead of 0.
	   */
	  page: _propTypes2.default.number,

	  /**
	   * The default page to start from for the pagination. Pages start from 1 instead of 0.
	   */
	  defaultPage: _propTypes2.default.number.isRequired,

	  /**
	   * The default number of rows per page to display. This will be the value for the
	   * `SelectField`.
	   */
	  defaultRowsPerPage: _propTypes2.default.number.isRequired,

	  /**
	   * The label to use for the rows per page `SelectField`.
	   */
	  rowsPerPageLabel: _propTypes2.default.node.isRequired,

	  /**
	   * A list of numbers for the amount of rows per page to display at a time.
	   * This will be rendered into the `SelectField`.
	   */
	  rowsPerPageItems: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,

	  /**
	   * The total number of rows that can be displayed. This is the unfiltered/non-subset
	   * number of rows. This is used to help calculate the increment/decrement values to
	   * display and determine if the user can increment/decrement again.
	   */
	  rows: _propTypes2.default.number.isRequired,

	  /**
	   * The icon to use for the increment icon button.
	   */
	  incrementIcon: _propTypes2.default.element,

	  /**
	   * The icon to use for the decrement icon button.
	   */
	  decrementIcon: _propTypes2.default.element,

	  incrementIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `incrementIcon` prop instead'),
	  incrementIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `incrementIcon` prop instead'),
	  decrementIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `decrementIcon` prop instead'),
	  decrementIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `decrementIcon` prop instead')
	};
	TablePagination.contextTypes = {
	  baseId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	  fixedFooter: _propTypes2.default.bool
	};
	TablePagination.defaultProps = {
	  defaultPage: 1,
	  defaultRowsPerPage: 10,
	  rowsPerPageLabel: 'Rows per page:',
	  rowsPerPageItems: [10, 20, 30, 40, 50, 100],
	  incrementIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'keyboard_arrow_right'
	  ),
	  decrementIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'keyboard_arrow_left'
	  ),
	  simplifiedMenu: false
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._setControls = function (controls) {
	    _this2._controls = controls;
	    _this2._table = (0, _findTable2.default)(controls);

	    if (_this2._table && _this2.context.fixedFooter) {
	      _this2._table.addEventListener('scroll', _this2._throttledPosition);
	    }
	  };

	  this._position = function () {
	    if (_this2._table) {
	      var fixedFooter = _this2.context.fixedFooter;
	      var _table = _this2._table,
	          offsetWidth = _table.offsetWidth,
	          scrollLeft = _table.scrollLeft;


	      var controlsMarginLeft = offsetWidth - _this2._controls.offsetWidth;
	      if (fixedFooter) {
	        controlsMarginLeft += scrollLeft;
	      }

	      _this2.setState({
	        controlsMarginLeft: Math.max(24, controlsMarginLeft)
	      });
	    }
	  };

	  this._throttledPosition = function () {
	    if (!_this2._ticking) {
	      requestAnimationFrame(function () {
	        _this2._ticking = false;
	        _this2._position();
	      });
	    }

	    _this2._ticking = true;
	  };

	  this._increment = function () {
	    var _props4 = _this2.props,
	        rows = _props4.rows,
	        onPagination = _props4.onPagination;
	    var start = _this2.state.start;

	    var rowsPerPage = (0, _getField2.default)(_this2.props, _this2.state, 'rowsPerPage');
	    var page = (0, _getField2.default)(_this2.props, _this2.state, 'page');

	    // Only correct multiple of rows per page
	    var max = rows - rows % rowsPerPage;

	    var newStart = Math.min(start + rowsPerPage, max);
	    var nextPage = page + 1;

	    onPagination(newStart, rowsPerPage, nextPage);
	    if (typeof _this2.props.page === 'undefined') {
	      _this2.setState({ start: newStart, page: nextPage });
	    }
	  };

	  this._decrement = function () {
	    var start = _this2.state.start;

	    var page = (0, _getField2.default)(_this2.props, _this2.state, 'page');
	    var rowsPerPage = (0, _getField2.default)(_this2.props, _this2.state, 'rowsPerPage');
	    var newStart = Math.max(0, start - rowsPerPage);
	    var nextPage = page - 1;

	    _this2.props.onPagination(newStart, rowsPerPage, nextPage);
	    if (typeof _this2.props.page === 'undefined') {
	      _this2.setState({ start: newStart, page: nextPage });
	    }
	  };

	  this._setRowsPerPage = function (rowsPerPage) {
	    var page = 1;
	    var newStart = 0;
	    _this2.props.onPagination(newStart, rowsPerPage, page);
	    var nextState = void 0;
	    if (typeof _this2.props.rowsPerPage === 'undefined') {
	      nextState = { rowsPerPage: rowsPerPage };
	    }

	    if (typeof _this2.props.page === 'undefined') {
	      nextState = nextState || {};
	      nextState.start = newStart;
	    }

	    if (nextState) {
	      _this2.setState(nextState);
	    }
	  };
	};

	exports.default = TablePagination;

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _keyCodes = __webpack_require__(279);

	var _omit = __webpack_require__(326);

	var _omit2 = _interopRequireDefault(_omit);

	var _isValued = __webpack_require__(360);

	var _isValued2 = _interopRequireDefault(_isValued);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _isBetween = __webpack_require__(258);

	var _isBetween2 = _interopRequireDefault(_isBetween);

	var _handleKeyboardAccessibility = __webpack_require__(341);

	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _anchorShape = __webpack_require__(332);

	var _anchorShape2 = _interopRequireDefault(_anchorShape);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _positionShape = __webpack_require__(336);

	var _positionShape2 = _interopRequireDefault(_positionShape);

	var _Menu = __webpack_require__(348);

	var _Menu2 = _interopRequireDefault(_Menu);

	var _ListItem = __webpack_require__(338);

	var _ListItem2 = _interopRequireDefault(_ListItem);

	var _SelectFieldToggle = __webpack_require__(398);

	var _SelectFieldToggle2 = _interopRequireDefault(_SelectFieldToggle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MOBILE_LIST_PADDING = 8;
	var ARIA_ACTIVE = 'aria-activedescendant';

	var SelectField = function (_PureComponent) {
	  _inherits(SelectField, _PureComponent);

	  function SelectField(props) {
	    var _listProps;

	    _classCallCheck(this, SelectField);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    _this.state = _extends({
	      error: false,
	      active: false
	    }, _this._getActive(props, { value: props.defaultValue }), {
	      listProps: (_listProps = {
	        role: 'listbox',
	        ref: _this._scrollActiveIntoView
	      }, _listProps[ARIA_ACTIVE] = null, _listProps),
	      match: null,
	      lastSearch: null,
	      value: props.defaultValue,
	      visible: props.defaultVisible
	    });

	    _this._items = [];
	    _this._activeItem = null;
	    _this._deleteKeys = _this._getDeleteKeys(props);
	    return _this;
	  }

	  SelectField.prototype.componentDidMount = function componentDidMount() {
	    this._container = (0, _reactDom.findDOMNode)(this);
	    this._field = this._container.querySelector('.md-select-field');
	  };

	  SelectField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        itemLabel = _props.itemLabel,
	        itemValue = _props.itemValue,
	        deleteKeys = _props.deleteKeys;

	    if (deleteKeys !== nextProps.deleteKeys || itemLabel !== nextProps.itemLabel || itemValue !== nextProps.itemValue) {
	      this._deleteKeys = this._getDeleteKeys(nextProps);
	    }

	    if (this.props.value !== nextProps.value || this.props.menuItems !== nextProps.menuItems) {
	      this.setState(this._getActive(nextProps, this.state));
	    }
	  };

	  /**
	   * Gets the current value from the select field. This is used when you have an uncontrolled
	   * text field and simply need the value from a ref callback.
	   *
	   * @return {String} the select field's value
	   */


	  SelectField.prototype._getItemPart = function _getItemPart(item, itemLabel, itemValue) {
	    var preferLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	    var type = typeof item === 'undefined' ? 'undefined' : _typeof(item);
	    if (type === 'number' || type === 'string') {
	      return item;
	    } else if (type === 'object') {
	      var key1 = preferLabel ? itemLabel : itemValue;
	      var key2 = preferLabel ? itemValue : itemLabel;
	      return typeof item[key1] !== 'undefined' ? item[key1] : item[key2];
	    }

	    return '';
	  };

	  SelectField.prototype._getDeleteKeys = function _getDeleteKeys(_ref) {
	    var itemLabel = _ref.itemLabel,
	        itemValue = _ref.itemValue,
	        itemProps = _ref.itemProps,
	        deleteKeys = _ref.deleteKeys;

	    var keys = [itemLabel, itemValue, itemProps];
	    if (deleteKeys) {
	      return keys.concat(Array.isArray(deleteKeys) ? deleteKeys : [deleteKeys]);
	    }

	    return keys;
	  };

	  SelectField.prototype.render = function render() {
	    var _props2 = this.props,
	        id = _props2.id,
	        style = _props2.style,
	        className = _props2.className,
	        listStyle = _props2.listStyle,
	        listClassName = _props2.listClassName,
	        toggleStyle = _props2.toggleStyle,
	        toggleClassName = _props2.toggleClassName,
	        menuItems = _props2.menuItems,
	        anchor = _props2.anchor,
	        belowAnchor = _props2.belowAnchor,
	        fixedTo = _props2.fixedTo,
	        position = _props2.position,
	        xThreshold = _props2.xThreshold,
	        yThreshold = _props2.yThreshold,
	        listZDepth = _props2.listZDepth,
	        listInline = _props2.listInline,
	        listHeightRestricted = _props2.listHeightRestricted,
	        block = _props2.block,
	        centered = _props2.centered,
	        sameWidth = _props2.sameWidth,
	        fullWidth = _props2.fullWidth,
	        repositionOnScroll = _props2.repositionOnScroll,
	        repositionOnResize = _props2.repositionOnResize,
	        simplifiedMenu = _props2.simplifiedMenu,
	        minLeft = _props2.minLeft,
	        minRight = _props2.minRight,
	        minBottom = _props2.minBottom,
	        fillViewportWidth = _props2.fillViewportWidth,
	        fillViewportHeight = _props2.fillViewportHeight,
	        menuTransitionName = _props2.menuTransitionName,
	        menuTransitionEnterTimeout = _props2.menuTransitionEnterTimeout,
	        menuTransitionLeaveTimeout = _props2.menuTransitionLeaveTimeout,
	        isOpen = _props2.isOpen,
	        propError = _props2.error,
	        propMenuId = _props2.menuId,
	        propVisible = _props2.visible,
	        itemLabel = _props2.itemLabel,
	        itemValue = _props2.itemValue,
	        itemProps = _props2.itemProps,
	        getItemProps = _props2.getItemProps,
	        defaultValue = _props2.defaultValue,
	        defaultVisible = _props2.defaultVisible,
	        onClick = _props2.onClick,
	        onKeyDown = _props2.onKeyDown,
	        onVisibilityChange = _props2.onVisibilityChange,
	        deleteKeys = _props2.deleteKeys,
	        stripActiveItem = _props2.stripActiveItem,
	        keyboardMatchingTimeout = _props2.keyboardMatchingTimeout,
	        defaultOpen = _props2.defaultOpen,
	        initiallyOpen = _props2.initiallyOpen,
	        onMenuToggle = _props2.onMenuToggle,
	        stretchList = _props2.stretchList,
	        menuStyle = _props2.menuStyle,
	        menuClassName = _props2.menuClassName,
	        floatingLabel = _props2.floatingLabel,
	        noAutoAdjust = _props2.noAutoAdjust,
	        adjustMinWidth = _props2.adjustMinWidth,
	        props = _objectWithoutProperties(_props2, ['id', 'style', 'className', 'listStyle', 'listClassName', 'toggleStyle', 'toggleClassName', 'menuItems', 'anchor', 'belowAnchor', 'fixedTo', 'position', 'xThreshold', 'yThreshold', 'listZDepth', 'listInline', 'listHeightRestricted', 'block', 'centered', 'sameWidth', 'fullWidth', 'repositionOnScroll', 'repositionOnResize', 'simplifiedMenu', 'minLeft', 'minRight', 'minBottom', 'fillViewportWidth', 'fillViewportHeight', 'menuTransitionName', 'menuTransitionEnterTimeout', 'menuTransitionLeaveTimeout', 'isOpen', 'error', 'menuId', 'visible', 'itemLabel', 'itemValue', 'itemProps', 'getItemProps', 'defaultValue', 'defaultVisible', 'onClick', 'onKeyDown', 'onVisibilityChange', 'deleteKeys', 'stripActiveItem', 'keyboardMatchingTimeout', 'defaultOpen', 'initiallyOpen', 'onMenuToggle', 'stretchList', 'menuStyle', 'menuClassName', 'floatingLabel', 'noAutoAdjust', 'adjustMinWidth']);

	    var _props3 = this.props,
	        menuId = _props3.menuId,
	        listId = _props3.listId,
	        error = _props3.error;

	    error = error || this.state.error;
	    if (!menuId) {
	      menuId = id + '-menu';
	    }

	    if (!listId) {
	      listId = menuId + '-options';
	    }

	    var _state = this.state,
	        listProps = _state.listProps,
	        active = _state.active,
	        activeLabel = _state.activeLabel;

	    var below = position === SelectField.Positions.BELOW;
	    var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	    var value = (0, _getField2.default)(this.props, this.state, 'value');
	    var useSameWidth = typeof sameWidth !== 'undefined' ? sameWidth : below;

	    var toggle = _react2.default.createElement(_SelectFieldToggle2.default, _extends({}, props, {
	      id: id,
	      style: toggleStyle,
	      className: toggleClassName,
	      visible: visible,
	      value: value,
	      below: below,
	      error: error,
	      active: active,
	      activeLabel: activeLabel,
	      onClick: this._toggle,
	      onFocus: this._handleFocus,
	      onBlur: this._handleBlur
	    }));

	    return _react2.default.createElement(
	      _Menu2.default,
	      {
	        id: menuId,
	        listId: listId,
	        style: style,
	        className: (0, _classnames2.default)('md-menu--select-field', className),
	        listProps: listProps,
	        listStyle: listStyle,
	        listClassName: listClassName,
	        toggle: toggle,
	        visible: visible,
	        onClose: this._close,
	        onKeyDown: this._handleKeyDown,
	        onClick: this._handleClick,
	        simplified: simplifiedMenu,
	        anchor: anchor,
	        belowAnchor: belowAnchor,
	        fixedTo: fixedTo,
	        position: position,
	        xThreshold: xThreshold,
	        yThreshold: yThreshold,
	        listZDepth: listZDepth,
	        listInline: listInline,
	        listHeightRestricted: listHeightRestricted,
	        sameWidth: useSameWidth,
	        block: block,
	        centered: centered,
	        fullWidth: fullWidth,
	        minLeft: minLeft,
	        minRight: minRight,
	        minBottom: minBottom,
	        fillViewportWidth: fillViewportWidth,
	        fillViewportHeight: fillViewportHeight,
	        repositionOnScroll: repositionOnScroll,
	        repositionOnResize: repositionOnResize,
	        transitionName: menuTransitionName,
	        transitionEnterTimeout: menuTransitionEnterTimeout,
	        transitionLeaveTimeout: menuTransitionLeaveTimeout
	      },
	      menuItems.reduce(this._reduceItems, [])
	    );
	  };

	  _createClass(SelectField, [{
	    key: 'value',
	    get: function get() {
	      return (0, _getField2.default)(this.props, this.state, 'value');
	    }
	  }]);

	  return SelectField;
	}(_react.PureComponent);

	SelectField.HorizontalAnchors = _Menu2.default.HorizontalAnchors;
	SelectField.VerticalAnchors = _Menu2.default.VerticalAnchors;
	SelectField.Positions = _Menu2.default.Positions;
	SelectField.propTypes = {
	  /**
	   * An id to give the select field. This is required for accessibility.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * An optional name to give to the select field.
	   */
	  name: _propTypes2.default.string,

	  /**
	   * An optional id to provide to the select field's menu. If this is omitted,
	   * it will default to `${id}-menu`.
	   */
	  menuId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the select field's list.
	   *
	   * @see {@link #menuId}
	   * @see {@link Menus/Menu#menuId}
	   */
	  listId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the select field's container (the menu).
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the select field's container (the menu).
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the menu's list.
	   */
	  listStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the menu's list.
	   */
	  listClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the select field's toggle.
	   */
	  toggleStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the select field's toggle.
	   */
	  toggleClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the `AccessibleFakeInkedButton` that is the trigger
	   * for the select field.
	   */
	  inputStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `AccessibleFakeInkedButton` that is the trigger
	   * for the select field.
	   */
	  inputClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the select field should be have the menu's list visible by default.
	   */
	  defaultVisible: _propTypes2.default.bool.isRequired,

	  /**
	   * Boolean if the select field should have the menu's list visible. This will make
	   * the select field controlled and require the `onVisibilityChange` prop to be defined,
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityChange', 'defaultVisible'),

	  /**
	   * An optional function to call when the select field's menu has it's visibility changed. The callback
	   * will include the next visible state and the event that triggered it.
	   */
	  onVisibilityChange: _propTypes2.default.func,

	  /**
	   * A list of `number`, `string`, or `object` that should be used to create `ListItem`
	   * in the menu's list. When it is an `object`, it will use the `itemLabel` prop as the
	   * `primaryText` and use the value of `itemValue`.
	   *
	   * @see {@link #itemLabel}
	   * @see {@link #itemValue}
	   */
	  menuItems: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.element])).isRequired,

	  /**
	   * The amount of time that a list of letters should be used when finding a menu item
	   * while typing. Since a user can select items by typing multiple letters in a row,
	   * this will be used as the timeout for clearing those letters.
	   *
	   * For example:
	   * - User types `g`
	   *
	   * Full match is now `'g'`.
	   *
	   * - User delays 200ms and types `u`
	   *
	   * Full match is now `'gu'`
	   *
	   * - User delays 1000ms and types `a`.
	   *
	   * Full match is now `'a'`
	   */
	  keyboardMatchingTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * The key to use for extracting a menu item's label if the menu item is an object.
	   *
	   * Example:
	   *
	   * ```js
	   * const item = { something: 'My Label', somethingElse: 'value' };
	   * const itemLabel = 'something';
	   * const itemValue = 'somethingElse';
	   * ```
	   */
	  itemLabel: _propTypes2.default.string.isRequired,

	  /**
	   * The key to use for extracting a menu item's value if the menu item is an object.
	   *
	   * Example:
	   *
	   * ```js
	   * const item = { something: 'My Label', somethingElse: 'value' };
	   * const itemLabel = 'something';
	   * const itemValue = 'somethingElse';
	   * ```
	   */
	  itemValue: _propTypes2.default.string.isRequired,

	  /**
	   * The key to use for extracting a menu item's function
	   * to get additional `ListItem` props if the menu item is an object.
	   *
	   * Example:
	   *
	   * ```js
	   * const item = { something: 'My Label', addProps: ({active}) => active ? {secondaryText: 'some text'} : null };
	   * const itemLabel = 'something';
	   * const itemProps = 'addProps';
	   * ```
	   *
	   * @see {@link #getItemProps}
	   */
	  itemProps: _propTypes2.default.string.isRequired,

	  /**
	   * An optional function to get additional `ListItem` props if the menu item is an object.
	   *
	   * An object with the following fields will be passed into the function:
	   * - `index` - item's index
	   * - `active` - whether item is active
	   * - `disabled` - whether item is disabled
	   * - `itemValue` - item's value
	   * - `value` - current list value
	   * - `props` - default `ListItem` props
	   * - `item` - source item's data
	   * - `field` - reference to the component instance
	   */
	  getItemProps: _propTypes2.default.func,

	  /**
	   * The default value to use for the select field. If this is set, it should either match
	   * one of the `number` or `string` in your `menuItems` list or be the empty string. If
	   * the `menuItems` is a list of `object`, this value should match one of the menu item's
	   * `itemValue` or be the empty string.
	   *
	   * ```js
	   * const menuItems = [{ label: 'Something': value: 0 }, { label: 'Something else', value: 1 }];
	   *
	   * // both valid
	   * defaultValue={0}
	   * defaultValue=""
	   * ```
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,

	  /**
	   * The value to use for the select field. If this is defined, it becomes a controlled component
	   * and requires the `onChange` prop to be defined. See the `defaultValue` for more behavior info.
	   *
	   * @see {@link #defaultValue}
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), 'onChange', 'defaultValue'),

	  /**
	   * An optional function to call when the select field's value has been changed either when the user
	   * has click/touched/keyboard selected a value in the list, or the user has selected a value by typing
	   * in the select field while the menu's list is closed.
	   *
	   * The callback will include the next text field value, the selected item's index, the event that
	   * triggered the change, and the id, name, and value of the select field.
	   *
	   * ```js
	   * onChange(value, index, event, { id, name, value });
	   * ```
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * An optional label to use with the select field. This will be a floating label as seen on the text field.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * An optional placeholder to use in the select field. This will only appear when no value has been selected.
	   */
	  placeholder: _propTypes2.default.string,

	  /**
	   * Boolean if the select field should be disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * Boolean if the select field is required. This will update the label and placeholder to include a `*` suffix.
	   */
	  required: _propTypes2.default.bool,

	  /**
	   * Boolean if the select field is considered to be in an `error` state.
	   *
	   * @see {@link TextFields/TextField#error}
	   */
	  error: _propTypes2.default.bool,

	  /**
	   * An optional text to display when the text select field is in an error state.
	   *
	   * @see {@link TextFields/TextField#errorText}
	   */
	  errorText: _propTypes2.default.node,

	  /**
	   * An optional text to display below the select field to provide input help to the user.
	   * This will only be displayed if the select field is not in an error state.
	   *
	   * @see {@link #helpOnFocus}
	   * @see {@link TextFields/TextField#errorText}
	   */
	  helpText: _propTypes2.default.node,

	  /**
	   * Boolean if the `helpText` should only appear on focus.
	   *
	   * @see {@link #helpText}
	   * @see {@link TextFields/TextField#helpOnFocus}
	   */
	  helpOnFocus: _propTypes2.default.bool,

	  /**
	   * An optional function to call when any element in the select field has been clicked.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `keydown` event has been triggered anywhere in the
	   * select field.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the select field's toggle has gained focus.
	   */
	  onFocus: _propTypes2.default.func,

	  /**
	   * An optional function to call when the select field's toggle has been blurred. This
	   * will be triggered if the user hits the up or down arrow keys to traverse the list
	   * of items.
	   */
	  onBlur: _propTypes2.default.func,

	  /**
	   * The icon to use to display the dropdown arrow.
	   */
	  dropdownIcon: _propTypes2.default.element,

	  /**
	   * Boolean if the select field is in a toolbar. This should automatically be injected by the `Toolbar`
	   * component if being used as a `titleMenu` or one of the `actions`.
	   *
	   * @see {@link Toolbars/Toolbar#titleMenu}
	   * @see {@link Toolbars/Toolbar#actions}
	   */
	  toolbar: _propTypes2.default.bool,

	  /**
	   * Boolean if the currently active item should be removed from the list of available `menuItems`.
	   * If this is `undefined`, it will strip out the active one only when the
	   * `position === SelectField.Positions.BELOW`.
	   */
	  stripActiveItem: _propTypes2.default.bool,

	  /**
	   * The transition name to use when a new value has been selected. By default, it will have the
	   * new item _drop_ into the select field's input location.
	   */
	  transitionName: _propTypes2.default.string.isRequired,

	  /**
	   * The transition time to use when a new value has been selected. If this value is `0`, there
	   * will be no transition.
	   */
	  transitionTime: _propTypes2.default.number.isRequired,

	  /**
	   * This is how the menu's `List` gets anchored to the select field.
	   *
	   * @see {@link Helpers/Layover#anchor}
	   */
	  anchor: _anchorShape2.default,

	  /**
	   * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.
	   *
	   * @see {@link Helpers/Layover#belowAnchor}
	   */
	  belowAnchor: _anchorShape2.default,

	  /**
	   * This is the animation position for the list that appears.
	   *
	   * @see {@link Helpers/Layover#animationPosition}
	   */
	  position: _positionShape2.default,

	  /**
	   * This is how the menu's list will be "fixed" to the `toggle` component.
	   *
	   * @see {@link Helpers/Layover#fixedTo}
	   */
	  fixedTo: _fixedToShape2.default,

	  /**
	   * Boolean if the menu's list should appear horizontally instead of vertically.
	   */
	  listInline: _propTypes2.default.bool,

	  /**
	   * The list's z-depth for applying box shadow. This should be a number from 0 to 5.
	   */
	  listZDepth: _propTypes2.default.number,

	  /**
	   * Boolean if the list should have its height restricted to the `$md-menu-mobile-max-height`/
	   * `$md-menu-desktop-max-height` values.
	   *
	   * @see [md-menu-mobile-max-height](/components/menus?tab=1#variable-md-menu-mobile-max-height)
	   * @see [md-menu-desktop-max-height](/components/menus?tab=1#variable-md-menu-desktop-max-height)
	   */
	  listHeightRestricted: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#xThreshold}
	   */
	  xThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#yThreshold}
	   */
	  yThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#closeOnOutsideClick}
	   */
	  closeOnOutsideClick: _propTypes2.default.bool,

	  /**
	   * An optional transition name to use for the list appearing/disappearing.
	   *
	   * @see {@link Menus/Menu#transitionName}
	   */
	  menuTransitionName: _propTypes2.default.string,

	  /**
	   * @see {@link Helpers/Layover#transitionEnterTimeout}
	   */
	  menuTransitionEnterTimeout: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#transitionLeaveTimeout}
	   */
	  menuTransitionLeaveTimeout: _propTypes2.default.number,

	  /**
	   * @see {@link Menus/Menu#block}
	   */
	  block: _propTypes2.default.bool,

	  /**
	   * @see {@link Menus/Menu#fullWidth}
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#centered}
	   */
	  centered: _Menu2.default.propTypes.centered,

	  /**
	   * @see {@link Helpers/Layover#sameWidth}
	   */
	  sameWidth: _Menu2.default.propTypes.sameWidth,

	  /**
	   * Since the `menuItems` get mapped into `ListItem`, this prop is used to remove
	   * any unnecessary props from the `ListItem` itself. This is where you
	   * would remove parts of your object such as `description` or `__metadata__`.
	   */
	  deleteKeys: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]))]),

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the `fixedTo` element scrolls.
	   *
	   * @see {@link Helpers/Layover#repositionOnScroll}
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the window resizes.
	   *
	   * @see {@link Helpers/Layover#repositionOnResize}
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu logic should be simplified without any viewport logic and position
	   * based on the relative position of the menu. This will most like require some additional
	   * styles applied to the menu.
	   *
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplifiedMenu: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#minLeft}
	   */
	  minLeft: _Menu2.default.propTypes.minLeft,

	  /**
	   * @see {@link Helpers/Layover#minRight}
	   */
	  minRight: _Menu2.default.propTypes.minLeft,

	  /**
	   * @see {@link Helpers/Layover#minBottom}
	   */
	  minBottom: _Menu2.default.propTypes.minBottom,

	  /**
	   * @see {@link Helpers/Layover#fillViewportWidth}
	   */
	  fillViewportWidth: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#fillViewportHeight}
	   */
	  fillViewportHeight: _propTypes2.default.bool,

	  /**
	   * The direction that the underline should appear from.
	   */
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right']).isRequired,

	  iconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `dropdownIcon` instead'),
	  iconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `dropdownIcon` instead'),
	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead'),
	  defaultOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  initiallyOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  onMenuToggle: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onVisibilityChange` instead'),
	  stretchList: (0, _deprecated2.default)(_propTypes2.default.bool, 'No longer valid after the changes to the `Menu` component. Possibly use `sameWidth` instead'),
	  menuStyle: (0, _deprecated2.default)(_propTypes2.default.object, 'Use `style` instead'),
	  menuClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `className` instead'),
	  floatingLabel: (0, _deprecated2.default)(_propTypes2.default.bool, 'A select field can only have floating labels now. Only provide the `label` prop'),
	  noAutoAdjust: (0, _deprecated2.default)(_propTypes2.default.bool, 'No longer valid to use since select fields are no longer text fields'),
	  adjustMinWidth: (0, _deprecated2.default)(_propTypes2.default.bool, 'No longer valid to use since select fields are no longer text fields')
	};
	SelectField.defaultProps = {
	  anchor: {
	    x: SelectField.HorizontalAnchors.INNER_LEFT,
	    y: SelectField.VerticalAnchors.OVERLAP
	  },
	  fixedTo: _Menu2.default.defaultProps.fixedTo,
	  position: SelectField.Positions.TOP_LEFT,
	  itemLabel: 'label',
	  itemValue: 'value',
	  itemProps: 'getProps',
	  dropdownIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'arrow_drop_down'
	  ),
	  lineDirection: 'left',
	  menuItems: [],
	  defaultValue: '',
	  defaultVisible: false,
	  keyboardMatchingTimeout: 1000,
	  transitionName: 'md-drop',
	  transitionTime: 300,
	  repositionOnScroll: true,
	  repositionOnResize: false
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._getActiveItemLabel = function (item, value, itemLabel, itemValue) {
	    var v = _this2._getItemPart(item, itemLabel, itemValue);
	    var label = _this2._getItemPart(item, itemLabel, itemValue, true);

	    return v === value || v === parseFloat(value) ? label : '';
	  };

	  this._getActive = function (props, state) {
	    var activeLabel = '';
	    var activeIndex = -1;
	    var value = (0, _getField2.default)(props, state, 'value');
	    if ((0, _isValued2.default)(value)) {
	      var menuItems = props.menuItems,
	          itemLabel = props.itemLabel,
	          itemValue = props.itemValue;


	      menuItems.some(function (item, index) {
	        activeLabel = _this2._getActiveItemLabel(item, value, itemLabel, itemValue);
	        var found = (0, _isValued2.default)(activeLabel);
	        if (found) {
	          activeIndex = index;
	        }

	        return found;
	      });
	    }

	    return { activeLabel: activeLabel, activeIndex: activeIndex };
	  };

	  this._attemptItemFocus = function (index) {
	    if (index === -1) {
	      return;
	    }

	    var item = _this2._items[index];
	    if (item) {
	      item.focus();
	    }
	  };

	  this._setListItem = function (item) {
	    if (!item) {
	      return;
	    }

	    if (item.props.active) {
	      _this2._activeItem = (0, _reactDom.findDOMNode)(item);
	      item.focus();

	      if (!_this2.state.listProps[ARIA_ACTIVE]) {
	        var _extends2;

	        _this2.setState({ listProps: _extends({}, _this2.state.listProps, (_extends2 = {}, _extends2[ARIA_ACTIVE] = _this2.props.id + '-options-active', _extends2)) });
	      }
	    }

	    _this2._items.push(item);
	  };

	  this._scrollActiveIntoView = function (listRef) {
	    if (listRef === null) {
	      _this2._items = [];
	      return;
	    } else if (!_this2._activeItem) {
	      return;
	    }

	    var list = (0, _reactDom.findDOMNode)(listRef);
	    var offsetTop = _this2._activeItem.offsetTop;

	    list.scrollTop = offsetTop > MOBILE_LIST_PADDING ? offsetTop : 0;
	  };

	  this._toggle = function (e) {
	    var _props4 = _this2.props,
	        isOpen = _props4.isOpen,
	        onVisibilityChange = _props4.onVisibilityChange,
	        onMenuToggle = _props4.onMenuToggle;

	    var visible = !(typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(_this2.props, _this2.state, 'visible'));
	    if (onMenuToggle || onVisibilityChange) {
	      (onMenuToggle || onVisibilityChange)(visible, e);
	    }

	    var state = void 0;
	    if (typeof isOpen === 'undefined' && typeof _this2.props.visible === 'undefined') {
	      state = { visible: visible };
	    }

	    if (state) {
	      _this2.setState(state);
	    }
	  };

	  this._close = function (e) {
	    if (_this2.props.onVisibilityChange) {
	      _this2.props.onVisibilityChange(false, e);
	    }

	    if (e.type === 'keydown' && _this2._field) {
	      _this2._field.focus();
	    }

	    var state = void 0;
	    if (_this2.props.required && !(0, _getField2.default)(_this2.props, _this2.state, 'value')) {
	      state = { error: true };
	    }

	    if (typeof _this2.props.visible === 'undefined') {
	      state = state || {};
	      state.visible = false;
	    }

	    if (state) {
	      _this2.setState(state);
	    }
	  };

	  this._handleClick = function (e) {
	    if (_this2.props.onClick) {
	      _this2.props.onClick(e);
	    }

	    var isOpen = _this2.props.isOpen;

	    var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(_this2.props, _this2.state, 'visible');
	    if (visible && _this2._container) {
	      var node = e.target;
	      while (_this2._container.contains(node)) {
	        if (node.dataset && typeof node.dataset.id !== 'undefined') {
	          var _node$dataset = node.dataset,
	              id = _node$dataset.id,
	              value = _node$dataset.value;

	          _this2._selectItem(parseInt(id, 10), value, e);
	          return;
	        }

	        node = node.parentNode;
	      }
	    }
	  };

	  this._selectItem = function (dataIndex, dataValue, e) {
	    var _props5 = _this2.props,
	        required = _props5.required,
	        menuItems = _props5.menuItems,
	        itemLabel = _props5.itemLabel,
	        itemValue = _props5.itemValue,
	        onChange = _props5.onChange,
	        id = _props5.id,
	        name = _props5.name;

	    var value = _this2._getItemPart(menuItems[dataIndex], itemLabel, itemValue);
	    var prevValue = (0, _getField2.default)(_this2.props, _this2.state, 'value');
	    if (prevValue !== value && onChange) {
	      onChange(value, dataIndex, e, { id: id, name: name, value: value });
	    }

	    var state = _extends({}, _this2._getActive({ value: value, itemLabel: itemLabel, itemValue: itemValue, menuItems: menuItems }, {}), {
	      error: !!required && !value && value !== 0
	    });

	    if (typeof _this2.props.value === 'undefined') {
	      state.value = value;
	    }

	    _this2.setState(state);
	  };

	  this._handleFocus = function (e) {
	    if (_this2.props.onFocus) {
	      _this2.props.onFocus(e);
	    }

	    _this2.setState({ active: true });
	  };

	  this._handleBlur = function (e) {
	    if (_this2.props.onBlur) {
	      _this2.props.onBlur(e);
	    }

	    var error = _this2.state.error;
	    var _props6 = _this2.props,
	        isOpen = _props6.isOpen,
	        required = _props6.required;

	    var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(_this2.props, _this2.state, 'visible');
	    var value = (0, _getField2.default)(_this2.props, _this2.state, 'value');

	    if (required && !visible) {
	      error = !value;
	    }

	    _this2.setState({ active: false, error: error });
	  };

	  this._handleKeyDown = function (e) {
	    var _props7 = _this2.props,
	        isOpen = _props7.isOpen,
	        onKeyDown = _props7.onKeyDown;

	    if (onKeyDown) {
	      onKeyDown(e);
	    }

	    var key = e.which || e.keyCode;
	    var up = key === _keyCodes.UP;
	    var down = key === _keyCodes.DOWN;
	    var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(_this2.props, _this2.state, 'visible');

	    if (up || down) {
	      e.preventDefault();

	      if (!visible) {
	        _this2._toggle(e);
	        return;
	      }

	      _this2._advanceFocus(up);
	    } else if (!visible && (0, _handleKeyboardAccessibility2.default)(e, _this2._toggle, true, true)) {
	      return;
	    } else if (visible && (key === _keyCodes.ESC || key === _keyCodes.TAB)) {
	      if (_this2._field && key === _keyCodes.ESC) {
	        _this2._field.focus();
	      }

	      _this2._close(e);
	      return;
	    } else {
	      _this2._selectItemByLetter(key, e);
	    }
	  };

	  this._advanceFocus = function (decrement) {
	    var _props8 = _this2.props,
	        position = _props8.position,
	        stripActiveItem = _props8.stripActiveItem;
	    var activeIndex = _this2.state.activeIndex;


	    var below = position === SelectField.Positions.BELOW;
	    var value = (0, _getField2.default)(_this2.props, _this2.state, 'value');
	    var valued = (0, _isValued2.default)(value);
	    var itemStripped = (typeof stripActiveItem !== 'undefined' ? stripActiveItem : below) && valued;

	    // If the select field is positioned below and there is no value, need to increment the last index
	    // by one since this select field removes the active item. Need to account for that here when there
	    // is no value.
	    var lastIndex = _this2._items.length - (itemStripped ? 0 : 1);
	    if (decrement && activeIndex <= 0 || !decrement && activeIndex >= lastIndex) {
	      return;
	    }

	    var nextIndex = Math.max(-1, Math.min(lastIndex, activeIndex + (decrement ? -1 : 1)));
	    if (nextIndex === activeIndex) {
	      return;
	    }

	    _this2._attemptItemFocus(nextIndex - (itemStripped ? 1 : 0));
	    _this2.setState({ activeIndex: nextIndex });
	  };

	  this._selectItemByLetter = function (key, e) {
	    var charCode = String.fromCharCode(key);
	    var isLetter = charCode && charCode.match(/[A-Za-z0-9-_ ]/);
	    var isKeypad = (0, _isBetween2.default)(key, _keyCodes.KEYPAD_ZERO, _keyCodes.KEYPAD_NINE);
	    if (!(0, _isBetween2.default)(key, _keyCodes.ZERO, _keyCodes.NINE) && !isKeypad && !isLetter) {
	      return;
	    }

	    var letter = isLetter ? charCode : String(key - (isKeypad ? _keyCodes.KEYPAD_ZERO : _keyCodes.ZERO));

	    if (_this2._matchingTimeout) {
	      clearTimeout(_this2._matchingTimeout);
	    }

	    _this2._matchingTimeout = setTimeout(function () {
	      _this2._matchingTimeout = null;

	      _this2.setState({ match: null, lastSearch: null });
	    }, _this2.props.keyboardMatchingTimeout);

	    _this2._selectFirstMatch(letter, e);
	  };

	  this._selectFirstMatch = function (letter, e) {
	    var _props9 = _this2.props,
	        menuItems = _props9.menuItems,
	        itemLabel = _props9.itemLabel,
	        itemValue = _props9.itemValue,
	        isOpen = _props9.isOpen,
	        onChange = _props9.onChange,
	        id = _props9.id,
	        name = _props9.name;
	    var lastSearch = _this2.state.lastSearch;

	    var match = -1;
	    var search = ('' + (lastSearch || '') + letter).toUpperCase();
	    menuItems.some(function (item, index) {
	      if (item && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && item.disabled) {
	        return false;
	      }

	      var label = String(_this2._getItemPart(item, itemLabel, itemValue, true));
	      if (label && label.toUpperCase().replace(/\s/g, '').indexOf(search) === 0) {
	        match = index;
	      }

	      return match > -1;
	    });

	    var state = {
	      match: match,
	      lastSearch: search
	    };

	    if (match !== -1) {
	      var activeItem = menuItems[match];
	      state.activeLabel = _this2._getItemPart(activeItem, itemLabel, itemValue, true);
	      state.activeIndex = match;

	      var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(_this2.props, _this2.state, 'visible');
	      if (visible) {
	        if (state.match !== _this2.state.match) {
	          _this2._attemptItemFocus(state.activeIndex);
	        }
	      } else {
	        var value = _this2._getItemPart(activeItem, itemLabel, itemValue);
	        var prevValue = (0, _getField2.default)(_this2.props, _this2.state, 'value');

	        if (value !== prevValue && onChange) {
	          onChange(value, match, e, { id: id, name: name, value: value });
	        }

	        if (typeof _this2.props.value === 'undefined') {
	          state.value = value;
	        }
	      }
	    }

	    _this2.setState(state);
	  };

	  this._reduceItems = function (items, item, i) {
	    if (item === null) {
	      return items;
	    } else if (_react2.default.isValidElement(item)) {
	      items.push(item);
	      return items;
	    }

	    var _props10 = _this2.props,
	        getItemProps = _props10.getItemProps,
	        id = _props10.id,
	        itemLabel = _props10.itemLabel,
	        itemProps = _props10.itemProps,
	        itemValue = _props10.itemValue,
	        position = _props10.position,
	        stripActiveItem = _props10.stripActiveItem;

	    var below = position === SelectField.Positions.BELOW;
	    var value = (0, _getField2.default)(_this2.props, _this2.state, 'value');

	    var dataValue = _this2._getItemPart(item, itemLabel, itemValue);
	    var primaryText = _this2._getItemPart(item, itemLabel, itemValue, true);

	    var active = dataValue === value || dataValue === parseFloat(value);
	    var stripped = (typeof stripActiveItem !== 'undefined' ? stripActiveItem : below) && active;
	    if (!stripped) {
	      var objectType = (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object';
	      var props = objectType ? (0, _omit2.default)(item, _this2._deleteKeys) : {};
	      var disabled = props.disabled || false;
	      props.ref = disabled ? null : _this2._setListItem;
	      props.id = active ? id + '-options-active' : null;
	      props.active = active;
	      props.tabIndex = -1;
	      props.primaryText = primaryText;
	      props.key = item.key || dataValue;
	      props.role = 'option';
	      props['data-id'] = disabled ? null : i;
	      props['data-value'] = disabled ? null : dataValue;

	      var getProps = objectType && item[itemProps] || getItemProps;
	      if (typeof getProps === 'function') {
	        Object.assign(props, getProps({
	          index: i,
	          active: active,
	          disabled: disabled,
	          itemValue: itemValue,
	          value: value,
	          props: props,
	          item: item,
	          field: _this2
	        }));
	      }

	      items.push(_react2.default.createElement(_ListItem2.default, props));
	    }

	    return items;
	  };
	};

	exports.default = SelectField;

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _addSuffix = __webpack_require__(362);

	var _addSuffix2 = _interopRequireDefault(_addSuffix);

	var _isValued = __webpack_require__(360);

	var _isValued2 = _interopRequireDefault(_isValued);

	var _FloatingLabel = __webpack_require__(363);

	var _FloatingLabel2 = _interopRequireDefault(_FloatingLabel);

	var _TextFieldMessage = __webpack_require__(364);

	var _TextFieldMessage2 = _interopRequireDefault(_TextFieldMessage);

	var _SelectFieldInput = __webpack_require__(399);

	var _SelectFieldInput2 = _interopRequireDefault(_SelectFieldInput);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SelectFieldToggle = function (_PureComponent) {
	  _inherits(SelectFieldToggle, _PureComponent);

	  function SelectFieldToggle() {
	    _classCallCheck(this, SelectFieldToggle);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  SelectFieldToggle.prototype.render = function render() {
	    var _props = this.props,
	        id = _props.id,
	        style = _props.style,
	        className = _props.className,
	        inputStyle = _props.inputStyle,
	        inputClassName = _props.inputClassName,
	        required = _props.required,
	        disabled = _props.disabled,
	        active = _props.active,
	        error = _props.error,
	        errorText = _props.errorText,
	        helpText = _props.helpText,
	        helpOnFocus = _props.helpOnFocus,
	        visible = _props.visible,
	        activeLabel = _props.activeLabel,
	        propLabel = _props.label,
	        propPlaceholder = _props.placeholder,
	        props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'inputStyle', 'inputClassName', 'required', 'disabled', 'active', 'error', 'errorText', 'helpText', 'helpOnFocus', 'visible', 'activeLabel', 'label', 'placeholder']);

	    var _props2 = this.props,
	        label = _props2.label,
	        placeholder = _props2.placeholder;

	    if (required) {
	      if (label) {
	        label = (0, _addSuffix2.default)(label, '*');
	      }

	      if (placeholder && !label) {
	        placeholder = (0, _addSuffix2.default)(placeholder, '*');
	      }
	    }

	    return _react2.default.createElement(
	      'div',
	      { style: style, className: (0, _classnames2.default)('md-select-field__toggle', className) },
	      _react2.default.createElement(_FloatingLabel2.default, {
	        label: label,
	        htmlFor: id,
	        active: active || visible,
	        error: error,
	        floating: (0, _isValued2.default)(activeLabel) || active || visible,
	        disabled: disabled
	      }),
	      _react2.default.createElement(_SelectFieldInput2.default, _extends({}, props, {
	        id: id,
	        style: inputStyle,
	        className: inputClassName,
	        label: label,
	        placeholder: placeholder,
	        activeLabel: activeLabel,
	        active: active,
	        error: error,
	        disabled: disabled
	      })),
	      _react2.default.createElement(_TextFieldMessage2.default, {
	        active: active || visible,
	        error: error,
	        errorText: errorText,
	        helpText: helpText,
	        helpOnFocus: helpOnFocus,
	        leftIcon: false,
	        rightIcon: false
	      })
	    );
	  };

	  return SelectFieldToggle;
	}(_react.PureComponent);

	SelectFieldToggle.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  inputStyle: _propTypes2.default.object,
	  inputClassName: _propTypes2.default.string,
	  activeLabel: _propTypes2.default.node,
	  value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  required: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  label: _propTypes2.default.string,
	  placeholder: _propTypes2.default.string,
	  active: _propTypes2.default.bool,
	  error: _propTypes2.default.bool,
	  errorText: _propTypes2.default.node,
	  helpText: _propTypes2.default.node,
	  helpOnFocus: _propTypes2.default.bool,
	  below: _propTypes2.default.bool,
	  visible: _propTypes2.default.bool
	};
	exports.default = SelectFieldToggle;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _CSSTransitionGroupTick = __webpack_require__(280);

	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _AccessibleFakeInkedButton = __webpack_require__(339);

	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);

	var _IconSeparator = __webpack_require__(284);

	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);

	var _Paper = __webpack_require__(256);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _TextFieldDivider = __webpack_require__(369);

	var _TextFieldDivider2 = _interopRequireDefault(_TextFieldDivider);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SelectFieldInput = function (_PureComponent) {
	  _inherits(SelectFieldInput, _PureComponent);

	  function SelectFieldInput() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, SelectFieldInput);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { transition: null }, _this._timeout = null, _this._transitionNewValue = function () {
	      var _this$props = _this.props,
	          transitionTime = _this$props.transitionTime,
	          transitionName = _this$props.transitionName;

	      if (_this._timeout) {
	        clearTimeout(_this._timeout);
	      }

	      _this._timeout = setTimeout(function () {
	        _this._timeout = setTimeout(function () {
	          _this._timeout = null;
	          _this.setState({ transition: null });
	        }, transitionTime);

	        _this.setState({ transition: _this.state.transition + ' ' + transitionName + '-enter-active' });
	      }, _CSSTransitionGroupTick2.default);

	      _this.setState({ transition: transitionName + '-enter' });
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  SelectFieldInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.value !== nextProps.value) {
	      this._transitionNewValue();
	    }
	  };

	  SelectFieldInput.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }
	  };

	  SelectFieldInput.prototype.render = function render() {
	    var _props = this.props,
	        id = _props.id,
	        className = _props.className,
	        name = _props.name,
	        value = _props.value,
	        label = _props.label,
	        placeholder = _props.placeholder,
	        active = _props.active,
	        activeLabel = _props.activeLabel,
	        error = _props.error,
	        disabled = _props.disabled,
	        required = _props.required,
	        toolbar = _props.toolbar,
	        below = _props.below,
	        lineDirection = _props.lineDirection,
	        dropdownIcon = _props.dropdownIcon,
	        iconChildren = _props.iconChildren,
	        iconClassName = _props.iconClassName,
	        transitionName = _props.transitionName,
	        transitionTime = _props.transitionTime,
	        props = _objectWithoutProperties(_props, ['id', 'className', 'name', 'value', 'label', 'placeholder', 'active', 'activeLabel', 'error', 'disabled', 'required', 'toolbar', 'below', 'lineDirection', 'dropdownIcon', 'iconChildren', 'iconClassName', 'transitionName', 'transitionTime']);

	    var transition = this.state.transition;


	    var divider = void 0;
	    if (!below && !toolbar) {
	      divider = _react2.default.createElement(_TextFieldDivider2.default, {
	        key: 'text-divider',
	        active: active,
	        error: error,
	        lineDirection: lineDirection,
	        className: 'md-divider--select-field'
	      });
	    }

	    var visibleLabel = activeLabel;
	    if (!activeLabel && activeLabel !== 0) {
	      visibleLabel = (!label || active) && placeholder || '';
	    }

	    var labelActive = !!activeLabel || activeLabel === 0;

	    var icon = dropdownIcon;
	    if (iconClassName || iconChildren) {
	      icon = _react2.default.createElement(
	        _FontIcon2.default,
	        { iconClassName: iconClassName },
	        iconChildren
	      );
	    }
	    icon = _react2.default.cloneElement(icon, { disabled: disabled });

	    return _react2.default.createElement(
	      _AccessibleFakeInkedButton2.default,
	      _extends({}, props, {
	        id: id + '-toggle',
	        role: 'listbox',
	        disabled: disabled,
	        component: _Paper2.default,
	        zDepth: below && active ? 1 : 0,
	        inkDisabled: !below,
	        className: (0, _classnames2.default)('md-select-field', (0, _themeColors2.default)({
	          disabled: disabled,
	          hint: !labelActive && placeholder,
	          text: labelActive
	        }), className)
	      }),
	      _react2.default.createElement(
	        _IconSeparator2.default,
	        {
	          label: visibleLabel,
	          labelClassName: transition,
	          className: (0, _classnames2.default)('md-text-field', {
	            'md-text-field--margin': !below && !label,
	            'md-text-field--floating-margin': label,
	            'md-text-field--toolbar': toolbar && !below,
	            'md-select-field--text-field': !below,
	            'md-select-field--btn': below
	          })
	        },
	        icon
	      ),
	      divider,
	      _react2.default.createElement('input', {
	        key: 'value',
	        type: 'hidden',
	        id: id,
	        name: name,
	        value: value,
	        required: required,
	        disabled: disabled
	      })
	    );
	  };

	  return SelectFieldInput;
	}(_react.PureComponent);

	SelectFieldInput.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  name: _propTypes2.default.string,
	  value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	  disabled: _propTypes2.default.bool,
	  required: _propTypes2.default.bool,
	  label: _propTypes2.default.node,
	  placeholder: _propTypes2.default.string,
	  active: _propTypes2.default.bool,
	  activeLabel: _propTypes2.default.node,
	  below: _propTypes2.default.bool,
	  error: _propTypes2.default.bool,
	  toolbar: _propTypes2.default.bool,
	  dropdownIcon: _propTypes2.default.element,
	  iconClassName: _propTypes2.default.string,
	  iconChildren: _propTypes2.default.node,
	  transitionName: _propTypes2.default.string.isRequired,
	  transitionTime: _propTypes2.default.number.isRequired,
	  lineDirection: _TextFieldDivider2.default.propTypes.lineDirection
	};
	SelectFieldInput.defaultProps = {
	  transitionName: 'md-drop',
	  transitionTime: 300
	};
	exports.default = SelectFieldInput;

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _keyCodes = __webpack_require__(279);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _viewport = __webpack_require__(354);

	var _viewport2 = _interopRequireDefault(_viewport);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _anchorShape = __webpack_require__(332);

	var _anchorShape2 = _interopRequireDefault(_anchorShape);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _positionShape = __webpack_require__(336);

	var _positionShape2 = _interopRequireDefault(_positionShape);

	var _Layover = __webpack_require__(349);

	var _Layover2 = _interopRequireDefault(_Layover);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _TextField = __webpack_require__(359);

	var _TextField2 = _interopRequireDefault(_TextField);

	var _TableColumn = __webpack_require__(395);

	var _TableColumn2 = _interopRequireDefault(_TableColumn);

	var _EditDialog = __webpack_require__(401);

	var _EditDialog2 = _interopRequireDefault(_EditDialog);

	var _findTable = __webpack_require__(394);

	var _findTable2 = _interopRequireDefault(_findTable);

	var _findFixedTo = __webpack_require__(407);

	var _findFixedTo2 = _interopRequireDefault(_findFixedTo);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `EditDialogColumn` is used when there should be used when a table column's value
	 * can be changed. It can either be displayed as a dialog or inline.
	 *
	 * All props that are not documented but provided will be passed on to the `TextField`
	 * component.
	 */
	var EditDialogColumn = function (_PureComponent) {
	  _inherits(EditDialogColumn, _PureComponent);

	  function EditDialogColumn(props) {
	    _classCallCheck(this, EditDialogColumn);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    _this.state = {
	      visible: props.defaultVisible,
	      value: props.defaultValue,
	      cancelValue: props.defaultValue,
	      actions: _this._makeActions(props),
	      cellIndex: undefined
	    };
	    return _this;
	  }

	  EditDialogColumn.prototype.componentDidMount = function componentDidMount() {
	    this._column = (0, _reactDom.findDOMNode)(this);
	    this._table = (0, _findTable2.default)(this._column);
	    this._fixedTo = (0, _findFixedTo2.default)(this._table);

	    // If a developer creates their own component to wrap the EditDialogColumn, the cellIndex prop
	    // might not be defined if they don't pass ...props
	    var cellIndex = this.props.cellIndex;

	    if (!cellIndex && cellIndex !== 0) {
	      var columns = [].slice.call(this._column.parentNode.querySelectorAll('th,td'));
	      this.setState({ cellIndex: columns.indexOf(this._column) }); // eslint-disable-line react/no-did-mount-set-state
	    }
	  };

	  EditDialogColumn.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        okLabel = _props.okLabel,
	        okPrimary = _props.okPrimary,
	        okSecondary = _props.okSecondary,
	        okProps = _props.okProps,
	        cancelLabel = _props.cancelLabel,
	        cancelPrimary = _props.cancelPrimary,
	        cancelSecondary = _props.cancelSecondary,
	        cancelProps = _props.cancelProps;


	    if (okLabel !== nextProps.okLabel || okPrimary !== nextProps.okPrimary || okSecondary !== nextProps.okSecondary || cancelLabel !== nextProps.cancelLabel || cancelPrimary !== nextProps.cancelPrimary || cancelSecondary !== nextProps.cancelSecondary || okProps !== nextProps.okProps || cancelProps !== nextProps.cancelProps) {
	      this.setState({ actions: this._makeActions(nextProps) });
	    }
	  };

	  EditDialogColumn.prototype.render = function render() {
	    var rowId = this.context.rowId;

	    var _props2 = this.props,
	        style = _props2.style,
	        className = _props2.className,
	        layoverStyle = _props2.layoverStyle,
	        layoverClassName = _props2.layoverClassName,
	        dialogStyle = _props2.dialogStyle,
	        dialogClassName = _props2.dialogClassName,
	        dialogContentStyle = _props2.dialogContentStyle,
	        dialogContentClassName = _props2.dialogContentClassName,
	        dialogZDepth = _props2.dialogZDepth,
	        textFieldStyle = _props2.textFieldStyle,
	        textFieldClassName = _props2.textFieldClassName,
	        inputClassName = _props2.inputClassName,
	        large = _props2.large,
	        title = _props2.title,
	        inline = _props2.inline,
	        inlineIcon = _props2.inlineIcon,
	        maxLength = _props2.maxLength,
	        label = _props2.label,
	        placeholder = _props2.placeholder,
	        header = _props2.header,
	        anchor = _props2.anchor,
	        belowAnchor = _props2.belowAnchor,
	        fixedTo = _props2.fixedTo,
	        animationPosition = _props2.animationPosition,
	        xThreshold = _props2.xThreshold,
	        yThreshold = _props2.yThreshold,
	        centered = _props2.centered,
	        sameWidth = _props2.sameWidth,
	        repositionOnScroll = _props2.repositionOnScroll,
	        repositionOnResize = _props2.repositionOnResize,
	        transitionName = _props2.transitionName,
	        transitionEnterTimeout = _props2.transitionEnterTimeout,
	        transitionLeaveTimeout = _props2.transitionLeaveTimeout,
	        tooltipLabel = _props2.tooltipLabel,
	        tooltipDelay = _props2.tooltipDelay,
	        tooltipPosition = _props2.tooltipPosition,
	        onClick = _props2.onClick,
	        onMouseDown = _props2.onMouseDown,
	        onMouseUp = _props2.onMouseUp,
	        onTouchStart = _props2.onTouchStart,
	        onTouchEnd = _props2.onTouchEnd,
	        onMouseEnter = _props2.onMouseEnter,
	        onMouseOver = _props2.onMouseOver,
	        onMouseLeave = _props2.onMouseLeave,
	        onTouchMove = _props2.onTouchMove,
	        simplifiedDialog = _props2.simplifiedDialog,
	        minLeft = _props2.minLeft,
	        minRight = _props2.minRight,
	        minBottom = _props2.minBottom,
	        noIcon = _props2.noIcon,
	        inlineIconChildren = _props2.inlineIconChildren,
	        inlineIconClassName = _props2.inlineIconClassName,
	        propId = _props2.id,
	        propDialogId = _props2.dialogId,
	        propCellIndex = _props2.cellIndex,
	        onOkClick = _props2.onOkClick,
	        okLabel = _props2.okLabel,
	        okPrimary = _props2.okPrimary,
	        okSecondary = _props2.okSecondary,
	        okProps = _props2.okProps,
	        onCancelClick = _props2.onCancelClick,
	        cancelLabel = _props2.cancelLabel,
	        cancelPrimary = _props2.cancelPrimary,
	        cancelSecondary = _props2.cancelSecondary,
	        cancelProps = _props2.cancelProps,
	        okOnOutsideClick = _props2.okOnOutsideClick,
	        defaultValue = _props2.defaultValue,
	        adjusted = _props2.adjusted,
	        scrollIntoView = _props2.scrollIntoView,
	        scrollIntoViewPadding = _props2.scrollIntoViewPadding,
	        defaultVisible = _props2.defaultVisible,
	        visibleOnFocus = _props2.visibleOnFocus,
	        scrollThreshold = _props2.scrollThreshold,
	        enforceMinWidth = _props2.enforceMinWidth,
	        transitionDuration = _props2.transitionDuration,
	        props = _objectWithoutProperties(_props2, ['style', 'className', 'layoverStyle', 'layoverClassName', 'dialogStyle', 'dialogClassName', 'dialogContentStyle', 'dialogContentClassName', 'dialogZDepth', 'textFieldStyle', 'textFieldClassName', 'inputClassName', 'large', 'title', 'inline', 'inlineIcon', 'maxLength', 'label', 'placeholder', 'header', 'anchor', 'belowAnchor', 'fixedTo', 'animationPosition', 'xThreshold', 'yThreshold', 'centered', 'sameWidth', 'repositionOnScroll', 'repositionOnResize', 'transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'tooltipLabel', 'tooltipDelay', 'tooltipPosition', 'onClick', 'onMouseDown', 'onMouseUp', 'onTouchStart', 'onTouchEnd', 'onMouseEnter', 'onMouseOver', 'onMouseLeave', 'onTouchMove', 'simplifiedDialog', 'minLeft', 'minRight', 'minBottom', 'noIcon', 'inlineIconChildren', 'inlineIconClassName', 'id', 'dialogId', 'cellIndex', 'onOkClick', 'okLabel', 'okPrimary', 'okSecondary', 'okProps', 'onCancelClick', 'cancelLabel', 'cancelPrimary', 'cancelSecondary', 'cancelProps', 'okOnOutsideClick', 'defaultValue', 'adjusted', 'scrollIntoView', 'scrollIntoViewPadding', 'defaultVisible', 'visibleOnFocus', 'scrollThreshold', 'enforceMinWidth', 'transitionDuration']);

	    var _state = this.state,
	        visible = _state.visible,
	        actions = _state.actions;

	    var value = (0, _getField2.default)(this.props, this.state, 'value');
	    var cellIndex = (0, _getField2.default)(this.props, this.state, 'cellIndex');

	    var _props3 = this.props,
	        id = _props3.id,
	        dialogId = _props3.dialogId;

	    if (!dialogId) {
	      dialogId = (id || rowId + '-' + cellIndex) + '-edit-dialog';
	    }

	    if (!id) {
	      id = dialogId + '-field';
	    }

	    var inlineEditIcon = void 0;
	    if (inline && !noIcon) {
	      var icon = (0, _getDeprecatedIcon2.default)(inlineIconClassName, inlineIconChildren, inlineIcon);
	      if (icon) {
	        inlineEditIcon = _react2.default.cloneElement(icon, { key: 'edit-icon' });
	      }
	    }

	    var numeric = props.type === 'number';
	    var field = _react2.default.createElement(_TextField2.default, _extends({}, props, {
	      ref: this._setField,
	      style: textFieldStyle,
	      className: (0, _classnames2.default)({ 'md-edit-dialog__blocked-field': inline }, textFieldClassName),
	      inputClassName: (0, _classnames2.default)({
	        'md-edit-dialog__header': header && inline,
	        'md-text-right': numeric
	      }, (0, _themeColors2.default)({ hint: header && inline }), inputClassName),
	      id: id,
	      label: label,
	      placeholder: placeholder,
	      value: value,
	      onFocus: this._handleFocus,
	      onChange: this._handleChange,
	      onKeyDown: this._handleKeyDown,
	      block: inline,
	      maxLength: visible ? maxLength : null,
	      rightIcon: inlineEditIcon
	    }));

	    var children = void 0;
	    if (inline) {
	      children = field;
	    } else {
	      var dialogLabel = value || value === 0 ? value : placeholder || label;
	      children = _react2.default.createElement(
	        _EditDialog2.default,
	        {
	          style: layoverStyle,
	          className: layoverClassName,
	          dialogStyle: dialogStyle,
	          dialogClassName: dialogClassName,
	          dialogContentStyle: dialogContentStyle,
	          dialogContentClassName: dialogContentClassName,
	          id: dialogId,
	          textFieldId: id,
	          visible: visible,
	          onOpen: this._handleOpen,
	          onClose: this._handleClose,
	          label: dialogLabel,
	          actions: actions,
	          large: large,
	          title: title,
	          header: header,
	          placeholder: dialogLabel === placeholder || dialogLabel === label,
	          simplified: simplifiedDialog,
	          anchor: anchor,
	          belowAnchor: belowAnchor,
	          animationPosition: animationPosition,
	          xThreshold: xThreshold,
	          yThreshold: yThreshold,
	          centered: centered,
	          sameWidth: sameWidth,
	          minLeft: minLeft,
	          minRight: minRight,
	          minBottom: minBottom,
	          fixedTo: typeof fixedTo !== 'undefined' ? fixedTo : this._fixedTo,
	          dialogZDepth: dialogZDepth,
	          repositionOnScroll: repositionOnScroll,
	          repositionOnResize: repositionOnResize,
	          transitionName: transitionName,
	          transitionEnterTimeout: transitionEnterTimeout,
	          transitionLeaveTimeout: transitionLeaveTimeout
	        },
	        field
	      );
	    }

	    return _react2.default.createElement(
	      _TableColumn2.default,
	      {
	        style: style,
	        numeric: numeric,
	        className: (0, _classnames2.default)('md-edit-dialog-column', className),
	        header: header,
	        adjusted: false,
	        tooltipLabel: tooltipLabel,
	        tooltipDelay: tooltipDelay,
	        tooltipPosition: tooltipPosition,
	        onClick: onClick,
	        onMouseDown: onMouseDown,
	        onMouseUp: onMouseUp,
	        onTouchStart: onTouchStart,
	        onTouchMove: onTouchMove,
	        onMouseEnter: onMouseEnter,
	        onMouseOver: onMouseOver,
	        onMouseLeave: onMouseLeave,
	        onTouchEnd: onTouchEnd
	      },
	      children
	    );
	  };

	  return EditDialogColumn;
	}(_react.PureComponent);

	EditDialogColumn.VerticalAnchors = _Layover2.default.VerticalAnchors;
	EditDialogColumn.HorizontalAnchors = _Layover2.default.HorizontalAnchors;
	EditDialogColumn.Positions = _Layover2.default.Positions;
	EditDialogColumn.propTypes = {
	  /**
	   * An optional id to use for the text field in the column. If this is omitted,
	   * the id will be `${dialogId}-field`.
	   *
	   * @see {@link #dialogId}
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to use for the dialog that appears in the column. If this is omitted,
	   * the id will be `${rowId}-${cellIndex}-edit-dialog-field`.
	   */
	  dialogId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * The optional style to apply to the edit dialog's column.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * The optional className to apply to the edit dialog's column.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the dialog's surrounding `Layover` component.
	   */
	  layoverStyle: _propTypes2.default.object,

	  /**
	   * An optional className to the dialog's surrounding `Layover` component.
	   */
	  layoverClassName: _propTypes2.default.string,

	  /**
	   * The optional style to apply to the edit dialog.
	   */
	  dialogStyle: _propTypes2.default.object,

	  /**
	   * The optional className to apply to the edit dialog.
	   */
	  dialogClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the dialog's content area. This is the area
	   * that holds the text field.
	   */
	  dialogContentStyle: _propTypes2.default.object,

	  /**
	   * An optional class name to apply to the dialog's content area. This is the area
	   * that holds the text field.
	   */
	  dialogContentClassName: _propTypes2.default.string,

	  /**
	   * The zDepth to apply to the dialog when not inline.
	   *
	   * @see {@link Papers/Paper#zDepth}
	   */
	  dialogZDepth: _propTypes2.default.number.isRequired,

	  /**
	   * An optional style to apply to the text field.
	   */
	  textFieldStyle: _propTypes2.default.object,

	  /**
	   * An optional class name to apply to the text field.
	   */
	  textFieldClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the text field's input.
	   */
	  inputStyle: _propTypes2.default.object,

	  /**
	   * An optional class name to apply to the text field's input.
	   */
	  inputClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the edit dialog is currently disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * Boolean if the text field should be editable inline instead of in a dialog.
	   *
	   * @see {@link #inlineIcon}
	   */
	  inline: _propTypes2.default.bool,

	  /**
	   * An optional icon to set for the inline edit dialog column. Setting this prop to null
	   * will not render an icon.
	   */
	  inlineIcon: _propTypes2.default.element,

	  /**
	   * The default value to use for the text field.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,

	  /**
	   * A value to use for the edit dialog text field. This will make the component controlled
	   * so you will need to provide an `onChange` function.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), 'onChange', 'defaultValue'),

	  /**
	   * An optional function to call when the text field's value has changed. This is required
	   * if the `value` prop has been defined.
	   *
	   * @see {@link TextFields/TextField#onChange}
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * An optional function to call when the text field gains focus.
	   */
	  onFocus: _propTypes2.default.func,

	  /**
	   * An optional function to call when the keydown event is triggered on the text field.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * An optional label for the text field. When displaying an `inline` edit dialog column,
	   * the `placeholder` prop should be used instead. This is because the text field changes
	   * to the `block` type when `inline`.
	   *
	   * @see {@link #inline}
	   * @see {@link #placeholder}
	   * @see {@link TextFields/TextField#block}
	   */
	  label: _propTypes2.default.node,

	  /**
	   * An optional placeholder for the text field.
	   */
	  placeholder: _propTypes2.default.string,

	  /**
	   * Boolean if the edit dialog should become a large dialog. When the dialog is large,
	   * the `title` prop is required.
	   *
	   * A large dialog has a Title followed by the text field, and then a cancel and ok action
	   * buttons below.
	   */
	  large: _propTypes2.default.bool,

	  /**
	   * The title to use for the large edit dialog. This prop is required if the `large` prop
	   * is enabled.
	   */
	  title: _propTypes2.default.node,

	  /**
	   * An optional `maxLength` to apply to the text field.
	   *
	   * @see {@link TextFields/TextField#maxLength}
	   */
	  maxLength: _propTypes2.default.number,

	  /**
	   * An optional function to call when the "Ok" button has been clicked, the user presses enter
	   * on * the text field or when the `okOnOutsideClick` prop has been enabled and the user clicks
	   * somewhere on the page.
	   *
	   * The callback will include the current value and the click or keypress event.
	   * ```js
	   * onOkClick(value, event)
	   * ```
	   *
	   * @see {@link #large}
	   */
	  onOkClick: _propTypes2.default.func,

	  /**
	   * The label to use for the "Ok" button in large dialogs.
	   *
	   * @see {@link #large}
	   */
	  okLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the "Ok" button in large dialogs should be styled with the primary color.
	   * To get a `default` styled button, set both `okPrimary` and `okSecondary` (or omit `okSecondary`)
	   * to `false`.
	   *
	   * @see {@link #large}
	   * @see {@link #okSecondary}
	   */
	  okPrimary: _propTypes2.default.bool,

	  /**
	   * Boolean if the "Ok" button in large dialogs should be styled with the secondary color.
	   *
	   * @see {@link #large}
	   * @see {@link #okPrimary}
	   */
	  okSecondary: _propTypes2.default.bool,

	  /**
	   * Any additional props to apply to the "Ok" button. This will override any of the other
	   * button props.
	   *
	   * @see {@link #okLabel}
	   * @see {@link #okPrimary}
	   * @see {@link #okSecondary}
	   */
	  okProps: _propTypes2.default.object,

	  /**
	   * An optional function to call when the "Cancel" button has been clicked in large edit dialogs.
	   * The callback will include the text field's value before any edits occurred and the click event.
	   *
	   * ```js
	   * onCancelClick(previousValue, event)
	   * ```
	   *
	   * @see {@link #large}
	   */
	  onCancelClick: _propTypes2.default.func,

	  /**
	   * The label to give to the "Cancel" button in large edit dialogs.
	   *
	   * @see {@link #large}
	   */
	  cancelLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the "Cancel" button in large dialogs should be styled with the primary color.
	   * To get a `default` styled button, set both `cancelPrimary` and `cancelSecondary` (or
	   * omit `cancelSecondary`) to `false`.
	   *
	   * @see {@link #large}
	   * @see {@link #cancelSecondary}
	   */
	  cancelPrimary: _propTypes2.default.bool,

	  /**
	   * Boolean if the "Cancel" button in large dialogs should be styled with the secondary color.
	   *
	   * @see {@link #large}
	   * @see {@link #cancelPrimary}
	   */
	  cancelSecondary: _propTypes2.default.bool,

	  /**
	   * Any additional props to apply to the "Cancel" button. This will override any of the other
	   * button props.
	   *
	   * @see {@link #cancelLabel}
	   * @see {@link #cancelPrimary}
	   * @see {@link #cancelSecondary}
	   */
	  cancelProps: _propTypes2.default.object,

	  /**
	   * Boolean if the action for clicking somewhere on on the page while the dialog is open
	   * saves the changes or cancels to the previous value before opening the dialog.
	   *
	   * @see {@link #onOkClick}
	   * @see {@link #onCancelClick}
	   */
	  okOnOutsideClick: _propTypes2.default.bool,

	  /**
	   * An optional function to call when a user clicks out of the text field.
	   */
	  onOutsideClick: _propTypes2.default.func,

	  /**
	   * Boolean if the edit dialog should be closed if the user clicks somewhere else on the page
	   * while the dialog is open.
	   */
	  closeOnOutsideClick: _propTypes2.default.bool,

	  /**
	   * Boolean if the Edit Dialog should be visible by default. This only applies when the `inline` prop
	   * is not enabled.
	   */
	  defaultVisible: _propTypes2.default.bool,

	  /**
	   * Boolean if the edit dialog should automatically open when the text field is focused for non-inline
	   * dialogs. This is enabled by default for backwards compatibility.
	   */
	  visibleOnFocus: _propTypes2.default.bool,

	  /**
	   * The type for the text field in the edit dialog.
	   *
	   * @see {@link TextFields/TextField#type}
	   */
	  type: _propTypes2.default.string,

	  /**
	   * This is how the dialog gets "anchored" to the table column.
	   *
	   * @see {@link Helpers/Layover#anchor}
	   */
	  anchor: _anchorShape2.default,

	  /**
	   * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.
	   *
	   * @see {@link Helpers/Layover#belowAnchor}
	   */
	  belowAnchor: _anchorShape2.default,

	  /**
	   * This is the animation position to use for the dialog.
	   *
	   * @see {@link Helpers/Layover#animationPosition}
	   */
	  animationPosition: _positionShape2.default,

	  /**
	   * This is how the dialog should be fixed within the table. When this is omitted, it will
	   * automatically use the responsive table as the fixture so that the dialog will close/adjust itself
	   * to the scrolling of the table.
	   *
	   * @see {@link Helpers/Layover#fixedTo}
	   */
	  fixedTo: _fixedToShape2.default,

	  /**
	   * @see {@link Helpers/Layover#xThreshold}
	   */
	  xThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#yThreshold}
	   */
	  yThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#centered}
	   */
	  centered: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#sameWidth}
	   */
	  sameWidth: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#transitionName}
	   */
	  transitionName: _propTypes2.default.string,

	  /**
	   * @see {@link Helpers/Layover#transitionEnterTimeout}
	   */
	  transitionEnterTimeout: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/Layover#transitionLeaveTimeout}
	   */
	  transitionLeaveTimeout: _propTypes2.default.number,

	  /**
	   * The optional tooltip to render on hover.
	   */
	  tooltipLabel: _propTypes2.default.node,

	  /**
	   * An optional delay to apply to the tooltip before it appears.
	   */
	  tooltipDelay: _propTypes2.default.number,

	  /**
	   * The position of the tooltip.
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the `fixedTo` element scrolls.
	   *
	   * @see {@link Helpers/Layover#repositionOnScroll}
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the window resizes.
	   *
	   * @see {@link Helpers/Layover#repositionOnResize}
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * Boolean if the dialog logic should be simplified without any viewport logic and position
	   * based on the relative position of the menu. This will most like require some additional
	   * styles applied to the dialog.
	   *
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplifiedDialog: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#minLeft}
	   */
	  minLeft: _Layover2.default.propTypes.minLeft,

	  /**
	   * @see {@link Helpers/Layover#minRight}
	   */
	  minRight: _Layover2.default.propTypes.minLeft,

	  /**
	   * @see {@link Helpers/Layover#minBottom}
	   */
	  minBottom: _Layover2.default.propTypes.minBottom,

	  /**
	   * Boolean if the edit dialog should attempt to scroll into view if the full
	   * dialog can not be displayed in the viewport when it was toggled open.
	   *
	   * @see {@link #scrollIntoViewPadding}
	   */
	  scrollIntoView: _propTypes2.default.bool,

	  /**
	   * The amount of padding that should be applied when the cell is scrolled into view.
	   * This will be applied to the left of the cell.
	   */
	  scrollIntoViewPadding: _propTypes2.default.number,

	  /**
	   * An optional function to call when the `click` event is triggered in the column.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mousedown` event is triggered in the column.
	   */
	  onMouseDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseup` event is triggered in the column.
	   */
	  onMouseUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `touchstart` event is triggered in the column.
	   */
	  onTouchStart: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `touchend` event is triggered in the column.
	   */
	  onTouchEnd: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseenter` event is triggered in the column.
	   */
	  onMouseEnter: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseover` event is triggered in the column.
	   */
	  onMouseOver: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseleave` event is triggered in the column.
	   */
	  onMouseLeave: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `touchmove` event is triggered in the column.
	   */
	  onTouchMove: _propTypes2.default.func,

	  /**
	   * This is injected by the `TableRow` component.
	   * @access private
	   */
	  header: _propTypes2.default.bool,

	  /**
	   * This is injected by the `TableRow` component and used to help generate the unique id for the text
	   * field.
	   *
	   * @access private
	   */
	  cellIndex: _propTypes2.default.number,

	  /**
	   * @access private
	   */
	  adjusted: _propTypes2.default.bool,

	  inlineIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `inlineIcon` prop instead'),
	  inlineIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `inlineIcon` prop instead'),
	  noIcon: (0, _deprecated2.default)(_propTypes2.default.bool, 'Set the `inlineIcon` prop to `null` instead'),
	  enforceMinWidth: (0, _deprecated2.default)(_propTypes2.default.bool, 'The min width will always be enforced based on the `$md-edit-dialog-min-width` Sass variable'),
	  scrollThreshold: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `xThreshold` and `yThreshold` instead'),
	  transitionDuration: (0, _deprecated2.default)(_propTypes2.default.number, 'use `transitionEnterTimeout` and `transitionLeaveTimeout` instead')
	};
	EditDialogColumn.defaultProps = {
	  type: 'text',
	  defaultValue: '',
	  okOnOutsideClick: true,
	  inlineIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'edit'
	  ),
	  okLabel: 'Save',
	  okPrimary: true,
	  cancelLabel: 'Cancel',
	  cancelPrimary: true,
	  animationPosition: EditDialogColumn.Positions.BELOW,
	  dialogZDepth: 1,
	  repositionOnScroll: true,
	  repositionOnResize: false,
	  scrollIntoView: true,
	  scrollIntoViewPadding: 16,
	  minLeft: 0,
	  minRight: 0,
	  minBottom: 0,
	  visibleOnFocus: true,
	  defaultVisible: false
	};
	EditDialogColumn.contextTypes = {
	  rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._setField = function (field) {
	    _this2._field = field;
	  };

	  this._makeActions = function (props) {
	    var okLabel = props.okLabel,
	        okPrimary = props.okPrimary,
	        okSecondary = props.okSecondary,
	        okProps = props.okProps,
	        cancelLabel = props.cancelLabel,
	        cancelPrimary = props.cancelPrimary,
	        cancelSecondary = props.cancelSecondary,
	        cancelProps = props.cancelProps;


	    return [_extends({
	      key: 'cancel',
	      children: cancelLabel,
	      primary: cancelPrimary && !cancelSecondary,
	      secondary: cancelSecondary
	    }, cancelProps, {
	      onClick: _this2._handleCancel
	    }), _extends({
	      key: 'ok',
	      children: okLabel,
	      primary: okPrimary && !okSecondary,
	      secondary: okSecondary
	    }, okProps, {
	      onClick: _this2._handleOk
	    })];
	  };

	  this._handleOpen = function (e) {
	    if (_this2._skipNextOpen) {
	      _this2._skipNextOpen = false;
	    } else if (_this2.props.visibleOnFocus || !e || e.type !== 'focus') {
	      var _props4 = _this2.props,
	          scrollIntoView = _props4.scrollIntoView,
	          scrollIntoViewPadding = _props4.scrollIntoViewPadding;

	      if (scrollIntoView) {
	        var vp = (0, _viewport2.default)(_this2._column);
	        if (vp !== true && _this2._table && _this2._column && !_this2.props.inline) {
	          _this2._table.scrollLeft = _this2._column.offsetLeft - scrollIntoViewPadding;
	        }
	      }

	      _this2.setState({ visible: true, cancelValue: (0, _getField2.default)(_this2.props, _this2.state, 'value') });
	    }
	  };

	  this._handleClose = function (e) {
	    var _props5 = _this2.props,
	        onOutsideClick = _props5.onOutsideClick,
	        okOnOutsideClick = _props5.okOnOutsideClick;

	    if (onOutsideClick) {
	      onOutsideClick(e);
	    }

	    if (okOnOutsideClick) {
	      _this2._handleOk(e);
	    } else {
	      _this2._handleCancel(e);
	    }
	  };

	  this._handleChange = function (value, e) {
	    if (_this2.props.onChange) {
	      _this2.props.onChange(value, e);
	    }

	    if (typeof _this2.props.value === 'undefined') {
	      _this2.setState({ value: value });
	    }
	  };

	  this._handleFocus = function (e) {
	    if (_this2.props.onFocus) {
	      _this2.props.onFocus(e);
	    }

	    if (_this2.props.inline) {
	      _this2.setState({ cancelValue: e.target.value });
	    }
	  };

	  this._handleKeyDown = function (e) {
	    var _props6 = _this2.props,
	        onKeyDown = _props6.onKeyDown,
	        okOnOutsideClick = _props6.okOnOutsideClick,
	        large = _props6.large;

	    if (onKeyDown) {
	      onKeyDown(e);
	    }

	    var key = e.which || e.keyCode;
	    if (key === _keyCodes.ENTER) {
	      _this2._handleOk(e);
	    } else if (key === _keyCodes.ESC) {
	      _this2._handleCancel(e);
	    } else if (key === _keyCodes.TAB && !large) {
	      // infinitely opens otherwise...
	      _this2._skipNextOpen = e.shiftKey;

	      if (okOnOutsideClick) {
	        _this2._handleOk(e);
	      } else {
	        _this2._handleCancel(e);
	      }
	    }
	  };

	  this._handleOk = function (e) {
	    if (_this2.props.onOkClick) {
	      _this2.props.onOkClick((0, _getField2.default)(_this2.props, _this2.state, 'value'), e);
	    }

	    _this2.setState({ visible: false });
	  };

	  this._handleCancel = function (e) {
	    var value = _this2.state.cancelValue;
	    if (_this2.props.onCancelClick) {
	      _this2.props.onCancelClick(value, e);
	    }

	    var state = { visible: false };
	    if (typeof _this2.props.value === 'undefined') {
	      state.value = value;
	    }

	    _this2.setState(state);
	  };
	};

	exports.default = EditDialogColumn;

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _AccessibleFakeButton = __webpack_require__(340);

	var _AccessibleFakeButton2 = _interopRequireDefault(_AccessibleFakeButton);

	var _Layover = __webpack_require__(349);

	var _Layover2 = _interopRequireDefault(_Layover);

	var _Dialog = __webpack_require__(402);

	var _Dialog2 = _interopRequireDefault(_Dialog);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var EditDialog = function (_PureComponent) {
	  _inherits(EditDialog, _PureComponent);

	  function EditDialog() {
	    _classCallCheck(this, EditDialog);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  EditDialog.prototype.render = function render() {
	    var _props = this.props,
	        id = _props.id,
	        dialogStyle = _props.dialogStyle,
	        dialogClassName = _props.dialogClassName,
	        dialogContentStyle = _props.dialogContentStyle,
	        dialogContentClassName = _props.dialogContentClassName,
	        textFieldId = _props.textFieldId,
	        visible = _props.visible,
	        header = _props.header,
	        onOpen = _props.onOpen,
	        children = _props.children,
	        label = _props.label,
	        title = _props.title,
	        large = _props.large,
	        actions = _props.actions,
	        placeholder = _props.placeholder,
	        dialogZDepth = _props.dialogZDepth,
	        props = _objectWithoutProperties(_props, ['id', 'dialogStyle', 'dialogClassName', 'dialogContentStyle', 'dialogContentClassName', 'textFieldId', 'visible', 'header', 'onOpen', 'children', 'label', 'title', 'large', 'actions', 'placeholder', 'dialogZDepth']);

	    var field = _react2.default.createElement(
	      _AccessibleFakeButton2.default,
	      {
	        className: (0, _classnames2.default)('md-edit-dialog__label', {
	          'md-edit-dialog__header': header
	        }, (0, _themeColors2.default)({ hint: placeholder || header })),
	        noFocusOutline: visible,
	        onClick: onOpen,
	        onFocus: onOpen
	      },
	      label
	    );

	    return _react2.default.createElement(
	      _Layover2.default,
	      _extends({}, props, {
	        id: id + '-layover',
	        toggle: field,
	        visible: visible,
	        block: true,
	        belowAnchor: null
	      }),
	      _react2.default.createElement(
	        _Dialog2.default,
	        {
	          id: id,
	          'aria-labelledby': !large ? textFieldId : undefined,
	          style: dialogStyle,
	          className: (0, _classnames2.default)('md-edit-dialog', (0, _themeColors2.default)({ background: true, themeText: false }), dialogClassName),
	          contentStyle: dialogContentStyle,
	          contentClassName: (0, _classnames2.default)('md-edit-dialog__content', dialogContentClassName),
	          title: large ? title : null,
	          focusOnMount: true,
	          containFocus: !!large,
	          paddedContent: false,
	          actions: large ? actions : null,
	          zDepth: dialogZDepth
	        },
	        children
	      )
	    );
	  };

	  return EditDialog;
	}(_react.PureComponent);

	EditDialog.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  textFieldId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  dialogStyle: _propTypes2.default.object,
	  dialogClassName: _propTypes2.default.string,
	  dialogContentStyle: _propTypes2.default.object,
	  dialogContentClassName: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  onOpen: _propTypes2.default.func.isRequired,
	  onClose: _propTypes2.default.func.isRequired,
	  visible: _propTypes2.default.bool.isRequired,
	  label: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	  placeholder: _propTypes2.default.bool,
	  title: _propTypes2.default.node,
	  large: _propTypes2.default.bool,
	  actions: _Dialog2.default.propTypes.actions,
	  dialogZDepth: _propTypes2.default.number,
	  header: _propTypes2.default.bool
	};
	exports.default = EditDialog;

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _oneRequiredForA11y = __webpack_require__(331);

	var _oneRequiredForA11y2 = _interopRequireDefault(_oneRequiredForA11y);

	var _FocusContainer = __webpack_require__(403);

	var _FocusContainer2 = _interopRequireDefault(_FocusContainer);

	var _ResizeObserver = __webpack_require__(357);

	var _ResizeObserver2 = _interopRequireDefault(_ResizeObserver);

	var _Paper = __webpack_require__(256);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _DialogTitle = __webpack_require__(405);

	var _DialogTitle2 = _interopRequireDefault(_DialogTitle);

	var _DialogFooter = __webpack_require__(406);

	var _DialogFooter2 = _interopRequireDefault(_DialogFooter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DIFF_KEYS = ['style', 'height', 'width', 'contentStyle'];

	/**
	 * The `Dialog` is just a static component for creating dialogs. Dialogs
	 * seemed like they could be used outside of the `DialogContainer` component,
	 * so it was exposed as well. In *most* cases, you will still want to use
	 * the `DialogContainer` component.
	 */

	var Dialog = function (_PureComponent) {
	  _inherits(Dialog, _PureComponent);

	  function Dialog(props) {
	    _classCallCheck(this, Dialog);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

	    _initialiseProps.call(_this);

	    var height = props.height,
	        width = props.width;

	    var styles = props.style;
	    if (height || width) {
	      styles = styles || {};
	      styles = _extends({ height: height, width: width }, styles);
	    }

	    _this.state = {
	      styles: styles,
	      contentStyles: props.contentStyle,
	      contentPadded: false
	    };
	    return _this;
	  }

	  Dialog.prototype.getChildContext = function getChildContext() {
	    return { renderNode: this._renderNode };
	  };

	  Dialog.prototype.componentWillMount = function componentWillMount() {
	    var _props = this.props,
	        pageX = _props.pageX,
	        pageY = _props.pageY;

	    if (!pageX || !pageY) {
	      return;
	    }

	    this.setState({ styles: this._getStyles(this.props) });
	  };

	  Dialog.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.onOpen) {
	      this.props.onOpen();
	    }
	  };

	  Dialog.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    if (DIFF_KEYS.some(function (key) {
	      return nextProps[key] !== _this2.props[key];
	    })) {
	      this.setState({
	        styles: this._getStyles(nextProps),
	        contentStyles: _extends({}, this.state.contentStyles, nextProps.contentStyle)
	      });
	    }
	  };

	  Dialog.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.props.onLeave) {
	      this.props.onLeave();
	    }
	  };

	  Dialog.prototype.render = function render() {
	    var _state = this.state,
	        contentPadded = _state.contentPadded,
	        styles = _state.styles,
	        contentStyles = _state.contentStyles;

	    var _props2 = this.props,
	        id = _props2.id,
	        className = _props2.className,
	        titleStyle = _props2.titleStyle,
	        titleClassName = _props2.titleClassName,
	        footerStyle = _props2.footerStyle,
	        footerClassName = _props2.footerClassName,
	        contentClassName = _props2.contentClassName,
	        title = _props2.title,
	        Content = _props2.contentComponent,
	        contentProps = _props2.contentProps,
	        actions = _props2.actions,
	        children = _props2.children,
	        fullPage = _props2.fullPage,
	        centered = _props2.centered,
	        autopadContent = _props2.autopadContent,
	        paddedContent = _props2.paddedContent,
	        autosizeContent = _props2.autosizeContent,
	        stackedActions = _props2.stackedActions,
	        style = _props2.style,
	        contentStyle = _props2.contentStyle,
	        pageX = _props2.pageX,
	        pageY = _props2.pageY,
	        containerX = _props2.containerX,
	        containerY = _props2.containerY,
	        onOpen = _props2.onOpen,
	        onLeave = _props2.onLeave,
	        height = _props2.height,
	        width = _props2.width,
	        props = _objectWithoutProperties(_props2, ['id', 'className', 'titleStyle', 'titleClassName', 'footerStyle', 'footerClassName', 'contentClassName', 'title', 'contentComponent', 'contentProps', 'actions', 'children', 'fullPage', 'centered', 'autopadContent', 'paddedContent', 'autosizeContent', 'stackedActions', 'style', 'contentStyle', 'pageX', 'pageY', 'containerX', 'containerY', 'onOpen', 'onLeave', 'height', 'width']);

	    var labelledBy = this.props['aria-labelledby'];

	    var titleId = id + '-title';
	    if (!labelledBy && title) {
	      labelledBy = titleId;
	    }

	    var padDefined = typeof paddedContent !== 'undefined';
	    var dialogChildren = fullPage ? children : [_react2.default.createElement(
	      _DialogTitle2.default,
	      {
	        key: 'title',
	        id: titleId,
	        style: titleStyle,
	        className: titleClassName
	      },
	      title
	    ), _react2.default.createElement(
	      Content,
	      _extends({
	        ref: !padDefined && autopadContent ? this._setContent : null,
	        key: 'content'
	      }, contentProps, {
	        style: contentStyles,
	        className: (0, _classnames2.default)('md-dialog-content', {
	          'md-dialog-content--padded': padDefined ? paddedContent : contentPadded
	        }, contentClassName)
	      }),
	      autosizeContent ? _react2.default.createElement(_ResizeObserver2.default, { watchHeight: true, watchWidth: true, onResize: this._handleContentResize }) : null,
	      children
	    ), _react2.default.createElement(_DialogFooter2.default, {
	      key: 'footer',
	      style: footerStyle,
	      className: footerClassName,
	      actions: actions,
	      stacked: stackedActions
	    })];

	    return _react2.default.createElement(
	      _Paper2.default,
	      _extends({}, props, {
	        id: id,
	        component: _FocusContainer2.default,
	        ref: this._setRenderNode,
	        style: styles,
	        className: (0, _classnames2.default)('md-dialog', {
	          'md-dialog--full-page': fullPage,
	          'md-dialog--centered': centered
	        }, className),
	        role: 'dialog',
	        'aria-labelledby': labelledBy
	      }),
	      dialogChildren
	    );
	  };

	  return Dialog;
	}(_react.PureComponent);

	Dialog.propTypes = {
	  /**
	   * @see {@link Dialogs/DialogContainer#id}
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * @see {@link Dialogs/DialogContainer#aria-describedby}
	   */
	  'aria-describedby': (0, _oneRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), 'title', 'aria-labelledby', 'aria-label'),

	  /**
	   * @see {@link Dialogs/DialogContainer#aria-labelledby}
	   */
	  'aria-labelledby': _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * @see {@link Dialogs/DialogContainer#aria-label}
	   */
	  'aria-label': _propTypes2.default.string,

	  /**
	   * An optional style to apply to the dialog.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the dialog.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional styke to apply to the title.
	   */
	  titleStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the title.
	   */
	  titleClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the footer. This is used when the `actions`
	   * prop is defined.
	   */
	  footerStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the footer. This is used when the `actions`
	   * prop is defined.
	   */
	  footerClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the dialog's content.
	   */
	  contentStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the dialog's content.
	   */
	  contentClassName: _propTypes2.default.string,

	  /**
	   * The component to render the content as. This is helpful if you would like to use
	   * the CSSTransitionGroup. This really just saves a tiny bit of markup.
	   *
	   * ```js
	   * <Dialog
	   *   contentComponent={CSSTransitionGroup}
	   *   contentProps={{
	   *     transitionName: 'md-cross-fade',
	   *     transitionLeave: false,
	   *     transitionEnterTimeout: 150,
	   *   }}
	   * >
	   *   {dynamicContent}
	   * </Dialog>
	   * ```
	   */
	  contentComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * Any additional props to pass to the content component.
	   */
	  contentProps: _propTypes2.default.object,

	  /**
	   * An optional title to display in the dialog.
	   */
	  title: _propTypes2.default.node,

	  /**
	   * Any children to display in the content of the dialog.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * A single action or a list of actions to display in the dialog. This can either be a list
	   * of `FlatButton` props or `<Button flat {...props} />` elements.
	   */
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]))]),

	  /**
	   * @see {@link Helpers/FocusContainer#additionalFocusKeys}
	   */
	  additionalFocusKeys: _FocusContainer2.default.propTypes.additionalFocusKeys,

	  /**
	   * @see {@link Helpers/FocusContainer#initialFocus}
	   */
	  initialFocus: _FocusContainer2.default.propTypes.initialFocus,

	  /**
	   * @see {@link Helpers/FocusContainer#focusOnMount}
	   */
	  focusOnMount: _FocusContainer2.default.propTypes.focusOnMount,

	  /**
	   * @see {@link Helpers/FocusContainer#containFocus}
	   */
	  containFocus: _FocusContainer2.default.propTypes.containFocus,

	  /**
	   * An optional x coordinate on the page that caused a full page dialog
	   * to be created. This is really just used for a `transformOrigin` style.
	   */
	  pageX: _propTypes2.default.number,

	  /**
	   * An optional y coordinate on the page that caused a full page dialog
	   * to be created. This is really just used for a `transformOrigin` style.
	   */
	  pageY: _propTypes2.default.number,

	  /**
	   * An optional x scroll position of the container holding the dialog. This
	   * is really just used for a `transformOrigin` style on full page dialogs.
	   */
	  containerX: _propTypes2.default.number,

	  /**
	   * An optional y scroll position of the container holding the dialog. This
	   * is really just used for a `transformOrigin` style on full page dialogs.
	   */
	  containerY: _propTypes2.default.number,

	  /**
	   * Boolean if the dialog should be rendered as a full page dialog.
	   */
	  fullPage: _propTypes2.default.bool,

	  /**
	   * The zDepth to use for the dialog.
	   */
	  zDepth: _propTypes2.default.number.isRequired,

	  /**
	   * An optional function to call when the dialog has been opened. This is
	   * really just used for the `DialogContainer`.
	   */
	  onOpen: _propTypes2.default.func,

	  /**
	   * An optional function to call when the dialog has been closed. This is
	   * really just used for the `DialogContainer`.
	   */
	  onLeave: _propTypes2.default.func,

	  /**
	   * Boolean if the dialog should be centered in the page.
	   */
	  centered: _propTypes2.default.bool,

	  /**
	   * Boolean if the content should be padded. This will take precedence
	   * over the `autopadContent` prop. So if this is defined, that value
	   * will be used instead of any thing that was was calculated in this
	   * component.
	   *
	   * @see {@link #autopadContent}
	   */
	  paddedContent: _propTypes2.default.bool,

	  /**
	   * Boolean if the dialog should automatically try to determine if the content
	   * should be padded. It will be padded if the dialog does not contain a `List`.
	   */
	  autopadContent: _propTypes2.default.bool,

	  /**
	   * Boolean if the dialog content's size should automatically be resized to overflow
	   * correctly when there is a lot of content. This will calculate and apply some `maxHeight`
	   * to the `contentStyle`.
	   */
	  autosizeContent: _propTypes2.default.bool,

	  /**
	   * An optional height to apply to the dialog. This is used if it is easier to just apply height/width
	   * with for specific dialogs instead of in CSS.
	   *
	   * **This prop should not be used if the `fullPage` prop is enabled.**
	   *
	   * @see {@link #fullPage}
	   * @see {@link #width}
	   */
	  height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional width to apply to the dialog. This is used if it is easier to just apply height/width
	   * with for specific dialogs instead of in CSS.
	   *
	   * **This prop should not be used if the `fullPage` prop is enabled.**
	   *
	   * @see {@link #fullPage}
	   * @see {@link #height}
	   */
	  width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * Boolean if the actions should be stacked on top of each other. If this value is `undefined`, it will
	   * automatically attempt to guess if the items should be stacked.
	   */
	  stackedActions: _propTypes2.default.bool
	};
	Dialog.defaultProps = {
	  autopadContent: true,
	  autosizeContent: true,
	  contentComponent: 'section',
	  zDepth: 5
	};
	Dialog.childContextTypes = {
	  renderNode: _propTypes2.default.object
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this3 = this;

	  this._getStyles = function () {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this3.props,
	        pageX = _ref.pageX,
	        containerX = _ref.containerX,
	        pageY = _ref.pageY,
	        containerY = _ref.containerY,
	        height = _ref.height,
	        width = _ref.width,
	        style = _ref.style;

	    return _extends({
	      height: typeof height !== 'undefined' ? height : null,
	      width: typeof width !== 'undefined' ? width : null,
	      transformOrigin: pageX || pageY ? pageX - containerX + 'px ' + (pageY - containerY) + 'px' : null
	    }, style);
	  };

	  this._setRenderNode = function (dialog) {
	    _this3._renderNode = (0, _reactDom.findDOMNode)(dialog);
	  };

	  this._setContent = function (content) {
	    if (content !== null) {
	      _this3._content = (0, _reactDom.findDOMNode)(content);
	      var contentPadded = _this3._content.querySelectorAll('.md-list').length === 0;

	      _this3.setState({ contentPadded: contentPadded });
	    }
	  };

	  this._handleContentResize = function (_ref2) {
	    var scrollHeight = _ref2.scrollHeight,
	        content = _ref2.el;

	    var maxHeight = content.style.maxHeight;
	    var dialog = content.parentNode;
	    content.style.maxHeight = 'none';
	    var title = _this3.props.title ? dialog.querySelector('.md-title--dialog') : null;
	    var footer = _this3.props.actions ? dialog.querySelector('.md-dialog-footer') : null;

	    var totalHeight = dialog.offsetHeight - (title ? title.offsetHeight : 0) - (footer ? footer.offsetHeight : 0);
	    content.style.maxHeight = maxHeight;
	    var equalHeight = totalHeight === scrollHeight;
	    if (equalHeight) {
	      var currentHeight = _this3.state.contentStyles && _this3.state.contentStyles.maxHeight || null;
	      if (currentHeight && currentHeight !== scrollHeight) {
	        _this3.setState({ contentStyles: _this3.props.contentStyle });
	      }
	    } else {
	      _this3.setState({ contentStyles: _extends({ maxHeight: totalHeight }, _this3.props.contentStyle) });
	    }
	  };
	};

	exports.default = Dialog;

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _isValidFocusKeypress = __webpack_require__(404);

	var _isValidFocusKeypress2 = _interopRequireDefault(_isValidFocusKeypress);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BASE_FOCUSABLE_ELEMENTS = '[href],[tabindex]:not([tabindex="-1"]),input:not([disabled]):not([type="hidden"])';
	var FOCUSABLE_QUERY = ['button', 'textarea', 'select'].reduce(function (queryString, element) {
	  return queryString + ',' + element + ':not([disabled])';
	}, BASE_FOCUSABLE_ELEMENTS);

	/**
	 * This component is used for keeping the focus within some container. When the container
	 * is mounted and the `focusOnMount` prop is `true`, it will attempt to focus either:
	 * - an element that matches `document.getElementById(this.props.initialFocus)`
	 * - an element that matches `this._container.querySelector(this.props.initialFocus)`
	 * - the first focusable element in it's children (if `this.props.initialFocus` is omitted)
	 */

	var FocusContainer = function (_PureComponent) {
	  _inherits(FocusContainer, _PureComponent);

	  function FocusContainer() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, FocusContainer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._enableFocusTrap = function () {
	      window.addEventListener('keydown', _this._handleKeyDown, true);
	    }, _this._disableFocusTrap = function () {
	      window.removeEventListener('keydown', _this._handleKeyDown, true);
	    }, _this._attemptInitialFocus = function () {
	      if (!_this._container) {
	        return;
	      }

	      var initialFocus = _this.props.initialFocus;


	      var toFocus = initialFocus ? document.getElementById(initialFocus) || _this._container.querySelector(initialFocus) : _this._focusables[0];

	      var debugError = void 0;
	      if (!toFocus && initialFocus) {
	        debugError = ' The `initialFocus` did not match a document\'s `id` or was an invalid ';
	        debugError += '`querySelector` for the container. `initialFocus`: `' + initialFocus + '`. ';
	        debugError += 'If this was supposed to be an `id`, make sure to prefix with the `#` symbol.';
	      }

	      if (false) {
	        throw new Error('You specified that the `FocusContainer` should focus an element on mount, ' + 'but a focusable element was not found in the children. This could be because ' + 'the `initialFocus` prop is an invalid id or query selector, or the children ' + ('do not contain a valid focusable element.' + debugError));
	      }

	      if (toFocus) {
	        toFocus.focus();
	      }
	    }, _this._containFocus = function (containerRef) {
	      if (containerRef === null) {
	        _this._container = null;
	        _this._disableFocusTrap();
	        return;
	      }

	      var _this$props = _this.props,
	          focusOnMount = _this$props.focusOnMount,
	          containFocus = _this$props.containFocus;

	      _this._container = (0, _reactDom.findDOMNode)(containerRef);
	      _this._focusables = [].slice.call(_this._container.querySelectorAll(FOCUSABLE_QUERY));

	      if (focusOnMount) {
	        _this._attemptInitialFocus();
	      }

	      if (containFocus) {
	        _this._enableFocusTrap();
	      }
	    }, _this._handleKeyDown = function (e) {
	      _this._shifted = e.shiftKey;
	      if (!(0, _isValidFocusKeypress2.default)(e, _this.props.additionalFocusKeys)) {
	        return;
	      } else if (_this._focusables.length === 1) {
	        e.preventDefault();
	        return;
	      }

	      var target = e.target,
	          shiftKey = e.shiftKey;

	      var _this$_focusables = _this._focusables,
	          first = _this$_focusables[0],
	          focusables = _this$_focusables.slice(1);

	      var last = focusables[focusables.length - 1];

	      if (shiftKey && target === first) {
	        e.preventDefault();
	        last.focus();
	      } else if (!shiftKey && target === last) {
	        e.preventDefault();
	        first.focus();
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  FocusContainer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.containFocus === nextProps.containFocus) {
	      return;
	    }

	    if (nextProps.containFocus) {
	      this._enableFocusTrap();
	      this._attemptInitialFocus();
	    } else {
	      this._disableFocusTrap();
	    }
	  };

	  FocusContainer.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (this.props.containFocus && this._container) {
	      this._focusables = [].slice.call(this._container.querySelectorAll(FOCUSABLE_QUERY));
	    }
	  };

	  FocusContainer.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.props.containFocus) {
	      this._disableFocusTrap();
	    }
	  };

	  /**
	   * Manages the event listeners to contain the focus within some container.  When the container
	   * ref is not null, the container has mounted and then attempts to focus an element inside
	   * if the `focusOnMount` prop is `true`.
	   */


	  FocusContainer.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.component,
	        initialFocus = _props.initialFocus,
	        focusOnMount = _props.focusOnMount,
	        containFocus = _props.containFocus,
	        additionalFocusKeys = _props.additionalFocusKeys,
	        props = _objectWithoutProperties(_props, ['component', 'initialFocus', 'focusOnMount', 'containFocus', 'additionalFocusKeys']);

	    return _react2.default.createElement(Component, _extends({}, props, { ref: this._containFocus }));
	  };

	  return FocusContainer;
	}(_react.PureComponent);

	FocusContainer.propTypes = {
	  /**
	   * The component to render as. This can be a React DOM element or
	   * a react Component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The children to display.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * An optional id string or a query selector string to use for the initial focus.
	   * This will only be triggered if the `focusOnMount` prop is `true`. If this is
	   * omitted and the `focusOnMount` prop is `true`, the first focusable element in the
	   * container will be focused.
	   *
	   * Examples:
	   *
	   * ```js
	   * initialFocus="#someAmazingId"
	   * // or
	   * initialFocus=".md-btn,.md-list-tile"
	   * ```
	   */
	  initialFocus: _propTypes2.default.string,

	  /**
	   * Boolean if an element in the container should be focused when mounted.
	   */
	  focusOnMount: _propTypes2.default.bool,

	  /**
	   * An optional list of additional key codes to use for focus events.
	   */
	  additionalFocusKeys: _propTypes2.default.arrayOf(_propTypes2.default.number),

	  /**
	   * Boolean if the focus container should start or stop containing the focus within the container.
	   * This is useful for changing the focus requirements after mount.
	   */
	  containFocus: _propTypes2.default.bool
	};
	FocusContainer.defaultProps = {
	  component: 'div',
	  containFocus: true
	};
	exports.default = FocusContainer;

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = isValidFocusKeypress;

	var _keyCodes = __webpack_require__(279);

	/**
	 * Checks if a keydown or keyup event's key was the TAB key or any additional valid
	 * keys that were passed in.
	 *
	 * @param {Object} event - The event to check.
	 * @param {Array.<number>=} additionalKeys - An optional array of additional key codes
	 *    that are considered valid for a focus event.
	 */
	function isValidFocusKeypress(event, additionalKeys) {
	  var key = event.which || event.keyCode;
	  return key === _keyCodes.TAB || additionalKeys && additionalKeys.indexOf(key) !== -1;
	} /** @module utils/EventUtils/isValidFocusKeypress */

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DialogTitle = function (_PureComponent) {
	  _inherits(DialogTitle, _PureComponent);

	  function DialogTitle() {
	    _classCallCheck(this, DialogTitle);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  DialogTitle.prototype.render = function render() {
	    var _props = this.props,
	        children = _props.children,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['children', 'className']);

	    if (!children) {
	      return null;
	    }

	    return _react2.default.createElement(
	      'h2',
	      _extends({}, props, { className: (0, _classnames2.default)('md-title md-title--dialog', className) }),
	      children
	    );
	  };

	  return DialogTitle;
	}(_react.PureComponent);

	DialogTitle.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node
	};
	exports.default = DialogTitle;

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var FOOTER_PADDING = 8;

	var DialogFooter = function (_PureComponent) {
	  _inherits(DialogFooter, _PureComponent);

	  function DialogFooter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, DialogFooter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { stacked: false }, _this._setContainer = function (container) {
	      if (container !== null) {
	        _this._container = container;
	        var maxWidth = (_this._container.offsetWidth - FOOTER_PADDING * 3) / 2;

	        var stacked = false;
	        Array.prototype.slice.call(_this._container.querySelectorAll('.md-btn')).some(function (_ref) {
	          var offsetWidth = _ref.offsetWidth;

	          stacked = offsetWidth > maxWidth;
	          return stacked;
	        });

	        _this.setState({ stacked: stacked });
	      }
	    }, _this._generateActions = function () {
	      var actions = _this.props.actions;

	      if (!actions) {
	        return null;
	      } else if (Array.isArray(actions)) {
	        return actions.map(_this._toElement);
	      }

	      return _this._toElement(actions);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  DialogFooter.prototype._toElement = function _toElement(action, index) {
	    if ((0, _react.isValidElement)(action)) {
	      var button = _react.Children.only(action);

	      return (0, _react.cloneElement)(action, {
	        key: button.key || index,
	        className: (0, _classnames2.default)('md-btn--dialog', button.props.className)
	      });
	    }

	    // Both label and children are valid for dialog actions

	    var label = action.label,
	        children = action.children,
	        remaining = _objectWithoutProperties(action, ['label', 'children']);

	    return _react2.default.createElement(
	      _Button2.default,
	      _extends({
	        key: index,
	        flat: true
	      }, remaining, {
	        className: (0, _classnames2.default)('md-btn--dialog', action.className)
	      }),
	      label || children
	    );
	  };

	  DialogFooter.prototype.render = function render() {
	    var _props = this.props,
	        actions = _props.actions,
	        className = _props.className,
	        children = _props.children,
	        propStacked = _props.stacked,
	        props = _objectWithoutProperties(_props, ['actions', 'className', 'children', 'stacked']);

	    if (!children && (!actions || Array.isArray(actions) && !actions.length)) {
	      return null;
	    }

	    var stacked = this.props.stacked;

	    var stackedDefined = typeof propStacked !== 'undefined';
	    if (!stackedDefined) {
	      stacked = this.state.stacked;
	    }

	    return _react2.default.createElement(
	      'footer',
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-dialog-footer', {
	          'md-dialog-footer--inline': !stacked,
	          'md-dialog-footer--stacked': stacked
	        }, className),
	        ref: !stackedDefined ? this._setContainer : null
	      }),
	      this._generateActions(),
	      children
	    );
	  };

	  return DialogFooter;
	}(_react.PureComponent);

	DialogFooter.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]))]),
	  stacked: _propTypes2.default.bool
	};
	exports.default = DialogFooter;

/***/ }),
/* 407 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = findFixedTo;
	function findFixedTo(table) {
	  if (table && table.firstChild.firstChild.classList.contains('md-data-table__scroll-wrapper')) {
	    return {
	      x: table,
	      y: table.firstChild.firstChild
	    };
	  }

	  return table;
	}

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _positionShape = __webpack_require__(336);

	var _positionShape2 = _interopRequireDefault(_positionShape);

	var _SelectField = __webpack_require__(397);

	var _SelectField2 = _interopRequireDefault(_SelectField);

	var _withTableFixes = __webpack_require__(409);

	var _withTableFixes2 = _interopRequireDefault(_withTableFixes);

	var _TableColumn = __webpack_require__(395);

	var _TableColumn2 = _interopRequireDefault(_TableColumn);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `SelectFieldColumn` component is just a simple wrapper between a `SelectField` and
	 * the `TableColumn` components.
	 *
	 * All props that are on the `SelectField` are also available here (except the naming of style or className).
	 * See the [SelectField](/components/select-fields?tab=1#select-field-proptypes) for remaining prop descriptions.
	 */
	var SelectFieldColumn = function (_PureComponent) {
	  _inherits(SelectFieldColumn, _PureComponent);

	  function SelectFieldColumn() {
	    _classCallCheck(this, SelectFieldColumn);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  SelectFieldColumn.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        menuStyle = _props.menuStyle,
	        menuClassName = _props.menuClassName,
	        header = _props.header,
	        tooltipLabel = _props.tooltipLabel,
	        tooltipDelay = _props.tooltipDelay,
	        tooltipPosition = _props.tooltipPosition,
	        adjusted = _props.adjusted,
	        wrapperStyle = _props.wrapperStyle,
	        wrapperClassName = _props.wrapperClassName,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'menuStyle', 'menuClassName', 'header', 'tooltipLabel', 'tooltipDelay', 'tooltipPosition', 'adjusted', 'wrapperStyle', 'wrapperClassName']);

	    return _react2.default.createElement(
	      _TableColumn2.default,
	      {
	        header: header,
	        style: style,
	        className: (0, _classnames2.default)('md-select-field-column', className),
	        adjusted: false,
	        tooltipLabel: tooltipLabel,
	        tooltipDelay: tooltipDelay,
	        tooltipPosition: tooltipPosition
	      },
	      _react2.default.createElement(_SelectField2.default, _extends({}, props, { style: menuStyle, className: menuClassName }))
	    );
	  };

	  return SelectFieldColumn;
	}(_react.PureComponent);

	SelectFieldColumn.VerticalAnchors = _SelectField2.default.VerticalAnchors;
	SelectFieldColumn.HorizontalAnchors = _SelectField2.default.HorizontalAnchors;
	SelectFieldColumn.Positions = _SelectField2.default.Positions;
	SelectFieldColumn.propTypes = {
	  /**
	   * An optional id to use for the select field in the column. If this is omitted, it's value will be
	   * `${rowId}-${cellIndex}-select-field`
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * This is the optional style to apply to the `TableColumn`.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * This is the optional className to apply to the `TableColumn`.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The is the optional style to apply to the select field's menu container.
	   *
	   * @see {@link SelectFields/SelectField#style}
	   */
	  menuStyle: _propTypes2.default.object,

	  /**
	   * The is the optional class name to apply to the select field's menu container.
	   *
	   * @see {@link SelectFields/SelectField#className}
	   */
	  menuClassName: _propTypes2.default.string,

	  /**
	   * This is how the select field should be fixed within the table. When this is omitted,
	   * it will automatically use the responsive table as the fixture so that the select field
	   * will close/adjust itself to the scrolling of the table.
	   *
	   * @see {@link Helpers/Layover#fixedTo}
	   */
	  fixedTo: _fixedToShape2.default,

	  /**
	   * Boolean if the select field should span the entire width of the column.
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * The position for the select field.
	   *
	   * @see {@link SelectFields/SelectField#position}
	   */
	  position: _positionShape2.default,

	  /**
	   * This is injected by the `TableRow` component.
	   * @access private
	   */
	  header: _propTypes2.default.bool,

	  /**
	   * @access private
	   */
	  adjusted: _propTypes2.default.bool,

	  /**
	   * The optional tooltip to render on hover.
	   *
	   * @see {@link DataTables/TableColumn#tooltipLabel}
	   */
	  tooltipLabel: _propTypes2.default.string,

	  /**
	   * An optional delay to apply to the tooltip before it appears.
	   *
	   * @see {@link DataTables/TableColumn#tooltipDelay}
	   */
	  tooltipDelay: _propTypes2.default.number,

	  /**
	   * The position of the tooltip.
	   *
	   * @see {@link DataTables/TableColumn#tooltipPosition}
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the `fixedTo` element scrolls.
	   *
	   * @see {@link Helpers/Layover#repositionOnScroll}
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the window resizes.
	   *
	   * @see {@link Helpers/Layover#repositionOnResize}
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu logic should be simplified without any viewport logic and position
	   * based on the relative position of the menu. This will most like require some additional
	   * styles applied to the menu.
	   *
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplifiedMenu: _propTypes2.default.bool,

	  wrapperStyle: (0, _deprecated2.default)(_propTypes2.default.object, 'There is no longer a wrapper'),
	  wrapperClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'There is no longer a wrapper')
	};
	SelectFieldColumn.defaultProps = {
	  position: SelectFieldColumn.Positions.BELOW,
	  fullWidth: true,
	  repositionOnScroll: true,
	  repositionOnResize: false,
	  simplifiedMenu: false
	};
	exports.default = (0, _withTableFixes2.default)(SelectFieldColumn, 'select-field');

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = withTableFixes;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(31);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _findTable = __webpack_require__(394);

	var _findTable2 = _interopRequireDefault(_findTable);

	var _findFixedTo = __webpack_require__(407);

	var _findFixedTo2 = _interopRequireDefault(_findFixedTo);

	var _getDisplayName = __webpack_require__(286);

	var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This is a utility HOC to fix the components that use the `Menu` component behind the scenes. This will
	 * correctly add the `id` and `fixedTo` props if they are omitted from the child component's props.
	 *
	 * If the id prop is omitted, it will default to the `${rowId}-${cellIndex}-${suffix}` and when the
	 * `fixedTo` prop is omitted, it will automatically set it to the responsive table wrapper so that
	 * it will stay in viewport as expected.
	 *
	 * This component also attempts to find the `cellIndex` prop if it is not correctly cloned into the
	 * component.
	 *
	 * @param {function|Class} ComposedComponent - the component to compose with the tooltip functionality.
	 * @param {String} suffix - the id suffix to apply.
	 * @return {Class} the ComposedComponent with some fixes applied.
	 */
	function withTableFixes(ComposedComponent, suffix) {
	  var _class, _temp2;

	  return _temp2 = _class = function (_PureComponent) {
	    _inherits(TableFixesComponent, _PureComponent);

	    function TableFixesComponent() {
	      var _temp, _this, _ret;

	      _classCallCheck(this, TableFixesComponent);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { cellIndex: undefined }, _this._fixedTo = null, _temp), _possibleConstructorReturn(_this, _ret);
	    }

	    TableFixesComponent.prototype.componentDidMount = function componentDidMount() {
	      var _props = this.props,
	          cellIndex = _props.cellIndex,
	          fixedTo = _props.fixedTo,
	          id = _props.id;

	      var isIndexed = !!id || cellIndex === 0 || !!cellIndex;
	      var isFixed = fixedTo === null || !!fixedTo;
	      if (isIndexed && isFixed) {
	        // all is good
	        return;
	      }

	      var column = (0, _reactDom.findDOMNode)(this);
	      var table = (0, _findTable2.default)(column);
	      this._fixedTo = (0, _findFixedTo2.default)(table);

	      // If a developer creates their own component to wrap the component that uses a menu, the cellIndex prop
	      // might not be defined if they don't pass ...props
	      if (!isIndexed) {
	        var columns = [].slice.call(column.parentNode.querySelectorAll('th,td'));
	        this.setState({ cellIndex: columns.indexOf(column) }); // eslint-disable-line react/no-did-mount-set-state
	      } else if (this._fixedTo) {
	        // need to apply the _fixedTo for the select field
	        this.forceUpdate();
	      }
	    };

	    TableFixesComponent.prototype.render = function render() {
	      var rowId = this.context.rowId;

	      var _props2 = this.props,
	          propid = _props2.id,
	          propFixedTo = _props2.fixedTo,
	          propCellIndex = _props2.cellIndex,
	          props = _objectWithoutProperties(_props2, ['id', 'fixedTo', 'cellIndex']);

	      var id = this.props.id;

	      var fixedTo = this._fixedTo === null || propFixedTo ? propFixedTo : this._fixedTo;
	      var cellIndex = (0, _getField2.default)(this.props, this.state, 'cellIndex');
	      if (!id) {
	        id = rowId + '-' + cellIndex + '-' + suffix;
	      }

	      return _react2.default.createElement(ComposedComponent, _extends({}, props, { id: id, fixedTo: fixedTo }));
	    };

	    return TableFixesComponent;
	  }(_react.PureComponent), _class.Positions = ComposedComponent.Positions, _class.HorizontalAnchors = ComposedComponent.HorizontalAnchors, _class.VerticalAnchors = ComposedComponent.VerticalAnchors, _class.displayName = (0, _getDisplayName2.default)(ComposedComponent, 'TableFixes'), _class.propTypes = {
	    id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    cellIndex: _propTypes2.default.number,
	    fixedTo: _fixedToShape2.default
	  }, _class.contextTypes = {
	    rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
	  }, _temp2;
	}

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _withTableFixes = __webpack_require__(409);

	var _withTableFixes2 = _interopRequireDefault(_withTableFixes);

	var _MenuButton = __webpack_require__(411);

	var _MenuButton2 = _interopRequireDefault(_MenuButton);

	var _TableColumn = __webpack_require__(395);

	var _TableColumn2 = _interopRequireDefault(_TableColumn);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MenuButtonColumn = function (_PureComponent) {
	  _inherits(MenuButtonColumn, _PureComponent);

	  function MenuButtonColumn() {
	    _classCallCheck(this, MenuButtonColumn);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  MenuButtonColumn.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        menuStyle = _props.menuStyle,
	        menuClassName = _props.menuClassName,
	        header = _props.header,
	        adjusted = _props.adjusted,
	        tooltipLabel = _props.tooltipLabel,
	        tooltipDelay = _props.tooltipDelay,
	        tooltipPosition = _props.tooltipPosition,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'menuStyle', 'menuClassName', 'header', 'adjusted', 'tooltipLabel', 'tooltipDelay', 'tooltipPosition']);

	    return _react2.default.createElement(
	      _TableColumn2.default,
	      {
	        style: style,
	        className: className,
	        header: header,
	        adjusted: adjusted,
	        tooltipLabel: tooltipLabel,
	        tooltipDelay: tooltipDelay,
	        tooltipPosition: tooltipPosition
	      },
	      _react2.default.createElement(_MenuButton2.default, _extends({}, props, { style: menuStyle, className: menuClassName }))
	    );
	  };

	  return MenuButtonColumn;
	}(_react.PureComponent);

	MenuButtonColumn.Positions = _MenuButton2.default.Positions;
	MenuButtonColumn.HorizontalAnchors = _MenuButton2.default.HorizontalAnchors;
	MenuButtonColumn.VerticalAnchors = _MenuButton2.default.VerticalAnchors;
	MenuButtonColumn.propTypes = {
	  /**
	   * An optional id to use for the menu button in the column. If this is omitted, it's value will be
	   * `${rowId}-${cellIndex}-menu-button`
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * This is the optional style to apply to the `TableColumn`.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * This is the optional className to apply to the `TableColumn`.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The is the optional style to apply to the menu button's menu container.
	   *
	   * @see {@link Menus/MenuButton#style}
	   */
	  menuStyle: _propTypes2.default.object,

	  /**
	   * The is the optional class name to apply to the menu button's menu container.
	   *
	   * @see {@link Menus/MenuButton#className}
	   */
	  menuClassName: _propTypes2.default.string,

	  /**
	   * This is how the select field should be fixed within the table. When this is omitted,
	   * it will automatically use the responsive table as the fixture so that the select field
	   * will close/adjust itself to the scrolling of the table.
	   *
	   * @see {@link Helpers/Layover#fixedTo}
	   */
	  fixedTo: _fixedToShape2.default,

	  /**
	   * The optional tooltip to render on hover.
	   *
	   * @see {@link DataTables/TableColumn#tooltipLabel}
	   */
	  tooltipLabel: _propTypes2.default.string,

	  /**
	   * An optional delay to apply to the tooltip before it appears.
	   *
	   * @see {@link DataTables/TableColumn#tooltipDelay}
	   */
	  tooltipDelay: _propTypes2.default.number,

	  /**
	   * The position of the tooltip.
	   *
	   * @see {@link DataTables/TableColumn#tooltipPosition}
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the `fixedTo` element scrolls.
	   *
	   * @see {@link Helpers/Layover#repositionOnScroll}
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the window resizes.
	   *
	   * @see {@link Helpers/Layover#repositionOnResize}
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu logic should be simplified without any viewport logic and position
	   * based on the relative position of the menu. This will most like require some additional
	   * styles applied to the menu.
	   *
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplifiedMenu: _propTypes2.default.bool,

	  /**
	   * This is injected by the `TableRow` component.
	   * @access private
	   */
	  header: _propTypes2.default.bool,

	  /**
	   * @access private
	   */
	  adjusted: _propTypes2.default.bool
	};
	MenuButtonColumn.defaultProps = {
	  simplifiedMenu: false
	};
	exports.default = (0, _withTableFixes2.default)(MenuButtonColumn, 'menu-button');

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _anchorShape = __webpack_require__(332);

	var _anchorShape2 = _interopRequireDefault(_anchorShape);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _positionShape = __webpack_require__(336);

	var _positionShape2 = _interopRequireDefault(_positionShape);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	var _DropdownMenu = __webpack_require__(412);

	var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `MenuButton` is a simple wrapper / combination of the `Button` and the `Menu`
	 * components that can be uncontrolled.
	 */
	var MenuButton = function (_PureComponent) {
	  _inherits(MenuButton, _PureComponent);

	  function MenuButton() {
	    _classCallCheck(this, MenuButton);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  MenuButton.prototype.render = function render() {
	    var _props = this.props,
	        id = _props.id,
	        listId = _props.listId,
	        buttonId = _props.buttonId,
	        menuStyle = _props.menuStyle,
	        menuClassName = _props.menuClassName,
	        listStyle = _props.listStyle,
	        listClassName = _props.listClassName,
	        listProps = _props.listProps,
	        listZDepth = _props.listZDepth,
	        listInline = _props.listInline,
	        listHeightRestricted = _props.listHeightRestricted,
	        menuItems = _props.menuItems,
	        buttonChildren = _props.buttonChildren,
	        children = _props.children,
	        anchor = _props.anchor,
	        belowAnchor = _props.belowAnchor,
	        fixedTo = _props.fixedTo,
	        position = _props.position,
	        cascading = _props.cascading,
	        cascadingAnchor = _props.cascadingAnchor,
	        cascadingZDepth = _props.cascadingZDepth,
	        fullWidth = _props.fullWidth,
	        block = _props.block,
	        centered = _props.centered,
	        sameWidth = _props.sameWidth,
	        repositionOnScroll = _props.repositionOnScroll,
	        repositionOnResize = _props.repositionOnResize,
	        xThreshold = _props.xThreshold,
	        yThreshold = _props.yThreshold,
	        closeOnOutsideClick = _props.closeOnOutsideClick,
	        transitionName = _props.transitionName,
	        transitionEnterTimeout = _props.transitionEnterTimeout,
	        transitionLeaveTimeout = _props.transitionLeaveTimeout,
	        visible = _props.visible,
	        defaultVisible = _props.defaultVisible,
	        onVisibilityChange = _props.onVisibilityChange,
	        simplifiedMenu = _props.simplifiedMenu,
	        minLeft = _props.minLeft,
	        minRight = _props.minRight,
	        minBottom = _props.minBottom,
	        fillViewportWidth = _props.fillViewportWidth,
	        fillViewportHeight = _props.fillViewportHeight,
	        onMenuClick = _props.onMenuClick,
	        onMenuMouseDown = _props.onMenuMouseDown,
	        onMenuMouseUp = _props.onMenuMouseUp,
	        onMenuMouseEnter = _props.onMenuMouseEnter,
	        onMenuMouseMove = _props.onMenuMouseMove,
	        onMenuMouseLeave = _props.onMenuMouseLeave,
	        onMenuTouchStart = _props.onMenuTouchStart,
	        onMenuTouchMove = _props.onMenuTouchMove,
	        onMenuTouchCancel = _props.onMenuTouchCancel,
	        onMenuTouchEnd = _props.onMenuTouchEnd,
	        onMenuFocus = _props.onMenuFocus,
	        onMenuBlur = _props.onMenuBlur,
	        onMenuKeyDown = _props.onMenuKeyDown,
	        onMenuKeyUp = _props.onMenuKeyUp,
	        isOpen = _props.isOpen,
	        defaultOpen = _props.defaultOpen,
	        onMenuToggle = _props.onMenuToggle,
	        props = _objectWithoutProperties(_props, ['id', 'listId', 'buttonId', 'menuStyle', 'menuClassName', 'listStyle', 'listClassName', 'listProps', 'listZDepth', 'listInline', 'listHeightRestricted', 'menuItems', 'buttonChildren', 'children', 'anchor', 'belowAnchor', 'fixedTo', 'position', 'cascading', 'cascadingAnchor', 'cascadingZDepth', 'fullWidth', 'block', 'centered', 'sameWidth', 'repositionOnScroll', 'repositionOnResize', 'xThreshold', 'yThreshold', 'closeOnOutsideClick', 'transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'visible', 'defaultVisible', 'onVisibilityChange', 'simplifiedMenu', 'minLeft', 'minRight', 'minBottom', 'fillViewportWidth', 'fillViewportHeight', 'onMenuClick', 'onMenuMouseDown', 'onMenuMouseUp', 'onMenuMouseEnter', 'onMenuMouseMove', 'onMenuMouseLeave', 'onMenuTouchStart', 'onMenuTouchMove', 'onMenuTouchCancel', 'onMenuTouchEnd', 'onMenuFocus', 'onMenuBlur', 'onMenuKeyDown', 'onMenuKeyUp', 'isOpen', 'defaultOpen', 'onMenuToggle']);

	    var items = children;
	    var toggleChildren = buttonChildren;
	    if (typeof menuItems !== 'undefined') {
	      toggleChildren = children;
	      items = menuItems;
	    }

	    return _react2.default.createElement(
	      _DropdownMenu2.default,
	      {
	        id: id,
	        listId: listId,
	        style: menuStyle,
	        className: menuClassName,
	        listStyle: listStyle,
	        listClassName: listClassName,
	        listProps: listProps,
	        listInline: listInline,
	        listZDepth: listZDepth,
	        listHeightRestricted: listHeightRestricted,
	        visible: typeof isOpen !== 'undefined' ? isOpen : visible,
	        defaultVisible: typeof defaultOpen !== 'undefined' ? defaultOpen : defaultVisible,
	        menuItems: items,
	        simplifiedMenu: simplifiedMenu,
	        anchor: anchor,
	        belowAnchor: belowAnchor,
	        fixedTo: fixedTo,
	        position: position,
	        cascading: cascading,
	        cascadingAnchor: cascadingAnchor,
	        cascadingZDepth: cascadingZDepth,
	        fullWidth: fullWidth,
	        block: block,
	        centered: centered,
	        sameWidth: sameWidth,
	        minLeft: minLeft,
	        minRight: minRight,
	        minBottom: minBottom,
	        fillViewportWidth: fillViewportWidth,
	        fillViewportHeight: fillViewportHeight,
	        repositionOnScroll: repositionOnScroll,
	        repositionOnResize: repositionOnResize,
	        xThreshold: xThreshold,
	        yThreshold: yThreshold,
	        closeOnOutsideClick: closeOnOutsideClick,
	        transitionName: transitionName,
	        transitionEnterTimeout: transitionEnterTimeout,
	        transitionLeaveTimeout: transitionLeaveTimeout,
	        onVisibilityChange: onMenuToggle || onVisibilityChange,
	        onClick: onMenuClick,
	        onMouseDown: onMenuMouseDown,
	        onMouseUp: onMenuMouseUp,
	        onMouseEnter: onMenuMouseEnter,
	        onMouseMove: onMenuMouseMove,
	        onMouseLeave: onMenuMouseLeave,
	        onTouchStart: onMenuTouchStart,
	        onTouchMove: onMenuTouchMove,
	        onTouchCancel: onMenuTouchCancel,
	        onTouchEnd: onMenuTouchEnd,
	        onFocus: onMenuFocus,
	        onBlur: onMenuBlur,
	        onKeyDown: onMenuKeyDown,
	        onKeyUp: onMenuKeyUp
	      },
	      _react2.default.createElement(
	        _Button2.default,
	        _extends({}, props, { id: buttonId }),
	        toggleChildren
	      )
	    );
	  };

	  return MenuButton;
	}(_react.PureComponent);

	MenuButton.Positions = _DropdownMenu2.default.Positions;
	MenuButton.HorizontalAnchors = _DropdownMenu2.default.HorizontalAnchors;
	MenuButton.VerticalAnchors = _DropdownMenu2.default.VerticalAnchors;
	MenuButton.propTypes = {
	  /**
	   * An id to use for the menu button. This is required for accessibility.
	   *
	   * @see {@link Menus/Menu#id}
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the menu's list.
	   *
	   * @see {@link Menus/Menu#listId}
	   */
	  listId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the button. If this is omitted, the button will automatically
	   * gain an id of `${id}-toggle`.
	   */
	  buttonId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the button.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the surrounding menu.
	   */
	  menuStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the surrounding menu.
	   */
	  menuClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the list.
	   */
	  listStyle: _propTypes2.default.object,

	  /**
	   * An optional class name to apply to the list.
	   */
	  listClassName: _propTypes2.default.string,

	  /**
	   * Any additional props to provide to the list.
	   *
	   * @see {@link Menus/Menu#listProps}
	   */
	  listProps: _propTypes2.default.object,

	  /**
	   * The z-depth to use for the list.
	   *
	   * @see {@link Menus/Menu/listZDepth}
	   */
	  listZDepth: _propTypes2.default.number,

	  /**
	   * Boolean if the list should be displayed inline.
	   *
	   * @see {@link Lists/List#inline}
	   */
	  listInline: _propTypes2.default.bool,

	  /**
	   * Boolean if the list's height should be restricted.
	   *
	   * @see {@link Menus/Menu#listHeightRestricted}
	   */
	  listHeightRestricted: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu's list is currently visible. If this is defined, it will
	   * require the `onVisibilityChange` function to be defined since it will become
	   * a controlled component.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityChange', 'defaultVisible'),

	  /**
	   * Boolean if the menu's list should be visible by default.
	   */
	  defaultVisible: _propTypes2.default.bool.isRequired,

	  /**
	   * An optional function to call when the button is clicked.
	   *
	   * @see {@link #onMenuClick}
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mousedown` event is triggered by the button.
	   *
	   * @see {@link #onMenuMouseDown}
	   */
	  onMouseDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseup` event is triggered by the button.
	   *
	   * @see {@link #onMenuMouseUp}
	   */
	  onMouseUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseenter` event is triggered by the button.
	   *
	   * @see {@link #onMenuMouseEnter}
	   */
	  onMouseEnter: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mousemove` event is triggered by the button.
	   *
	   * @see {@link #onMenuMouseMove}
	   */
	  onMouseMove: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `mouseleave` event is triggered by the button.
	   *
	   * @see {@link #onMenuMouseLeave}
	   */
	  onMouseLeave: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `touchstart` event is triggered by the button.
	   *
	   * @see {@link #onMenuTouchStart}
	   */
	  onTouchStart: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `touchmove` event is triggered by the button.
	   *
	   * @see {@link #onMenuTouchMove}
	   */
	  onTouchMove: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `touchend` event is triggered by the button.
	   *
	   * @see {@link #onMenuTouchEnd}
	   */
	  onTouchEnd: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `touchcancel` event is triggered by the button.
	   *
	   * @see {@link #onMenuTouchCancel}
	   */
	  onTouchCancel: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `focus` event is triggered by the button.
	   *
	   * @see {@link #onMenuFocus}
	   */
	  onFocus: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `blur` event is triggered by the button.
	   *
	   * @see {@link #onMenuBlur}
	   */
	  onBlur: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `keydown` event is triggered by the button.
	   *
	   * @see {@link #onMenuKeyDown}
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `keyup` event is triggered by the button.
	   *
	   * @see {@link #onMenuKeyUp}
	   */
	  onKeyUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the entire `MenuButton` is clicked. This can be triggered
	   * by clicking the button or any list item that appears in the menu list.
	   *
	   * @see {@link #onClick}
	   */
	  onMenuClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `mousedown` event.
	   *
	   * @see {@link #onMouseDown}
	   */
	  onMenuMouseDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `mouseup` event.
	   *
	   * @see {@link #onMouseUp}
	   */
	  onMenuMouseUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `mouseenter` event.
	   *
	   * @see {@link #onMouseEnter}
	   */
	  onMenuMouseEnter: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `mousemove` event.
	   *
	   * @see {@link #onMouseMove}
	   */
	  onMenuMouseMove: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `mouseleave` event.
	   *
	   * @see {@link #onMouseLeave}
	   */
	  onMenuMouseLeave: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `touchstart` event.
	   *
	   * @see {@link @onTouchStart}
	   */
	  onMenuTouchStart: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `touchmove` event.
	   *
	   * @see {@link @onTouchMove}
	   */
	  onMenuTouchMove: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `touchend` event.
	   *
	   * @see {@link @onTouchEnd}
	   */
	  onMenuTouchEnd: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `touchcancel` event.
	   *
	   * @see {@link @onTouchCancel}
	   */
	  onMenuTouchCancel: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `focus` event.
	   *
	   * @see {@link #onFocus}
	   */
	  onMenuFocus: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `blur` event.
	   *
	   * @see {@link #onBlur}
	   */
	  onMenuBlur: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `keydown` event.
	   *
	   * @see {@link #onKeyDown}
	   */
	  onMenuKeyDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when any element in the `MenuButton` triggers the `keyup` event.
	   *
	   * @see {@link #onKeyUp}
	   */
	  onMenuKeyUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when the visibility changes for the menu. The callback will
	   * include the next visibility state and the event that triggered the change.
	   *
	   * ```js
	   * onVisibilityChange(visible, event);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,

	  /**
	   * This is a 0 to many relationship of `ListItem` to display in the menu's `List`. If the type
	   * of the item is a number or string, it will be passed to the `ListItem` as the `primaryText`.
	   * If it is an object, it should be the shape of the `ListItem` props. If it is a node, it will
	   * just be rendered in the `List`.
	   *
	   * @see {@link Lists/ListItem}
	   * @see {@link Menus/Menu#children}
	   */
	  menuItems: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.node, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object, _propTypes2.default.node]))]),

	  /**
	   * This should be the children to use in the `Button` that gets created as the menu's toggle.
	   *
	   * @see {@link Buttons/Button}
	   * @see {@link Menus/Menu#toggle}
	   */
	  children: _propTypes2.default.node,

	  /**
	   * The anchor position of the menu's list.
	   *
	   * @see {@link Helpers/Layover#anchor}
	   */
	  anchor: _anchorShape2.default,

	  /**
	   * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.
	   *
	   * @see {@link Helpers/Layover#belowAnchor}
	   */
	  belowAnchor: _anchorShape2.default,

	  /**
	   * This is how the menu's list is fixed to the toggle.
	   *
	   * @see {@link Menus/Menu#fixedTo}
	   */
	  fixedTo: _fixedToShape2.default,

	  /**
	   * This is the animation position for the menu's list.
	   *
	   * @see {@link Menus/Menu#position}
	   */
	  position: _positionShape2.default,

	  /**
	   * Boolean if the menu's list should gain the cascading styles.
	   *
	   * @see {@link Menus/Menu#cascading}
	   */
	  cascading: _propTypes2.default.bool,

	  /**
	   * The zDepth to use for the lists that appear in cascading menus.
	   *
	   * @see {@link Menus/Menu#cascadingZDepth}
	   */
	  cascadingZDepth: _propTypes2.default.number,

	  /**
	   * The anchor position for the cascading lists.
	   *
	   * @see {@link Menus/Menu#cascadingAnchor}
	   */
	  cascadingAnchor: _anchorShape2.default,

	  /**
	   * Boolean if the menu should display as a full width container. This will *not* update the button
	   * to be full width as well.
	   *
	   * @see {@link Menus/Menu#fullWidth}
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu's container should display as `block` instead of `inline-block`.
	   *
	   * @see {@link Menus/Menu#block}
	   */
	  block: _propTypes2.default.bool,

	  /**
	   * Boolean if the list should appear centered related to the button.
	   *
	   * @see {@link Menus/Menu#centered}
	   */
	  centered: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu's list should be the same width as the button.
	   *
	   * @see {@link Menus/Menu#sameWidth}
	   */
	  sameWidth: _propTypes2.default.bool,

	  /**
	   * @see {@link Menus/Menu#xThreshold}
	   */
	  xThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Menus/Menu#yThreshold}
	   */
	  yThreshold: _propTypes2.default.number,

	  /**
	   * Boolean if the menu's list should be closed when an element outside of the menu has been clicked.
	   *
	   * @see {@link Menus/Menu#closeOnOutsideClick}
	   */
	  closeOnOutsideClick: _propTypes2.default.bool,

	  /**
	   * The transition name to use for the menu's list visibility changes.
	   *
	   * @see {@link Menus/Menu#transitionName}
	   */
	  transitionName: _propTypes2.default.string,

	  /**
	   * The transition name to use when the menu's list gains visibility.
	   *
	   * @see {@link Menus/Menu#transitionEnterTimeout}
	   */
	  transitionEnterTimeout: _propTypes2.default.number,

	  /**
	   * The transition timeout to use when the menu's list loses visibility.
	   *
	   * @see {@link Menus/Menu#transitionLeaveTimeout}
	   */
	  transitionLeaveTimeout: _propTypes2.default.number,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the `fixedTo` element scrolls.
	   *
	   * @see {@link Helpers/Layover#repositionOnScroll}
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the window resizes.
	   *
	   * @see {@link Helpers/Layover#repositionOnResize}
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu logic should be simplified without any viewport logic and position
	   * based on the relative position of the menu. This will most like require some additional
	   * styles applied to the menu.
	   *
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplifiedMenu: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#minLeft}
	   */
	  minLeft: _DropdownMenu2.default.propTypes.minLeft,

	  /**
	   * @see {@link Helpers/Layover#minRight}
	   */
	  minRight: _DropdownMenu2.default.propTypes.minLeft,

	  /**
	   * @see {@link Helpers/Layover#minBottom}
	   */
	  minBottom: _DropdownMenu2.default.propTypes.minBottom,

	  /**
	   * @see {@link Helpers/Layover#fillViewportWidth}
	   */
	  fillViewportWidth: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#fillViewportHeight}
	   */
	  fillViewportHeight: _propTypes2.default.bool,

	  buttonChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'To build a button, put any elements in the `children`. The `ListItem` have been moved to the `menuItems` prop'),
	  onMenuToggle: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `onVisibilityChange` instead'),
	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead'),
	  defaultOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead')
	};
	MenuButton.defaultProps = {
	  defaultVisible: false,
	  repositionOnScroll: true,
	  repositionOnResize: false
	};
	exports.default = MenuButton;

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _mapToListParts = __webpack_require__(413);

	var _mapToListParts2 = _interopRequireDefault(_mapToListParts);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _anchorShape = __webpack_require__(332);

	var _anchorShape2 = _interopRequireDefault(_anchorShape);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _positionShape = __webpack_require__(336);

	var _positionShape2 = _interopRequireDefault(_positionShape);

	var _Menu = __webpack_require__(348);

	var _Menu2 = _interopRequireDefault(_Menu);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `DropdownMenu` is just a simple wrapper to the `Menu` component. The main differences
	 * is that the `toggle` component will now be the children and the list of items to display
	 * will be the `menuItems` prop.
	 *
	 * The dropdown menu is mostly used to control the state of the menu and render a single element
	 * as the toggle.
	 */
	var DropdownMenu = function (_PureComponent) {
	  _inherits(DropdownMenu, _PureComponent);

	  function DropdownMenu(props) {
	    _classCallCheck(this, DropdownMenu);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._handleClick = function (e) {
	      var _this$props = _this.props,
	          onVisibilityChange = _this$props.onVisibilityChange,
	          children = _this$props.children;

	      var visible = !(0, _getField2.default)(_this.props, _this.state, 'visible');
	      if (onVisibilityChange) {
	        onVisibilityChange(visible, e);
	      }

	      var toggle = _react2.default.Children.only(children);
	      if (toggle.props.onClick) {
	        toggle.props.onClick(e);
	      }

	      if (typeof _this.props.visible === 'undefined') {
	        _this.setState({ visible: visible });
	      }
	    };

	    _this._handleClose = function (e) {
	      var onVisibilityChange = _this.props.onVisibilityChange;

	      var visible = false;
	      if (onVisibilityChange) {
	        onVisibilityChange(visible, e);
	      }

	      if (typeof _this.props.visible === 'undefined') {
	        _this.setState({ visible: visible });
	      }
	    };

	    _this.state = {};
	    if (typeof props.visible === 'undefined') {
	      _this.state.visible = props.defaultVisible;
	    }
	    return _this;
	  }

	  DropdownMenu.prototype.render = function render() {
	    var _props = this.props,
	        id = _props.id,
	        listId = _props.listId,
	        menuItems = _props.menuItems,
	        propChildren = _props.children,
	        simplifiedMenu = _props.simplifiedMenu,
	        propVisible = _props.visible,
	        onVisibilityChange = _props.onVisibilityChange,
	        defaultVisible = _props.defaultVisible,
	        props = _objectWithoutProperties(_props, ['id', 'listId', 'menuItems', 'children', 'simplifiedMenu', 'visible', 'onVisibilityChange', 'defaultVisible']);

	    var visible = (0, _getField2.default)(this.props, this.state, 'visible');

	    var children = _react2.default.Children.only(propChildren);
	    var toggle = _react2.default.cloneElement(children, {
	      id: children.props.id || id + '-toggle',
	      onClick: this._handleClick
	    });

	    var items = void 0;
	    if (!Array.isArray(menuItems)) {
	      items = (0, _mapToListParts2.default)(menuItems);
	    } else {
	      items = menuItems.map(_mapToListParts2.default);
	    }

	    return _react2.default.createElement(
	      _Menu2.default,
	      _extends({}, props, {
	        simplified: simplifiedMenu,
	        id: id,
	        listId: listId,
	        toggle: toggle,
	        visible: visible,
	        onClose: this._handleClose
	      }),
	      items
	    );
	  };

	  return DropdownMenu;
	}(_react.PureComponent);

	DropdownMenu.Positions = _Menu2.default.Positions;
	DropdownMenu.HorizontalAnchors = _Menu2.default.HorizontalAnchors;
	DropdownMenu.VerticalAnchors = _Menu2.default.VerticalAnchors;
	DropdownMenu.propTypes = {
	  /**
	   * An id to use for the menu. This is required for accessibility.
	   *
	   * @see {@link Menus/Menu#id}
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the menu's list.
	   *
	   * @see {@link Menus/Menu#listId}
	   */
	  listId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the menu.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the menu.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the list.
	   */
	  listStyle: _propTypes2.default.object,

	  /**
	   * An optional class name to apply to the list.
	   */
	  listClassName: _propTypes2.default.string,

	  /**
	   * Any additional props to provide to the list.
	   *
	   * @see {@link Menus/Menu#listProps}
	   */
	  listProps: _propTypes2.default.object,

	  /**
	   * The z-depth to use for the list.
	   *
	   * @see {@link Menus/Menu/listZDepth}
	   */
	  listZDepth: _propTypes2.default.number,

	  /**
	   * Boolean if the list should be displayed inline.
	   *
	   * @see {@link Lists/List#inline}
	   */
	  listInline: _propTypes2.default.bool,

	  /**
	   * Boolean if the list's height should be restricted.
	   *
	   * @see {@link Menus/Menu#listHeightRestricted}
	   */
	  listHeightRestricted: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu's list is currently visible. If this is defined, it will
	   * require the `onVisibilityChange` function to be defined since it will become
	   * a controlled component.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityChange', 'defaultVisible'),

	  /**
	   * Boolean if the menu's list should be visible by default.
	   */
	  defaultVisible: _propTypes2.default.bool.isRequired,

	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * An optional function to call when the visibility changes for the menu. The callback will
	   * include the next visibility state and the event that triggered the change.
	   *
	   * ```js
	   * onVisibilityChange(visible, event);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,

	  /**
	   * This is a 0 to many relationship of `ListItem` to display in the menu's `List`. If the type
	   * of the item is a number or string, it will be passed to the `ListItem` as the `primaryText`.
	   * If it is an object, it should be the shape of the `ListItem` props. If it is a node, it will
	   * just be rendered in the `List`.
	   *
	   * @see {@link Lists/ListItem}
	   * @see {@link Menus/Menu#children}
	   */
	  menuItems: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.node, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object, _propTypes2.default.node]))]),

	  /**
	   * @see {@link Menus/Menu#toggle}
	   */
	  children: _propTypes2.default.element.isRequired,

	  /**
	   * The anchor position of the menu's list.
	   *
	   * @see {@link Helpers/Layover#anchor}
	   */
	  anchor: _anchorShape2.default,

	  /**
	   * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.
	   *
	   * @see {@link Helpers/Layover#belowAnchor}
	   */
	  belowAnchor: _anchorShape2.default,

	  /**
	   * This is how the menu's list is fixed to the toggle.
	   *
	   * @see {@link Menus/Menu#fixedTo}
	   */
	  fixedTo: _fixedToShape2.default,

	  /**
	   * This is the animation position for the menu's list.
	   *
	   * @see {@link Menus/Menu#position}
	   */
	  position: _positionShape2.default,

	  /**
	   * Boolean if the menu's list should gain the cascading styles.
	   *
	   * @see {@link Menus/Menu#cascading}
	   */
	  cascading: _propTypes2.default.bool,

	  /**
	   * The zDepth to use for the lists that appear in cascading menus.
	   *
	   * @see {@link Menus/Menu#cascadingZDepth}
	   */
	  cascadingZDepth: _propTypes2.default.number,

	  /**
	   * The anchor position for the cascading lists.
	   *
	   * @see {@link Menus/Menu#cascadingAnchor}
	   */
	  cascadingAnchor: _anchorShape2.default,

	  /**
	   * Boolean if the menu should display as a full width container. This will *not* update the button
	   * to be full width as well.
	   *
	   * @see {@link Menus/Menu#fullWidth}
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu's container should display as `block` instead of `inline-block`.
	   *
	   * @see {@link Menus/Menu#block}
	   */
	  block: _propTypes2.default.bool,

	  /**
	   * Boolean if the list should appear centered related to the button.
	   *
	   * @see {@link Menus/Menu#centered}
	   */
	  centered: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu's list should be the same width as the button.
	   *
	   * @see {@link Menus/Menu#sameWidth}
	   */
	  sameWidth: _propTypes2.default.bool,

	  /**
	   * @see {@link Menus/Menu#xThreshold}
	   */
	  xThreshold: _propTypes2.default.number,

	  /**
	   * @see {@link Menus/Menu#yThreshold}
	   */
	  yThreshold: _propTypes2.default.number,

	  /**
	   * Boolean if the menu's list should be closed when an element outside of the menu has been clicked.
	   *
	   * @see {@link Menus/Menu#closeOnOutsideClick}
	   */
	  closeOnOutsideClick: _propTypes2.default.bool,

	  /**
	   * The transition name to use for the menu's list visibility changes.
	   *
	   * @see {@link Menus/Menu#transitionName}
	   */
	  transitionName: _propTypes2.default.string,

	  /**
	   * The transition name to use when the menu's list gains visibility.
	   *
	   * @see {@link Menus/Menu#transitionEnterTimeout}
	   */
	  transitionEnterTimeout: _propTypes2.default.number,

	  /**
	   * The transition timeout to use when the menu's list loses visibility.
	   *
	   * @see {@link Menus/Menu#transitionLeaveTimeout}
	   */
	  transitionLeaveTimeout: _propTypes2.default.number,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the `fixedTo` element scrolls.
	   *
	   * @see {@link Helpers/Layover#repositionOnScroll}
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the window resizes.
	   *
	   * @see {@link Helpers/Layover#repositionOnResize}
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu logic should be simplified without any viewport logic and position
	   * based on the relative position of the menu. This will most like require some additional
	   * styles applied to the menu.
	   *
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplifiedMenu: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#minLeft}
	   */
	  minLeft: _Menu2.default.propTypes.minLeft,

	  /**
	   * @see {@link Helpers/Layover#minRight}
	   */
	  minRight: _Menu2.default.propTypes.minLeft,

	  /**
	   * @see {@link Helpers/Layover#minBottom}
	   */
	  minBottom: _Menu2.default.propTypes.minBottom,

	  /**
	   * @see {@link Helpers/Layover#fillViewportWidth}
	   */
	  fillViewportWidth: _propTypes2.default.bool,

	  /**
	   * @see {@link Helpers/Layover#fillViewportHeight}
	   */
	  fillViewportHeight: _propTypes2.default.bool
	};
	DropdownMenu.defaultProps = {
	  defaultVisible: false,
	  repositionOnScroll: true,
	  repositionOnResize: false
	};
	exports.default = DropdownMenu;

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = mapToListParts;

	var _react = __webpack_require__(1);

	var _Divider = __webpack_require__(370);

	var _Divider2 = _interopRequireDefault(_Divider);

	var _Subheader = __webpack_require__(347);

	var _Subheader2 = _interopRequireDefault(_Subheader);

	var _ListItem = __webpack_require__(338);

	var _ListItem2 = _interopRequireDefault(_ListItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /** @module utils/mapToListParts */

	/**
	 * A utility function to convert any "item" into a valid React element that is used
	 * within the `List` component.
	 *
	 * Use cases:
	 * - is a valid React element -> item returned unmodified
	 * - `number` or `string` -> `ListItem` with the item as the `primaryText`
	 * - an `object` with a key `divider: true` -> a `Divider` component with the remaining
	 *    keys applied as props.
	 * - an `object` with a key `subheader: true` -> a `Subheader` component with the remianing
	 *    keys applied as props. This one technically requires the `primaryText` key to be defined.
	 * - an `object` -> all keys passed into the `ListItem` component.
	 *
	 * Examples:
	 * ```js
	 * mapToListParts('Hello') == <ListItem primaryText="Hello" />
	 * mapToListParts(100)     == <ListItem primaryText={100} />
	 * mapToListParts({ primaryText: 'Item' }) == <ListItem primaryText="Item" />
	 * mapToListParts({ divider: true }) == <Divider />
	 * mapToListParts({ subheader: true, primaryText: 'Subheader' }) == <Subheader primaryText="Subheader" />
	 * ```
	 *
	 * @param {string|number|Object} item - the item to convert
	 * @param {number|string=} index - the current index in the array (if used in an array)
	 * @return {Object} a React element
	 */
	function mapToListParts(item, index) {
	  if (typeof item === 'string' || typeof item === 'number') {
	    return (0, _react.createElement)(_ListItem2.default, { key: item, primaryText: item });
	  } else if ((0, _react.isValidElement)(item)) {
	    return item;
	  }

	  var divider = item.divider,
	      subheader = item.subheader,
	      nestedItems = item.nestedItems,
	      remainingProps = _objectWithoutProperties(item, ['divider', 'subheader', 'nestedItems']);

	  var component = void 0;
	  if (divider) {
	    component = _Divider2.default;
	  } else if (subheader) {
	    component = _Subheader2.default;
	  } else {
	    component = _ListItem2.default;
	  }

	  var props = _extends({}, remainingProps, { key: item.key || index });
	  if (nestedItems) {
	    props.nestedItems = nestedItems.map(mapToListParts);
	  }

	  return (0, _react.createElement)(component, props);
	}

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _fixedToShape = __webpack_require__(335);

	var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

	var _withTableFixes = __webpack_require__(409);

	var _withTableFixes2 = _interopRequireDefault(_withTableFixes);

	var _DropdownMenu = __webpack_require__(412);

	var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

	var _TableColumn = __webpack_require__(395);

	var _TableColumn2 = _interopRequireDefault(_TableColumn);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DropdownMenuColumn = function (_PureComponent) {
	  _inherits(DropdownMenuColumn, _PureComponent);

	  function DropdownMenuColumn() {
	    _classCallCheck(this, DropdownMenuColumn);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  DropdownMenuColumn.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        menuStyle = _props.menuStyle,
	        menuClassName = _props.menuClassName,
	        header = _props.header,
	        adjusted = _props.adjusted,
	        tooltipLabel = _props.tooltipLabel,
	        tooltipDelay = _props.tooltipDelay,
	        tooltipPosition = _props.tooltipPosition,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'menuStyle', 'menuClassName', 'header', 'adjusted', 'tooltipLabel', 'tooltipDelay', 'tooltipPosition']);

	    return _react2.default.createElement(
	      _TableColumn2.default,
	      {
	        style: style,
	        className: className,
	        header: header,
	        adjusted: adjusted,
	        tooltipLabel: tooltipLabel,
	        tooltipDelay: tooltipDelay,
	        tooltipPosition: tooltipPosition
	      },
	      _react2.default.createElement(_DropdownMenu2.default, _extends({}, props, { style: menuStyle, className: menuClassName }))
	    );
	  };

	  return DropdownMenuColumn;
	}(_react.PureComponent);

	DropdownMenuColumn.Positions = _DropdownMenu2.default.Positions;
	DropdownMenuColumn.HorizontalAnchors = _DropdownMenu2.default.HorizontalAnchors;
	DropdownMenuColumn.VerticalAnchors = _DropdownMenu2.default.VerticalAnchors;
	DropdownMenuColumn.propTypes = {
	  /**
	   * An optional id to use for the menu button in the column. If this is omitted, it's value will be
	   * `${rowId}-${cellIndex}-menu-button`
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * This is the optional style to apply to the `TableColumn`.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * This is the optional className to apply to the `TableColumn`.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The is the optional style to apply to the menu button's menu container.
	   *
	   * @see {@link Menus/DropdownMenu#style}
	   */
	  menuStyle: _propTypes2.default.object,

	  /**
	   * The is the optional class name to apply to the menu button's menu container.
	   *
	   * @see {@link Menus/DropdownMenu#className}
	   */
	  menuClassName: _propTypes2.default.string,

	  /**
	   * This is how the select field should be fixed within the table. When this is omitted,
	   * it will automatically use the responsive table as the fixture so that the select field
	   * will close/adjust itself to the scrolling of the table.
	   *
	   * @see {@link Helpers/Layover#fixedTo}
	   */
	  fixedTo: _fixedToShape2.default,

	  /**
	   * The optional tooltip to render on hover.
	   *
	   * @see {@link DataTables/TableColumn#tooltipLabel}
	   */
	  tooltipLabel: _propTypes2.default.string,

	  /**
	   * An optional delay to apply to the tooltip before it appears.
	   *
	   * @see {@link DataTables/TableColumn#tooltipDelay}
	   */
	  tooltipDelay: _propTypes2.default.number,

	  /**
	   * The position of the tooltip.
	   *
	   * @see {@link DataTables/TableColumn#tooltipPosition}
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the `fixedTo` element scrolls.
	   *
	   * @see {@link Helpers/Layover#repositionOnScroll}
	   */
	  repositionOnScroll: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu should automatically try to reposition itself to stay within
	   * the viewport when the window resizes.
	   *
	   * @see {@link Helpers/Layover#repositionOnResize}
	   */
	  repositionOnResize: _propTypes2.default.bool,

	  /**
	   * Boolean if the menu logic should be simplified without any viewport logic and position
	   * based on the relative position of the menu. This will most like require some additional
	   * styles applied to the menu.
	   *
	   * @see {@link Helpers/Layover#simplified}
	   */
	  simplifiedMenu: _propTypes2.default.bool,

	  /**
	   * This is injected by the `TableRow` component.
	   * @access private
	   */
	  header: _propTypes2.default.bool,

	  /**
	   * @access private
	   */
	  adjusted: _propTypes2.default.bool
	};
	DropdownMenuColumn.defaultProps = {
	  simplifiedMenu: false
	};
	exports.default = (0, _withTableFixes2.default)(DropdownMenuColumn, 'menu-button');

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _CSSTransitionGroup = __webpack_require__(317);

	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _CSSTransitionGroupTick = __webpack_require__(280);

	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);

	var _oneRequired = __webpack_require__(416);

	var _oneRequired2 = _interopRequireDefault(_oneRequired);

	var _invalidIf = __webpack_require__(282);

	var _invalidIf2 = _interopRequireDefault(_invalidIf);

	var _CardTitleBlock = __webpack_require__(276);

	var _CardTitleBlock2 = _interopRequireDefault(_CardTitleBlock);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `TableCardHeader` is used when contextual actions should appear when
	 * a user selects a row.
	 */
	var TableCardHeader = function (_PureComponent) {
	  _inherits(TableCardHeader, _PureComponent);

	  function TableCardHeader(props) {
	    _classCallCheck(this, TableCardHeader);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this.state = { animating: false };
	    return _this;
	  }

	  TableCardHeader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    var visible = this.props.visible;
	    var nVisible = nextProps.visible,
	        transitionEnterTimeout = nextProps.transitionEnterTimeout,
	        transitionLeaveTimeout = nextProps.transitionLeaveTimeout;

	    var timeout = !nVisible ? transitionLeaveTimeout : transitionEnterTimeout;
	    if (visible !== nVisible) {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }

	      this._timeout = setTimeout(function () {
	        _this2._timeout = setTimeout(function () {
	          _this2._timeout = null;
	          _this2.setState({ animating: false });
	        }, timeout);
	      }, _CSSTransitionGroupTick2.default);

	      if (!this.state.animating) {
	        this.setState({ animating: true });
	      }
	    }
	  };

	  TableCardHeader.prototype._cloneCellRight = function _cloneCellRight(noAdjust, children) {
	    if (noAdjust || !children) {
	      return children;
	    }

	    return _react.Children.map(_react.Children.toArray(children), function (child, i) {
	      if (i === 0) {
	        return (0, _react.cloneElement)(child, { className: (0, _classnames2.default)('md-cell--right', child.props.className) });
	      }

	      return child;
	    });
	  };

	  TableCardHeader.prototype._cloneLeftChildren = function _cloneLeftChildren(noClone, children) {
	    if (noClone || !children) {
	      return children;
	    }

	    return _react.Children.map(_react.Children.toArray(children), function (child) {
	      return (0, _react.cloneElement)(child, {
	        className: (0, _classnames2.default)('md-btn--dialog', child.props.className)
	      });
	    });
	  };

	  TableCardHeader.prototype.render = function render() {
	    var animating = this.state.animating;

	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        title = _props.title,
	        titleId = _props.titleId,
	        actions = _props.actions,
	        contextualTitleId = _props.contextualTitleId,
	        contextualChildren = _props.contextualChildren,
	        noActionsAdjust = _props.noActionsAdjust,
	        noChildrenAdjust = _props.noChildrenAdjust,
	        noLeftChildrenClone = _props.noLeftChildrenClone,
	        visible = _props.visible,
	        propChildren = _props.children,
	        propLeftChildren = _props.leftChildren,
	        propContextualTitle = _props.contextualTitle,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'title', 'titleId', 'actions', 'contextualTitleId', 'contextualChildren', 'noActionsAdjust', 'noChildrenAdjust', 'noLeftChildrenClone', 'visible', 'children', 'leftChildren', 'contextualTitle']);

	    var _props2 = this.props,
	        children = _props2.children,
	        leftChildren = _props2.leftChildren,
	        contextualTitle = _props2.contextualTitle;

	    children = this._cloneCellRight(noChildrenAdjust, children);
	    leftChildren = this._cloneLeftChildren(noLeftChildrenClone, leftChildren);

	    if (title) {
	      children = _react2.default.createElement(
	        'div',
	        { className: 'md-card-title', key: 'main-title' },
	        _react2.default.createElement(_CardTitleBlock2.default, { id: titleId, title: title }),
	        children
	      );
	    } else if (leftChildren) {
	      leftChildren = _react.Children.toArray(leftChildren);

	      if (children) {
	        children = leftChildren.concat(_react.Children.toArray(children));
	      } else {
	        children = leftChildren;
	      }
	    }

	    if (contextualTitle) {
	      contextualTitle = _react2.default.createElement(
	        'h2',
	        {
	          id: contextualTitleId,
	          className: 'md-card-title--title md-card-title--title-contextual',
	          tabIndex: contextualTitleId ? -1 : null
	        },
	        contextualTitle
	      );
	    }

	    var contextualHeader = _react2.default.createElement(
	      'div',
	      { key: 'contextual-header', className: 'md-card-title md-card-title--contextual' },
	      contextualTitle,
	      contextualChildren,
	      this._cloneCellRight(noActionsAdjust, actions)
	    );

	    var mergedStyles = style;
	    if (animating) {
	      mergedStyles = Object.assign({}, style, { overflow: 'hidden' });
	    }

	    return _react2.default.createElement(
	      _CSSTransitionGroup2.default,
	      _extends({}, props, {
	        style: mergedStyles,
	        className: (0, _classnames2.default)('md-table-card-header', {
	          'md-table-card-header--no-title': !title
	        }, className)
	      }),
	      children,
	      visible ? contextualHeader : null
	    );
	  };

	  return TableCardHeader;
	}(_react.PureComponent);

	TableCardHeader.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The component to render as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * The transition name to use when the contextual header appears.
	   */
	  transitionName: _propTypes2.default.string.isRequired,

	  /**
	   * The transition time to use when the contextual header appears.
	   */
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * The transition time to use when the contextual header disappears.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * An optional title to display. It is invalid to have both `title` and `leftChildren`
	   * defined as only one will be used.
	   */
	  title: (0, _oneRequired2.default)(_propTypes2.default.node, 'leftChildren', 'children'),

	  /**
	   * An optional id to provide to the title.
	   */
	  titleId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional title to display in the contextual header. This will get wrapped in an `h2`
	   * tag and additional styles applied.
	   */
	  contextualTitle: _propTypes2.default.node,

	  /**
	   * An optional id to provide to the contextual title.
	   */
	  contextualTitleId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * Any additional children to display in the contextual header. This will be displayed after
	   * the optional `contextualTile` and before the `actions`.
	   */
	  contextualChildren: _propTypes2.default.node,

	  /**
	   * An optional button or list of buttons to display instead of a title.
	   */
	  leftChildren: (0, _invalidIf2.default)(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]), 'title'),

	  /**
	   * An additional children to display after the `title` or `leftChildren` prop.
	   * This is _normally_ a list of icon button or menu button.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),

	  /**
	   * An optional button/menu button or a list of button/menu button to display in the
	   * contextual header once the user has selected a row or multiple rows.
	   */
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),

	  /**
	   * Boolean if the `actions` prop should not have each element cloned with additional
	   * class names.
	   */
	  noActionsAdjust: _propTypes2.default.bool,

	  /**
	   * Boolean if the `children` prop should not have each element cloned with additional
	   * class names.
	   */
	  noChildrenAdjust: _propTypes2.default.bool,

	  /**
	   * Boolean if the `leftChildren` prop should not have each element cloned with additional
	   * class names.
	   */
	  noLeftChildrenClone: _propTypes2.default.bool,

	  /**
	   * Boolean if the contextual header is currently visible.
	   */
	  visible: _propTypes2.default.bool.isRequired
	};
	TableCardHeader.defaultProps = {
	  component: 'header',
	  transitionName: 'md-drop-down',
	  transitionEnterTimeout: 150,
	  transitionLeaveTimeout: 150
	};
	exports.default = TableCardHeader;

/***/ }),
/* 416 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = oneRequired;
	/** @module utils/PropTypes/oneRequired */

	/**
	 * A simple prop type validation that makes sure that at least this prop or one of the
	 * other defined prop names are defined for a component.
	 *
	 * @param {function} validator - The PropType validator for the current prop.
	 * @param {...String} otherPropNames - A single or list of prop names that could be defined
	 * @return {Error} a prop type validation error or null.
	 */
	function oneRequired(validator) {
	  for (var _len = arguments.length, otherPropNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    otherPropNames[_key - 1] = arguments[_key];
	  }

	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	    var allPropNames = [propFullNameSafe].concat(otherPropNames);

	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }

	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && !allPropNames.filter(function (pn) {
	      return typeof props[pn] !== 'undefined';
	    }).length) {
	      err = new Error('One of the following props are required for the ' + componentNameSafe + ' component. ' + ('`' + allPropNames.join('`, `') + '`.'));
	    }

	    return err;
	  };
	}

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _CSSTransitionGroup = __webpack_require__(317);

	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _keyCodes = __webpack_require__(279);

	var _CSSTransitionGroupTick = __webpack_require__(280);

	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _toggleScroll = __webpack_require__(418);

	var _toggleScroll2 = _interopRequireDefault(_toggleScroll);

	var _oneRequiredForA11y = __webpack_require__(331);

	var _oneRequiredForA11y2 = _interopRequireDefault(_oneRequiredForA11y);

	var _Dialog = __webpack_require__(402);

	var _Dialog2 = _interopRequireDefault(_Dialog);

	var _Portal = __webpack_require__(375);

	var _Portal2 = _interopRequireDefault(_Portal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `DialogContainer` component is used for dynamically creating the `Dialog` with
	 * transitions.
	 */
	var DialogContainer = function (_PureComponent) {
	  _inherits(DialogContainer, _PureComponent);

	  function DialogContainer(props) {
	    _classCallCheck(this, DialogContainer);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var visible = typeof props.isOpen !== 'undefined' ? props.isOpen : props.visible;
	    var dialogVisible = visible && !props.defaultVisibleTransitionable;

	    _this.state = {
	      active: visible && !props.fullPage,
	      portalVisible: visible,
	      dialogVisible: dialogVisible
	    };
	    return _this;
	  }
	  /* eslint-disable max-len */


	  DialogContainer.prototype.componentDidMount = function componentDidMount() {
	    if (!this.props.isOpen && !this.props.visible) {
	      return;
	    }

	    this._mountDialog(this.props);
	  };

	  DialogContainer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var visible = typeof nextProps.isOpen !== 'undefined' ? nextProps.isOpen : nextProps.visible;
	    if (this.props.isOpen === visible || this.props.visible === visible) {
	      return;
	    }

	    var el = (0, _getField2.default)(this.props, this.context, 'renderNode') || window;
	    var pageX = el.scrollX,
	        pageY = el.scrollY;

	    if (typeof el.scrollTop !== 'undefined' && typeof el.scrollLeft !== 'undefined') {
	      pageX = el.scrollLeft;
	      pageY = el.scrollTop;
	    } else if (typeof el.scrollY !== 'undefined' && typeof el.scrollX !== 'undefined') {
	      pageX = el.scrollX;
	      pageY = el.scrollY;
	    }

	    this._pageX = pageX;
	    this._pageY = pageY;

	    if (this._inTimeout) {
	      clearTimeout(this._inTimeout);
	      this._inTimeout = null;
	    }

	    if (visible) {
	      this._activeElement = document.activeElement;
	      this._mountPortal(nextProps);
	    } else {
	      this.setState({ dialogVisible: false, active: false });
	    }
	  };

	  DialogContainer.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var _props = this.props,
	        visible = _props.visible,
	        closeOnEsc = _props.closeOnEsc,
	        modal = _props.modal;

	    var escapable = !modal && closeOnEsc;
	    var prevEscapable = !prevProps.modal && prevProps.closeOnEsc;

	    // Only going to support visible here since it was not implemented before.
	    if (visible === prevProps.visible && escapable === prevEscapable) {
	      return;
	    }

	    var add = false;
	    var remove = false;

	    if (escapable !== prevEscapable) {
	      add = visible && escapable;
	      remove = !visible || prevEscapable && !escapable;
	    } else if (escapable) {
	      add = visible;
	      remove = !visible;
	    }

	    if (add) {
	      window.addEventListener('keydown', this._handleEscClose);
	    } else if (remove) {
	      window.removeEventListener('keydown', this._handleEscClose);
	    }
	  };

	  DialogContainer.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.props.isOpen || this.props.visible) {
	      (0, _toggleScroll2.default)(false);
	    }

	    if (this.props.visible && this.props.closeOnEsc && !this.props.modal) {
	      window.removeEventListener('keydown', this._handleEscClose);
	    }

	    if (this._inTimeout) {
	      clearTimeout(this._inTimeout);
	    }
	  };

	  DialogContainer.prototype.render = function render() {
	    var _state = this.state,
	        active = _state.active,
	        dialogVisible = _state.dialogVisible,
	        portalVisible = _state.portalVisible;

	    var _props2 = this.props,
	        style = _props2.style,
	        className = _props2.className,
	        dialogStyle = _props2.dialogStyle,
	        dialogClassName = _props2.dialogClassName,
	        modal = _props2.modal,
	        fullPage = _props2.fullPage,
	        component = _props2.component,
	        transitionEnterTimeout = _props2.transitionEnterTimeout,
	        transitionLeaveTimeout = _props2.transitionLeaveTimeout,
	        lastChild = _props2.lastChild,
	        portal = _props2.portal,
	        propVisible = _props2.visible,
	        propRenderNode = _props2.renderNode,
	        closeOnEsc = _props2.closeOnEsc,
	        onShow = _props2.onShow,
	        onHide = _props2.onHide,
	        disableScrollLocking = _props2.disableScrollLocking,
	        defaultVisibleTransitionable = _props2.defaultVisibleTransitionable,
	        close = _props2.close,
	        isOpen = _props2.isOpen,
	        actionLeft = _props2.actionLeft,
	        actionRight = _props2.actionRight,
	        transitionName = _props2.transitionName,
	        transitionEnter = _props2.transitionEnter,
	        transitionLeave = _props2.transitionLeave,
	        props = _objectWithoutProperties(_props2, ['style', 'className', 'dialogStyle', 'dialogClassName', 'modal', 'fullPage', 'component', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'lastChild', 'portal', 'visible', 'renderNode', 'closeOnEsc', 'onShow', 'onHide', 'disableScrollLocking', 'defaultVisibleTransitionable', 'close', 'isOpen', 'actionLeft', 'actionRight', 'transitionName', 'transitionEnter', 'transitionLeave']);

	    var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');
	    var dialog = _react2.default.createElement(_Dialog2.default, _extends({
	      key: 'dialog',
	      style: dialogStyle,
	      className: (0, _classnames2.default)('md-background--card', dialogClassName),
	      ref: this._handleDialogMounting,
	      centered: !fullPage,
	      fullPage: fullPage
	    }, props, {
	      containerX: this._pageX,
	      containerY: this._pageY,
	      onLeave: this._unmountPortal
	    }));

	    var container = _react2.default.createElement(
	      _CSSTransitionGroup2.default,
	      {
	        component: component,
	        ref: this._setContainer,
	        style: style,
	        className: (0, _classnames2.default)('md-dialog-container', {
	          'md-overlay': !fullPage,
	          'md-overlay--active': !fullPage && active && propVisible,
	          'md-pointer--hover': !fullPage && !modal && propVisible
	        }, className),
	        transitionName: 'md-dialog--' + (fullPage ? 'full-page' : 'centered'),
	        transitionEnterTimeout: transitionEnterTimeout,
	        transitionLeaveTimeout: transitionLeaveTimeout,
	        tabIndex: -1,
	        onClick: this._handleClick
	      },
	      dialogVisible ? dialog : null
	    );

	    if (!portal) {
	      return portalVisible ? container : null;
	    }

	    return _react2.default.createElement(
	      _Portal2.default,
	      { visible: portalVisible, renderNode: renderNode, lastChild: lastChild },
	      container
	    );
	  };

	  return DialogContainer;
	}(_react.PureComponent);

	DialogContainer.propTypes = {
	  /**
	   * An id to use for the `Dialog` once it has been opened. This is used for the
	   * [dialog role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_dialog_role).
	   * This is used to generate an `id` for the `title` prop when it has been defined.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	  /* eslint-enable max-len */

	  /**
	   * An optional accessibility prop to use when the `Dialog` is opened. This should be an id
	   * pointing to some text that describes the content of the dialog. For accessibility
	   * reasons, one of the following props must be defined:
	   * - `title`
	   * - `aria-describedby`
	   * - `aria-labelledby`
	   * - `aria-label`
	   *
	   * An example usage:
	   *
	   * ```js
	   * <Dialog id="accessible-example" visible aria-describedby="accessible-content">
	   *   <p id="accessible-content">This is some content that describes the dialog.</p>
	   * </Dialog>
	   * ```
	   */
	  'aria-describedby': (0, _oneRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), 'title', 'aria-labelledby', 'aria-label'),

	  /**
	   * An optional accessibility prop to use when the `title` prop is not given. This should be
	   * an id pointing to a `h` tag that labels the dialog.
	   *
	   * An example usage:
	   *
	   * ```js
	   * <Dialog visible id="accessible-example" aria-labelledby="accessible-dialog-label">
	   *   <h2 id="accessible-dialog-label">Some Accessible Dialog</h2>
	   * </Dialog>
	   * ```
	   */
	  'aria-labelledby': _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional accessibility prop to use when the `title` and `aria-labelledby` props are
	   * not defined. This should be a string that describes what is in the `Dialog`.
	   *
	   * An example usage:
	   *
	   * ```js
	   * <Dialog visible id="accessible-example" aria-label="Some Accessible Dialog">
	   *   <p>Lorem Ipsum</p>
	   * </Dialog>
	   * ```
	   */
	  'aria-label': _propTypes2.default.string,

	  /**
	   * An optional style to apply to the dialog's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the dialog's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the dialog itself when the `visible` prop is `true`.
	   */
	  dialogStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the dialog itself when the `visible` prop is `true`.
	   */
	  dialogClassName: _propTypes2.default.string,

	  /**
	   * An optional styke to apply to the title.
	   */
	  titleStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the title.
	   */
	  titleClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the footer. This is used when the `actions`
	   * prop is defined.
	   */
	  footerStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the footer. This is used when the `actions`
	   * prop is defined.
	   */
	  footerClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the dialog's content.
	   */
	  contentStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the dialog's content.
	   */
	  contentClassName: _propTypes2.default.string,

	  /**
	   * The component to render the dialog's container in.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * The component to render the dialog's content in.
	   */
	  contentComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * The content to display in the dialog once open.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * A single action or a list of actions to display in the dialog. This can either be a list
	   * of `FlatButton` props or `<Button flat {...props} />` elements.
	   */
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]))]),

	  /**
	   * Boolean if the `Dialog` is current visible.
	   */
	  visible: _propTypes2.default.bool.isRequired,

	  /**
	   * An optional function to call when the `visible` prop is changed from `false` to `true`.
	   */
	  onShow: _propTypes2.default.func,

	  /**
	   * A function to call that will close the dialog. This is required when the `modal` and `fullPage`
	   * props are not `true`.
	   */
	  onHide: function onHide(props, propName) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    var validator = _propTypes2.default.func;
	    if (!props.modal && !props.fullPage) {
	      validator = validator.isRequired;
	    }

	    return validator.apply(undefined, [props, propName].concat(args));
	  },

	  /**
	   * Boolean if the dialog should behave like a modal. This means that the dialog can only
	   * be closed by clicking on an action instead of also clicking on the overlay.
	   */
	  modal: _propTypes2.default.bool,

	  /**
	   * Boolean if the dialog should be displayed as a full page dialog.
	   */
	  fullPage: function fullPage(props, propName, componentName) {
	    for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      args[_key2 - 3] = arguments[_key2];
	    }

	    var componentNameSafe = componentName || '<<anonymous>>';
	    var err = _propTypes2.default.bool.apply(_propTypes2.default, [props, propName, componentName].concat(args));

	    if (!err && props[propName] && typeof props.title !== 'undefined') {
	      err = new Error('You provided a `title` ' + location + ' to the `' + componentNameSafe + '` when `fullPage` ' + 'has been set to true. A title for a full page dialog should be rendered as a child instead.');
	    }

	    return err;
	  },

	  /**
	   * An optional pageX location to use when rendering a full page dialog. This is used to set the location
	   * the dialog should appear from.
	   */
	  pageX: _propTypes2.default.number,

	  /**
	   * An optional pageY location to use when rendering a full page dialog. This is used to set the location
	   * the dialog should appear from.
	   */
	  pageY: _propTypes2.default.number,

	  /**
	   * @see {@link Helpers/FocusContainer#additionalFocusKeys}
	   */
	  additionalFocusKeys: _Dialog2.default.propTypes.additionalFocusKeys,

	  /**
	   * @see {@link Helpers/FocusContainer#initialFocus}
	   */
	  initialFocus: _Dialog2.default.propTypes.initialFocus,

	  /**
	   * @see {@link Helpers/FocusContainer#focusOnMount}
	   */
	  focusOnMount: _Dialog2.default.propTypes.focusOnMount,

	  /**
	   * @see {@link Helpers/FocusContainer#containFocus}
	   */
	  containFocus: _Dialog2.default.propTypes.containFocus,

	  /**
	   * The transition enter timeout for the dialog.
	   */
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * The transition leave timeout for the dialog.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the dialog should be closable by pressing the escape key.
	   * This will always be considered `false` of the `modal` props is `true`.
	   */
	  closeOnEsc: _propTypes2.default.bool,

	  /**
	   * Boolean if the Portal's functionality of rendering in a separate react tree should be applied
	   * to the dialog.
	   *
	   * @see {@link Helpers/Portal}
	   */
	  portal: _propTypes2.default.bool,

	  /**
	   * Since the `Dialog` uses the `Portal` component, you can pass an optional HTML Node to render
	   * the dialog in instead of the `document.body`.
	   */
	  renderNode: _propTypes2.default.object,

	  /**
	   * Boolean if the dialog should be rendered as the last child in the `renderNode` or `body` instead
	   * of as the first.
	   */
	  lastChild: _propTypes2.default.bool,

	  /**
	   * An optional title for the dialog.
	   */
	  title: _propTypes2.default.node,

	  /**
	   * Boolean if the dialog should animate into view if it is constructed with `visible` enabled.
	   *
	   * This basically means that if the `Dialog` has `visible` enabled on initial page load, does it animate?
	   * In some cases, it can also mean if the `Dialog` is added to the render tree with `visible` enabled,
	   * does it animate?
	   */
	  defaultVisibleTransitionable: _propTypes2.default.bool,

	  /**
	   * Boolean if the Dialog should no longer try to prevent the parent container from scrolling while visible.
	   * In most cases, this will attempt to prevent the main window scrolling. If this dialog is nested in another
	   * dialog, it will attempt to prevent the parent dialog from scrolling.
	   */
	  disableScrollLocking: _propTypes2.default.bool,

	  /**
	   * Boolean if the dialog should automatically try to determine if the content
	   * should be padded. It will be padded if the dialog does not contain a `List`.
	   */
	  autopadContent: _propTypes2.default.bool,

	  /**
	   * Boolean if the dialog content's size should automatically be resized to overflow
	   * correctly when there is a lot of content. This will calculate and apply some `maxHeight`
	   * to the `contentStyle`.
	   */
	  autosizeContent: _propTypes2.default.bool,

	  /**
	   * An optional height to apply to the dialog. This is used if it is easier to just apply height/width
	   * with for specific dialogs instead of in CSS.
	   *
	   * **This prop should not be used if the `fullPage` prop is enabled.**
	   *
	   * @see {@link #fullPage}
	   * @see {@link #width}
	   */
	  height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional width to apply to the dialog. This is used if it is easier to just apply height/width
	   * with for specific dialogs instead of in CSS.
	   *
	   * **This prop should not be used if the `fullPage` prop is enabled.**
	   *
	   * @see {@link #fullPage}
	   * @see {@link #height}
	   */
	  width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * Boolean if the actions should be stacked on top of each other. If this value is `undefined`, it will
	   * automatically attempt to guess if the items should be stacked.
	   */
	  stackedActions: _propTypes2.default.bool,

	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead'),
	  transitionName: (0, _deprecated2.default)(_propTypes2.default.string, 'The transition name will be managed by the component'),
	  transitionEnter: (0, _deprecated2.default)(_propTypes2.default.bool, 'The transition will always be enforced'),
	  transitionLeave: (0, _deprecated2.default)(_propTypes2.default.bool, 'The transition will always be enforced'),
	  actionLeft: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `fullPage` prop instead'),
	  actionRight: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `fullPage` prop instead'),
	  close: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onHide` instead')
	};
	DialogContainer.defaultProps = {
	  autopadContent: true,
	  autosizeContent: true,
	  component: 'span',
	  closeOnEsc: true,
	  contentComponent: 'section',
	  focusOnMount: true,
	  transitionEnterTimeout: 300,
	  transitionLeaveTimeout: 300,
	  defaultVisibleTransitionable: false
	};
	DialogContainer.contextTypes = {
	  renderNode: _propTypes2.default.object
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._setContainer = function (container) {
	    if (container !== null) {
	      _this2._container = (0, _reactDom.findDOMNode)(container);
	    }
	  };

	  this._handleEscClose = function (e) {
	    if ((e.which || e.keyCode) === _keyCodes.ESC) {
	      (_this2.props.onHide || _this2.props.close)(e);
	    }
	  };

	  this._mountPortal = function (props) {
	    _this2._mountDialog(props);
	    _this2.setState({ portalVisible: true });
	  };

	  this._mountDialog = function (props) {
	    var fullPage = props.fullPage,
	        onShow = props.onShow;

	    _this2._inTimeout = setTimeout(function () {
	      _this2._inTimeout = fullPage ? null : setTimeout(function () {
	        _this2._inTimeout = null;
	        _this2.setState({ active: true });
	      }, _CSSTransitionGroupTick2.default);
	      _this2.setState({ dialogVisible: true }, onShow);
	    }, _CSSTransitionGroupTick2.default);
	  };

	  this._unmountPortal = function () {
	    _this2.setState({ portalVisible: false });
	  };

	  this._handleClick = function (e) {
	    var visible = typeof _this2.props.isOpen !== 'undefined' ? _this2.props.isOpen : _this2.props.visible;
	    if (_this2.props.modal || !visible || e.target !== _this2._container) {
	      return;
	    }

	    (_this2.props.onHide || _this2.props.close)(e);
	  };

	  this._handleDialogMounting = function (dialog) {
	    var disableScrollLocking = _this2.props.disableScrollLocking;

	    if (dialog === null) {
	      if (_this2._activeElement && _this2._activeElement.focus) {
	        _this2._activeElement.focus();
	      }

	      if (!disableScrollLocking) {
	        (0, _toggleScroll2.default)(false, _this2.scrollEl);
	      }

	      _this2._activeElement = null;
	    } else {
	      var container = document.getElementById(_this2.props.id);
	      if (!container || disableScrollLocking) {
	        return;
	      }

	      var el = (0, _getField2.default)(_this2.props, _this2.context, 'renderNode');
	      var node = container.parentNode;
	      while (node && node.classList && !el) {
	        if (node.classList.contains('md-dialog')) {
	          el = node;
	        }

	        node = node.parentNode;
	      }

	      _this2.scrollEl = el;
	      (0, _toggleScroll2.default)(true, el);
	    }
	  };
	};

	exports.default = DialogContainer;

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = toggleScroll;

	var _getPagePosition = __webpack_require__(293);

	var _getPagePosition2 = _interopRequireDefault(_getPagePosition);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A utility function for toggling the overflow visibility on an element. This will either target
	 * the given `selector`, or the `body` tag to set a `className`.
	 *
	 * If the `visible` param is `undefined`, the className will be toggled.
	 * If the `visible` param is `true`, the className will be added.
	 * If the `visible` param is `false`, the className will be removed.
	 *
	 *
	 * > This depends on the `classList` attribute on elements.
	 *
	 * @param {bool=} visible - An optional boolean to determine how the `className` will be applied.
	 * @param {string|Object=} selector - An optional query selector string to use to select an element.
	 * @param {string=} className - The className to apply. Defaults to 'md-overflow-hidden'
	 */
	function toggleScroll(scrollable, selector) {
	  var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'md-no-scroll';

	  var queryable = !selector || typeof selector === 'string';
	  var el = void 0;
	  if (queryable) {
	    el = selector ? document.querySelector(selector) : document.querySelector('html');
	  } else {
	    el = selector;
	  }

	  if (!el) {
	    return;
	  }

	  if (typeof scrollable === 'undefined') {
	    scrollable = !el.classList.contains(className);
	  }

	  if (scrollable && !el.classList.contains(className)) {
	    el.style.top = '-' + (queryable ? (0, _getPagePosition2.default)('y') : el.scrollTop) + 'px';
	    el.classList.add(className);
	  } else if (!scrollable && el.classList.contains(className)) {
	    var scrollTop = Math.abs(parseInt(el.style.top, 10));
	    el.classList.remove(className);
	    el.style.top = null;

	    if (!selector) {
	      window.scrollTo(0, scrollTop);
	    } else {
	      el.scrollTop = scrollTop;
	    }
	  }
	} /** @module utils/toggleScroll */

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _media = __webpack_require__(420);

	var _CSSTransitionGroupTick = __webpack_require__(280);

	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _mapToListParts = __webpack_require__(413);

	var _mapToListParts2 = _interopRequireDefault(_mapToListParts);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _Paper = __webpack_require__(256);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _Portal = __webpack_require__(375);

	var _Portal2 = _interopRequireDefault(_Portal);

	var _List = __webpack_require__(345);

	var _List2 = _interopRequireDefault(_List);

	var _Overlay = __webpack_require__(421);

	var _Overlay2 = _interopRequireDefault(_Overlay);

	var _isType = __webpack_require__(422);

	var _DrawerTypes = __webpack_require__(423);

	var _DrawerTypes2 = _interopRequireDefault(_DrawerTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var oneOfDrawerTypes = _propTypes2.default.oneOf([_DrawerTypes2.default.FULL_HEIGHT, _DrawerTypes2.default.CLIPPED, _DrawerTypes2.default.FLOATING, _DrawerTypes2.default.PERSISTENT, _DrawerTypes2.default.PERSISTENT_MINI, _DrawerTypes2.default.TEMPORARY, _DrawerTypes2.default.TEMPORARY_MINI]);

	/**
	 * The `Drawer` component is used for having a sliding panel of content or navigation
	 * that appears from the side of a screen.
	 *
	 * If the `Drawer` uses any of the `_MINI` drawer types, you will need to also create another
	 * `Drawer` that is not `_MINI`. Transitioning the `width` on mobile devices is very sluggish,
	 * and it isn't much more work to create another drawer.
	 */

	var Drawer = function (_PureComponent) {
	  _inherits(Drawer, _PureComponent);

	  /**
	   * Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,
	   * and the current drawer type. This expects a `props` object of the drawer.
	   *
	   * If this is used server side, it will default to only matching mobile.
	   *
	   * @param {Object=} props - The current drawer's prop shape to extract the mobile, tablet,
	   *    and desktop type/min widths. This defaults to the drawer's default props.
	   * @return {Object} an object containing the media matches and the current type to use for the drawer.
	   */
	  Drawer.getCurrentMedia = function getCurrentMedia() {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Drawer.defaultProps;
	    var mobileMinWidth = props.mobileMinWidth,
	        tabletMinWidth = props.tabletMinWidth,
	        desktopMinWidth = props.desktopMinWidth,
	        mobileType = props.mobileType,
	        tabletType = props.tabletType,
	        desktopType = props.desktopType,
	        constantType = props.constantType;

	    if (typeof window === 'undefined') {
	      var _type = constantType && props.type ? props.type : mobileType;
	      return { mobile: true, tablet: false, desktop: false, type: _type };
	    }

	    var mobile = Drawer.matchesMedia(mobileMinWidth, tabletMinWidth - 1);
	    var tablet = Drawer.matchesMedia(tabletMinWidth, desktopMinWidth);
	    var desktop = Drawer.matchesMedia(desktopMinWidth);

	    var type = void 0;
	    if (constantType && props.type && (0, _isType.isTemporary)(props.type)) {
	      type = props.type;
	    } else if (desktop) {
	      type = desktopType;
	    } else if (tablet) {
	      type = tabletType;
	    } else {
	      type = mobileType;
	    }

	    return { type: type, mobile: mobile, tablet: tablet, desktop: desktop };
	  };

	  /**
	   * Simply does a `window.matchMedia(query)` where the query gets defined as a min width
	   * and optional max width.
	   *
	   * @param {number} min - The min width for the media query.
	   * @param {number=} max - An optional max width to include for the media query.
	   * @return {boolean} true if the media matches.
	   */


	  Drawer.matchesMedia = function matchesMedia(min, max) {
	    var media = 'screen and (min-width: ' + min + 'px)';
	    if (max) {
	      media += ' and (max-width: ' + max + 'px)';
	    }

	    return window.matchMedia(media).matches;
	  };

	  function Drawer(props) {
	    _classCallCheck(this, Drawer);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var defaultVisible = props.defaultVisible,
	        defaultMedia = props.defaultMedia,
	        overlay = props.overlay;


	    _this.state = {
	      mobile: defaultMedia === 'mobile',
	      tablet: defaultMedia === 'tablet',
	      desktop: defaultMedia === 'desktop',
	      animating: false,
	      overlayActive: false,
	      drawerActive: false
	    };

	    if (typeof props.type === 'undefined') {
	      _this.state.type = props[defaultMedia + 'Type'];
	    }

	    var type = (0, _getField2.default)(props, _this.state, 'type');
	    _this._initialFix = true;

	    if (typeof props.visible === 'undefined') {
	      var _visible = (0, _isType.isPermanent)(type) || (0, _isType.isMini)(type);
	      if (!_visible && typeof defaultVisible !== 'undefined') {
	        _visible = defaultVisible;
	      }

	      _this.state.visible = _visible;
	    }

	    var visible = (0, _getField2.default)(props, _this.state, 'visible');

	    _this.state.overlayActive = (typeof overlay !== 'undefined' ? overlay : (0, _isType.isTemporary)(type) && !_this.state.desktop) && visible;
	    _this.state.drawerActive = visible;
	    return _this;
	  }

	  Drawer.prototype.componentWillMount = function componentWillMount() {
	    if (typeof window !== 'undefined') {
	      this._updateType(this.props);
	    }
	  };

	  Drawer.prototype.componentDidMount = function componentDidMount() {
	    if (!(0, _isType.isMini)((0, _getField2.default)(this.props, this.state, 'type'))) {
	      window.addEventListener('resize', this._updateMedia);
	    }
	  };

	  Drawer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        mobileMinWidth = _props.mobileMinWidth,
	        mobileType = _props.mobileType,
	        tabletMinWidth = _props.tabletMinWidth,
	        tabletType = _props.tabletType,
	        desktopMinWidth = _props.desktopMinWidth,
	        desktopType = _props.desktopType;


	    if (nextProps.mobileMinWidth !== mobileMinWidth || nextProps.mobileType !== mobileType || nextProps.tabletMinWidth !== tabletMinWidth || nextProps.tabletType !== tabletType || nextProps.desktopMinWidth !== desktopMinWidth || nextProps.desktopType !== desktopType) {
	      this._updateType(nextProps);
	    }

	    var visible = nextProps.visible,
	        transitionDuration = nextProps.transitionDuration,
	        overlay = nextProps.overlay;

	    if (this.props.visible === nextProps.visible) {
	      return;
	    }

	    var type = (0, _getField2.default)(nextProps, this.state, 'type');
	    this._animate(visible, type, transitionDuration, overlay, this.state.desktop);
	  };

	  Drawer.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }

	    if (this._closeTimeout) {
	      clearTimeout(this._closeTimeout);
	    }

	    window.removeEventListener('resize', this._updateMedia);
	  };

	  Drawer.prototype.render = function render() {
	    var _cn;

	    var _state = this.state,
	        overlayActive = _state.overlayActive,
	        drawerActive = _state.drawerActive,
	        animating = _state.animating;

	    var _props2 = this.props,
	        id = _props2.id,
	        style = _props2.style,
	        className = _props2.className,
	        navStyle = _props2.navStyle,
	        navClassName = _props2.navClassName,
	        component = _props2.component,
	        navItems = _props2.navItems,
	        header = _props2.header,
	        children = _props2.children,
	        inline = _props2.inline,
	        position = _props2.position,
	        overlay = _props2.overlay,
	        clickableDesktopOverlay = _props2.clickableDesktopOverlay,
	        lastChild = _props2.lastChild,
	        portal = _props2.portal,
	        overlayStyle = _props2.overlayStyle,
	        overlayClassName = _props2.overlayClassName,
	        propType = _props2.type,
	        propVisible = _props2.visible,
	        propRenderNode = _props2.renderNode,
	        propNavItemsId = _props2.navItemsId,
	        propZDepth = _props2.zDepth,
	        constantType = _props2.constantType,
	        defaultVisible = _props2.defaultVisible,
	        defaultMedia = _props2.defaultMedia,
	        mobileType = _props2.mobileType,
	        mobileMinWidth = _props2.mobileMinWidth,
	        tabletType = _props2.tabletType,
	        tabletMinWidth = _props2.tabletMinWidth,
	        desktopType = _props2.desktopType,
	        desktopMinWidth = _props2.desktopMinWidth,
	        transitionDuration = _props2.transitionDuration,
	        onMediaTypeChange = _props2.onMediaTypeChange,
	        onVisibilityChange = _props2.onVisibilityChange,
	        autoclose = _props2.autoclose,
	        autocloseAfterInk = _props2.autocloseAfterInk,
	        onVisibilityToggle = _props2.onVisibilityToggle,
	        closeOnNavItemClick = _props2.closeOnNavItemClick,
	        props = _objectWithoutProperties(_props2, ['id', 'style', 'className', 'navStyle', 'navClassName', 'component', 'navItems', 'header', 'children', 'inline', 'position', 'overlay', 'clickableDesktopOverlay', 'lastChild', 'portal', 'overlayStyle', 'overlayClassName', 'type', 'visible', 'renderNode', 'navItemsId', 'zDepth', 'constantType', 'defaultVisible', 'defaultMedia', 'mobileType', 'mobileMinWidth', 'tabletType', 'tabletMinWidth', 'desktopType', 'desktopMinWidth', 'transitionDuration', 'onMediaTypeChange', 'onVisibilityChange', 'autoclose', 'autocloseAfterInk', 'onVisibilityToggle', 'closeOnNavItemClick']);

	    var _props3 = this.props,
	        navItemsId = _props3.navItemsId,
	        zDepth = _props3.zDepth;

	    if (!navItemsId && id) {
	      navItemsId = id + '-nav-items';
	    }

	    var desktop = this.state.desktop;

	    var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');
	    var type = (0, _getField2.default)(this.props, this.state, 'type');
	    var visible = (0, _getField2.default)(this.props, this.state, 'visible');
	    var mini = (0, _isType.isMini)(type);
	    var temporary = (0, _isType.isTemporary)(type);
	    var floating = _DrawerTypes2.default.FLOATING === type;
	    var permanent = (0, _isType.isPermanent)(type);

	    var Component = void 0;
	    if (component) {
	      Component = component;
	    } else if (navItems) {
	      Component = 'nav';
	    } else {
	      Component = 'aside';
	    }

	    var navigation = void 0;
	    if (navItems) {
	      navigation = _react2.default.createElement(
	        _List2.default,
	        {
	          ref: this._setNavigation,
	          key: 'navigation',
	          id: navItemsId,
	          style: navStyle,
	          className: (0, _classnames2.default)('md-list--drawer', {
	            'md-toolbar-relative': mini && !visible,
	            'md-background': floating
	          }, navClassName),
	          onClick: this._handleNavClick
	        },
	        navItems.map(_mapToListParts2.default)
	      );
	    }

	    if (typeof zDepth === 'undefined') {
	      zDepth = 1;
	      if (floating || inline) {
	        zDepth = 0;
	      } else if (!mini && temporary) {
	        zDepth = 5;
	      }
	    }

	    var overlayVisible = overlay;
	    if (typeof overlayVisible !== 'boolean') {
	      overlayVisible = temporary && !mini && (!desktop || clickableDesktopOverlay) && (animating || visible);
	    }

	    var drawer = _react2.default.createElement(
	      _Paper2.default,
	      _extends({}, props, {
	        id: id,
	        key: 'drawer',
	        component: Component,
	        zDepth: zDepth,
	        raiseOnHover: false,
	        style: style,
	        className: (0, _classnames2.default)('md-drawer', (_cn = {}, _cn['md-drawer--' + position] = !inline, _cn['md-drawer--fixed'] = !inline, _cn['md-drawer--inline'] = inline, _cn['md-drawer--active'] = mini || drawerActive, _cn['md-drawer--mini'] = mini, _cn['md-transition--deceleration'] = !mini && !permanent && visible, _cn['md-transition--acceleration'] = !mini && !permanent && !visible, _cn['md-background'] = inline || floating, _cn['md-background--card'] = !floating && !inline, _cn), className)
	      }),
	      header,
	      navigation,
	      children,
	      _react2.default.createElement(_Overlay2.default, {
	        style: overlayStyle,
	        className: overlayClassName,
	        active: overlayActive,
	        onClick: this._closeDrawer,
	        visible: overlayVisible,
	        renderNode: renderNode
	      })
	    );

	    if (inline || permanent) {
	      return drawer;
	    } else if (!portal) {
	      return mini || animating || visible ? drawer : null;
	    }

	    return _react2.default.createElement(
	      _Portal2.default,
	      { visible: animating || visible, renderNode: renderNode, lastChild: lastChild },
	      drawer
	    );
	  };

	  return Drawer;
	}(_react.PureComponent);

	Drawer.DrawerTypes = _DrawerTypes2.default;
	Drawer.propTypes = {
	  /**
	   * An optional id to provide to the drawer. This is generally a good idea to provide if
	   * there are any `navItems` defined.
	   *
	   * @see {@link #navItemsId}
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the navItems list. If this is omitted and the `id` prop is
	   * defined, it will be defaulted to `${id}-nav-items`.
	   */
	  navItemsId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the `List` surrounding the `navItems`.
	   */
	  navStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `List` surrounding the `navItems`.
	   */
	  navClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the overlay.
	   */
	  overlayStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the overlay.
	   */
	  overlayClassName: _propTypes2.default.string,

	  /**
	   * An optional component to render the drawer in. When this prop is undefined, the drawer
	   * will be rendered as a `nav` if the `navItems` prop is defined, otherwise an `aside`.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.element]),

	  /**
	   * An optional list of navigation items to display in the drawer. This list can either contain
	   * a valid child component for a `List` or an object used to create a `Divider`, `Subheader`,
	   * or `ListItem`.
	   *
	   * - To create a divider in the list, set a `divider` key to `true`. Any other keys will be
	   * passed to the `Divider` component.
	   * - To create a subheader in the list, set the `subheader` key to `true`. Any other keys will
	   * be passed to the `Subheader` component.
	   * - To create a list item, just create an object with any normal `ListItem` props.
	   */
	  navItems: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.shape({
	    divider: _propTypes2.default.bool,
	    subheader: _propTypes2.default.bool,
	    primaryText: _propTypes2.default.node
	  })])),

	  /**
	   * Boolean if a temporary drawer should close when a nav item is clicked.
	   */
	  autoclose: _propTypes2.default.bool,

	  /**
	   * An optional header to display. This _should_ normally be a toolbar.
	   */
	  header: _propTypes2.default.node,

	  /**
	   * Any additional children to display after the `header` and `navItems`.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * The drawer type to use when the current device matches the mobile
	   * media query.
	   */
	  mobileType: _propTypes2.default.oneOf([Drawer.DrawerTypes.TEMPORARY, Drawer.DrawerTypes.TEMPORARY_MINI]).isRequired,

	  /**
	   * The min-width to use for the mobile media query.
	   */
	  mobileMinWidth: _propTypes2.default.number.isRequired,

	  /**
	   * The drawer type to use when the current device matches the tablet
	   * media query.
	   */
	  tabletType: oneOfDrawerTypes.isRequired,

	  /**
	   * The min-width to use for the tablet media query.
	   */
	  tabletMinWidth: _propTypes2.default.number.isRequired,

	  /**
	   * The drawer type to use when the current device matches the desktop media
	   * query.
	   */
	  desktopType: oneOfDrawerTypes.isRequired,

	  /**
	   * The min-width for a desktop screen.
	   */
	  desktopMinWidth: _propTypes2.default.number.isRequired,

	  /**
	   * An optional type to enforce across all media sizes. Since `mobile` devices are
	   * included, you are required to manually specify when the `type` should be `temporary`.
	   *
	   * When the `type` is not one of the `temporary` types, the `onMediaTypeChange` prop
	   * must be provided.
	   */
	  type: function type(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }

	    var type = props[propName];
	    if ((0, _isType.isTemporary)(type)) {
	      return oneOfDrawerTypes.apply(undefined, [props, propName, component].concat(others));
	    }

	    var err = oneOfDrawerTypes.apply(undefined, [props, propName, component].concat(others));
	    if (!err && typeof type !== 'undefined' && !(0, _isType.isMini)(type) && typeof props.onMediaTypeChange === 'undefined') {
	      err = new Error('You provided a `' + propName + '` prop to the ' + component + ' without the `onMediaTypeChange` ' + ('handler. The `onMediaTypeChange` prop must be specified when the `' + propName + '` is not ') + 'one of the `temporary` types.');
	    }

	    return err;
	  },

	  /**
	   * An optional function to call when the drawer's type changes when the screen resizes.
	   * The callback will include the new `type` that should be used for the screen size,
	   * and an object containing the media matches for `mobile`, `tablet`, and `desktop`.
	   *
	   * ```js
	   * this.props.onMediaTypeChange(Drawer.DrawerTypes.TEMPORARY, {
	   *   mobile: true,
	   *   tablet: false,
	   *   desktop: false,
	   * });
	   * ```
	   */
	  onMediaTypeChange: _propTypes2.default.func,

	  /**
	   * The default drawer type to display on initial render. The drawer will automatically
	   * adjust itself to the correct media once it has mounted. This prop is really only useful
	   * for server side rendering.
	   */
	  defaultMedia: _propTypes2.default.oneOf(['mobile', 'tablet', 'desktop']).isRequired,

	  /**
	   * Boolean if there should be a visible overlay when the drawer is visible. The default behavior
	   * is to only include a visible overlay when the `type` is `TEMPORARY` or `TEMPORARY_MINI` and
	   * the device is not a desktop.
	   *
	   * Definining this variable as `true` or `false` will override any default behavior. This means that
	   * if this is enabled for a full-height drawer, an overlay will still be created.
	   */
	  overlay: _propTypes2.default.bool,

	  /**
	   * Boolean if the Portal's functionality of rendering in a separate react tree should be applied
	   * to the drawer. The overlay that appears for temporary type drawers will still appear in the
	   * separate subtree.
	   *
	   * @see {@link Helpers/Portal}
	   */
	  portal: _propTypes2.default.bool,

	  /**
	   * An optional DOM Node to render the drawer into. The default is to render as
	   * the first child in the `body`.
	   *
	   * > This prop will not be used when the drawer is of the permanent type or `inline` is specified
	   * since the `Portal` component will not be used.
	   */
	  renderNode: _propTypes2.default.object,

	  /**
	   * Boolean if the drawer should be rendered as the last child instead of the first child
	   * in the `renderNode` or `body`.
	   *
	   * > This prop will not be used when the drawer is of the permanent type or `inline` is specified
	   * since the `Portal` component will not be used.
	   */
	  lastChild: _propTypes2.default.bool,

	  /**
	   * Boolean if the drawer is visible by default. If this is omitted, the drawer will be visible
	   * if the current drawer type is NOT `Drawer.DrawerTypes.TEMPORARY` or `Drawer.DrawerTypes.TEMPORARY_MINI`.
	   *
	   * This basically means that if you are using the default configuration, a mobile device's drawer
	   * will be hidden while tablets and desktops will be visible.
	   */
	  defaultVisible: _propTypes2.default.bool,

	  /**
	   * Boolean if the drawer is visible. This will force the component to define the `onVisibilityChange`
	   * prop as well as manually updating the drawer's visibility.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityChange', 'defaultVisible'),

	  /**
	   * An optional function to call when the visibility of the drawer is changed. The function will
	   * be called with the new visibility state.
	   *
	   * ```js
	   * onVisibilityChange(!currentlyVisible);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,

	  /**
	   * The drawer's position on the page when it is not `inline`. When the drawer's position is `left`,
	   * the width will be `calc(100vw - 56px)` on mobile devices and `$md-drawer-desktop-width` on desktops.
	   *
	   * When the position is `right`, the width will be `100vw` for mobile devices and scaling to the drawer's
	   * children width on desktops.
	   */
	  position: _propTypes2.default.oneOf(['left', 'right']).isRequired,

	  /**
	   * Boolean if the drawer should be displayed inline instead of fixed to the page. When this prop
	   * is enabled, the `position` prop will not be used.
	   */
	  inline: _propTypes2.default.bool,

	  /**
	   * The `$md-drawer-transition-time` value from sass.
	   */
	  transitionDuration: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the temporary drawer's overlay should be created on desktop screens. This is really used so that
	   * the drawer will close when a user clicks anywhere on the page except in the drawer.
	   */
	  clickableDesktopOverlay: _propTypes2.default.bool,

	  /**
	   * Boolean if the `autoclose` feature should wait for the ink transition to finish before automatically
	   * closing the drawer. This will add a `300ms` delay. If this is `false`, there will only be a `17ms` delay.
	   *
	   * > The delay is required so that any event listeners will still be correctly invoked when an item is clicked.
	   */
	  autocloseAfterInk: _propTypes2.default.bool,

	  /**
	   * Boolean if the `type` prop should be constant across all media sizes. This is only valid if the `type` is
	   * one of the temporary types.
	   *
	   * This will basically mean that when attempting to do a media adjustment, it will use the `type` prop instead of
	   * `mobileType`, `tabletType`, and `desktopType` to determine the next drawer type.
	   */
	  constantType: _propTypes2.default.bool.isRequired,

	  /**
	   * An optional zDepth to apply to the drawer. If this is omitted, the value will be set as follows:
	   * - floating || inline = 1
	   * - temporary = 5
	   * - all others = 1
	   *
	   * @see {@link Papers/Paper#zDepth}
	   */
	  zDepth: _propTypes2.default.number,

	  closeOnNavItemClick: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `autoclose` instead'),
	  onVisibilityToggle: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onVisibilityChange` instead')
	};
	Drawer.defaultProps = {
	  defaultMedia: 'mobile',
	  mobileType: Drawer.DrawerTypes.TEMPORARY,
	  mobileMinWidth: _media.MOBILE_MIN_WIDTH,
	  tabletType: Drawer.DrawerTypes.PERSISTENT,
	  tabletMinWidth: _media.TABLET_MIN_WIDTH,
	  desktopType: Drawer.DrawerTypes.FULL_HEIGHT,
	  desktopMinWidth: _media.DESKTOP_MIN_WIDTH,
	  position: 'left',
	  transitionDuration: 300,
	  autoclose: true,
	  clickableDesktopOverlay: true,
	  constantType: true
	};
	Drawer.contextTypes = {
	  renderNode: _propTypes2.default.object
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._updateType = function (props) {
	    var onMediaTypeChange = props.onMediaTypeChange,
	        overlay = props.overlay,
	        transitionDuration = props.transitionDuration;


	    var onVisibilityChange = props.onVisibilityToggle || props.onVisibilityChange;

	    var state = Drawer.getCurrentMedia(props);
	    var diffType = (0, _getField2.default)(props, _this2.state, 'type') !== state.type;
	    var diffMedia = state.mobile !== _this2.state.mobile || state.tablet !== _this2.state.tablet || state.desktop !== _this2.state.desktop;

	    if (onMediaTypeChange && (diffType || diffMedia)) {
	      onMediaTypeChange(state.type, { mobile: state.mobile, tablet: state.tablet, desktop: state.desktop });
	    }

	    if (diffType) {
	      var visible = (0, _isType.isPermanent)(state.type);
	      if (_this2._initialFix) {
	        if (props.defaultVisible) {
	          visible = props.defaultVisible;
	        } else if (props.visible) {
	          visible = props.visible;
	        }
	      }

	      var prevVisible = (0, _getField2.default)(props, _this2.state, 'visible');
	      if (onVisibilityChange && visible !== prevVisible) {
	        onVisibilityChange(visible);
	      }

	      if (typeof props.visible === 'undefined') {
	        state.visible = visible;
	        _this2._animate(visible, state.type, transitionDuration, overlay, state.desktop);
	      }
	    } else if (_this2._initialFix && diffMedia) {
	      state.overlayActive = (typeof overlay !== 'undefined' ? overlay : (0, _isType.isTemporary)(state.type) && !state.desktop) && (0, _getField2.default)(props, _this2.state, 'visible');
	    }

	    if (typeof props.type !== 'undefined') {
	      var _state2 = state,
	          type = _state2.type,
	          realState = _objectWithoutProperties(_state2, ['type']); // eslint-disable-line no-unused-vars


	      state = realState;
	    }

	    _this2._initialFix = false;
	    _this2.setState(state);
	  };

	  this._updateMedia = function () {
	    _this2._updateType(_this2.props);
	  };

	  this._animate = function (visible, type, timeout, overlay, desktop) {
	    if (_this2._timeout) {
	      clearTimeout(_this2._timeout);
	    }

	    if (visible) {
	      _this2._timeout = setTimeout(function () {
	        _this2._timeout = null;

	        _this2.setState({
	          overlayActive: overlay || (0, _isType.isTemporary)(type) && !desktop,
	          drawerActive: true,
	          animating: true
	        });
	      }, _CSSTransitionGroupTick2.default);
	    } else {
	      _this2._timeout = setTimeout(function () {
	        _this2._timeout = null;

	        _this2.setState({ animating: false });
	      }, timeout);
	      _this2.setState({ animating: true, overlayActive: false, drawerActive: false });
	    }
	  };

	  this._setNavigation = function (navigation) {
	    _this2._navigation = (0, _reactDom.findDOMNode)(navigation);
	  };

	  this._handleNavClick = function (e) {
	    var _props4 = _this2.props,
	        closeOnNavItemClick = _props4.closeOnNavItemClick,
	        autoclose = _props4.autoclose,
	        autocloseAfterInk = _props4.autocloseAfterInk;

	    var enabled = typeof closeOnNavItemClick !== 'undefined' ? closeOnNavItemClick : autoclose;
	    if (!enabled || !(0, _isType.isTemporary)((0, _getField2.default)(_this2.props, _this2.state, 'type'))) {
	      return;
	    }

	    var target = e.target;

	    while (target && _this2._navigation.contains(target)) {
	      if (target.classList.contains('md-list-tile')) {
	        // Clicked a nav item that has a nested list
	        if (target.getAttribute('aria-expanded') !== null) {
	          return;
	        }

	        _this2._closeTimeout = setTimeout(function () {
	          _this2._closeTimeout = null;

	          _this2._closeDrawer(e);
	        }, autocloseAfterInk ? 300 : _CSSTransitionGroupTick2.default);
	        return;
	      }

	      target = target.parentNode;
	    }
	  };

	  this._closeDrawer = function () {
	    var _props5 = _this2.props,
	        onVisibilityChange = _props5.onVisibilityChange,
	        onVisibilityToggle = _props5.onVisibilityToggle,
	        transitionDuration = _props5.transitionDuration,
	        overlay = _props5.overlay;

	    var callback = onVisibilityToggle || onVisibilityChange;
	    if (callback) {
	      callback(false);
	    }

	    if (typeof _this2.props.visible === 'undefined') {
	      _this2.setState({ visible: false });
	      _this2._animate(false, (0, _getField2.default)(_this2.props, _this2.state, 'type'), transitionDuration, overlay, _this2.state.desktop);
	    }
	  };
	};

	exports.default = Drawer;

/***/ }),
/* 420 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var MOBILE_MIN_WIDTH = exports.MOBILE_MIN_WIDTH = 320;
	var TABLET_MIN_WIDTH = exports.TABLET_MIN_WIDTH = 768;
	var DESKTOP_MIN_WIDTH = exports.DESKTOP_MIN_WIDTH = 1025;

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _Portal = __webpack_require__(375);

	var _Portal2 = _interopRequireDefault(_Portal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Overlay = function (_PureComponent) {
	  _inherits(Overlay, _PureComponent);

	  function Overlay() {
	    _classCallCheck(this, Overlay);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Overlay.prototype.getChildContext = function getChildContext() {
	    // Always want the overlay to render in a separate subtree until 1.1.0
	    return { isInPortal: false };
	  };

	  Overlay.prototype.render = function render() {
	    var _props = this.props,
	        active = _props.active,
	        visible = _props.visible,
	        renderNode = _props.renderNode,
	        onClick = _props.onClick,
	        style = _props.style,
	        className = _props.className;

	    return _react2.default.createElement(
	      _Portal2.default,
	      { visible: visible, renderNode: renderNode },
	      _react2.default.createElement('div', {
	        style: style,
	        className: (0, _classnames2.default)('md-overlay md-overlay--drawer md-pointer--hover', {
	          'md-overlay--active': active
	        }, className),
	        onClick: onClick
	      })
	    );
	  };

	  return Overlay;
	}(_react.PureComponent);

	Overlay.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool,
	  visible: _propTypes2.default.bool.isRequired,
	  renderNode: _propTypes2.default.object,
	  onClick: _propTypes2.default.func
	};
	Overlay.childContextTypes = {
	  isInPortal: _propTypes2.default.bool
	};
	exports.default = Overlay;

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.isTemporary = isTemporary;
	exports.isPersistent = isPersistent;
	exports.isPermanent = isPermanent;
	exports.isMini = isMini;

	var _DrawerTypes = __webpack_require__(423);

	var _DrawerTypes2 = _interopRequireDefault(_DrawerTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var FULL_HEIGHT = _DrawerTypes2.default.FULL_HEIGHT,
	    CLIPPED = _DrawerTypes2.default.CLIPPED,
	    FLOATING = _DrawerTypes2.default.FLOATING,
	    PERSISTENT = _DrawerTypes2.default.PERSISTENT,
	    PERSISTENT_MINI = _DrawerTypes2.default.PERSISTENT_MINI,
	    TEMPORARY = _DrawerTypes2.default.TEMPORARY,
	    TEMPORARY_MINI = _DrawerTypes2.default.TEMPORARY_MINI;
	function isTemporary(type) {
	  return [TEMPORARY, TEMPORARY_MINI].indexOf(type) !== -1;
	}

	function isPersistent(type) {
	  return [PERSISTENT, PERSISTENT_MINI].indexOf(type) !== -1;
	}

	function isPermanent(type) {
	  return [FULL_HEIGHT, CLIPPED, FLOATING].indexOf(type) !== -1;
	}

	function isMini(type) {
	  return [PERSISTENT_MINI, TEMPORARY_MINI].indexOf(type) !== -1;
	}

/***/ }),
/* 423 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/** @module Drawers/DrawerTypes */

	/**
	 * An enum for all the different type of drawers.
	 *
	 * @readonly
	 * @enum {string}
	 */
	var DrawerTypes = {
	  // Permanent drawers
	  /**
	   * This is the default drawer type. It will always be on the screen and takes
	   * up the entire height. This is very helpful for main navigation on desktops
	   * when you do not need an expandable workspace.
	   */
	  FULL_HEIGHT: 'full-height',

	  /**
	   * This drawer type will always be on the screen, but it will appear under the
	   * main toolbar.
	   */
	  CLIPPED: 'clipped',

	  /**
	   * This drawer type will always be on the screen, but it will appear under the
	   * main toolbar and have a transparent background. This is useful if you want
	   * a persistent drawer on desktop screens, but do not want the main focus to be
	   * the drawer.
	   */
	  FLOATING: 'floating',

	  // Persistent drawers
	  /**
	   * A persistent drawer changes between being hidden and being fixed on the page like
	   * a permanent drawer. When it is visible, it will take up the same amount of room
	   * as a permanent drawer, and will not go away until closed.
	   *
	   * This drawer type is helpful when you need to have a dynamic workspace size.
	   */
	  PERSISTENT: 'persistent',

	  /**
	   * This is a modification of the persistent drawer. It will behave as the persistent drawer
	   * but it will always have a "mini" drawer visible. This is helpful when you want to have
	   * a dynamic workspace size and keep certain actions available at all times.
	   */
	  PERSISTENT_MINI: 'persistent-mini',

	  // Temporary
	  /**
	   * A temporary drawer will not be visible by default. When it is visible, it will overlay
	   * the page to get the main focus on the drawer. When the user touches the overlay or
	   * one of the navigation items, the drawer will be closed. The overlay can be disabled on
	   * desktop and tablets.
	   */
	  TEMPORARY: 'temporary',

	  /**
	   * This is a modification of the temporary drawer. It will behave like a temporary drawer,
	   * but it will always have a "mini" drawer visible. Just like the `PERSISTENT_MINI` drawer
	   * type, this is useful when certain actions should be available at all times but additional
	   * actions are available when the drawer is visible.
	   */
	  TEMPORARY_MINI: 'temporary-mini'
	};

	exports.default = DrawerTypes;

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _getCollapserStyles = __webpack_require__(302);

	var _getCollapserStyles2 = _interopRequireDefault(_getCollapserStyles);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _Paper = __webpack_require__(256);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _AccessibleFakeButton = __webpack_require__(340);

	var _AccessibleFakeButton2 = _interopRequireDefault(_AccessibleFakeButton);

	var _Collapse = __webpack_require__(259);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _PanelContent = __webpack_require__(425);

	var _PanelContent2 = _interopRequireDefault(_PanelContent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LABEL_FONT_SIZE = 15;
	var LINE_HEIGHT = 1.42857;
	var SINGLE_LINE_HEIGHT = LABEL_FONT_SIZE * LINE_HEIGHT;

	/**
	 * The `ExpansionPanel` component needs to be used with the `ExpansionList`
	 * component. The only reason is that the `ExpansionPanel` should really
	 * be rendered as a table, but it was a bit hard to have a single component
	 * dynamically rendering another row when expanded. It couldn't be in the
	 * same row since the expanded content might not have the same columns.
	 */

	var ExpansionPanel = function (_PureComponent) {
	  _inherits(ExpansionPanel, _PureComponent);

	  function ExpansionPanel(props, context) {
	    _classCallCheck(this, ExpansionPanel);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));

	    _this._determineIfTwoLine = function () {
	      var twoLine = false;
	      Array.prototype.slice.call((0, _reactDom.findDOMNode)(_this).querySelectorAll('.md-panel-column')).some(function (el) {
	        return twoLine = el.offsetHeight > SINGLE_LINE_HEIGHT;
	      });

	      _this.setState({ twoLine: twoLine });
	    };

	    _this._handleClick = function () {
	      var expanded = !_this._isExpanded(_this.props, _this.state);
	      if (_this.props.onExpandToggle) {
	        _this.props.onExpandToggle(expanded);
	      }

	      if (typeof _this.props.expanded === 'undefined') {
	        _this.setState({ expanded: expanded });
	      }
	    };

	    _this._handleSave = function (e) {
	      var _this$props = _this.props,
	          onSave = _this$props.onSave,
	          onExpandToggle = _this$props.onExpandToggle,
	          closeOnSave = _this$props.closeOnSave;

	      if (onSave) {
	        onSave(e);
	      }

	      if (closeOnSave) {
	        if (onExpandToggle) {
	          onExpandToggle(false);
	        }

	        if (typeof _this.props.expanded === 'undefined') {
	          _this.setState({ expanded: false });
	        }
	      }
	    };

	    _this._handleCancel = function (e) {
	      var _this$props2 = _this.props,
	          onCancel = _this$props2.onCancel,
	          onExpandToggle = _this$props2.onExpandToggle,
	          closeOnCancel = _this$props2.closeOnCancel;

	      if (onCancel) {
	        onCancel(e);
	      }

	      if (closeOnCancel) {
	        if (onExpandToggle) {
	          onExpandToggle(false);
	        }

	        if (typeof _this.props.expanded === 'undefined') {
	          _this.setState({ expanded: false });
	        }
	      }
	    };

	    _this.state = {
	      received: false,
	      twoLine: false
	    };

	    if (typeof props.expanded === 'undefined') {
	      _this.state.expanded = props.defaultExpanded;
	    }
	    return _this;
	  }

	  ExpansionPanel.prototype.componentDidMount = function componentDidMount() {
	    this._determineIfTwoLine();
	  };

	  ExpansionPanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (false) {
	      if (nextProps.columnWidths.length === 0) {
	        // Hopefully a nice warning about fixing the missing props injected from ExpansionList
	        /* eslint-disable no-console */
	        console.error('The `ExpansionPanel` component expects the `columnWidths` prop to be injected from the ' + '`ExpansionList` component. It could be missing because:' + '\n - you have a wrapper component with extra functionality' + '\n - the `ExpansionPanel` is not a direct child of the `ExpansionList` component' + '\n\nYou can fix this by making sure to pass `this.props.focused` and `this.props.columnWidths` ' + 'within your wrapper component and making the `ExpansionPanel` a direct child of `ExpansionList`.');
	      }

	      this.setState({ received: true });
	    }
	  };

	  ExpansionPanel.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this.props.label === prevProps.label && this.props.secondaryLabel === prevProps.secondaryLabel) {
	      return;
	    }

	    this._determineIfTwoLine();
	  };

	  ExpansionPanel.prototype._isExpanded = function _isExpanded(props, state) {
	    return typeof props.expanded === 'undefined' ? state.expanded : props.expanded;
	  };

	  ExpansionPanel.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        label = _props.label,
	        secondaryLabel = _props.secondaryLabel,
	        expandedSecondaryLabel = _props.expandedSecondaryLabel,
	        children = _props.children,
	        focused = _props.focused,
	        columnWidths = _props.columnWidths,
	        saveType = _props.saveType,
	        saveLabel = _props.saveLabel,
	        savePrimary = _props.savePrimary,
	        saveSecondary = _props.saveSecondary,
	        saveProps = _props.saveProps,
	        cancelType = _props.cancelType,
	        cancelLabel = _props.cancelLabel,
	        cancelPrimary = _props.cancelPrimary,
	        cancelSecondary = _props.cancelSecondary,
	        cancelProps = _props.cancelProps,
	        headerStyle = _props.headerStyle,
	        headerClassName = _props.headerClassName,
	        contentStyle = _props.contentStyle,
	        contentClassName = _props.contentClassName,
	        tabIndex = _props.tabIndex,
	        overflown = _props.overflown,
	        footer = _props.footer,
	        footerChildren = _props.footerChildren,
	        footerStyle = _props.footerStyle,
	        footerClassName = _props.footerClassName,
	        expandIconChildren = _props.expandIconChildren,
	        expandIconClassName = _props.expandIconClassName,
	        propAnimateContent = _props.animateContent,
	        propExpanded = _props.expanded,
	        propExpanderIcon = _props.expanderIcon,
	        defaultExpanded = _props.defaultExpanded,
	        closeOnSave = _props.closeOnSave,
	        closeOnCancel = _props.closeOnCancel,
	        onSave = _props.onSave,
	        onCancel = _props.onCancel,
	        onExpandToggle = _props.onExpandToggle,
	        props = _objectWithoutProperties(_props, ['className', 'label', 'secondaryLabel', 'expandedSecondaryLabel', 'children', 'focused', 'columnWidths', 'saveType', 'saveLabel', 'savePrimary', 'saveSecondary', 'saveProps', 'cancelType', 'cancelLabel', 'cancelPrimary', 'cancelSecondary', 'cancelProps', 'headerStyle', 'headerClassName', 'contentStyle', 'contentClassName', 'tabIndex', 'overflown', 'footer', 'footerChildren', 'footerStyle', 'footerClassName', 'expandIconChildren', 'expandIconClassName', 'animateContent', 'expanded', 'expanderIcon', 'defaultExpanded', 'closeOnSave', 'closeOnCancel', 'onSave', 'onCancel', 'onExpandToggle']);

	    var twoLine = this.state.twoLine;

	    var expanded = this._isExpanded(this.props, this.state);
	    var animateContent = (0, _getField2.default)(this.props, this.context, 'animateContent');

	    var columns = _react.Children.map(expanded && expandedSecondaryLabel || secondaryLabel, function (panelLabel, i) {
	      var _ref;

	      return _react2.default.createElement(
	        'div',
	        {
	          style: (_ref = {}, _ref['' + (overflown ? 'width' : 'minWidth')] = columnWidths[i + 1], _ref),
	          className: (0, _classnames2.default)('md-panel-column', {
	            'md-panel-column--overflown': overflown
	          }, (0, _themeColors2.default)({ text: true }))
	        },
	        panelLabel
	      );
	    });

	    if (!Array.isArray(columns)) {
	      columns = [columns];
	    }

	    columns.unshift(_react2.default.createElement(
	      'div',
	      {
	        key: 'main-label',
	        style: { minWidth: columnWidths[0] },
	        className: (0, _classnames2.default)('md-panel-column', (0, _themeColors2.default)({ text: true }))
	      },
	      label
	    ));

	    var expanderIcon = (0, _getDeprecatedIcon2.default)(expandIconClassName, expandIconChildren, this.props.expanderIcon);
	    expanderIcon = _react2.default.Children.only(expanderIcon);
	    expanderIcon = _react2.default.cloneElement(expanderIcon, {
	      className: (0, _getCollapserStyles2.default)({
	        flipped: expanded
	      }, 'md-expansion-panel__collapser md-cell--right', expanderIcon.props.className)
	    });

	    return _react2.default.createElement(
	      _Paper2.default,
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-expansion-panel', {
	          'md-expansion-panel--expanded': expanded
	        }, className),
	        'aria-expanded': expanded
	      }),
	      _react2.default.createElement(
	        _AccessibleFakeButton2.default,
	        {
	          onClick: this._handleClick,
	          style: headerStyle,
	          className: (0, _classnames2.default)('md-panel-header', {
	            'md-panel-header--expanded': expanded || twoLine,
	            'md-panel-header--focused': focused
	          }, headerClassName),
	          tabIndex: tabIndex
	        },
	        columns,
	        expanderIcon
	      ),
	      _react2.default.createElement(
	        _Collapse2.default,
	        { collapsed: !expanded, animate: animateContent },
	        _react2.default.createElement(
	          _PanelContent2.default,
	          {
	            style: contentStyle,
	            className: contentClassName,
	            footerStyle: footerStyle,
	            footerClassName: footerClassName,
	            onSave: this._handleSave,
	            onCancel: this._handleCancel,
	            saveType: saveType,
	            saveLabel: saveLabel,
	            savePrimary: savePrimary,
	            saveSecondary: saveSecondary,
	            saveProps: saveProps,
	            cancelType: cancelType,
	            cancelLabel: cancelLabel,
	            cancelPrimary: cancelPrimary,
	            cancelSecondary: cancelSecondary,
	            cancelProps: cancelProps,
	            footer: footer,
	            footerChildren: footerChildren
	          },
	          children
	        )
	      )
	    );
	  };

	  return ExpansionPanel;
	}(_react.PureComponent);

	ExpansionPanel.propTypes = {
	  /**
	   * An optional style to apply to the panel.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the panel.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An options style to apply to the panel's header content. This is the
	   * section that toggles the children to be visible and label columns.
	   */
	  headerStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the panel's header content. This is the
	   * section that toggles the children to be visible and label columns.
	   */
	  headerClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the element surrounding the children when expanded.
	   */
	  contentStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the element surrounding the children when expanded.
	   */
	  contentClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the footer when the `footer` prop is `undefined`.
	   *
	   * @see {@link #footer}
	   */
	  footerStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the footer when the `footer` prop is `undefined`.
	   *
	   * @see {@link #footer}
	   */
	  footerClassName: _propTypes2.default.string,

	  /**
	   * The main label to display in the unexpanded panel.
	   */
	  label: _propTypes2.default.node.isRequired,

	  /**
	   * Any additional columns to display after the main label. If this is a `list`
	   * instead of a singular item, they will each be formatted as a column.
	   */
	  secondaryLabel: _propTypes2.default.node,

	  /**
	   * Any additional columns to display after the main label when the panel is
	   * expanded. If this is omitted, the default `secondaryLabel` will be displayed
	   * instead.
	   */
	  expandedSecondaryLabel: _propTypes2.default.node,

	  /**
	   * The component to render the panel as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * The content to display once the panel is toggled open.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * A boolean if the panel is currently expanded. This will force the component
	   * to be controlled and require's the `onExpandToggle` function to be defined.
	   */
	  expanded: (0, _controlled2.default)(_propTypes2.default.bool, 'onExpandToggle', 'defaultExpanded'),

	  /**
	   * Boolean if an uncontrolled panel should be expanded by default.
	   */
	  defaultExpanded: _propTypes2.default.bool.isRequired,

	  /**
	   * The icon to display for expanding the expansion panel.
	   */
	  expanderIcon: _propTypes2.default.element,

	  /**
	   * Boolean if the `ExpansionPanel` is currently tab focused. This is injected
	   * and managed by the `ExpansionList` component. Do not set yourself.
	   */
	  focused: _propTypes2.default.bool.isRequired,

	  /**
	   * A list of min-widths to apply to each column in the panel header. This is injected
	   * and managed by the `ExpansionList` component. Do not set yourself.
	   */
	  columnWidths: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,

	  /**
	   * Boolean if the panel has too much content so that it overflowns. This is injected
	   * and managed by the `ExpansionList` component. Do not set yourself.
	   *
	   * When this is active, it will truncate all columns except for the main label and the
	   * toggle icon.
	   */
	  overflown: _propTypes2.default.bool,

	  /**
	   * A function to call when the expansion panel's expanded state is toggled.
	   * The callback for this function will include the new expanded state.
	   *
	   * `onExpandToggle(expanded)`
	   */
	  onExpandToggle: _propTypes2.default.func,

	  /**
	   * An optional function to call when the Save button is clicked on the expanded panel.
	   */
	  onSave: _propTypes2.default.func,

	  /**
	   * An optional function to call when the Cancel button is clicked on the expanded panel.
	   */
	  onCancel: _propTypes2.default.func,

	  /**
	   * Boolean if the panel should close when the Save button is clicked.
	   */
	  closeOnSave: _propTypes2.default.bool,

	  /**
	   * Boolean if the panel should close when the Cancel button is clicked.
	   */
	  closeOnCancel: _propTypes2.default.bool,

	  /**
	   * An optional button type to apply to the Save button. This will get
	   * passed to the `FlatButton`.
	   */
	  saveType: _propTypes2.default.oneOf(['button', 'submit', 'reset']),

	  /**
	   * The label for the Save button.
	   */
	  saveLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the Save button should be styled with the primary color.
	   */
	  savePrimary: _propTypes2.default.bool,

	  /**
	   * Boolean if the Save button should be styled with the secondary color,
	   */
	  saveSecondary: _propTypes2.default.bool,

	  /**
	   * Any additional props to provide/override for the save button in the
	   * footer of the panel.
	   */
	  saveProps: _propTypes2.default.object,

	  /**
	   * An optional button type to apply to the Cancel button. This will get
	   * passed to the `FlatButton`.
	   */
	  cancelType: _propTypes2.default.oneOf(['button', 'submit', 'reset']),

	  /**
	   * The label for the Cancel button.
	   */
	  cancelLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the Cancel button should be styled with the primary color,
	   */
	  cancelPrimary: _propTypes2.default.bool,

	  /**
	   * Boolean if the Cancel button should be styled with the secondary color,
	   */
	  cancelSecondary: _propTypes2.default.bool,

	  /**
	   * Any additional props to provide/override for the cancel button in the
	   * footer of the panel.
	   */
	  cancelProps: _propTypes2.default.object,

	  /**
	   * The tab index for the panel's header. This allows keyboard navigation.
	   */
	  tabIndex: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the panel's content should animate when the content's visibility changes. This
	   * can also be toggled from the `ExpansionList` component if all `ExpansionPanel` in the list
	   * should not animate. This only affects the height transition.
	   *
	   * > The default value is really `true` since it gets passed down to the `Collapse` component.
	   */
	  animateContent: _propTypes2.default.bool,

	  /**
	   * This prop controls the footer for the expansion panel. If this prop is `undefined`, it will
	   * go with the default behavior of generating the save and cancel buttons with the save and cancel
	   * props.
	   *
	   * If this value is `null`, there will be no footer created.
	   *
	   * Finally, if this prop is defined as any renderable item, it will be displayed in place of the
	   * footer.
	   *
	   * @see {@link #footerChildren}
	   */
	  footer: _propTypes2.default.node,

	  /**
	   * Any additional children that should be displayed in the footer of the panel. These children
	   * will be placed after the action buttons.
	   */
	  footerChildren: _propTypes2.default.node,
	  expandIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `expanderIcon` instead'),
	  expandIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `expanderIcon` instead')
	};
	ExpansionPanel.defaultProps = {
	  defaultExpanded: false,
	  expanderIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'keyboard_arrow_down'
	  ),
	  component: 'li',
	  saveLabel: 'Save',
	  cancelLabel: 'Cancel',
	  savePrimary: true,
	  tabIndex: 0,
	  closeOnSave: true,
	  closeOnCancel: true,
	  focused: false,
	  columnWidths: []
	};
	ExpansionPanel.contextTypes = {
	  animateContent: _propTypes2.default.bool
	};
	exports.default = ExpansionPanel;

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _DialogFooter = __webpack_require__(406);

	var _DialogFooter2 = _interopRequireDefault(_DialogFooter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `PanelContent` component is for displaying the expanded content
	 * for an `ExpansionPanel`. It will display any children in a `md-panel-content`
	 * container followed by a `Divider` and the `PanelControls` .
	 */
	var PanelContent = function (_PureComponent) {
	  _inherits(PanelContent, _PureComponent);

	  function PanelContent() {
	    _classCallCheck(this, PanelContent);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  PanelContent.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        footerStyle = _props.footerStyle,
	        footerClassName = _props.footerClassName,
	        contentStyle = _props.contentStyle,
	        className = _props.className,
	        children = _props.children,
	        onSave = _props.onSave,
	        onCancel = _props.onCancel,
	        saveProps = _props.saveProps,
	        saveType = _props.saveType,
	        saveLabel = _props.saveLabel,
	        savePrimary = _props.savePrimary,
	        saveSecondary = _props.saveSecondary,
	        cancelProps = _props.cancelProps,
	        cancelType = _props.cancelType,
	        cancelLabel = _props.cancelLabel,
	        cancelPrimary = _props.cancelPrimary,
	        cancelSecondary = _props.cancelSecondary,
	        footer = _props.footer,
	        footerChildren = _props.footerChildren;


	    var actions = [_extends({
	      type: cancelType,
	      label: cancelLabel,
	      primary: cancelPrimary,
	      secondary: cancelSecondary
	    }, cancelProps, {
	      onClick: onCancel
	    }), _extends({
	      type: saveType,
	      label: saveLabel,
	      primary: savePrimary,
	      secondary: saveSecondary
	    }, saveProps, {
	      onClick: onSave
	    })];

	    var actionFooter = null;
	    if (typeof footer === 'undefined') {
	      actionFooter = _react2.default.createElement(
	        _DialogFooter2.default,
	        {
	          actions: actions,
	          style: footerStyle,
	          className: (0, _classnames2.default)('md-divider-border md-divider-border--top', footerClassName)
	        },
	        footerChildren
	      );
	    } else if (footer !== null) {
	      actionFooter = footer;
	    }

	    return _react2.default.createElement(
	      'div',
	      { style: style },
	      _react2.default.createElement(
	        'div',
	        { className: (0, _classnames2.default)('md-panel-content', className), style: contentStyle },
	        children
	      ),
	      actionFooter
	    );
	  };

	  return PanelContent;
	}(_react.PureComponent);

	PanelContent.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  footerStyle: _propTypes2.default.object,
	  footerClassName: _propTypes2.default.string,
	  contentStyle: _propTypes2.default.object,
	  children: _propTypes2.default.node,
	  onSave: _propTypes2.default.func.isRequired,
	  onCancel: _propTypes2.default.func.isRequired,
	  saveProps: _propTypes2.default.object,
	  saveType: _propTypes2.default.string,
	  saveLabel: _propTypes2.default.node.isRequired,
	  savePrimary: _propTypes2.default.bool,
	  saveSecondary: _propTypes2.default.bool,
	  cancelProps: _propTypes2.default.object,
	  cancelType: _propTypes2.default.string,
	  cancelLabel: _propTypes2.default.node.isRequired,
	  cancelPrimary: _propTypes2.default.bool,
	  cancelSecondary: _propTypes2.default.bool,
	  footer: _propTypes2.default.node,
	  footerChildren: _propTypes2.default.node
	};
	exports.default = PanelContent;

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _keyCodes = __webpack_require__(279);

	var _handleWindowClickListeners = __webpack_require__(350);

	var _handleWindowClickListeners2 = _interopRequireDefault(_handleWindowClickListeners);

	var _ResizeObserver = __webpack_require__(357);

	var _ResizeObserver2 = _interopRequireDefault(_ResizeObserver);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `ExpansionList` component is a wrapper for the `ExpansionPanel` that helps
	 * determine which `ExpansionPanel` currently has tab focus and adjusts the column
	 * sizes in the header of the `ExpansionPanel`.
	 *
	 * The `ExpansionList` and `ExpansionPanel` components should have probably been
	 * implemented as a `table` instead of a `ul || ol` since it is more column based,
	 * but it would complicate the API to have dynamic row generation for the expanded
	 * panels. The expanded panels _might_ not follow the same column widths as their labels
	 * so a singular row with a div for expanded content might not work correctly.
	 */
	var ExpansionList = function (_PureComponent) {
	  _inherits(ExpansionList, _PureComponent);

	  function ExpansionList() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, ExpansionList);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { columnWidths: [], focusedIndex: -1, overflown: false }, _this._setContainer = function (container) {
	      if (container !== null) {
	        _this._container = (0, _reactDom.findDOMNode)(container);
	        window.addEventListener('keyup', _this._determineTabFocus);

	        _this._width = _this._container.offsetWidth;
	        _this._calcColumnWidths();
	      }
	    }, _this._determineTabFocus = function (e) {
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        var panels = Array.prototype.slice.call((0, _reactDom.findDOMNode)(_this).querySelectorAll('.md-panel-header'));
	        _this.setState({ focusedIndex: panels.indexOf(e.target) });
	      }
	    }, _this._removeFocus = function () {
	      _this.setState({ focusedIndex: -1 });
	    }, _this._isOverflown = function (widths) {
	      if (!_this._container) {
	        return false;
	      }

	      var panel = _this._container.querySelector('.md-panel-header');
	      if (!panel) {
	        return false;
	      }

	      var collapser = _this._container.querySelector('.md-expansion-panel__collapser');
	      var collapserWidth = collapser ? collapser.offsetWidth : 0;
	      var styles = window.getComputedStyle(panel);
	      var maxWidth = panel.offsetWidth - parseFloat(styles.paddingLeft) - parseFloat(styles.paddingRight) - collapserWidth;

	      var totalWidth = widths.reduce(function (total, w) {
	        return total + w;
	      }, 0);
	      return totalWidth > maxWidth;
	    }, _this._getColumnWidths = function () {
	      if (!_this._container) {
	        return _this.state.columnWidths;
	      }

	      return [].slice.call(_this._container.querySelectorAll('.md-panel-header')).reduce(function (maxes, row) {
	        var columns = row.querySelectorAll('.md-panel-column');
	        for (var i = 0; i < columns.length; i++) {
	          var col = columns[i];
	          // Need to reset the widths if it has already been calculated to get a more accurate measurement.
	          var _col$style = col.style,
	              width = _col$style.width,
	              minWidth = _col$style.minWidth;

	          col.style.width = 'auto';
	          col.style.minWidth = 'auto';

	          // Only need to include the offsetWidth of the column because the child will really
	          // determine the width of the column. Since it has already been defined at this point,
	          // no additional work needs to be done.
	          maxes[i] = Math.max(col.offsetWidth, maxes[i] || 0);
	          col.style.width = width;
	          col.style.minWidth = minWidth;
	        }

	        return maxes;
	      }, [0]);
	    }, _this._calcColumnWidths = function () {
	      var columnWidths = _this.state.columnWidths;

	      var nextWidths = _this._getColumnWidths();
	      var overflown = _this._isOverflown(nextWidths);
	      if (_this.state.overflown !== overflown || columnWidths.length !== nextWidths.length || nextWidths.some(function (w, i) {
	        return w !== columnWidths[i];
	      })) {
	        _this.setState({ columnWidths: nextWidths, overflown: overflown });
	      }
	    }, _this._handleResize = function (_ref) {
	      var width = _ref.width;
	      var recalculateThreshold = _this.props.recalculateThreshold;

	      if (_this._width !== width && Math.abs(width - _this._width) >= recalculateThreshold) {
	        _this._width = width;
	        _this._calcColumnWidths();
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  ExpansionList.prototype.getChildContext = function getChildContext() {
	    var animateContent = this.props.animateContent;

	    return { animateContent: animateContent };
	  };

	  ExpansionList.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.children !== nextProps.children) {
	      this._calcColumnWidths();
	    }
	  };

	  ExpansionList.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
	    var focusedIndex = this.state.focusedIndex;

	    if (prevState.focusedIndex === focusedIndex || prevState.focusedIndex > -1 && focusedIndex > -1) {
	      return;
	    }

	    (0, _handleWindowClickListeners2.default)(this._removeFocus, this.state.focusedIndex !== -1);
	  };

	  ExpansionList.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.state.focusedIndex === -1) {
	      (0, _handleWindowClickListeners2.default)(this._removeFocus, false);
	    }

	    window.removeEventListener('keyup', this._determineTabFocus);
	  };

	  /**
	   * Since this should really be rendered as a table, need to calculate the max width for each _column_
	   * on the panel's header and apply that as a min width for the other panels.
	   */


	  ExpansionList.prototype.render = function render() {
	    var _state = this.state,
	        columnWidths = _state.columnWidths,
	        focusedIndex = _state.focusedIndex,
	        overflown = _state.overflown;

	    var _props = this.props,
	        children = _props.children,
	        className = _props.className,
	        Component = _props.component,
	        animateContent = _props.animateContent,
	        recalculateThreshold = _props.recalculateThreshold,
	        props = _objectWithoutProperties(_props, ['children', 'className', 'component', 'animateContent', 'recalculateThreshold']);

	    var panels = _react.Children.map(children, function (child, i) {
	      return (0, _react.cloneElement)(child, {
	        key: child.key || i,
	        overflown: overflown,
	        columnWidths: columnWidths,
	        focused: focusedIndex === i
	      });
	    });
	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        ref: this._setContainer,
	        className: (0, _classnames2.default)('md-expansion-panel-list', className)
	      }),
	      _react2.default.createElement(_ResizeObserver2.default, { watchWidth: true, onResize: this._handleResize }),
	      panels
	    );
	  };

	  return ExpansionList;
	}(_react.PureComponent);

	ExpansionList.propTypes = {
	  /**
	   * An optional style object to apply to the list.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the list.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The children should be a list or singular `ExpansionPanel` component
	   * to render with some additional props injected.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * The component to render the list as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * Boolean if all the expansion panels in the list should animate when their content's visibility
	   * changes. This is just a quicker way to disable all animations instead of having to toggle it off
	   * on each panel.
	   *
	   * > The default value is really `true` since it gets passed down to the `Collapse` component.
	   */
	  animateContent: _propTypes2.default.bool,

	  /**
	   * The threshold that should be used for when the list should recalculate the positioning of all
	   * the columns. This will only compare the difference between updates.
	   * So if the size changes from 80 -> 120 -> 160 -> 140. It will only update on the third resize (160)
	   */
	  recalculateThreshold: _propTypes2.default.number.isRequired
	};
	ExpansionList.defaultProps = {
	  component: 'ul',
	  recalculateThreshold: 80
	};
	ExpansionList.childContextTypes = {
	  animateContent: _propTypes2.default.bool
	};
	exports.default = ExpansionList;

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _keyCodes = __webpack_require__(279);

	var _captureNextEvent = __webpack_require__(283);

	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);

	var _getBtnStyles = __webpack_require__(281);

	var _getBtnStyles2 = _interopRequireDefault(_getBtnStyles);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _IconSeparator = __webpack_require__(284);

	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);

	var _AccessibleFakeInkedButton = __webpack_require__(339);

	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `FileInput` component is used as simple styling for the `<input type="file" />`.
	 * It will style the input as a raised button by default.
	 */
	var FileInput = function (_PureComponent) {
	  _inherits(FileInput, _PureComponent);

	  function FileInput() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, FileInput);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { hover: false, pressed: false }, _this._handleChange = function (e) {
	      var _this$props = _this.props,
	          multiple = _this$props.multiple,
	          onChange = _this$props.onChange;
	      var files = e.target.files;

	      if (onChange) {
	        if (!multiple) {
	          onChange(files[0] || null, e);
	        } else {
	          onChange(Array.prototype.slice.call(files), e);
	        }
	      }
	    }, _this._blur = function () {
	      if (_this.props.disabled) {
	        return;
	      }

	      if (_this._timeout) {
	        _this._attemptedBlur = true;
	      } else {
	        _this.setState({ pressed: false });
	      }
	    }, _this._handleMouseUp = function (e) {
	      if (_this.props.onMouseUp) {
	        _this.props.onMouseUp(e);
	      }

	      _this._blur();
	    }, _this._handleMouseDown = function (e) {
	      if (_this.props.onMouseDown) {
	        _this.props.onMouseDown(e);
	      }

	      if (!_this.props.disabled) {
	        _this.setState({ pressed: true });
	      }
	    }, _this._handleTouchStart = function (e) {
	      if (_this.props.onTouchStart) {
	        _this.props.onTouchStart(e);
	      }

	      if (!_this.props.disabled) {
	        _this.setState({ pressed: true });
	      }
	    }, _this._handleTouchEnd = function (e) {
	      if (_this.props.onTouchEnd) {
	        _this.props.onTouchEnd(e);
	      }

	      _this._blur();
	      (0, _captureNextEvent2.default)('mouseover');
	    }, _this._handleKeyUp = function (e) {
	      if (_this.props.onKeyUp) {
	        _this.props.onKeyUp(e);
	      }

	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        window.addEventListener('click', _this._blur);
	        _this.setState({ pressed: true });
	      }
	    }, _this._handleKeyDown = function (e) {
	      if (_this.props.onKeyDown) {
	        _this.props.onKeyDown(e);
	      }

	      var key = e.which || e.keyCode;

	      if (key === _keyCodes.TAB) {
	        window.removeEventListener('click', _this._blur);
	        _this.setState({ pressed: false });
	      } else if (key === _keyCodes.SPACE || key === _keyCodes.ENTER) {
	        e.preventDefault();
	        e.target.click();
	      }
	    }, _this._handleMouseOver = function (e) {
	      if (_this.props.onMouseOver) {
	        _this.props.onMouseOver(e);
	      }

	      if (!_this.props.disabled) {
	        _this.setState({ hover: true });
	      }
	    }, _this._handleMouseLeave = function (e) {
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(e);
	      }

	      if (!_this.props.disabled) {
	        _this.setState({ hover: false });
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  FileInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.disabled && !nextProps.disabled && this.state.hover) {
	      this.setState({ hover: false });
	    }
	  };

	  FileInput.prototype.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {
	    var _this2 = this;

	    // I honestly don't remember why this was implemented, but it was copied from the Button
	    // component
	    if (!this.state.pressed && nextState.pressed) {
	      this._timeout = setTimeout(function () {
	        _this2._timeout = null;
	        if (_this2._attemptedBlur) {
	          _this2._attemptedBlur = false;

	          _this2.setState({ pressed: false });
	        }
	      }, 450);
	    }
	  };

	  FileInput.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }

	    window.removeEventListener('click', this._blur);
	  };

	  FileInput.prototype.render = function render() {
	    var _state = this.state,
	        hover = _state.hover,
	        pressed = _state.pressed;

	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        labelStyle = _props.labelStyle,
	        labelClassName = _props.labelClassName,
	        label = _props.label,
	        primary = _props.primary,
	        secondary = _props.secondary,
	        flat = _props.flat,
	        id = _props.id,
	        name = _props.name,
	        iconBefore = _props.iconBefore,
	        disabled = _props.disabled,
	        accept = _props.accept,
	        multiple = _props.multiple,
	        swapTheming = _props.swapTheming,
	        allowDuplicates = _props.allowDuplicates,
	        iconChildren = _props.iconChildren,
	        iconClassName = _props.iconClassName,
	        propIcon = _props.icon,
	        onChange = _props.onChange,
	        onKeyUp = _props.onKeyUp,
	        onKeyDown = _props.onKeyDown,
	        onMouseUp = _props.onMouseUp,
	        onMouseDown = _props.onMouseDown,
	        onMouseOver = _props.onMouseOver,
	        onMouseLeave = _props.onMouseLeave,
	        onTouchStart = _props.onTouchStart,
	        onTouchEnd = _props.onTouchEnd,
	        propValue = _props.value,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'labelStyle', 'labelClassName', 'label', 'primary', 'secondary', 'flat', 'id', 'name', 'iconBefore', 'disabled', 'accept', 'multiple', 'swapTheming', 'allowDuplicates', 'iconChildren', 'iconClassName', 'icon', 'onChange', 'onKeyUp', 'onKeyDown', 'onMouseUp', 'onMouseDown', 'onMouseOver', 'onMouseLeave', 'onTouchStart', 'onTouchEnd', 'value']);

	    var icon = this.props.icon;

	    if (iconClassName || iconChildren) {
	      icon = _react2.default.createElement(
	        _FontIcon2.default,
	        { iconClassName: iconClassName },
	        iconChildren
	      );
	    }

	    var labelChildren = label;
	    if (icon) {
	      icon = _react2.default.cloneElement(icon, { inherit: true });
	      labelChildren = _react2.default.createElement(
	        _IconSeparator2.default,
	        { label: label, iconBefore: iconBefore },
	        icon
	      );
	    }

	    var value = void 0;
	    if (allowDuplicates) {
	      value = '';
	    }

	    return _react2.default.createElement(
	      'div',
	      _extends({}, props, {
	        style: style,
	        className: (0, _classnames2.default)('md-inline-block md-file-input-container', className)
	      }),
	      _react2.default.createElement(
	        _AccessibleFakeInkedButton2.default,
	        {
	          component: 'label',
	          htmlFor: id,
	          disabled: disabled,
	          onTouchStart: this._handleTouchStart,
	          onTouchEnd: this._handleTouchEnd,
	          onMouseDown: this._handleMouseDown,
	          onMouseUp: this._handleMouseUp,
	          onKeyDown: this._handleKeyDown,
	          onKeyUp: this._handleKeyUp,
	          onMouseOver: this._handleMouseOver,
	          onMouseLeave: this._handleMouseLeave,
	          style: labelStyle,
	          className: (0, _getBtnStyles2.default)({
	            flat: flat,
	            raised: !flat,
	            disabled: disabled,
	            primary: primary,
	            secondary: secondary,
	            hover: hover,
	            swapTheming: swapTheming,
	            pressed: pressed
	          }, labelClassName)
	        },
	        labelChildren
	      ),
	      _react2.default.createElement('input', {
	        id: id,
	        name: name,
	        accept: accept,
	        type: 'file',
	        multiple: multiple,
	        disabled: disabled,
	        'aria-hidden': 'true',
	        className: 'md-file-input',
	        onChange: this._handleChange,
	        value: value,
	        tabIndex: -1
	      })
	    );
	  };

	  return FileInput;
	}(_react.PureComponent);

	FileInput.propTypes = {
	  /**
	   * The id for the text field. This is required for a11y and to get the `input type="file"` to
	   * open.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),

	  /**
	   * An optional name to provide to the input.
	   */
	  name: _propTypes2.default.string,

	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the label.
	   */
	  labelStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the label.
	   */
	  labelClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the `FileInput` should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the `FileInput` should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,

	  /**
	   * Boolean if the `FileInput` should be styled as a flat button instead of a
	   * raised button.
	   */
	  flat: _propTypes2.default.bool,

	  /**
	   * Boolean if the theming should be swapped from text to background or vice-versa.
	   *
	   * @see {@link Buttons/Button#swapTheming}
	   */
	  swapTheming: _propTypes2.default.bool,

	  /**
	   * This should be a comma separated list of Media Types that the `FileInput` can
	   * accept. If this prop is left blank, any file will be accepted.
	   *
	   * The values can either be:
	   * - A file extension
	   * - audio/*
	   * - video/*
	   * - image/*
	   * - any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)
	   *
	   * > NOTE: IE does not enforce this.
	   */
	  accept: _propTypes2.default.string,

	  /**
	   * Boolean if the same file is allowed to be uploaded multiple times. This will basically make the
	   * `value` of the file input always blank.
	   */
	  allowDuplicates: _propTypes2.default.bool,

	  /**
	   * Boolean if multiple files will be accepted.
	   */
	  multiple: _propTypes2.default.bool,

	  /**
	   * A label to display on the `FileInput`. This will be used with the `AccessibleFakeInkedButton` component to
	   * create a `<label>` for the `<input type="file">`.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * Boolean if the icons should appear before the label.
	   */
	  iconBefore: _propTypes2.default.bool,

	  /**
	   * An optional icon to display with the file download. This can be a `FontIcon` or an `SVGIcon`.
	   */
	  icon: _propTypes2.default.element,

	  /**
	   * A function to call when the value of the input changes. This will
	   * be triggered when the user selects a new file or cancels the new file selection.
	   *
	   * This function will be given the new [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)
	   * as an array and the change event. If this is not a multiple file input, only the
	   * newly selected File will be given instead of a list of one file. Since this is an
	   * `input` tag, the user will not be able to select the same file multiple times unless
	   * you manually clear the input's value.
	   *
	   * > NOTE: If the user hits cancel, null will be given for a single file input.
	   *
	   * ```js
	   * onChange(files, e);
	   * ```
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * Boolean if the `FileInput` is currently disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional function to call when they keyup event is triggered on the file input's label.
	   */
	  onKeyUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when they keydown event is triggered on the file input's label.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when they mouseup event is triggered on the file input's label.
	   */
	  onMouseUp: _propTypes2.default.func,

	  /**
	   * An optional function to call when they mousedown event is triggered on the file input's label.
	   */
	  onMouseDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when they mouseover event is triggered on the file input's label.
	   */
	  onMouseOver: _propTypes2.default.func,

	  /**
	   * An optional function to call when they mouseleave event is triggered on the file input's label.
	   */
	  onMouseLeave: _propTypes2.default.func,

	  /**
	   * An optional function to call when they touchend event is triggered on the file input's label.
	   */
	  onTouchEnd: _propTypes2.default.func,

	  /**
	   * An optional function to call when they touchstart event is triggered on the file input's label.
	   */
	  onTouchStart: _propTypes2.default.func,

	  iconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `icon` instead'),
	  iconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `icon` instead'),
	  value: (0, _deprecated2.default)(_propTypes2.default.string, 'There should\'t be a reason to set the value manually. Check out {@link #allowDuplicates} instead')
	};
	FileInput.defaultProps = {
	  label: 'Select a file',
	  icon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'file_upload'
	  ),
	  allowDuplicates: false
	};
	exports.default = FileInput;

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _FileInput = __webpack_require__(427);

	var _FileInput2 = _interopRequireDefault(_FileInput);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _omit = __webpack_require__(326);

	var _omit2 = _interopRequireDefault(_omit);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `FileUpload` component is used to upload files locally This is a wrapper of the `FileInput` component
	 * with some additional functionality so any props that are undocumented on `FileUpload` but are present
	 * on `FileInput` are correctly provided. If you want to upload files to a server, use
	 * [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)
	 * by attaching the `File`.
	 *
	 * Quick example:
	 *
	 * ```js
	 * function upload(file) {
	 *   fetch('/api/images', {
	 *     method: 'POST',
	 *     body: new FormData().append('file', file),
	 *   });
	 * }
	 * ```
	 *
	 * An upload can be aborted by calling the `abort(file || fileName)` function. If
	 * the file or fileName are omitted, it will *attempt* to abort the current
	 * file that is uploading. Unreliable for multi-select.
	 *
	 * ```js
	 * <FileUpload ref="upload" />
	 * <Button raised onClick={() => this.refs.upload.abort()} label="Abort! Abort!" />
	 * ```
	 */
	var FileUpload = function (_PureComponent) {
	  _inherits(FileUpload, _PureComponent);

	  function FileUpload() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, FileUpload);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {}, _this.abort = function (file) {
	      var fileName = file;
	      if (!file) {
	        // Attempt to remove first file added...
	        fileName = Object.keys(_this.state)[0];
	      } else if (typeof file.name === 'string') {
	        fileName = file.name;
	      }

	      var reader = _this.state[fileName];
	      if (reader) {
	        reader.abort();
	        (0, _reactDom.findDOMNode)(_this).querySelector('.md-file-input').value = '';

	        _this.setState((0, _omit2.default)(_this.state, [fileName]));
	      }
	    }, _this._uploadFile = function (file) {
	      var _this$props = _this.props,
	          onAbort = _this$props.onAbort,
	          onError = _this$props.onError,
	          onLoad = _this$props.onLoad,
	          onLoadStart = _this$props.onLoadStart,
	          onLoadEnd = _this$props.onLoadEnd,
	          onProgress = _this$props.onProgress,
	          readAs = _this$props.readAs;
	      var name = file.name,
	          type = file.type;


	      var fr = new FileReader();
	      if (onError) {
	        fr.onerror = function (e) {
	          onError(file, e.target.error, e);
	        };
	      }

	      if (onAbort) {
	        fr.onabort = function (e) {
	          onAbort(file, e);
	        };
	      }

	      if (onLoadStart) {
	        fr.onloadstart = function (e) {
	          onLoadStart(file, e);
	        };
	      }

	      if (onLoadEnd) {
	        fr.onloadend = function (e) {
	          onLoadEnd(file, e);
	        };
	      }

	      fr.onload = function (e) {
	        if (onLoad) {
	          onLoad(file, e.target.result, e);
	        }

	        _this.setState((0, _omit2.default)(_this.state, [name]));
	      };

	      if (onProgress) {
	        fr.onprogress = function (e) {
	          if (e.lengthComputable) {
	            onProgress(file, e.loaded / e.total * 100, e);
	          }
	        };
	      }

	      if (readAs) {
	        if (typeof readAs === 'function') {
	          readAs(type, file, fr);
	        } else {
	          fr['readAs' + readAs](file);
	        }
	      } else if (type.match(/image|video|audio|application\/pdf/) || name.match(/\.mkv$/)) {
	        fr.readAsDataURL(file);
	      } else if (type.match(/application\/json/)) {
	        fr.readAsText(file);
	      } else if (type.match(/application|model|multipart/) || name.match(/(w|e)ar$/)) {
	        fr.readAsArrayBuffer(file);
	      } else {
	        fr.readAsText(file);
	      }

	      return fr;
	    }, _this._handleUpload = function (fileList, e) {
	      if (_this.props.onChange) {
	        _this.props.onChange(fileList, e);
	      }

	      if (!fileList) {
	        return;
	      }
	      var _this$props2 = _this.props,
	          maxSize = _this$props2.maxSize,
	          onSizeError = _this$props2.onSizeError;

	      var files = Array.isArray(fileList) ? fileList : [fileList];

	      var errorFiles = [];
	      if (maxSize) {
	        errorFiles = files.filter(function (file) {
	          return file.size > maxSize;
	        });
	        files = files.filter(function (file) {
	          return file.size <= maxSize;
	        });
	      }

	      if (errorFiles.length) {
	        onSizeError(errorFiles);
	      }

	      if (!files.length) {
	        return;
	      }

	      var nextState = {};
	      files.forEach(function (file) {
	        var fileReader = _this._uploadFile(file);
	        nextState[file.name] = fileReader;
	      });

	      _this.setState(nextState);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Attempts to abort the upload of a file. This function takes an optional `file` or `fileName`
	   * as it's parameter. If the parameter is omitted, it attempts to abort the first file that was
	   * added. If the `onAbort` function was given, it will be called as well.
	   *
	   * @param {Object|string} file - The file or the file name to use to find the
	   *     correct `FileReader`.
	   */


	  FileUpload.prototype.render = function render() {
	    var _props = this.props,
	        maxSize = _props.maxSize,
	        readAs = _props.readAs,
	        onLoad = _props.onLoad,
	        onLoadStart = _props.onLoadStart,
	        onLoadEnd = _props.onLoadEnd,
	        onProgress = _props.onProgress,
	        onAbort = _props.onAbort,
	        onError = _props.onError,
	        onSizeError = _props.onSizeError,
	        props = _objectWithoutProperties(_props, ['maxSize', 'readAs', 'onLoad', 'onLoadStart', 'onLoadEnd', 'onProgress', 'onAbort', 'onError', 'onSizeError']);

	    return _react2.default.createElement(_FileInput2.default, _extends({}, props, { onChange: this._handleUpload }));
	  };

	  return FileUpload;
	}(_react.PureComponent);

	FileUpload.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the label.
	   */
	  labelStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the label.
	   */
	  labelClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the `FileInput` should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the `FileInput` should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,

	  /**
	   * Boolean if the `FileInput` should be styled as a flat button instead of a
	   * raised button.
	   */
	  flat: _propTypes2.default.bool,

	  /**
	   * This should be a comma separated list of Media Types that the `FileInput` can
	   * accept. If this prop is left blank, any file will be accepted.
	   *
	   * The values can either be:
	   * - A file extension
	   * - audio/*
	   * - video/*
	   * - image/*
	   * - any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)
	   */
	  accept: _propTypes2.default.string,

	  /**
	   * Boolean if multiple files will be accepted.
	   */
	  multiple: _propTypes2.default.bool,

	  /**
	   * A label to display on the `FileInput`.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * The icon children to use for the upload icon.
	   */
	  iconChildren: _propTypes2.default.node,

	  /**
	   * The icon className to use for the upload icon.
	   */
	  iconClassName: _propTypes2.default.string,

	  /**
	   * An optional max size for the file. If the file is greater than
	   * this limit, the file will not be uploaded.
	   */
	  maxSize: _propTypes2.default.number,

	  /**
	   * A required function to call when the `maxSize` prop is set. It will
	   * be given a list of files that were too big.
	   */
	  onSizeError: function onSizeError(props, propName, component) {
	    for (var _len2 = arguments.length, others = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      others[_key2 - 3] = arguments[_key2];
	    }

	    if (typeof props.maxSize === 'number') {
	      var _PropTypes$func;

	      return (_PropTypes$func = _propTypes2.default.func).isRequired.apply(_PropTypes$func, [props, propName, component].concat(others));
	    }

	    return null;
	  },

	  /**
	   * You can force the `FileReader` to read the file as a specific type
	   * if you do not trust the *amazing* regex I have for choosing the correct
	   * one.
	   *
	   * ```js
	   * if(type.match(/image|video|audio/)) {
	   *   fr.readAsDataURL(file);
	   * } else if(type.match(/application|model|multipart/)) {
	   *   fr.readAsArrayBuffer(file);
	   * } else {
	   *   fr.readAsText(file);
	   * }
	   * ```
	   *
	   * > `.yml` and `.js` both are considered `application`, so it definitely fails there.
	   *
	   * If this prop is a function, you will be given the file's type, the file object, and
	   * the file reader. You will then need to call `fileReader.readAsYOUR_CORRECT_TYPE(file)`.
	   */
	  readAs: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['DataURL', 'ArrayBuffer', 'Text']), _propTypes2.default.func]),

	  /**
	   * An optional function to call when the `FileUpload` aborts. The current
	   * file and the abort event are given. This might not be the most useful
	   * function to use since you will need to manually call abort yourself anyways.
	   */
	  onAbort: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `FileUpload` errors. The current
	   * file, the error, and the error event are given.
	   *
	   * ```js
	   * onError(file, event.target.error, event);
	   * ```
	   */
	  onError: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `FileUpload` loads. The current
	   * file, the load result, and the load event are given.
	   *
	   * ```js
	   * onLoad(file, event.target.result, event);
	   * ```
	   *
	   * The load result will either be:
	   * - a data URL
	   * - a plain text string
	   * - an array buffer
	   *
	   * depending on what type the file is.
	   */
	  onLoad: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `FileUpload` starts loading. The current
	   * file and the load start event are given.
	   */
	  onLoadStart: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `FileUpload` finishes loading. The
	   * current file and the load end event are given.
	   */
	  onLoadEnd: _propTypes2.default.func,

	  /**
	   * An optional function to call when the `FileUpload` progress. The current
	   * file, upload progress, and the progress event are given. The progress
	   * will be a number between 0 and 100 that has not been rounded.
	   *
	   * ```js
	   * onProgress(file, progress, event);
	   * ```
	   */
	  onProgress: _propTypes2.default.func,

	  /**
	   * Boolean if the same file is allowed to be uploaded multiple times. This will basically make the
	   * `value` of the file input always blank.
	   */
	  allowDuplicates: _propTypes2.default.bool,

	  /**
	   * An optional function to call when a file selects or unselects a file.
	   * This will be called before any local uploading occurs.
	   *
	   * ```js
	   * onChange(file(s) || null, event);
	   * ```
	   */
	  onChange: _propTypes2.default.func,
	  value: (0, _deprecated2.default)(_propTypes2.default.string, 'There should\'t be a reason to set the value manually. Check out {@link #allowDuplicates} instead')
	};
	exports.default = FileUpload;

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _bem2 = __webpack_require__(430);

	var _bem3 = _interopRequireDefault(_bem2);

	var _isValued = __webpack_require__(360);

	var _isValued2 = _interopRequireDefault(_isValued);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DIFF_KEYS = ['className', 'stacked', 'container', 'noSpacing', 'gutter', 'spacing'];

	var Grid = function (_PureComponent) {
	  _inherits(Grid, _PureComponent);

	  /**
	   * A utility function to get the grid's className based on the Grid's props. This is
	   * used behind the scenes to merge and create the className for the grid.
	   *
	   * ### Example:
	   * ```js
	   * <div className={Grid.getClassName()}>A base grid</div>
	   * <div className={Grid.getClassName({ stacked: true })}>A stacked Grid</div>
	   * ```
	   *
	   * @param {Object=} props - This should be an object of the `Grid`'s props. It
	   *    will extract the needed keys and generate the className.
	   * @return {String} the full className to use for the grid
	   */
	  Grid.getClassName = function getClassName() {
	    var _bem;

	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var className = props.className,
	        stacked = props.stacked,
	        noSpacing = props.noSpacing,
	        gutter = props.gutter,
	        spacing = props.spacing,
	        container = props.container;

	    return (0, _bem3.default)('md-grid', (_bem = {
	      'stacked': stacked,
	      'no-spacing': noSpacing
	    }, _bem[gutter + '-' + spacing] = (0, _isValued2.default)(gutter) && (0, _isValued2.default)(spacing), _bem[container] = container, _bem), className);
	  };

	  function Grid(props) {
	    _classCallCheck(this, Grid);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

	    _this.state = { className: Grid.getClassName(props) };
	    return _this;
	  }

	  Grid.prototype.componentWillMount = function componentWillMount() {
	    this.setState({ className: Grid.getClassName(this.props) });
	  };

	  Grid.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    if (DIFF_KEYS.some(function (key) {
	      return _this2.props[key] !== nextProps[key];
	    })) {
	      this.setState({ className: Grid.getClassName(nextProps) });
	    }
	  };

	  Grid.prototype.render = function render() {
	    var className = this.state.className;

	    var _props = this.props,
	        style = _props.style,
	        Component = _props.component,
	        children = _props.children,
	        propClassName = _props.className,
	        container = _props.container,
	        stacked = _props.stacked,
	        noSpacing = _props.noSpacing,
	        gutter = _props.gutter,
	        spacing = _props.spacing,
	        props = _objectWithoutProperties(_props, ['style', 'component', 'children', 'className', 'container', 'stacked', 'noSpacing', 'gutter', 'spacing']);

	    if (typeof children === 'function') {
	      return children({ style: style, className: className });
	    }

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, { style: style, className: className }),
	      children
	    );
	  };

	  return Grid;
	}(_react.PureComponent);

	Grid.propTypes = {
	  /**
	   * An optional style to apply to the Grid component. This will only be applied
	   * if the `children` prop is not a callback function.
	   *
	   * @see {@link #children}
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the Grid component. This will only be applied
	   * if the `children` prop is not a callback function.
	   *
	   * @see {@link #children}
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The component to render the Grid as. This should probably not be used as much
	   * as the `children` callback function.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

	  /**
	   * The children can either be renderable React elements or a callback function
	   * that accepts the style and className props to apply so that the styles can
	   * be manually added to whichever component.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),

	  /**
	   * An optional container name to apply to the Grid. This should be the same name as provided
	   * to the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container) mixin.
	   */
	  container: _propTypes2.default.string,

	  /**
	   * Boolean if the grid should be placed vertically instead of horizontally.
	   */
	  stacked: _propTypes2.default.bool,

	  /**
	   * Boolean if all the gutters and spacing should be removed from the grid.
	   */
	  noSpacing: _propTypes2.default.bool,

	  /**
	   * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin
	   * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className
	   */
	  gutter: _propTypes2.default.number,

	  /**
	   * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin
	   * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className
	   */
	  spacing: _propTypes2.default.number
	};
	Grid.defaultProps = {
	  component: 'div',
	  stacked: false,
	  noSpacing: false
	};
	exports.default = Grid;

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /** @module utils/bem */


	exports.default = bem;

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A utility function to apply BEM class names to an element.
	 *
	 * ### Examples:
	 * ```js
	 * bem('class') === 'class'
	 * bem('block', 'element') === 'block__element'
	 * bem('block', 'element', 'sub-element') === 'block__element__sub-element'
	 * bem('block', { 'mod-1': true, 'mod-2': false }) === 'block block--mod-1'
	 * bem('block', 'element', { 'mod-1': false, 'mod-2': true }) === 'block__element block__element--mod-2'
	 * bem('block', 'element', {
	 *   'mod-1': false,
	 *   'mod-2': true,
	 * }, 'other', 'class-names') === 'block__element block__element--mod-2 other class-names'
	 * ```
	 *
	 * @param {...String} blocks - 1 to many blocks to use. These names will be joined
	 *    with underscores.
	 * @param {Object=} modifiers - Any conditional modifiers to apply to the blocks. Each
	 *    key in this object will be applied as a `--suffix` to the blocks ONLY when
	 *    their value is true-ish.
	 * @param {...String} others - Any additional class names to apply.
	 * @return {String} the bem-formatted className string.
	 */
	function bem() {
	  var base = [];
	  var modifiers = null;
	  var remaining = -1;

	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  args.some(function (arg, i) {
	    if (arg) {
	      var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
	      if (type === 'number' || type === 'string') {
	        base.push(arg);
	      } else if (type === 'object') {
	        modifiers = arg;
	        remaining = i + 1;
	      }
	    }
	    return modifiers;
	  });

	  var element = base.join('__');
	  if (modifiers) {
	    modifiers = Object.keys(modifiers).reduce(function (obj, key) {
	      obj[element + '--' + key] = modifiers[key];
	      return obj;
	    }, {});
	  }
	  var classes = remaining > -1 ? args.slice(remaining) : null;
	  return (0, _classnames2.default)(element, modifiers, classes).trim();
	}

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _bem2 = __webpack_require__(430);

	var _bem3 = _interopRequireDefault(_bem2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DIFF_KEYS = ['className', 'align', 'position', 'size', 'offset', 'order', 'phoneSize', 'phoneOrder', 'phoneOffset', 'phoneHidden', 'tabletSize', 'tabletOrder', 'tabletOffset', 'tabletHidden', 'desktopSize', 'desktopOrder', 'desktopOffset', 'desktopHidden'];

	var Cell = function (_PureComponent) {
	  _inherits(Cell, _PureComponent);

	  /**
	   * A utility function to get the cell's className based on the Cell's props. This is
	   * used behind the scenes to merge and create the className for the cell.
	   *
	   * ### Example:
	   * ```js
	   * <div className={Cell.getClassName()}>A simple cell</div>
	   * <div className={Cell.getClassName({ size: 1 })}>A cell with size 1</div>
	   * ```
	   *
	   * @param {Object=} props - This should be an object of the `Cell`'s props. It
	   *    will extract the needed keys and generate the className.
	   * @return {String} the full className to use for the cell
	   */
	  Cell.getClassName = function getClassName() {
	    var _bem;

	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var className = props.className,
	        align = props.align,
	        position = props.position,
	        size = props.size,
	        order = props.order,
	        offset = props.offset,
	        phoneSize = props.phoneSize,
	        phoneOrder = props.phoneOrder,
	        phoneOffset = props.phoneOffset,
	        phoneHidden = props.phoneHidden,
	        tabletSize = props.tabletSize,
	        tabletOrder = props.tabletOrder,
	        tabletOffset = props.tabletOffset,
	        tabletHidden = props.tabletHidden,
	        desktopSize = props.desktopSize,
	        desktopOrder = props.desktopOrder,
	        desktopOffset = props.desktopOffset,
	        desktopHidden = props.desktopHidden;


	    return (0, _bem3.default)('md-cell', (_bem = {}, _bem[align] = align, _bem[position] = position, _bem[size] = size, _bem['order-' + order] = order, _bem[offset + '-offset'] = offset, _bem[phoneSize + '-phone'] = phoneSize, _bem['order-' + phoneOrder + '-phone'] = phoneOrder, _bem[phoneOffset + '-phone-offset'] = phoneOffset, _bem['phone-hidden'] = phoneHidden, _bem[tabletSize + '-tablet'] = tabletSize, _bem['order-' + tabletOrder + '-tablet'] = tabletOrder, _bem[tabletOffset + '-tablet-offset'] = tabletOffset, _bem['tablet-hidden'] = tabletHidden, _bem[desktopSize + '-desktop'] = desktopSize, _bem['order-' + desktopOrder + '-desktop'] = desktopOrder, _bem[desktopOffset + '-desktop-offset'] = desktopOffset, _bem['desktop-hidden'] = desktopHidden, _bem), className);
	  };

	  function Cell(props) {
	    _classCallCheck(this, Cell);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

	    _this.state = { className: Cell.getClassName(props) };
	    return _this;
	  }

	  Cell.prototype.componentWillMount = function componentWillMount() {
	    this.setState({ className: Cell.getClassName(this.props) });
	  };

	  Cell.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    if (DIFF_KEYS.some(function (key) {
	      return _this2.props[key] !== nextProps[key];
	    })) {
	      this.setState({ className: Cell.getClassName(nextProps) });
	    }
	  };

	  Cell.prototype.render = function render() {
	    var className = this.state.className;

	    var _props = this.props,
	        style = _props.style,
	        Component = _props.component,
	        children = _props.children,
	        propClassName = _props.className,
	        align = _props.align,
	        position = _props.position,
	        size = _props.size,
	        offset = _props.offset,
	        order = _props.order,
	        phoneSize = _props.phoneSize,
	        phoneOrder = _props.phoneOrder,
	        phoneOffset = _props.phoneOffset,
	        phoneHidden = _props.phoneHidden,
	        tabletSize = _props.tabletSize,
	        tabletOrder = _props.tabletOrder,
	        tabletOffset = _props.tabletOffset,
	        tabletHidden = _props.tabletHidden,
	        desktopSize = _props.desktopSize,
	        desktopOrder = _props.desktopOrder,
	        desktopOffset = _props.desktopOffset,
	        desktopHidden = _props.desktopHidden,
	        props = _objectWithoutProperties(_props, ['style', 'component', 'children', 'className', 'align', 'position', 'size', 'offset', 'order', 'phoneSize', 'phoneOrder', 'phoneOffset', 'phoneHidden', 'tabletSize', 'tabletOrder', 'tabletOffset', 'tabletHidden', 'desktopSize', 'desktopOrder', 'desktopOffset', 'desktopHidden']);

	    if (typeof children === 'function') {
	      return children({ style: style, className: className });
	    }

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, { style: style, className: className }),
	      children
	    );
	  };

	  return Cell;
	}(_react.PureComponent);

	Cell.propTypes = {
	  /**
	   * An optional style to apply to the Cell component. This will only be applied
	   * if the `children` prop is not a callback function.
	   *
	   * @see {@link #children}
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the Cell component. This will only be applied
	   * if the `children` prop is not a callback function.
	   *
	   * @see {@link #children}
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The component to render the Cell as. This should probably not be used as much
	   * as the `children` callback function.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

	  /**
	   * The children can either be renderable React elements or a callback function
	   * that accepts the style and className props to apply so that the styles can
	   * be manually added to whichever component.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),

	  /**
	   * An optional cell alignment to apply. When the `Grid` is not `stacked`,
	   * this will apply to vertical alignment within each "row" of the grid.
	   *
	   * Alignments:
	   * - `top` - This will align to the top of the row
	   * - `middle` - This will align to the middle of the row
	   * - `bottom` - This will align to the bottom of the row
	   * - `stretch` - This will make the cell stretch to fill all the available space
	   *   in the row.
	   *
	   * @see {@link #position}
	   */
	  align: _propTypes2.default.oneOf(['top', 'middle', 'bottom', 'stretch']),

	  /**
	   * An optional cell position to apply. When the `Grid` is not `stacked`,
	   * this will apply to horizontal alignment within each "row" of the grid.
	   *
	   * Positions:
	   * - `center` - This will align the cell to be within the center of the row. This really
	   *    just applies `margin-left: auto; margin-right: auto`.
	   * - `right` - This will align the cell to the end of the row. This really just applies `margin-left: auto`.
	   *
	   * @see {@link #align}
	   */
	  position: _propTypes2.default.oneOf(['center', 'right']),

	  /**
	   * An optional size to apply to the cell. This sizing will be applied across all media sizes.
	   * If the size is greater than the number of columns allowed for the media size, it will just
	   * span the entire width.
	   */
	  size: _propTypes2.default.number,

	  /**
	   * An optional order to apply to the cell. This order will be applied across all media sizes.
	   */
	  order: _propTypes2.default.number,

	  /**
	   * An optional offset to apply to the cell. This will add spacing to the left of the cell.
	   */
	  offset: _propTypes2.default.number,

	  /**
	   * An optional size to apply to the cell only on phones.
	   */
	  phoneSize: _propTypes2.default.number,

	  /**
	   * An optional order to apply to the cell only on phones.
	   */
	  phoneOrder: _propTypes2.default.number,

	  /**
	   * An optional offset to apply to the cell only on phones.
	   */
	  phoneOffset: _propTypes2.default.number,

	  /**
	   * Boolean if the cell should be hidden on phones only.
	   */
	  phoneHidden: _propTypes2.default.bool,

	  /**
	   * An optional size to apply to the cell only on tablets.
	   */
	  tabletSize: _propTypes2.default.number,

	  /**
	   * An optional order to apply to the cell only on tablets.
	   */
	  tabletOrder: _propTypes2.default.number,

	  /**
	   * An optional offset to apply to the cell only on tablets.
	   */
	  tabletOffset: _propTypes2.default.number,

	  /**
	   * Boolean if the cell should be hidden on tablets only.
	   */
	  tabletHidden: _propTypes2.default.bool,

	  /**
	   * An optional size to apply to the cell only on desktops.
	   */
	  desktopSize: _propTypes2.default.number,

	  /**
	   * An optional order to apply to the cell only on desktops.
	   */
	  desktopOrder: _propTypes2.default.number,

	  /**
	   * An optional offset to apply to the cell only on desktops.
	   */
	  desktopOffset: _propTypes2.default.number,

	  /**
	   * Boolean if the cell should be hidden on desktops only.
	   */
	  desktopHidden: _propTypes2.default.bool
	};
	Cell.defaultProps = {
	  component: 'div',
	  phoneHidden: false,
	  tabletHidden: false,
	  desktopHidden: false
	};
	exports.default = Cell;

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Grid = __webpack_require__(429);

	var _Grid2 = _interopRequireDefault(_Grid);

	var _Cell = __webpack_require__(431);

	var _Cell2 = _interopRequireDefault(_Cell);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DIFF_KEYS = ['className', 'cellClassName', 'stacked', 'container', 'noSpacing', 'gutter', 'spacing', 'align', 'position', 'size', 'offset', 'order', 'phoneSize', 'phoneOrder', 'phoneOffset', 'phoneHidden', 'tabletSize', 'tabletOrder', 'tabletOffset', 'tabletHidden', 'desktopSize', 'desktopOrder', 'desktopOffset', 'desktopHidden'];

	var GridList = function (_PureComponent) {
	  _inherits(GridList, _PureComponent);

	  /**
	   * A utility function to get the grid's className based on the `Grid`'s and `Cell`'s
	   * props. This is * used behind the scenes to merge and create the className for the grid.
	   *
	   * ### Example:
	   * ```js
	   * const { className, cellClassName } = GridList.getClassNames();
	   * const { className, cellClassName } = GridList.getClassNames({ size: 1, container: 'custom' });
	   * ```
	   *
	   * @param {Object=} props - This should be an object of the `Grid`'s props. It
	   *    will extract the needed keys and generate the classNames.
	   * @return {Object} an object containing the `className` and `cellClassName` attributes.
	   */
	  GridList.getClassNames = function getClassNames() {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var className = props.className,
	        cellClassName = props.cellClassName,
	        remaining = _objectWithoutProperties(props, ['className', 'cellClassName']);

	    return {
	      className: _Grid2.default.getClassName(_extends({ className: className }, remaining)),
	      cellClassName: _Cell2.default.getClassName(_extends({ className: cellClassName }, remaining))
	    };
	  };

	  function GridList(props) {
	    _classCallCheck(this, GridList);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

	    _this.state = GridList.getClassNames(props);
	    return _this;
	  }

	  GridList.prototype.componentWillMount = function componentWillMount() {
	    this.setState(GridList.getClassNames(this.props));
	  };

	  GridList.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    if (DIFF_KEYS.some(function (key) {
	      return _this2.props[key] !== nextProps[key];
	    })) {
	      this.setState(GridList.getClassNames(nextProps));
	    }
	  };

	  GridList.prototype.render = function render() {
	    var _state = this.state,
	        className = _state.className,
	        cellClassName = _state.cellClassName;

	    var _props = this.props,
	        style = _props.style,
	        cellStyle = _props.cellStyle,
	        Component = _props.component,
	        children = _props.children,
	        propClassName = _props.className,
	        propCellClassName = _props.cellClassName,
	        container = _props.container,
	        noSpacing = _props.noSpacing,
	        stacked = _props.stacked,
	        gutter = _props.gutter,
	        spacing = _props.spacing,
	        align = _props.align,
	        position = _props.position,
	        size = _props.size,
	        offset = _props.offset,
	        order = _props.order,
	        phoneSize = _props.phoneSize,
	        phoneOrder = _props.phoneOrder,
	        phoneOffset = _props.phoneOffset,
	        phoneHidden = _props.phoneHidden,
	        tabletSize = _props.tabletSize,
	        tabletOrder = _props.tabletOrder,
	        tabletOffset = _props.tabletOffset,
	        tabletHidden = _props.tabletHidden,
	        desktopSize = _props.desktopSize,
	        desktopOrder = _props.desktopOrder,
	        desktopOffset = _props.desktopOffset,
	        desktopHidden = _props.desktopHidden,
	        props = _objectWithoutProperties(_props, ['style', 'cellStyle', 'component', 'children', 'className', 'cellClassName', 'container', 'noSpacing', 'stacked', 'gutter', 'spacing', 'align', 'position', 'size', 'offset', 'order', 'phoneSize', 'phoneOrder', 'phoneOffset', 'phoneHidden', 'tabletSize', 'tabletOrder', 'tabletOffset', 'tabletHidden', 'desktopSize', 'desktopOrder', 'desktopOffset', 'desktopHidden']);

	    if (typeof children === 'function') {
	      return children({ style: style, className: className, cellStyle: cellStyle, cellClassName: cellClassName });
	    }

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, { style: style, className: className }),
	      _react2.default.Children.map(children, function (child) {
	        if (!child) {
	          return child;
	        }

	        var childStyle = child.props.style;
	        if (cellStyle) {
	          childStyle = childStyle ? _extends({}, cellStyle, childStyle) : cellStyle;
	        }

	        return _react2.default.cloneElement(child, {
	          style: childStyle,
	          className: (0, _classnames2.default)(child.props.className, cellClassName)
	        });
	      })
	    );
	  };

	  return GridList;
	}(_react.PureComponent);

	GridList.propTypes = {
	  /**
	   * An optional style to apply to the Grid component. This will only be applied
	   * if the `children` prop is not a callback function.
	   *
	   * @see {@link #children}
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the Grid component. This will only be applied
	   * if the `children` prop is not a callback function.
	   *
	   * @see {@link #children}
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to each child. This will only be applied
	   * if the `children` prop is not a callback function.
	   *
	   * @see {@link #children}
	   */
	  cellStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to each child. This will only be applied
	   * if the `children` prop is not a callback function.
	   *
	   * @see {@link #children}
	   */
	  cellClassName: _propTypes2.default.string,

	  /**
	   * The component to render the Cell as. This should probably not be used as much
	   * as the `children` callback function.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

	  /**
	   * The children can either be renderable React elements or a callback function
	   * that accepts the style and className props to apply so that the styles can
	   * be manually added to whichever component.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),

	  /**
	   * An optional container name to apply to the Grid. This should be the same name as provided
	   * to the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container) mixin.
	   */
	  container: _propTypes2.default.string,

	  /**
	   * Boolean if the grid should be placed vertically instead of horizontally.
	   */
	  stacked: _propTypes2.default.bool,

	  /**
	   * Boolean if all the gutters and spacing should be removed from the grid.
	   */
	  noSpacing: _propTypes2.default.bool,

	  /**
	   * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin
	   * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className
	   */
	  gutter: _propTypes2.default.number,

	  /**
	   * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin
	   * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className
	   */
	  spacing: _propTypes2.default.number,

	  /**
	   * An optional cell alignment to apply. When the `Grid` is not `stacked`,
	   * this will apply to vertical alignment within each "row" of the grid.
	   *
	   * Alignments:
	   * - `top` - This will align to the top of the row
	   * - `middle` - This will align to the middle of the row
	   * - `bottom` - This will align to the bottom of the row
	   * - `stretch` - This will make the cell stretch to fill all the available space
	   *   in the row.
	   *
	   * @see {@link #position}
	   */
	  align: _propTypes2.default.oneOf(['top', 'middle', 'bottom', 'stretch']),

	  /**
	   * An optional cell position to apply. When the `Grid` is not `stacked`,
	   * this will apply to horizontal alignment within each "row" of the grid.
	   *
	   * Positions:
	   * - `center` - This will align the cell to be within the center of the row. This really
	   *    just applies `margin-left: auto; margin-right: auto`.
	   * - `right` - This will align the cell to the end of the row. This really just applies `margin-left: auto`.
	   *
	   * @see {@link #align}
	   */
	  position: _propTypes2.default.oneOf(['center', 'right']),

	  /**
	   * An optional size to apply to the cell. This sizing will be applied across all media sizes.
	   * If the size is greater than the number of columns allowed for the media size, it will just
	   * span the entire width.
	   */
	  size: _propTypes2.default.number,

	  /**
	   * An optional order to apply to the cell. This order will be applied across all media sizes.
	   */
	  order: _propTypes2.default.number,

	  /**
	   * An optional offset to apply to the cell. This will add spacing to the left of the cell.
	   */
	  offset: _propTypes2.default.number,

	  /**
	   * An optional size to apply to the cell only on phones.
	   */
	  phoneSize: _propTypes2.default.number,

	  /**
	   * An optional order to apply to the cell only on phones.
	   */
	  phoneOrder: _propTypes2.default.number,

	  /**
	   * An optional offset to apply to the cell only on phones.
	   */
	  phoneOffset: _propTypes2.default.number,

	  /**
	   * Boolean if the cell should be hidden on phones only.
	   */
	  phoneHidden: _propTypes2.default.bool,

	  /**
	   * An optional size to apply to the cell only on tablets.
	   */
	  tabletSize: _propTypes2.default.number,

	  /**
	   * An optional order to apply to the cell only on tablets.
	   */
	  tabletOrder: _propTypes2.default.number,

	  /**
	   * An optional offset to apply to the cell only on tablets.
	   */
	  tabletOffset: _propTypes2.default.number,

	  /**
	   * Boolean if the cell should be hidden on tablets only.
	   */
	  tabletHidden: _propTypes2.default.bool,

	  /**
	   * An optional size to apply to the cell only on desktops.
	   */
	  desktopSize: _propTypes2.default.number,

	  /**
	   * An optional order to apply to the cell only on desktops.
	   */
	  desktopOrder: _propTypes2.default.number,

	  /**
	   * An optional offset to apply to the cell only on desktops.
	   */
	  desktopOffset: _propTypes2.default.number,

	  /**
	   * Boolean if the cell should be hidden on desktops only.
	   */
	  desktopHidden: _propTypes2.default.bool
	};
	GridList.defaultProps = {
	  component: 'div',
	  stacked: false,
	  noSpacing: false,
	  phoneHidden: false,
	  tabletHidden: false,
	  desktopHidden: false
	};
	exports.default = GridList;

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _ListItemText = __webpack_require__(344);

	var _ListItemText2 = _interopRequireDefault(_ListItemText);

	var _TileAddon = __webpack_require__(343);

	var _TileAddon2 = _interopRequireDefault(_TileAddon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ListItemControl = function (_PureComponent) {
	  _inherits(ListItemControl, _PureComponent);

	  function ListItemControl() {
	    _classCallCheck(this, ListItemControl);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  ListItemControl.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        tileStyle = _props.tileStyle,
	        tileClassName = _props.tileClassName,
	        primaryAction = _props.primaryAction,
	        secondaryAction = _props.secondaryAction,
	        primaryText = _props.primaryText,
	        secondaryText = _props.secondaryText,
	        threeLines = _props.threeLines,
	        leftIcon = _props.leftIcon,
	        leftAvatar = _props.leftAvatar,
	        rightIcon = _props.rightIcon,
	        rightAvatar = _props.rightAvatar,
	        props = _objectWithoutProperties(_props, ['className', 'tileStyle', 'tileClassName', 'primaryAction', 'secondaryAction', 'primaryText', 'secondaryText', 'threeLines', 'leftIcon', 'leftAvatar', 'rightIcon', 'rightAvatar']);

	    var control = _react.Children.only(primaryAction || secondaryAction);
	    var text = _react2.default.createElement(_ListItemText2.default, {
	      key: 'text',
	      primaryText: control.props.label || primaryText,
	      secondaryText: secondaryText,
	      className: (0, _classnames2.default)({
	        'md-tile-content--left-icon': leftIcon,
	        'md-tile-content--left-avatar': leftAvatar,
	        'md-tile-content--left-button': primaryAction,
	        'md-tile-content--right-padding': primaryAction
	      })
	    });
	    control = (0, _react.cloneElement)(control, {
	      className: (0, _classnames2.default)('md-list-control', {
	        'md-list-control--right': secondaryAction
	      }, control.props.className),
	      label: text
	    });

	    var leftNode = _react2.default.createElement(_TileAddon2.default, {
	      key: 'left-addon',
	      icon: leftIcon,
	      avatar: leftAvatar
	    });

	    var rightNode = _react2.default.createElement(_TileAddon2.default, {
	      key: 'right-addon',
	      icon: rightIcon,
	      avatar: rightAvatar
	    });

	    var icond = !!leftIcon || !!rightIcon;
	    var avatard = !!leftAvatar || !!rightAvatar;

	    return _react2.default.createElement(
	      'li',
	      _extends({}, props, { className: (0, _classnames2.default)('md-list-item', className) }),
	      _react2.default.createElement(
	        'div',
	        {
	          style: tileStyle,
	          className: (0, _classnames2.default)('md-list-tile', {
	            'md-list-tile--icon': !secondaryText && icond && !avatard,
	            'md-list-tile--avatar': !secondaryText && avatard,
	            'md-list-tile--two-lines': secondaryText && !threeLines,
	            'md-list-tile--three-lines': secondaryText && threeLines,
	            'md-list-tile--control-left': primaryAction,
	            'md-list-tile--control-right': secondaryAction
	          }, (0, _themeColors2.default)({ text: true }), tileClassName)
	        },
	        leftNode,
	        control,
	        rightNode
	      )
	    );
	  };

	  return ListItemControl;
	}(_react.PureComponent);

	ListItemControl.propTypes = {
	  /**
	   * An optional style to apply to the `.md-list-item`.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `.md-list-item`.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the `.md-list-tile`.
	   */
	  tileStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `.md-list-tile`.
	   */
	  tileClassName: _propTypes2.default.string,

	  /**
	   * The primary text to display in the `ListItemControl`. The `primaryAction` or
	   * `secondaryAction` will end up getting the `label` prop injected into it with
	   * a combination of the `primaryText` and `secondaryText`. If the `primaryAction`
	   * or `secondaryAction` already have a label prop, the `label` prop will be used
	   * as the `primaryText`.
	   */
	  primaryText: _propTypes2.default.node,

	  /**
	   * An optional secondary text that can be displayed in the label of the `primaryAction`
	   * or `secondaryAction`.
	   */
	  secondaryText: _propTypes2.default.node,

	  /**
	   * Boolean if the primary and secondary text will span three lines.
	   */
	  threeLines: _propTypes2.default.bool,

	  /**
	   * The primary action of the `ListItemControl`. This _should_ normally
	   * be a type of `SelectionControl`
	   */
	  primaryAction: _propTypes2.default.element,

	  /**
	   * The secondary action of the `ListItemControl`. This _should_ normally
	   * be a type of `SelectionControl`. If it is a selection control,
	   * make sure to add the `labelBefore` prop to get correct positioning.
	   */
	  secondaryAction: _propTypes2.default.element,

	  /**
	   * An optional `FontIcon` to display to the left of the action.
	   */
	  leftIcon: _propTypes2.default.node,

	  /**
	   * An optional `Avatar` to display to the left of the action.
	   */
	  leftAvatar: _propTypes2.default.node,

	  /**
	   * An optional `FontIcon` to display to the right of the action.
	   */
	  rightIcon: _propTypes2.default.node,

	  /**
	   * An optional `FontIcon` to display to the right of the action.
	   */
	  rightAvatar: _propTypes2.default.node,

	  /**
	   * Defines the number of items in the list. This is only required when all items in the
	   * list are not present in the DOM.
	   *
	   * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize
	   */
	  'aria-setsize': _propTypes2.default.number,

	  /**
	   * Defines the items position in the list. This is only required when all items in the list
	   * are not present in the DOM. The custom validation just requires this prop if the `aria-setsize`
	   * prop is defined as a helpful reminder.
	   *
	   * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset
	   */
	  'aria-posinset': function ariaPosinset(props, propName) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    var validator = _propTypes2.default.number;
	    if (typeof props['aria-setsize'] !== 'undefined') {
	      validator = validator.isRequired;
	    }

	    return validator.apply(undefined, [props, propName].concat(args));
	  }
	};
	exports.default = ListItemControl;

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _CSSTransitionGroup = __webpack_require__(317);

	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _invalidIf = __webpack_require__(282);

	var _invalidIf2 = _interopRequireDefault(_invalidIf);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	var _Drawer = __webpack_require__(419);

	var _Drawer2 = _interopRequireDefault(_Drawer);

	var _List = __webpack_require__(345);

	var _List2 = _interopRequireDefault(_List);

	var _Toolbar = __webpack_require__(435);

	var _Toolbar2 = _interopRequireDefault(_Toolbar);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _isType = __webpack_require__(422);

	var _JumpToContentLink = __webpack_require__(437);

	var _JumpToContentLink2 = _interopRequireDefault(_JumpToContentLink);

	var _CloseButton = __webpack_require__(438);

	var _CloseButton2 = _interopRequireDefault(_CloseButton);

	var _MiniListItem = __webpack_require__(439);

	var _MiniListItem2 = _interopRequireDefault(_MiniListItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var DrawerTypes = _Drawer2.default.DrawerTypes;


	function getNonMiniType(type) {
	  var pMini = DrawerTypes.PERSISTENT_MINI,
	      tMini = DrawerTypes.TEMPORARY_MINI;

	  if ([pMini, tMini].indexOf(type) === -1) {
	    return type;
	  }

	  return pMini === type ? DrawerTypes.PERSISTENT : DrawerTypes.TEMPORARY;
	}

	function toMiniListItem(item, index) {
	  if ((0, _react.isValidElement)(item)) {
	    return item;
	  }

	  var divider = item.divider,
	      subheader = item.subheader,
	      key = item.key,
	      itemProps = _objectWithoutProperties(item, ['divider', 'subheader', 'key']);

	  if (divider || subheader) {
	    return null;
	  }

	  return _react2.default.createElement(_MiniListItem2.default, _extends({ key: key || index }, itemProps));
	}

	/**
	 * The `NavigationDrawer` is used when you want a full layout configuration. It is a combination
	 * of the `Toolbar` component and the `Drawer` component. Any props that are not specifically
	 * listed below will be provided to the `Drawer` component. So if there are props on the `Drawer`
	 * that are not listed here, they will be passed along.
	 *
	 * The main benefit of using this component is that it will manage adding respective offset
	 * classes automatically for you to the content and the drawer. It will also manage using
	 * a mini drawer type for you.
	 */

	var NavigationDrawer = function (_PureComponent) {
	  _inherits(NavigationDrawer, _PureComponent);

	  /**
	   * Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,
	   * and the current drawer type. This expects a `props` object of the drawer.
	   *
	   * If this is used server side, it will default to only matching mobile.
	   *
	   * @param {Object=} props - The current drawer's prop shape to extract the mobile, tablet, and desktop type/min
	   *    widths. This defaults to the drawer's default props.
	   * @return {Object} an object containing the media matches and the current type to use for the drawer.
	   */
	  NavigationDrawer.getCurrentMedia = function getCurrentMedia() {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NavigationDrawer.defaultProps;

	    var mobileType = props.mobileDrawerType,
	        tabletType = props.tabletDrawerType,
	        desktopType = props.desktopDrawerType,
	        constantType = props.constantDrawerType,
	        others = _objectWithoutProperties(props, ['mobileDrawerType', 'tabletDrawerType', 'desktopDrawerType', 'constantDrawerType']);

	    return _Drawer2.default.getCurrentMedia(_extends({ mobileType: mobileType, tabletType: tabletType, desktopType: desktopType, constantType: constantType }, others));
	  };

	  function NavigationDrawer(props) {
	    _classCallCheck(this, NavigationDrawer);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var defaultMedia = props.defaultMedia,
	        defaultVisible = props.defaultVisible,
	        initialDrawerType = props.initialDrawerType;


	    _this.state = {
	      mobile: initialDrawerType || defaultMedia === 'mobile',
	      tablet: initialDrawerType || defaultMedia === 'tablet',
	      desktop: initialDrawerType || defaultMedia === 'desktop'
	    };

	    if (typeof props.drawerType === 'undefined') {
	      _this.state.drawerType = props[(initialDrawerType || defaultMedia) + 'DrawerType'];
	    }

	    var type = (0, _getField2.default)(props, _this.state, 'drawerType');

	    if (typeof props.visible === 'undefined') {
	      // The logic for determining the visibility is handled by the created mini drawer
	      _this.state.visible = (0, _isType.isPermanent)(type);
	      if (!_this.state.visible && typeof defaultVisible !== 'undefined') {
	        _this.state.visible = defaultVisible;
	      }
	    }
	    return _this;
	  }

	  NavigationDrawer.prototype.getChildContext = function getChildContext() {
	    var _props = this.props,
	        persistentIcon = _props.persistentIcon,
	        id = _props.contentId,
	        label = _props.jumpLabel,
	        persistentIconChildren = _props.persistentIconChildren,
	        persistentIconClassName = _props.persistentIconClassName,
	        closeIconChildren = _props.closeIconChildren,
	        closeIconClassName = _props.closeIconClassName;


	    return {
	      id: id,
	      label: label,
	      closeIcon: (0, _getDeprecatedIcon2.default)(closeIconClassName || persistentIconClassName, closeIconChildren || persistentIconChildren, persistentIcon),
	      onCloseClick: this._toggleVisibility,
	      renderNode: this.context.renderNode
	    };
	  };

	  NavigationDrawer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var visible = (0, _getField2.default)(this.props, this.state, 'visible');
	    var nVisible = (0, _getField2.default)(nextProps, this.state, 'visible');
	    if (visible !== nVisible) {
	      this._animate(nextProps);
	    }
	  };

	  NavigationDrawer.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }
	  };

	  NavigationDrawer.prototype.render = function render() {
	    var _props2 = this.props,
	        id = _props2.id,
	        style = _props2.style,
	        className = _props2.className,
	        toolbarStyle = _props2.toolbarStyle,
	        toolbarClassName = _props2.toolbarClassName,
	        drawerStyle = _props2.drawerStyle,
	        drawerClassName = _props2.drawerClassName,
	        contentStyle = _props2.contentStyle,
	        contentClassName = _props2.contentClassName,
	        Content = _props2.contentComponent,
	        miniDrawerStyle = _props2.miniDrawerStyle,
	        miniDrawerClassName = _props2.miniDrawerClassName,
	        miniNavStyle = _props2.miniNavStyle,
	        miniNavClassName = _props2.miniNavClassName,
	        miniDrawerId = _props2.miniDrawerId,
	        miniNavItemsId = _props2.miniNavItemsId,
	        navItems = _props2.navItems,
	        children = _props2.children,
	        drawerId = _props2.drawerId,
	        drawerTitle = _props2.drawerTitle,
	        drawerZDepth = _props2.drawerZDepth,
	        drawerChildren = _props2.drawerChildren,
	        drawerHeaderChildren = _props2.drawerHeaderChildren,
	        drawerTransitionDuration = _props2.drawerTransitionDuration,
	        toolbarId = _props2.toolbarId,
	        toolbarTitle = _props2.toolbarTitle,
	        toolbarTitleMenu = _props2.toolbarTitleMenu,
	        toolbarTitleStyle = _props2.toolbarTitleStyle,
	        toolbarTitleClassName = _props2.toolbarTitleClassName,
	        toolbarActions = _props2.toolbarActions,
	        toolbarProminent = _props2.toolbarProminent,
	        toolbarProminentTitle = _props2.toolbarProminentTitle,
	        toolbarThemeType = _props2.toolbarThemeType,
	        toolbarSingleColor = _props2.toolbarSingleColor,
	        toolbarChildren = _props2.toolbarChildren,
	        toolbarZDepth = _props2.toolbarZDepth,
	        mobileType = _props2.mobileDrawerType,
	        tabletType = _props2.tabletDrawerType,
	        desktopType = _props2.desktopDrawerType,
	        transitionName = _props2.transitionName,
	        transitionEnterTimeout = _props2.transitionEnterTimeout,
	        transitionLeaveTimeout = _props2.transitionLeaveTimeout,
	        extractMini = _props2.extractMini,
	        miniDrawerHeader = _props2.miniDrawerHeader,
	        miniDrawerChildren = _props2.miniDrawerChildren,
	        footer = _props2.footer,
	        includeDrawerHeader = _props2.includeDrawerHeader,
	        contentId = _props2.contentId,
	        contentProps = _props2.contentProps,
	        constantDrawerType = _props2.constantDrawerType,
	        temporaryIcon = _props2.temporaryIcon,
	        temporaryIconChildren = _props2.temporaryIconChildren,
	        temporaryIconClassName = _props2.temporaryIconClassName,
	        menuIconChildren = _props2.menuIconChildren,
	        menuIconClassName = _props2.menuIconClassName,
	        propDrawerType = _props2.drawerType,
	        propDrawerHeader = _props2.drawerHeader,
	        propRenderNode = _props2.renderNode,
	        jumpLabel = _props2.jumpLabel,
	        persistentIcon = _props2.persistentIcon,
	        onDrawerChange = _props2.onDrawerChange,
	        closeIconChildren = _props2.closeIconChildren,
	        closeIconClassName = _props2.closeIconClassName,
	        persistentIconChildren = _props2.persistentIconChildren,
	        persistentIconClassName = _props2.persistentIconClassName,
	        props = _objectWithoutProperties(_props2, ['id', 'style', 'className', 'toolbarStyle', 'toolbarClassName', 'drawerStyle', 'drawerClassName', 'contentStyle', 'contentClassName', 'contentComponent', 'miniDrawerStyle', 'miniDrawerClassName', 'miniNavStyle', 'miniNavClassName', 'miniDrawerId', 'miniNavItemsId', 'navItems', 'children', 'drawerId', 'drawerTitle', 'drawerZDepth', 'drawerChildren', 'drawerHeaderChildren', 'drawerTransitionDuration', 'toolbarId', 'toolbarTitle', 'toolbarTitleMenu', 'toolbarTitleStyle', 'toolbarTitleClassName', 'toolbarActions', 'toolbarProminent', 'toolbarProminentTitle', 'toolbarThemeType', 'toolbarSingleColor', 'toolbarChildren', 'toolbarZDepth', 'mobileDrawerType', 'tabletDrawerType', 'desktopDrawerType', 'transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'extractMini', 'miniDrawerHeader', 'miniDrawerChildren', 'footer', 'includeDrawerHeader', 'contentId', 'contentProps', 'constantDrawerType', 'temporaryIcon', 'temporaryIconChildren', 'temporaryIconClassName', 'menuIconChildren', 'menuIconClassName', 'drawerType', 'drawerHeader', 'renderNode', 'jumpLabel', 'persistentIcon', 'onDrawerChange', 'closeIconChildren', 'closeIconClassName', 'persistentIconChildren', 'persistentIconClassName']);

	    var drawerHeader = this.props.drawerHeader;
	    var _state = this.state,
	        desktop = _state.desktop,
	        tablet = _state.tablet,
	        contentActive = _state.contentActive;


	    var drawerType = (0, _getField2.default)(this.props, this.state, 'drawerType');
	    var visible = (0, _getField2.default)(this.props, this.state, 'visible');
	    var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');
	    var mini = (0, _isType.isMini)(drawerType);
	    var temporary = (0, _isType.isTemporary)(drawerType);
	    var persistent = (0, _isType.isPersistent)(drawerType);
	    var clipped = drawerType === DrawerTypes.CLIPPED;
	    var floating = drawerType === DrawerTypes.FLOATING;

	    var offset = desktop || tablet ? !temporary && visible : visible;
	    var toolbarRelative = (0, _classnames2.default)({
	      'md-toolbar-relative': !toolbarProminent && !toolbarProminentTitle,
	      'md-toolbar-relative--prominent': toolbarProminent || toolbarProminentTitle
	    });

	    var nav = void 0;
	    if (temporary || persistent) {
	      nav = _react2.default.createElement(_Button2.default, {
	        key: 'nav',
	        onClick: this._toggleVisibility,
	        disabled: persistent && visible,
	        icon: true,
	        iconEl: (0, _getDeprecatedIcon2.default)(menuIconClassName || temporaryIconClassName, menuIconChildren || temporaryIconChildren, temporaryIcon)
	      });
	    }

	    var closeButton = void 0;
	    if (persistent) {
	      closeButton = _react2.default.createElement(_CloseButton2.default, null);
	    }

	    if (!drawerHeader && includeDrawerHeader) {
	      var _cn;

	      drawerHeader = _react2.default.createElement(
	        _Toolbar2.default,
	        {
	          key: 'drawer-header',
	          title: drawerTitle,
	          actions: visible && nav ? closeButton : null,
	          className: (0, _classnames2.default)('md-divider-border md-divider-border--bottom', (_cn = {}, _cn[toolbarRelative] = clipped || floating, _cn))
	        },
	        drawerHeaderChildren,
	        _react2.default.createElement(_JumpToContentLink2.default, null)
	      );
	    }
	    var miniDrawer = void 0;
	    if (mini) {
	      var miniList = void 0;
	      if (extractMini) {
	        miniList = _react2.default.createElement(
	          _List2.default,
	          {
	            id: miniNavItemsId,
	            key: 'mini-nav-items',
	            style: miniNavStyle,
	            className: (0, _classnames2.default)(miniNavClassName, toolbarRelative)
	          },
	          navItems.map(toMiniListItem)
	        );
	      }

	      miniDrawer = _react2.default.createElement(
	        _Drawer2.default,
	        {
	          id: miniDrawerId,
	          key: 'mini-drawer',
	          type: drawerType,
	          renderNode: renderNode,
	          'aria-hidden': visible,
	          style: miniDrawerStyle,
	          className: miniDrawerClassName
	        },
	        miniDrawerHeader,
	        miniList,
	        miniDrawerChildren
	      );
	    }

	    var desktopOffset = !clipped && !floating && offset;

	    return _react2.default.createElement(
	      'div',
	      { id: id, style: style, className: className },
	      _react2.default.createElement(
	        _Toolbar2.default,
	        {
	          id: toolbarId,
	          colored: toolbarThemeType === 'colored',
	          themed: toolbarThemeType === 'themed',
	          singleColor: toolbarSingleColor,
	          style: toolbarStyle,
	          className: (0, _classnames2.default)({
	            'md-toolbar--over-drawer': clipped || floating || mini && !visible
	          }, toolbarClassName),
	          title: toolbarTitle,
	          titleMenu: toolbarTitleMenu,
	          prominent: toolbarProminent,
	          prominentTitle: toolbarProminentTitle,
	          titleStyle: toolbarTitleStyle,
	          titleClassName: (0, _classnames2.default)({
	            'md-title--drawer-active': contentActive,
	            'md-transition--deceleration': offset && visible,
	            'md-transition--acceleration': offset && !visible,
	            'md-title--permanent-offset': desktopOffset && (0, _isType.isPermanent)(drawerType),
	            'md-title--persistent-offset': desktopOffset && persistent
	          }, toolbarTitleClassName),
	          nav: nav,
	          actions: toolbarActions,
	          fixed: true,
	          zDepth: toolbarZDepth
	        },
	        toolbarChildren
	      ),
	      miniDrawer,
	      _react2.default.createElement(
	        _Drawer2.default,
	        _extends({}, props, {
	          id: drawerId,
	          constantType: constantDrawerType,
	          transitionDuration: drawerTransitionDuration,
	          header: drawerHeader,
	          style: drawerStyle,
	          className: drawerClassName,
	          navItems: navItems,
	          renderNode: renderNode,
	          mobileType: mobileType,
	          tabletType: tabletType,
	          desktopType: desktopType,
	          type: getNonMiniType(drawerType),
	          visible: visible,
	          zDepth: drawerZDepth,
	          onVisibilityChange: this._handleVisibility,
	          onMediaTypeChange: this._handleTypeChange
	        }),
	        drawerChildren
	      ),
	      _react2.default.createElement(
	        _CSSTransitionGroup2.default,
	        _extends({}, contentProps, {
	          id: contentId,
	          component: Content,
	          transitionName: transitionName,
	          transitionEnter: !!transitionEnterTimeout,
	          transitionEnterTimeout: transitionEnterTimeout,
	          transitionLeave: !!transitionLeaveTimeout,
	          transitionLeaveTimeout: transitionLeaveTimeout,
	          tabIndex: -1,
	          style: contentStyle,
	          className: (0, _classnames2.default)('md-navigation-drawer-content', {
	            'md-navigation-drawer-content--active': contentActive,
	            'md-navigation-drawer-content--inactive': !visible,
	            'md-navigation-drawer-content--prominent-offset': toolbarProminent || toolbarProminentTitle,
	            'md-transition--deceleration': visible,
	            'md-transition--acceleration': !visible,
	            'md-drawer-relative': offset,
	            'md-drawer-relative--mini': mini && (!visible || temporary)
	          }, toolbarRelative, contentClassName)
	        }),
	        children
	      ),
	      footer
	    );
	  };

	  return NavigationDrawer;
	}(_react.PureComponent);

	NavigationDrawer.DrawerType = { // deprecated
	  /* eslint-disable no-console */
	  _warned: false,
	  _msg: 'Invalid use of `NavigationDrawer.DrawerType.{{TYPE}}`. The `NavigationDrawer.DrawerType` ' + 'has been deprecated and will be removed in the next major release. Please use the ' + '`NavigationDrawer.DrawerTypes.{{TYPE}}` instead.',

	  get FULL_HEIGHT() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'FULL_HEIGHT'));
	    }
	    this._warned = true;

	    return DrawerTypes.FULL_HEIGHT;
	  },

	  get CLIPPED() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'CLIPPED'));
	    }
	    this._warned = true;

	    return DrawerTypes.CLIPPED;
	  },

	  get FLOATING() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'FLOATING'));
	    }
	    this._warned = true;

	    return DrawerTypes.FLOATING;
	  },

	  get PERSISTENT() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'PERSISTENT'));
	    }
	    this._warned = true;

	    return DrawerTypes.PERSISTENT;
	  },

	  get PERSISTENT_MINI() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'PERSISTENT_MINI'));
	    }
	    this._warned = true;

	    return DrawerTypes.PERSISTENT_MINI;
	  },

	  get TEMPORARY() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'TEMPORARY'));
	    }
	    this._warned = true;

	    return DrawerTypes.TEMPORARY;
	  },

	  get TEMPORARY_MINI() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'TEMPORARY_MINI'));
	    }
	    this._warned = true;

	    return DrawerTypes.TEMPORARY_MINI;
	  }
	};
	NavigationDrawer.DrawerTypes = DrawerTypes;
	NavigationDrawer.propTypes = {
	  /**
	   * An optional id to provide to the entire div wrapper.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the drawer. This is generally a good idea to provide if
	   * there are any `navItems` defined.
	   *
	   * @see {@link #navItemsId}
	   * @see {@link #miniDrawerId}
	   */
	  drawerId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the navItems list. If this is omitted and the `drawerId` prop is
	   * defined, it will be defaulted to `${drawerId}-nav-items`.
	   *
	   * @see {@link #drawerId}
	   * @see {@link Drawer#navItemsId}
	   */
	  navItemsId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to apply to mini drawer that gets created when the `drawerType` is set to
	   * one of the mini types.
	   *
	   * @see {@link #drawerId}
	   * @see {@link #miniNavItemsId}
	   */
	  miniDrawerId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to apply to mini drawer's navigation list that gets created when the `drawerType`
	   * is set to one of the mini types.
	   *
	   * @see {@link #navItemsId}
	   * @see {@link #miniDrawerId}
	   */
	  miniNavItemsId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional id to provide to the main toolbar.
	   */
	  toolbarId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An id to give the main content. A hidden link is created in the main drawer's header that links to the main
	   * content. This is used for keyboard only users to jump the navigation and jump straight to the content.
	   *
	   * If you provide your own `drawerHeader`, it is suggested to include the link yourself.
	   */
	  contentId: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * An optional style to apply to the surrounding container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the surrounding container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the main toolbar.
	   */
	  toolbarStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the toolbar.
	   */
	  toolbarClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the main toolbar's title.
	   */
	  toolbarTitleStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the main toolbar's title.
	   */
	  toolbarTitleClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the drawer.
	   */
	  drawerStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the drawer.
	   */
	  drawerClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the `List` surrounding the `navItems`.
	   */
	  navStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `List` surrounding the `navItems`.
	   */
	  navClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the mini drawer that gets created when the `drawerType` is set
	   * to one of the mini types.
	   *
	   * @see {@link #miniDrawerClassName}
	   * @see {@link #miniNavStyle}
	   * @see {@link #miniNavClassName}
	   */
	  miniDrawerStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the mini drawer that gets created when the `drawerType` is set
	   * to one of the mini types.
	   *
	   * @see {@link #miniDrawerStyle}
	   * @see {@link #miniNavStyle}
	   * @see {@link #miniNavClassName}
	   */
	  miniDrawerClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the mini drawer's navigation list when the `drawerType` is set
	   * to one of the mini types.
	   *
	   * @see {@link #miniDrawerStyle}
	   * @see {@link #miniDrawerClassName}
	   * @see {@link #miniNavClassName}
	   */
	  miniNavStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the mini drawer's navigation list when the `drawerType` is set
	   * to one of the mini types.
	   *
	   * @see {@link #miniDrawerStyle}
	   * @see {@link #miniDrawerClassName}
	   * @see {@link #miniNavStyle}
	   */
	  miniNavClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the content. This is the container surrounding whatever
	   * `children` are passed in.
	   */
	  contentStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the content. This is the container surrounding whatever
	   * `children` are passed in.
	   */
	  contentClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the overlay.
	   */
	  overlayStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the overlay.
	   */
	  overlayClassName: _propTypes2.default.string,

	  /**
	   * The children to display in the main content.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the `drawerHeader` component should be built if the `drawerHeader` prop is not
	   * passed in.
	   */
	  includeDrawerHeader: _propTypes2.default.bool,

	  /**
	   * An optional header to display in the drawer. This will normally be the `Toolbar` component
	   * or any other type of header. You can either use this prop with the `CloseButton` component
	   * when displaying a persistent drawer, or use the `drawerTitle` and `drawerHeaderChildren` prop
	   * to build a toolbar.
	   */
	  drawerHeader: _propTypes2.default.node,

	  /**
	   * An optional title to use for the drawer's header toolbar. If the `drawerHeader` prop is defined,
	   * this is invalid.
	   */
	  drawerTitle: (0, _invalidIf2.default)(_propTypes2.default.node, 'drawerHeader'),

	  /**
	   * An optional zDepth to apply to the drawer. If this is omitted, the value will be set as follows:
	   * - floating || inline = 1
	   * - temporary = 5
	   * - all others = 1
	   *
	   * @see {@link Papers/Paper#zDepth}
	   */
	  drawerZDepth: _propTypes2.default.number,

	  /**
	   * Any additional children to display after the `drawerHeader` and `navItems` list in the drawer.
	   */
	  drawerChildren: _propTypes2.default.node,

	  /**
	   * Any additional children to display in the drawer's header `Toolbar`. If the `drawerHeader` prop is defined,
	   * this is invalid.
	   */
	  drawerHeaderChildren: (0, _invalidIf2.default)(_propTypes2.default.node, 'drawerHeader'),

	  /**
	   * The position for the drawer to be displayed.
	   */
	  position: _propTypes2.default.oneOf(['left', 'right']).isRequired,

	  /**
	   * An optional list of elements or props to use to build a navigational list in the drawer.
	   * When the item is an object of props, it will build a `ListItem` component unless a key of
	   * `divider` or `subheader` is set to true. It will then create the Divider or Subheader component
	   * with any other remaining keys.
	   */
	  navItems: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.shape({
	    divider: _propTypes2.default.bool,
	    subheader: _propTypes2.default.bool,
	    primaryText: _propTypes2.default.node
	  })])),

	  /**
	   * The drawer type to use for mobile devices.
	   */
	  mobileDrawerType: _propTypes2.default.oneOf([DrawerTypes.TEMPORARY, DrawerTypes.TEMPORARY_MINI]).isRequired,

	  /**
	   * The drawer type to use for tablets.
	   */
	  tabletDrawerType: _propTypes2.default.oneOf([DrawerTypes.FULL_HEIGHT, DrawerTypes.CLIPPED, DrawerTypes.FLOATING, DrawerTypes.PERSISTENT, DrawerTypes.PERSISTENT_MINI, DrawerTypes.TEMPORARY, DrawerTypes.TEMPORARY_MINI]).isRequired,

	  /**
	   * The drawer type to use for desktop displays.
	   */
	  desktopDrawerType: _propTypes2.default.oneOf([DrawerTypes.FULL_HEIGHT, DrawerTypes.CLIPPED, DrawerTypes.FLOATING, DrawerTypes.PERSISTENT, DrawerTypes.PERSISTENT_MINI, DrawerTypes.TEMPORARY, DrawerTypes.TEMPORARY_MINI]).isRequired,

	  /**
	   * An optional drawer type to enforce on all screen sizes. If the drawer type is not
	   * `temporary`, you are required to define the `onMediaTypeChange` prop to handle switching
	   * to temporary when the media matches a mobile device.
	   * ```
	   */
	  drawerType: _propTypes2.default.oneOf([DrawerTypes.FULL_HEIGHT, DrawerTypes.CLIPPED, DrawerTypes.FLOATING, DrawerTypes.PERSISTENT, DrawerTypes.PERSISTENT_MINI, DrawerTypes.TEMPORARY, DrawerTypes.TEMPORARY_MINI]),

	  /**
	   * The default media match for the drawer. This will be what is displayed on first render.
	   * The component will adjust itself to the current media after it has mounted, but this
	   * is mostly used for server side rendering.
	   */
	  defaultMedia: _propTypes2.default.oneOf(['mobile', 'tablet', 'desktop']),

	  /**
	   * The min width to use for a mobile media query. This prop should match the `md-mobile-min-width`
	   * variable.
	   *
	   * The media query for a mobile device will be:
	   *
	   * ```js
	   * window.matchMedia(
	   *   `screen and (min-width: ${mobileMinWidth}px) and (max-width: ${tabletMinWidth - 1}px`
	   * ).matches;
	   * ```
	   */
	  mobileMinWidth: _propTypes2.default.number.isRequired,

	  /**
	   * The min width to use for a tablet media query. This prop should match the `md-tablet-min-width`
	   * variable.
	   *
	   * The media query for a tablet device will be:
	   *
	   * ```js
	   * window.matchMedia(
	   *   `screen and (min-width: ${tabletMinWidth}px) and (max-width: ${desktopWidth - 1}px`
	   * ).matches;
	   * ```
	   */
	  tabletMinWidth: _propTypes2.default.number.isRequired,

	  /**
	   * The min width to use for a desktop media query. This prop should match the `md-desktop-min-width`
	   * variable.
	   *
	   * The media query for a tablet device will be:
	   *
	   * ```js
	   * window.matchMedia(`screen and (min-width: ${tabletMinWidth}px)`).matches;
	   * ```
	   */
	  desktopMinWidth: _propTypes2.default.number.isRequired,

	  /**
	   * An optional function to call when the type of the drawer changes because of the
	   * new media queries. The callback will include the newly selected drawer type
	   * and an object containing the media matches of `mobile`, `tablet`, and `desktop`.
	   *
	   * ```js
	   * this.props.onMediaTypeChange(NavigationDrawer.DrawerTypes.TEMPORARY, {
	   *   mobile: true,
	   *   tablet: false,
	   *   desktop: false,
	   * });
	   * ```
	   */
	  onMediaTypeChange: _propTypes2.default.func,

	  /**
	   * Boolean if the temporary or persistent drawers are visible by default.
	   */
	  defaultVisible: _propTypes2.default.bool,

	  /**
	   * Boolean if the temporary or persistent drawers are visible. If this is defined,
	   * it will make the component controlled and require the `onVisibilityChange` prop
	   * to be defined.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityChange', 'defaultVisible'),

	  /**
	   * An optional function to call when the visibility of the drawer changes. The callback
	   * will include the new visibility.
	   *
	   * ```js
	   * onVisibilityChange(false);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,

	  /**
	   * A boolean if the mini drawer's list should be generated from the `navItems` prop. When building
	   * the list, it will extract the `leftIcon` or `leftAvatar` from the `navItem` and then create a
	   * mini `ListItem` containing only that icon or image. Any other event listeners will also be applied.
	   *
	   *
	   * @see {@link #miniDrawerHeader}
	   * @see {@link #miniDrawerChildren}
	   */
	  extractMini: _propTypes2.default.bool,

	  /**
	   * An optional header to display in the mini drawer. This will be displayed above the optional
	   * mini nav list that get generated if the `extractMini` prop is `true` and the `miniDrawerChildren`.
	   *
	   * @see {@link #extractMini}
	   */
	  miniDrawerHeader: _propTypes2.default.node,

	  /**
	   * Any additional children to display in the mini drawer. This will be displayed after the `miniDrawerHeader`
	   * and the optional mini nav list that gets generated if the `extractMini` prop is `true`.
	   *
	   * @see {@link #extractMini}
	   */
	  miniDrawerChildren: _propTypes2.default.node,

	  /**
	   * Boolean if the drawer should automatically close after a nav item has been clicked for `temporary` drawers.
	   */
	  autoclose: _propTypes2.default.bool,

	  /**
	   * An optional title to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`
	   * may be defined, not both.
	   */
	  toolbarTitle: (0, _invalidIf2.default)(_propTypes2.default.node, 'toolbarTitleMenu'),

	  /**
	   * An optional select field menu to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`
	   * may be defined, not both.
	   */
	  toolbarTitleMenu: _propTypes2.default.element,

	  /**
	   * The theme style for the main toolbar.
	   *
	   * @see {@link Toolbars/Toolbar}
	   */
	  toolbarThemeType: _propTypes2.default.oneOf(['default', 'colored', 'themed']).isRequired,

	  /**
	   * Boolean if the toolbar's nav, actions, and title should share the same color.
	   */
	  toolbarSingleColor: _propTypes2.default.bool,

	  /**
	   * A boolean if the toolbar should be prominent.
	   */
	  toolbarProminent: _propTypes2.default.bool,

	  /**
	   * A boolean if the toolbar's title should be prominent.
	   */
	  toolbarProminentTitle: _propTypes2.default.bool,

	  /**
	   * A list of elements or a single element to display to the right of the
	   * toolbar's nav, title, and children.
	   *
	   * @see {@link Toolbars/Toolbar#actions}
	   */
	  toolbarActions: _Toolbar2.default.propTypes.actions,

	  /**
	   * Any children to display in the toolbar. This will be displayed between the optional title and
	   * actions.
	   */
	  toolbarChildren: _Toolbar2.default.propTypes.children,

	  /**
	   * An optional zDepth to apply to the toolbar.
	   *
	   * @see {@link Toolbars/Toolbar#zDepth}
	   */
	  toolbarZDepth: _propTypes2.default.number,

	  /**
	   * The component to render the content in.
	   */
	  contentComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * An optional footer display after the main content.
	   */
	  footer: _propTypes2.default.node,

	  /**
	   * The icon to use to render the button that will toggle the visibility of the
	   * navigation drawer for `temporary` and `persistent` drawers. This is normally a
	   * hamburger menu.
	   */
	  temporaryIcon: _propTypes2.default.element,

	  /**
	   * The icon to use to render the button that appears on a persistent drawer's open
	   * header. This is used to create the `CloseButton` for drawers. When a persistent
	   * drawer is closed, the `temporaryIcon` will be used to create a button to open the drawer.
	   *
	   * If the `drawerHeader` prop is defined, you will have to either include the `CloseButton`
	   * in your header manually, or create your own controlled button to close the drawer.
	   */
	  persistentIcon: _propTypes2.default.element,

	  /**
	   * The transition name to use when the page's content changes. If you want to disable
	   * transitions, set both the `transitionEnterTimeout` and `transitionLeaveTimeout` props
	   * to a false-ish value. (`null`, `undefined`, or `0`).
	   */
	  transitionName: _propTypes2.default.string.isRequired,

	  /**
	   * The transition enter timeout when the page's content changes. If you want to disable
	   * the enter transition, set this to a false-ish value (`null`, `undefined`, or `0`).
	   */
	  transitionEnterTimeout: _propTypes2.default.number,

	  /**
	   * The transition leave timeout when the page's content changes. If you want to disable
	   * the leave transition, set this to a false-ish value (`null`, `undefined`, or `0`).
	   */
	  transitionLeaveTimeout: _propTypes2.default.number,

	  /**
	   * The transition duration for the drawer when sliding in and out of view.
	   */
	  drawerTransitionDuration: _propTypes2.default.number.isRequired,

	  /**
	   * Any additional props to provide to the main content. This will be applied before any of the generated props,
	   * so this should not include `style`, `className`, or `component`.
	   */
	  contentProps: _propTypes2.default.object,

	  /**
	   * The label to use for a keyboard accessibility link that jumps all the navigation and allows a user to focus
	   * the main content. This is created in the drawer's header.
	   */
	  jumpLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the Portal's functionality of rendering in a separate react tree should be applied
	   * to the drawer. The overlay that appears for temporary type drawers will still appear in the
	   * separate subtree.
	   *
	   * @see {@link Helpers/Portal}
	   */
	  portal: _propTypes2.default.bool,

	  /**
	   * An optional DOM Node to render the drawer into. The default is to render as
	   * the first child in the `body`.
	   *
	   * > This prop will not be used when the drawer is of the permanent type or `inline` is specified
	   * since the `Portal` component will not be used.
	   */
	  renderNode: _propTypes2.default.object,

	  /**
	   * Boolean if the drawer should be rendered as the last child instead of the first child
	   * in the `renderNode` or `body`.
	   *
	   * > This prop will not be used when the drawer is of the permanent type or `inline` is specified
	   * since the `Portal` component will not be used.
	   */
	  lastChild: _propTypes2.default.bool,

	  /**
	   * Boolean if the `drawerType` should remain constant across all media. This is really only valid
	   * if the `drawerType` is one of the temporary types.
	   */
	  constantDrawerType: _propTypes2.default.bool,

	  menuIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `temporaryIcon` instead'),
	  menuIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `temporaryIcon` instead'),
	  closeIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `persistentIcon` instead'),
	  closeIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `persistentIcon` instead'),
	  temporaryIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `temporaryIcon` instead'),
	  temporaryIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `temporaryIcon` instead'),
	  persistentIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `persistentIcon` instead'),
	  persistentIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `persistentIcon` prop instead'),
	  onDrawerChange: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onVisibilityChange` or `onMediaTypeChange` instead'),
	  onVisibilityToggle: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onVisibilityChange` instead'),
	  contentTransitionName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `transitionName` instead'),
	  contentTransitionEnterTimeout: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `transtionEnterTimeout` instead'),
	  contentTransitionLeaveTimeout: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `transtionLeaveTimeout` instead'),
	  initialDrawerType: (0, _deprecated2.default)(_propTypes2.default.oneOf(['mobile', 'tablet', 'desktop']), 'Use `defaultMedia` instead')
	};
	NavigationDrawer.contextTypes = {
	  renderNode: _propTypes2.default.object
	};
	NavigationDrawer.childContextTypes = {
	  closeIcon: _propTypes2.default.element,
	  onCloseClick: _propTypes2.default.func,
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	  label: _propTypes2.default.node.isRequired,
	  renderNode: _propTypes2.default.object
	};
	NavigationDrawer.defaultProps = {
	  autoclose: _Drawer2.default.defaultProps.autoclose,
	  contentId: 'main-content',
	  // Defaults to false since it keeps the state of the drawerType in sync and makes the Drawer
	  // controlled. On initial mount without any defaultMedia updates, it would always be considered
	  // temporary
	  constantDrawerType: false,
	  jumpLabel: 'Jump to content',
	  extractMini: true,
	  position: _Drawer2.default.defaultProps.position,
	  defaultMedia: _Drawer2.default.defaultProps.defaultMedia,
	  mobileDrawerType: _Drawer2.default.defaultProps.mobileType,
	  tabletDrawerType: _Drawer2.default.defaultProps.tabletType,
	  desktopDrawerType: _Drawer2.default.defaultProps.desktopType,
	  mobileMinWidth: _Drawer2.default.defaultProps.mobileMinWidth,
	  tabletMinWidth: _Drawer2.default.defaultProps.tabletMinWidth,
	  desktopMinWidth: _Drawer2.default.defaultProps.desktopMinWidth,
	  includeDrawerHeader: true,
	  contentComponent: 'main',
	  temporaryIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'menu'
	  ),
	  toolbarThemeType: 'colored',
	  persistentIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'arrow_back'
	  ),
	  transitionName: 'md-cross-fade',
	  transitionEnterTimeout: 300,
	  drawerTransitionDuration: _Drawer2.default.defaultProps.transitionDuration
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._animate = function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this2.props;
	    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this2.state;

	    if ((0, _isType.isTemporary)((0, _getField2.default)(props, state, 'drawerType'))) {
	      return;
	    }

	    if (_this2._timeout) {
	      clearTimeout(_this2._timeout);
	    }

	    _this2._timeout = setTimeout(function () {
	      _this2.setState({ contentActive: false });
	    }, props.drawerTransitionDuration);

	    _this2.setState({ contentActive: true });
	  };

	  this._toggleVisibility = function (e) {
	    var _props3 = _this2.props,
	        onVisibilityToggle = _props3.onVisibilityToggle,
	        onVisibilityChange = _props3.onVisibilityChange,
	        onDrawerChange = _props3.onDrawerChange;

	    var visible = !(0, _getField2.default)(_this2.props, _this2.state, 'visible');
	    var callback = onVisibilityChange || onVisibilityToggle || onDrawerChange;
	    if (callback) {
	      callback(visible, e);
	    }

	    if (typeof _this2.props.visible === 'undefined') {
	      _this2.setState({ visible: visible });
	      _this2._animate(_this2.props);
	    }
	  };

	  this._handleVisibility = function (visible) {
	    var _props4 = _this2.props,
	        onVisibilityToggle = _props4.onVisibilityToggle,
	        onVisibilityChange = _props4.onVisibilityChange,
	        onDrawerChange = _props4.onDrawerChange;

	    var callback = onVisibilityChange || onVisibilityToggle || onDrawerChange;
	    if (callback) {
	      callback(visible);
	    }

	    if (typeof _this2.props.visible === 'undefined') {
	      _this2.setState({ visible: visible });
	      _this2._animate(_this2.props);
	    }
	  };

	  this._handleTypeChange = function (drawerType, mediaState) {
	    var onMediaTypeChange = _this2.props.onMediaTypeChange;

	    var state = mediaState;
	    if (onMediaTypeChange) {
	      onMediaTypeChange(drawerType, mediaState);
	    }

	    if (typeof _this2.props.drawerType === 'undefined') {
	      state = _extends({}, mediaState, { drawerType: drawerType });
	    }

	    _this2.setState(state);
	  };
	};

	exports.default = NavigationDrawer;

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _invalidIf = __webpack_require__(282);

	var _invalidIf2 = _interopRequireDefault(_invalidIf);

	var _between = __webpack_require__(257);

	var _between2 = _interopRequireDefault(_between);

	var _Paper = __webpack_require__(256);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _ToolbarTitle = __webpack_require__(436);

	var _ToolbarTitle2 = _interopRequireDefault(_ToolbarTitle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Toolbar = function (_PureComponent) {
	  _inherits(Toolbar, _PureComponent);

	  function Toolbar() {
	    _classCallCheck(this, Toolbar);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Toolbar.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        component = _props.component,
	        titleStyle = _props.titleStyle,
	        titleClassName = _props.titleClassName,
	        prominentTitle = _props.prominentTitle,
	        themed = _props.themed,
	        singleColor = _props.singleColor,
	        actions = _props.actions,
	        fixed = _props.fixed,
	        children = _props.children,
	        inset = _props.inset,
	        titleId = _props.titleId,
	        propNav = _props.nav,
	        propTitle = _props.title,
	        propTitleMenu = _props.titleMenu,
	        propZDepth = _props.zDepth,
	        propColored = _props.colored,
	        propProminent = _props.prominent,
	        containerStyle = _props.containerStyle,
	        containerClassName = _props.containerClassName,
	        actionLeft = _props.actionLeft,
	        actionsRight = _props.actionsRight,
	        primary = _props.primary,
	        secondary = _props.secondary,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'component', 'titleStyle', 'titleClassName', 'prominentTitle', 'themed', 'singleColor', 'actions', 'fixed', 'children', 'inset', 'titleId', 'nav', 'title', 'titleMenu', 'zDepth', 'colored', 'prominent', 'containerStyle', 'containerClassName', 'actionLeft', 'actionsRight', 'primary', 'secondary']);

	    var _props2 = this.props,
	        colored = _props2.colored,
	        title = _props2.title,
	        titleMenu = _props2.titleMenu,
	        nav = _props2.nav,
	        prominent = _props2.prominent,
	        zDepth = _props2.zDepth;


	    colored = colored || primary || secondary;
	    prominent = prominent || prominentTitle;

	    title = _react2.default.createElement(_ToolbarTitle2.default, {
	      key: 'title',
	      style: titleStyle,
	      className: titleClassName,
	      prominent: prominentTitle,
	      offset: prominentTitle,
	      id: typeof titleId === 'undefined' && props.id ? props.id + '-title' : titleId,
	      title: title
	    });

	    if (nav || actionLeft) {
	      var navEl = _react.Children.only(nav || actionLeft);
	      nav = (0, _react.cloneElement)(nav, {
	        className: (0, _classnames2.default)('md-btn--toolbar md-toolbar--action-left', navEl.props.className)
	      });
	    }

	    var rightActions = void 0;
	    if (actions || actionsRight) {
	      rightActions = _react.Children.map(_react.Children.toArray(actions || actionsRight), function (action) {
	        return (0, _react.cloneElement)(action, {
	          className: (0, _classnames2.default)('md-btn--toolbar', action.props.className)
	        });
	      });

	      rightActions = _react2.default.createElement(
	        'div',
	        { key: 'actions', className: 'md-cell--right md-toolbar--action-right' },
	        rightActions
	      );
	    }

	    if (titleMenu) {
	      titleMenu = _react.Children.only(titleMenu);
	      titleMenu = (0, _react.cloneElement)(titleMenu, {
	        className: (0, _classnames2.default)('md-title md-title--toolbar md-select-field--toolbar', {
	          'md-title--toolbar-offset': prominentTitle,
	          'md-title--toolbar-prominent': prominentTitle
	        }, titleMenu.props.className),
	        position: titleMenu.props.position || 'tl',
	        toolbar: true
	      });
	    }

	    if (typeof zDepth !== 'number') {
	      zDepth = fixed ? 2 : 0;
	    }

	    return _react2.default.createElement(
	      _Paper2.default,
	      _extends({}, props, {
	        component: component,
	        zDepth: zDepth,
	        style: style,
	        className: (0, _classnames2.default)('md-toolbar', {
	          'md-background--primary': colored,
	          'md-toolbar--themed': themed,
	          'md-toolbar--text-white': singleColor && colored,
	          'md-toolbar--prominent': prominent,
	          'md-toolbar--fixed': fixed,
	          'md-toolbar--inset': inset
	        }, className)
	      }),
	      nav,
	      title,
	      titleMenu,
	      children,
	      rightActions
	    );
	  };

	  return Toolbar;
	}(_react.PureComponent);

	Toolbar.propTypes = {
	  /**
	   * An optional id to provide to the toolbar. If this is specified and the `titleId` is not, the title
	   * will gain an id of `${id}-title`. This will not be applied to the `titleMenu`.
	   *
	   * @see {@link #titleId}
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the toolbar.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the toolbar,
	   */
	  className: _propTypes2.default.string,

	  /*
	   * An optional style to apply to the `h2` surrounding the `title` prop.
	   */
	  titleStyle: _propTypes2.default.object,

	  /*
	   * An optional className to apply to the `h2` surrounding the `title` prop.
	   */
	  titleClassName: _propTypes2.default.string,

	  /**
	   * Boolean if the toolbar should more prominent. This will double the height of the toolbar.
	   */
	  prominent: _propTypes2.default.bool,

	  /**
	   * Boolean if the toolbar's title should be more prominent. This will move the title to the
	   * second line of the toolbar. This only works when the `prominent` prop is true as well.
	   */
	  prominentTitle: _propTypes2.default.bool,

	  /**
	   * The current title of the page to show in the toolbar. It is invalid to specify both a
	   * `title` and a `titleMenu`. Only one should be given.
	   */
	  title: (0, _invalidIf2.default)(_propTypes2.default.node, 'titleMenu'),

	  /**
	   * An optional id to give the main title in the toolbar. This will not be applied to the
	   * `titleMenu`.
	   */
	  titleId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional title menu to display instead of the title. This should be a `SelectField` component.
	   * It is cloned with some additional props, so if the `SelectField` is separated into a separate
	   * component, the following props must be passed to get the correct styling: `className`, `block`,
	   * `paddedBlock`, `position`.
	   */
	  titleMenu: _propTypes2.default.element,

	  /**
	   * This prop is used for rendering an optional navigation button to the left of the `title`
	   * or the `titleMenu` component. This needs to be an icon `Button` because some additional props
	   * are cloned into it.
	   */
	  nav: _propTypes2.default.element,

	  /**
	   * Any additional actions to display to the right of the title. This should be a list or a single
	   * `Button` to display. The buttons get cloned with an additional className for toolbar styling.
	   */
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),

	  /**
	   * Any children to display in the toolbar. This will be displayed between the optional title and
	   * actions.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the toolbar should be fixed to the top of the page. This will add some additional box shadow.
	   */
	  fixed: _propTypes2.default.bool,

	  /**
	   * Boolean if the nav, actions, and title should share the same color. For a `colored` or dark `themed`
	   * toolbar, they will all be colored white. For a transparent or light `themed` toolbar, the colors will
	   * be the `rgba(0, 0, 0, .87)`. Setting this to false will only style the title to the specific color
	   * stated above.
	   */
	  singleColor: _propTypes2.default.bool,

	  /**
	   * Boolean if the toolbar should be colored based off the current theme. This will either style the background
	   * to be fairly white, or fairly black. You can not specify both `themed` and `colored`.
	   */
	  themed: _propTypes2.default.bool,

	  /**
	   * Boolean if the toolbar should be colored with the `$md-primary-color`.
	   */
	  colored: (0, _invalidIf2.default)(_propTypes2.default.bool, 'themed'),

	  /**
	   * The component to render the toolbar as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * Boolean if the toolbar is inset in the page. This will just add some margin around
	   * it.
	   */
	  inset: _propTypes2.default.bool,

	  /**
	   * An optional zDepth to enforce for the toolbar. This should be a number between 0 and 5.
	   * If this is omitted, the toolbar will gain a zDepth of 2 when `fixed`.
	   */
	  zDepth: (0, _between2.default)(_propTypes2.default.number, 0, 5),
	  containerStyle: (0, _deprecated2.default)(_propTypes2.default.object, 'The `container` no longer exists in the `Toolbar`. Use the `style` prop instead'),
	  containerClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'The `container` no longer exists in the `Toolbar`. Use the `className` prop instead'),
	  primary: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use the `colored` prop instead'),
	  secondary: (0, _deprecated2.default)(_propTypes2.default.bool, 'Toolbars can no longer be themed to the secondary color. Use the `colored` prop instead'),
	  actionLeft: (0, _deprecated2.default)(_propTypes2.default.element, 'Use the `nav` prop instead'),
	  actionsRight: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `menu` prop and/or the `actions` prop instead')
	};
	Toolbar.defaultProps = {
	  singleColor: true,
	  component: 'header'
	};
	exports.default = Toolbar;

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ToolbarTitle = function (_PureComponent) {
	  _inherits(ToolbarTitle, _PureComponent);

	  function ToolbarTitle() {
	    _classCallCheck(this, ToolbarTitle);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  ToolbarTitle.prototype.render = function render() {
	    var _props = this.props,
	        title = _props.title,
	        className = _props.className,
	        prominent = _props.prominent,
	        offset = _props.offset,
	        props = _objectWithoutProperties(_props, ['title', 'className', 'prominent', 'offset']);

	    if (!title) {
	      return null;
	    }

	    var fullClassName = (0, _classnames2.default)('md-title md-title--toolbar', {
	      'md-title--toolbar-prominent': prominent,
	      'md-title--toolbar-offset': offset
	    }, className);

	    if ((0, _react.isValidElement)(title)) {
	      var titleEl = _react.Children.only(title);
	      return (0, _react.cloneElement)(title, _extends({}, props, {
	        id: titleEl.props.id || props.id,
	        className: (0, _classnames2.default)(fullClassName, titleEl.props.className)
	      }));
	    }

	    return _react2.default.createElement(
	      'h2',
	      _extends({}, props, {
	        className: fullClassName
	      }),
	      title
	    );
	  };

	  return ToolbarTitle;
	}(_react.PureComponent);

	ToolbarTitle.propTypes = {
	  className: _propTypes2.default.string,
	  prominent: _propTypes2.default.bool,
	  offset: _propTypes2.default.bool,
	  title: _propTypes2.default.node
	};
	exports.default = ToolbarTitle;

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This is an accessibility only component that should be used in the `NavigationDrawer`
	 * component. It allows keyboard users to quickly jump to the main content.
	 *
	 * This component relies on the `contextTypes` of the `NavigationDrawer` to work. If this is going
	 * to be used outside of that component, you will need to specify an `id` and `label` contextType
	 * to pass to this component.
	 */
	var JumpToContentLink = function (_PureComponent) {
	  _inherits(JumpToContentLink, _PureComponent);

	  function JumpToContentLink() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, JumpToContentLink);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._handleClick = function (e) {
	      if (_this.props.onClick) {
	        _this.props.onClick(e);
	      }

	      document.getElementById(_this.context.id).focus();
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  JumpToContentLink.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['className']);

	    var _context = this.context,
	        id = _context.id,
	        label = _context.label;

	    return _react2.default.createElement(
	      'a',
	      _extends({}, props, {
	        id: 'jump-to-' + id,
	        href: '#' + id,
	        onClick: this._handleClick,
	        className: (0, _classnames2.default)('md-content-jump', className)
	      }),
	      label
	    );
	  };

	  return JumpToContentLink;
	}(_react.PureComponent);

	JumpToContentLink.propTypes = {
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional function to call when the linked is clicked.
	   */
	  onClick: _propTypes2.default.func
	};
	JumpToContentLink.contextTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	  label: _propTypes2.default.node.isRequired
	};
	exports.default = JumpToContentLink;

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * A button used to close the persistent navigation drawer. The button will
	 * be generated based on the `NavigationDrawer`'s `contextTypes`.
	 *
	 * This component is really only used if you are using a `persistent` drawer and you
	 * manually created the `drawerHeader` for the `NavigationDrawer`.
	 */
	var CloseButton = function (_PureComponent) {
	  _inherits(CloseButton, _PureComponent);

	  function CloseButton() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, CloseButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._handleClick = function (e) {
	      if (_this.props.onClick) {
	        _this.props.onClick(e);
	      }

	      if (_this.context.onCloseClick) {
	        _this.context.onCloseClick(e);
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  CloseButton.prototype.render = function render() {
	    var closeIcon = this.context.closeIcon;


	    return _react2.default.createElement(_Button2.default, _extends({}, this.props, {
	      icon: true,
	      key: 'close',
	      onClick: this._handleClick,
	      iconEl: closeIcon
	    }));
	  };

	  return CloseButton;
	}(_react.PureComponent);

	CloseButton.propTypes = {
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional additional function to call when the `click` event is triggered.
	   */
	  onClick: _propTypes2.default.func
	};
	CloseButton.contextTypes = {
	  closeIcon: _propTypes2.default.element,
	  onCloseClick: _propTypes2.default.func
	};
	exports.default = CloseButton;

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _AccessibleFakeInkedButton = __webpack_require__(339);

	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);

	var _TileAddon = __webpack_require__(343);

	var _TileAddon2 = _interopRequireDefault(_TileAddon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MiniListItem = function (_PureComponent) {
	  _inherits(MiniListItem, _PureComponent);

	  function MiniListItem() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, MiniListItem);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { active: false }, _this._handleMouseOver = function (e) {
	      if (_this.props.onMouseOver) {
	        _this.props.onMouseOver(e);
	      }

	      if (!_this.props.disabled) {
	        _this.setState({ active: true });
	      }
	    }, _this._handleMouseLeave = function (e) {
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(e);
	      }

	      if (!_this.props.disabled) {
	        _this.setState({ active: false });
	      }
	    }, _this._handleTouchStart = function (e) {
	      if (_this.props.onTouchStart) {
	        _this.props.onTouchStart(e);
	      }

	      _this._touched = true;

	      _this.setState({ active: true, touchedAt: Date.now() });
	    }, _this._handleTouchEnd = function (e) {
	      if (_this.props.onTouchEnd) {
	        _this.props.onTouchEnd(e);
	      }

	      var time = Date.now() - _this.state.touchedAt;
	      _this._touchTimeout = setTimeout(function () {
	        _this._touchTimeout = null;

	        _this.setState({ active: false });
	      }, time > 450 ? 0 : 450 - time);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  MiniListItem.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._touchTimeout) {
	      clearTimeout(this._touchTimeout);
	    }
	  };

	  MiniListItem.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        tileStyle = _props.tileStyle,
	        tileClassName = _props.tileClassName,
	        leftIcon = _props.leftIcon,
	        leftAvatar = _props.leftAvatar,
	        active = _props.active,
	        activeClassName = _props.activeClassName,
	        ItemComponent = _props.itemComponent,
	        primaryText = _props.primaryText,
	        secondaryText = _props.secondaryText,
	        rightIcon = _props.rightIcon,
	        rightAvatar = _props.rightAvatar,
	        threeLines = _props.threeLines,
	        children = _props.children,
	        defaultOpen = _props.defaultOpen,
	        isOpen = _props.isOpen,
	        inset = _props.inset,
	        nestedItems = _props.nestedItems,
	        animateNestedItems = _props.animateNestedItems,
	        expanderIcon = _props.expanderIcon,
	        expanderIconChildren = _props.expanderIconChildren,
	        expanderIconClassName = _props.expanderIconClassName,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'tileStyle', 'tileClassName', 'leftIcon', 'leftAvatar', 'active', 'activeClassName', 'itemComponent', 'primaryText', 'secondaryText', 'rightIcon', 'rightAvatar', 'threeLines', 'children', 'defaultOpen', 'isOpen', 'inset', 'nestedItems', 'animateNestedItems', 'expanderIcon', 'expanderIconChildren', 'expanderIconClassName']);

	    return _react2.default.createElement(
	      ItemComponent,
	      { style: style, className: className },
	      _react2.default.createElement(
	        _AccessibleFakeInkedButton2.default,
	        _extends({}, props, {
	          style: tileStyle,
	          className: (0, _classnames2.default)('md-list-tile md-list-tile--icon md-list-tile--mini', {
	            'md-list-tile--active': this.state.active && !this._touched
	          }, tileClassName),
	          onMouseOver: this._handleMouseOver,
	          onMouseLeave: this._handleMouseLeave,
	          onTouchStart: this._handleTouchStart,
	          onTouchEnd: this._handleTouchEnd
	        }),
	        _react2.default.createElement(_TileAddon2.default, {
	          active: active,
	          activeClassName: activeClassName,
	          icon: leftIcon,
	          avatar: leftAvatar
	        })
	      )
	    );
	  };

	  return MiniListItem;
	}(_react.PureComponent);

	MiniListItem.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  tileStyle: _propTypes2.default.object,
	  tileClassName: _propTypes2.default.string,
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
	  active: _propTypes2.default.bool,
	  activeClassName: _propTypes2.default.string,
	  leftIcon: _propTypes2.default.node,
	  leftAvatar: _propTypes2.default.node,
	  disabled: _propTypes2.default.bool,
	  onTouchStart: _propTypes2.default.func,
	  onTouchEnd: _propTypes2.default.func,
	  onMouseOver: _propTypes2.default.func,
	  onMouseLeave: _propTypes2.default.func,
	  defaultOpen: _propTypes2.default.bool,
	  itemComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired
	};
	MiniListItem.defaultProps = {
	  activeClassName: 'md-text--theme-primary',
	  component: 'div',
	  itemComponent: 'li'
	};
	exports.default = MiniListItem;

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _keyCodes = __webpack_require__(279);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _handleWindowClickListeners = __webpack_require__(350);

	var _handleWindowClickListeners2 = _interopRequireDefault(_handleWindowClickListeners);

	var _handleKeyboardAccessibility = __webpack_require__(341);

	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _addDate = __webpack_require__(441);

	var _addDate2 = _interopRequireDefault(_addDate);

	var _isSameDay = __webpack_require__(448);

	var _isSameDay2 = _interopRequireDefault(_isSameDay);

	var _DateTimeFormat = __webpack_require__(451);

	var _DateTimeFormat2 = _interopRequireDefault(_DateTimeFormat);

	var _Collapse = __webpack_require__(259);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _TextField = __webpack_require__(359);

	var _TextField2 = _interopRequireDefault(_TextField);

	var _DialogContainer = __webpack_require__(417);

	var _DialogContainer2 = _interopRequireDefault(_DialogContainer);

	var _DatePicker = __webpack_require__(452);

	var _DatePicker2 = _interopRequireDefault(_DatePicker);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable new-cap,no-shadow */


	/**
	 * The `DatePickerContainer` component is a wrapper for the main `DatePicker` component
	 * to manage the state and _logic_ for rendering the `DatePicker`. This component will
	 * either render inline or in a `Dialog` depending if the `inline` prop is set to `true`.
	 *
	 * NOTE: This component is actually exported as `DatePicker` when using the `import { member }` syntax.
	 * The following two lines are equivalent:
	 *
	 * ```js
	 * import { DatePicker } from 'react-md/lib/Pickers';
	 * import DatePicker from 'react-md/lib/Pickers/DatePickerContainer';
	 * ```
	 */
	var DatePickerContainer = function (_PureComponent) {
	  _inherits(DatePickerContainer, _PureComponent);

	  function DatePickerContainer(props) {
	    _classCallCheck(this, DatePickerContainer);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var date = void 0;
	    var value = void 0;
	    var defaultValue = props.defaultValue,
	        DateTimeFormat = props.DateTimeFormat,
	        locales = props.locales,
	        formatOptions = props.formatOptions,
	        minDate = props.minDate,
	        maxDate = props.maxDate;


	    if (typeof props.value !== 'undefined') {
	      date = _this._getDate(props.value);
	    } else if (defaultValue) {
	      date = _this._getDate(defaultValue);
	      value = typeof defaultValue === 'string' ? defaultValue : DateTimeFormat(locales, formatOptions).format(defaultValue);
	    } else {
	      date = new Date();
	      value = '';
	    }

	    date = _this._validateDateRange(date, minDate, maxDate);

	    var defaultCalendarDate = typeof props.initialCalendarDate !== 'undefined' ? props.initialCalendarDate : props.defaultCalendarDate;
	    var calendarTempDate = date;
	    if (typeof defaultCalendarDate !== 'undefined' && !props.value && !props.defaultValue) {
	      calendarTempDate = _this._getDate(defaultCalendarDate);
	      date = calendarTempDate;
	    } else if (calendarTempDate === null) {
	      calendarTempDate = new Date();
	      date = new Date();
	    }

	    var visible = typeof props.initiallyOpen !== 'undefined' ? props.initiallyOpen : !!props.defaultVisible;

	    _this.state = {
	      value: value,
	      visible: visible,
	      calendarDate: date,
	      calendarTempDate: calendarTempDate,
	      calendarMode: props.initialCalendarMode || props.defaultCalendarMode
	    };
	    return _this;
	  }

	  DatePickerContainer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value,
	        minDate = nextProps.minDate,
	        maxDate = nextProps.maxDate;

	    var minEqual = (0, _isSameDay2.default)(this.props.minDate, minDate);
	    var maxEqual = (0, _isSameDay2.default)(this.props.maxDate, maxDate);
	    if (this.props.value !== value || !minEqual || !maxEqual) {
	      var calendarDate = this.state.calendarDate;

	      if (typeof value !== 'undefined') {
	        calendarDate = this._getDate(value);
	      }

	      calendarDate = this._validateDateRange(calendarDate, minDate, maxDate);

	      if (!(0, _isSameDay2.default)(this.state.calendarDate, calendarDate)) {
	        this.setState({ calendarDate: calendarDate, calendarTempDate: calendarDate });
	      }
	    }
	  };

	  DatePickerContainer.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
	    var _props = this.props,
	        inline = _props.inline,
	        isOpen = _props.isOpen;

	    var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	    var pVisible = typeof prevProps.isOpen !== 'undefined' ? prevProps.isOpen : (0, _getField2.default)(prevProps, prevState, 'visible');

	    if (visible === pVisible) {
	      return;
	    }

	    if (visible) {
	      if (inline) {
	        (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, true);
	        window.addEventListener('keydown', this._closeOnEsc);
	      }
	    } else if (inline) {
	      (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);
	      window.removeEventListener('keydown', this._closeOnEsc);
	    }
	  };

	  DatePickerContainer.prototype.componentWillUnmount = function componentWillUnmount() {
	    var visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : (0, _getField2.default)(this.props, this.state, 'visible');

	    if (visible && this.props.inline) {
	      (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);
	      window.removeEventListener('keydown', this._closeOnEsc);
	    }
	  };

	  DatePickerContainer.prototype._getDate = function _getDate(value) {
	    if (value === '' || value === null) {
	      return new Date();
	    } else if (typeof value === 'string') {
	      return new Date(value);
	    }

	    return value;
	  };

	  /**
	   * Gets the current value from the date picker as a formatted string.
	   *
	   * @param {Object} props? the props object to use.
	   * @param {Object} state? the state object to use.
	   * @return {String} a formatted date string or the empty string.
	   */
	  DatePickerContainer.prototype._getFormattedValue = function _getFormattedValue(props, state) {
	    var DateTimeFormat = props.DateTimeFormat,
	        locales = props.locales,
	        formatOptions = props.formatOptions;

	    var value = (0, _getField2.default)(props, state, 'value');
	    if (!value) {
	      return '';
	    } else if (value instanceof Date) {
	      return DateTimeFormat(locales, formatOptions).format(new Date(value));
	    } else {
	      return value;
	    }
	  };

	  /**
	   * Attempts to validate the `calendarDate` in the state against the min and
	   * max dates.
	   *
	   * This will return null if the current calendarDate is still within the range.
	   *
	   * @param {Date} calendarDate - The current calendar date to compare to.
	   * @param {Date} minDate - An optional min date to compare to.
	   * @param {Date} maxDate - An optional max date to compare to.
	   * @return {Object} - The new state object with the updated calendarDate and
	   *    calendarTempDate keys or null.
	   */


	  DatePickerContainer.prototype._validateDateRange = function _validateDateRange(calendarDate, minDate, maxDate) {
	    var date = calendarDate;
	    if (minDate && minDate > calendarDate) {
	      date = new Date(minDate);
	    }

	    if (maxDate && maxDate < calendarDate) {
	      date = new Date(maxDate);
	    }

	    return date;
	  };

	  DatePickerContainer.prototype.render = function render() {
	    var _props2 = this.props,
	        style = _props2.style,
	        className = _props2.className,
	        pickerStyle = _props2.pickerStyle,
	        pickerClassName = _props2.pickerClassName,
	        pickerHeaderClassName = _props2.pickerHeaderClassName,
	        pickerContentClassName = _props2.pickerContentClassName,
	        pickerFooterClassName = _props2.pickerFooterClassName,
	        inputStyle = _props2.inputStyle,
	        inputClassName = _props2.inputClassName,
	        textFieldStyle = _props2.textFieldStyle,
	        textFieldClassName = _props2.textFieldClassName,
	        label = _props2.label,
	        placeholder = _props2.placeholder,
	        icon = _props2.icon,
	        inline = _props2.inline,
	        displayMode = _props2.displayMode,
	        fullWidth = _props2.fullWidth,
	        lineDirection = _props2.lineDirection,
	        id = _props2.id,
	        disabled = _props2.disabled,
	        closeOnEsc = _props2.closeOnEsc,
	        animateInline = _props2.animateInline,
	        portal = _props2.portal,
	        renderNode = _props2.renderNode,
	        lastChild = _props2.lastChild,
	        block = _props2.block,
	        paddedBlock = _props2.paddedBlock,
	        active = _props2.active,
	        error = _props2.error,
	        floating = _props2.floating,
	        required = _props2.required,
	        leftIconStateful = _props2.leftIconStateful,
	        rightIcon = _props2.rightIcon,
	        rightIconStateful = _props2.rightIconStateful,
	        customSize = _props2.customSize,
	        errorText = _props2.errorText,
	        helpText = _props2.helpText,
	        helpOnFocus = _props2.helpOnFocus,
	        inlineIndicator = _props2.inlineIndicator,
	        disableScrollLocking = _props2.disableScrollLocking,
	        ariaLabel = _props2['aria-label'],
	        propNextIcon = _props2.nextIcon,
	        propPreviousIcon = _props2.previousIcon,
	        isOpen = _props2.isOpen,
	        previousIconChildren = _props2.previousIconChildren,
	        previousIconClassName = _props2.previousIconClassName,
	        nextIconChildren = _props2.nextIconChildren,
	        nextIconClassName = _props2.nextIconClassName,
	        propValue = _props2.value,
	        propVisible = _props2.visible,
	        defaultValue = _props2.defaultValue,
	        defaultVisible = _props2.defaultVisible,
	        onChange = _props2.onChange,
	        readOnly = _props2.readOnly,
	        onVisibilityChange = _props2.onVisibilityChange,
	        defaultCalendarDate = _props2.defaultCalendarDate,
	        initialCalendarDate = _props2.initialCalendarDate,
	        initiallyOpen = _props2.initiallyOpen,
	        adjustMinWidth = _props2.adjustMinWidth,
	        props = _objectWithoutProperties(_props2, ['style', 'className', 'pickerStyle', 'pickerClassName', 'pickerHeaderClassName', 'pickerContentClassName', 'pickerFooterClassName', 'inputStyle', 'inputClassName', 'textFieldStyle', 'textFieldClassName', 'label', 'placeholder', 'icon', 'inline', 'displayMode', 'fullWidth', 'lineDirection', 'id', 'disabled', 'closeOnEsc', 'animateInline', 'portal', 'renderNode', 'lastChild', 'block', 'paddedBlock', 'active', 'error', 'floating', 'required', 'leftIconStateful', 'rightIcon', 'rightIconStateful', 'customSize', 'errorText', 'helpText', 'helpOnFocus', 'inlineIndicator', 'disableScrollLocking', 'aria-label', 'nextIcon', 'previousIcon', 'isOpen', 'previousIconChildren', 'previousIconClassName', 'nextIconChildren', 'nextIconClassName', 'value', 'visible', 'defaultValue', 'defaultVisible', 'onChange', 'readOnly', 'onVisibilityChange', 'defaultCalendarDate', 'initialCalendarDate', 'initiallyOpen', 'adjustMinWidth']);

	    var nextIcon = (0, _getDeprecatedIcon2.default)(nextIconClassName, nextIconChildren, propNextIcon);
	    var previousIcon = (0, _getDeprecatedIcon2.default)(previousIconClassName, previousIconChildren, propPreviousIcon);
	    var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(this.props, this.state, 'visible');

	    var picker = _react2.default.createElement(_DatePicker2.default, _extends({}, this.state, props, {
	      nextIcon: nextIcon,
	      previousIcon: previousIcon,
	      icon: !!icon,
	      inline: inline,
	      style: pickerStyle,
	      className: pickerClassName,
	      headerClassName: pickerHeaderClassName,
	      contentClassName: pickerContentClassName,
	      footerClassName: pickerFooterClassName,
	      displayMode: displayMode,
	      onCancelClick: this._handleCancelClick,
	      onOkClick: this._handleOkClick,
	      changeCalendarMode: this._changeCalendarMode,
	      onPreviousClick: this._previousMonth,
	      onNextClick: this._nextMonth,
	      onCalendarDateClick: this._setCalendarTempDate,
	      onCalendarYearClick: this._setCalendarTempYear
	    }));

	    var content = void 0;
	    if (inline) {
	      content = _react2.default.createElement(
	        _Collapse2.default,
	        { collapsed: !visible, animate: animateInline },
	        picker
	      );
	    } else {
	      content = _react2.default.createElement(
	        _DialogContainer2.default,
	        {
	          id: id + '-dialog',
	          visible: visible,
	          onHide: this._handleCancelClick,
	          dialogClassName: 'md-dialog--picker',
	          contentClassName: 'md-dialog-content--picker',
	          'aria-label': ariaLabel,
	          closeOnEsc: closeOnEsc,
	          renderNode: renderNode,
	          portal: portal,
	          lastChild: lastChild,
	          focusOnMount: false,
	          disableScrollLocking: disableScrollLocking
	        },
	        picker
	      );
	    }

	    return _react2.default.createElement(
	      'div',
	      { style: style, className: (0, _classnames2.default)('md-picker-container', className), ref: this._setContainer },
	      _react2.default.createElement(_TextField2.default, {
	        id: id,
	        style: textFieldStyle,
	        className: (0, _classnames2.default)({ 'md-pointer--hover': !disabled }, textFieldClassName),
	        inputStyle: inputStyle,
	        inputClassName: (0, _classnames2.default)({ 'md-pointer--hover': !disabled }, inputClassName),
	        active: active || visible,
	        error: error,
	        floating: floating || visible,
	        required: required,
	        disabled: disabled,
	        leftIcon: icon,
	        leftIconStateful: leftIconStateful,
	        rightIcon: rightIcon,
	        rightIconStateful: rightIconStateful,
	        inlineIndicator: inlineIndicator,
	        block: block,
	        paddedBlock: paddedBlock,
	        fullWidth: fullWidth,
	        lineDirection: lineDirection,
	        customSize: customSize,
	        helpText: helpText,
	        helpOnFocus: helpOnFocus,
	        errorText: errorText,
	        label: label,
	        placeholder: placeholder,
	        onClick: this._toggleOpen,
	        onKeyDown: this._handleKeyDown,
	        value: this._getFormattedValue(this.props, this.state),
	        readOnly: true
	      }),
	      content
	    );
	  };

	  return DatePickerContainer;
	}(_react.PureComponent);

	DatePickerContainer.propTypes = {
	  /**
	   * An id for the text field in the date picker. This is require for a11y.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),

	  /**
	   * An aria label for the dialog. This is required for a11y.
	   */
	  'aria-label': (0, _isRequiredForA11y2.default)(_propTypes2.default.string),

	  /**
	   * An optional style to apply to the date picker's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the date picker's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the date picker.
	   */
	  pickerStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the date picker.
	   */
	  pickerClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the header of date picker.
	   */
	  pickerHeaderClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the content container of date picker.
	   */
	  pickerContentClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the footer of date picker.
	   */
	  pickerFooterClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the calendar container of date picker.
	   */
	  calendarClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the year picker of date picker.
	   */
	  yearPickerClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the input tag.
	   */
	  inputStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the input tag.
	   */
	  inputClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the text field's container.
	   */
	  textFieldStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the text field's container.
	   */
	  textFieldClassName: _propTypes2.default.string,

	  /**
	   * An optional icon to display with the date picker.
	   *
	   * @see {@link TextFields/TextField#leftIcon}
	   */
	  icon: _propTypes2.default.node,

	  /**
	   * Boolean if the date picker is open by default.
	   */
	  defaultVisible: _propTypes2.default.bool,

	  /**
	   * An optional label to be displayed in the date picker's text
	   * field.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * An optional placeholder to be displayed in the date picker's text field.
	   */
	  placeholder: _propTypes2.default.string,

	  /**
	   * The value of the date picker. This will make the date picker
	   * be a controlled component. This value should either be a
	   * formatted date string or a date object.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]), 'onChange', 'defaultValue'),

	  /**
	   * An optional default value to give for the date picker. This should
	   * either be a formatted date string or a date object.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]),

	  /**
	   * An optional date to use when the calendar is opened for the first time.
	   * If this is omitted, it will either be the `defaultValue`, `value`, or
	   * today.
	   */
	  defaultCalendarDate: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]),

	  /**
	   * An optional function to call when the selected date is changed
	   * by hitting the OK button. The newly formatted date string,
	   * the new Date object, and the change event will be given.
	   *
	   * `onChange(dateString, dateObject, event)`.
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * A function to format the dates since it should be formatted to the user's
	   * locale. This _should_ be the `Intl.DateTimeFormat` function. You
	   * can also create your own if you really wanted. Inadvisable though.
	   *
	   * See [intl-polyfill](https://github.com/andyearnshaw/Intl.js/) for more info.
	   */
	  DateTimeFormat: _propTypes2.default.func.isRequired,

	  /**
	   * The locales to use for formatting the date. This will default to using
	   * the user's language in the browser or `'en-US'` when server rendering.
	   */
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,

	  /**
	   * The label to use for the ok button on the date picker.
	   */
	  okLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the ok button should be styled with the primary color.
	   */
	  okPrimary: _propTypes2.default.bool,

	  /**
	   * The label to use for the cancel button on the date picker.
	   */
	  cancelLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the cancel button should be styled with the primary color.
	   */
	  cancelPrimary: _propTypes2.default.bool,

	  /**
	   * The initial mode to open the calendar in.
	   */
	  defaultCalendarMode: _propTypes2.default.oneOf(['calendar', 'year']),

	  /**
	   * The icon to use to display the previous month icon in the calendar.
	   */
	  previousIcon: _propTypes2.default.node,

	  /**
	   * The icon to use to display the next month icon in the calendar.
	   */
	  nextIcon: _propTypes2.default.node,

	  /**
	   * An optional min date to use for the date picker. This will prevent
	   * any dates before this time to be chosen.
	   */
	  minDate: _propTypes2.default.instanceOf(Date),

	  /**
	   * An optional max date to use for the date picker. This will prevent
	   * any dates after this time to be chosen.
	   */
	  maxDate: function maxDate(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }

	    var err = _propTypes2.default.instanceOf(Date).apply(undefined, [props, propName, component].concat(others));
	    if (err || !props.minDate || !props[propName]) {
	      return err;
	    }

	    var minDate = props.minDate,
	        maxDate = props.maxDate;

	    if (minDate > maxDate) {
	      return new Error('The min date: \'' + minDate + '\' is greater than the max date: \'' + maxDate + '\'');
	    }

	    return null;
	  },

	  /**
	   * Boolean if the date should automatically be selected when a user clicks
	   * on a new date instead of making them hit the ok button.
	   */
	  autoOk: _propTypes2.default.bool,

	  /**
	   * The number of years to display.
	   */
	  yearsDisplayed: _propTypes2.default.number,

	  /**
	   * Boolean if the date picker should be displayed inline instead of in a
	   * dialog.
	   */
	  inline: _propTypes2.default.bool,

	  /**
	   * An optional force of the display mode of the date picker.
	   * This _should_ not really be used since there are media queries
	   * to use the correct mode based on device orientation.
	   */
	  displayMode: _propTypes2.default.oneOf(['landscape', 'portrait']),

	  /**
	   * The DateTimeFormat options to apply to format the date.
	   */
	  formatOptions: _propTypes2.default.shape({
	    weekday: _propTypes2.default.oneOf(['narrow', 'short', 'long']),
	    era: _propTypes2.default.oneOf(['narrow', 'short', 'long']),
	    year: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    month: _propTypes2.default.oneOf(['numeric', '2-digit', 'narrow', 'short', 'long']),
	    day: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    hour: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    minute: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    second: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    timeZoneName: _propTypes2.default.oneOf(['short', 'long'])
	  }),

	  /**
	   * Boolean if the text field for the Date Picker should be displayed as full width.
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * The direction that the text field divider expands from when the text field
	   * in the date picker gains focus.
	   */
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right']),

	  /**
	   * An optional boolean if the time picker is current visible by dialog or inline.
	   * If this is set, the `onOpenToggle` function is required.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityChange', 'defaultVisible'),

	  /**
	   * An optional function to call when the date picker is opened in either a dialog, or
	   * inline. The callback will include the next state.
	   *
	   * ```js
	   * onVisibilityChange(!visible, e);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,

	  /**
	   * Boolean if the time picker is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * Boolean if the dialog should be able to close if a keyboard user presses the escape key.
	   */
	  closeOnEsc: _propTypes2.default.bool,

	  /**
	   * Boolean if the inline time picker's visibility should be animated.
	   */
	  animateInline: _propTypes2.default.bool,

	  /**
	   * Boolean if the time is required.
	   *
	   * @see {@link TextFields/TextField#required}
	   */
	  required: _propTypes2.default.bool,

	  /**
	   * @see {@link TextFields/TextField#block}
	   */
	  block: _TextField2.default.propTypes.block,

	  /**
	   * @see {@link TextFields/TextField#paddedBlock}
	   */
	  paddedBlock: _TextField2.default.propTypes.paddedBlock,

	  /**
	   * @see {@link TextFields/TextField#active}
	   */
	  active: _TextField2.default.propTypes.active,

	  /**
	   * @see {@link TextFields/TextField#error}
	   */
	  error: _TextField2.default.propTypes.error,

	  /**
	   * @see {@link TextFields/TextField#floating}
	   */
	  floating: _TextField2.default.propTypes.floating,

	  /**
	   * @see {@link TextFields/TextField#leftIconStateful}
	   */
	  leftIconStateful: _TextField2.default.propTypes.leftIconStateful,

	  /**
	   * @see {@link TextFields/TextField#rightIcon}
	   */
	  rightIcon: _TextField2.default.propTypes.rightIcon,

	  /**
	   * @see {@link TextFields/TextField#rightIconStateful}
	   */
	  rightIconStateful: _TextField2.default.propTypes.rightIconStateful,

	  /**
	   * @see {@link TextFields/TextField#customSize}
	   */
	  customSize: _TextField2.default.propTypes.customSize,

	  /**
	   * @see {@link TextFields/TextField#errorText}
	   */
	  errorText: _TextField2.default.propTypes.errorText,

	  /**
	   * @see {@link TextFields/TextField#helpText}
	   */
	  helpText: _TextField2.default.propTypes.helpText,

	  /**
	   * @see {@link TextFields/TextField#helpOnFocus}
	   */
	  helpOnFocus: _TextField2.default.propTypes.helpOnFocus,

	  /**
	   * @see {@link TextFields/TextField#inlineIndicator}
	   */
	  inlineIndicator: _TextField2.default.propTypes.inlineIndicator,

	  /**
	   * Boolean if the Portal's functionality of rendering in a separate react tree should be applied
	   * to the dialog.
	   *
	   * @see {@link Helpers/Portal}
	   */
	  portal: _propTypes2.default.bool,

	  /**
	   * An optional DOM Node to render the dialog into. The default is to render as the first child
	   * in the `body`.
	   */
	  renderNode: _propTypes2.default.object,

	  /**
	   * Boolean if the DatePicker should be read only. This will prevent the user from opening the picker
	   * and only display the current date in the text field.
	   */
	  readOnly: _propTypes2.default.bool,

	  /**
	   * The first day of week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
	   */
	  firstDayOfWeek: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5, 6]),

	  /**
	   * True if weekends are to be greyed out.
	   */
	  disableWeekEnds: _propTypes2.default.bool,

	  /**
	   * True if dates from adjacent months should be shown in calendar.
	   */
	  showAllDays: _propTypes2.default.bool,

	  /**
	   * Boolean if the dates from adjacent months should be disabled. This will only
	   * do something if the `showAllDays` prop is enabled as well.
	   *
	   * This is really only helpful if youd like the other days to appear, but not be
	   * clickable until the user switches to that month.
	   *
	   * @see {@link #showAllDays}
	   */
	  disableOuterDates: _propTypes2.default.bool,

	  /**
	   * An optional className to apply to a date in calendar.
	   */
	  calendarDateClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to a date from an adjacent month in calendar. This will be applied
	   * along with the `calendarDateClassName`.
	   *
	   * @see {@link #showAllDays}
	   * @see {@link #calendarDateClassName}
	   */
	  calendarOuterDateClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the title in calendar header.
	   */
	  calendarTitleClassName: _propTypes2.default.string,

	  /**
	   * The DateTimeFormat options to apply to format the title in calendar header.
	   */
	  calendarTitleFormat: _propTypes2.default.shape({
	    era: _propTypes2.default.oneOf(['narrow', 'short', 'long']),
	    year: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    month: _propTypes2.default.oneOf(['numeric', '2-digit', 'narrow', 'short', 'long'])
	  }),

	  /**
	   * An optional className to apply to a weekday in calendar header.
	   */
	  calendarWeekdayClassName: _propTypes2.default.string,

	  /**
	   * The DateTimeFormat option to apply to format a weekday in calendar header.
	   */
	  calendarWeekdayFormat: _propTypes2.default.oneOf(['narrow', 'short', 'long']),

	  /**
	   * @see {@link Dialogs/DialogContainer#disableScrollLocking}
	   */
	  disableScrollLocking: _propTypes2.default.bool,

	  /**
	   * Boolean if the dialog should be rendered as the last child of the `renderNode` or `body` instead
	   * of the first.
	   */
	  lastChild: _propTypes2.default.bool,

	  previousIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `previousIcon` prop instead'),
	  previousIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `previousIcon` prop instead'),
	  nextIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'use the `nextIcon` prop instead'),
	  nextIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `nextIcon` prop instead'),
	  adjustMinWidth: (0, _deprecated2.default)(_propTypes2.default.bool, 'No longer valid for a text field'),
	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead'),
	  initiallyOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  initialCalendarDate: (0, _deprecated2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]), 'Use `defaultCalendarDate` instead'),
	  initialCalendarMode: (0, _deprecated2.default)(_propTypes2.default.oneOf(['calendar', 'year']), 'Use `defaultCalendarMode` instead'),
	  initialYearsDisplayed: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `yearsDisplayed` instead. I have not implemented infinite loading years')
	};
	DatePickerContainer.defaultProps = {
	  animateInline: true,
	  previousIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'chevron_left'
	  ),
	  nextIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'chevron_right'
	  ),
	  autoOk: false,
	  icon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'date_range'
	  ),
	  yearsDisplayed: 100,
	  defaultCalendarMode: 'calendar',
	  DateTimeFormat: _DateTimeFormat2.default, // eslint-disable-line object-shorthand
	  locales: typeof window !== 'undefined' ? window.navigator.userLanguage || window.navigator.language : 'en-US',
	  okLabel: 'Ok',
	  okPrimary: true,
	  cancelLabel: 'Cancel',
	  cancelPrimary: true,
	  closeOnEsc: true,
	  disableScrollLocking: false,
	  'aria-label': 'Pick a date'
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._setContainer = function (container) {
	    _this2._container = container;
	  };

	  this._closeOnEsc = function (e) {
	    if ((e.which || e.keyCode) === _keyCodes.ESC) {
	      _this2._handleCancelClick(e);
	    }
	  };

	  this._handleOutsideClick = function (e) {
	    if (_this2._container && !_this2._container.contains(e.target)) {
	      _this2._handleCancelClick(e);
	    }
	  };

	  this._toggleOpen = function (e) {
	    if (_this2.props.disabled || _this2.props.readOnly) {
	      return;
	    }

	    var visible = !(typeof _this2.props.isOpen !== 'undefined' ? _this2.props.isOpen : (0, _getField2.default)(_this2.props, _this2.state, 'visible'));

	    if (_this2.props.onVisibilityChange) {
	      _this2.props.onVisibilityChange(visible, e);
	    }

	    if (typeof _this2.props.isOpen === 'undefined' && typeof _this2.props.visible === 'undefined') {
	      _this2.setState({ visible: visible });
	    }
	  };

	  this._handleKeyDown = function (e) {
	    (0, _handleKeyboardAccessibility2.default)(e, _this2._toggleOpen, true, true);

	    if ((e.which || e.keyCode) === _keyCodes.TAB && _this2.state.active) {
	      _this2.setState({ active: false });
	    }
	  };

	  this._handleOkClick = function (e) {
	    var _props3 = _this2.props,
	        DateTimeFormat = _props3.DateTimeFormat,
	        locales = _props3.locales,
	        onChange = _props3.onChange,
	        formatOptions = _props3.formatOptions,
	        onVisibilityChange = _props3.onVisibilityChange;

	    var value = DateTimeFormat(locales, formatOptions).format(_this2.state.calendarTempDate);
	    if (onChange) {
	      onChange(value, new Date(_this2.state.calendarTempDate), e);
	    }

	    if (onVisibilityChange) {
	      onVisibilityChange(false, e);
	    }

	    var state = void 0;
	    if (typeof _this2.props.value === 'undefined') {
	      state = { value: value };
	    }

	    if (typeof _this2.props.visible === 'undefined' && typeof _this2.props.isOpen === 'undefined') {
	      state = state || {};
	      state.visible = false;
	    }

	    if (state) {
	      _this2.setState(state);
	    }
	  };

	  this._handleCancelClick = function (e) {
	    var state = { calendarTempDate: _this2.state.calendarDate };
	    if (typeof _this2.props.isOpen === 'undefined' && typeof _this2.props.isOpen === 'undefined') {
	      state.visible = false;
	    }

	    if (_this2.props.onVisibilityChange) {
	      _this2.props.onVisibilityChange(false, e);
	    }

	    _this2.setState(state);
	  };

	  this._changeCalendarMode = function (calendarMode) {
	    if (_this2.state.calendarMode === calendarMode) {
	      return;
	    }

	    _this2.setState({ calendarMode: calendarMode });
	  };

	  this._previousMonth = function () {
	    var calendarDate = (0, _addDate2.default)(_this2.state.calendarDate, -1, 'M');
	    _this2.setState({ calendarDate: calendarDate });
	  };

	  this._nextMonth = function () {
	    var calendarDate = (0, _addDate2.default)(_this2.state.calendarDate, 1, 'M');
	    _this2.setState({ calendarDate: calendarDate });
	  };

	  this._setCalendarTempDate = function (calendarTempDate) {
	    var _props4 = _this2.props,
	        autoOk = _props4.autoOk,
	        DateTimeFormat = _props4.DateTimeFormat,
	        locales = _props4.locales,
	        onChange = _props4.onChange,
	        formatOptions = _props4.formatOptions;


	    var state = { calendarTempDate: calendarTempDate };
	    if (autoOk) {
	      var value = DateTimeFormat(locales, formatOptions).format(calendarTempDate);
	      if (onChange) {
	        onChange(value, new Date(calendarTempDate));
	      }

	      if (typeof _this2.props.value === 'undefined') {
	        state.value = value;
	      }

	      _this2._timeout = setTimeout(function () {
	        _this2._timeout = null;

	        if (_this2.props.onVisibilityChange) {
	          _this2.props.onVisibilityChange(false);
	        }

	        if (typeof _this2.props.visible === 'undefined' && typeof _this2.props.isOpen === 'undefined') {
	          _this2.setState({ visible: false });
	        }
	      });
	    }
	    _this2.setState(state);
	  };

	  this._setCalendarTempYear = function (year) {
	    var _state = _this2.state,
	        calendarTempDate = _state.calendarTempDate,
	        calendarDate = _state.calendarDate;

	    if (calendarTempDate.getFullYear() === year) {
	      return;
	    }

	    var _props5 = _this2.props,
	        minDate = _props5.minDate,
	        maxDate = _props5.maxDate;

	    var nextDate = new Date(calendarDate.setFullYear(year));
	    var nextTemp = new Date(calendarTempDate.setFullYear(year));

	    if (minDate && nextTemp < minDate) {
	      nextDate = new Date(minDate);
	      nextTemp = new Date(minDate);
	    }

	    if (maxDate && nextTemp > maxDate) {
	      nextDate = new Date(maxDate);
	      nextTemp = new Date(maxDate);
	    }

	    _this2.setState({
	      calendarDate: nextDate,
	      calendarTempDate: nextTemp
	    });
	  };
	};

	exports.default = DatePickerContainer;

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = addDate;

	var _addDay = __webpack_require__(442);

	var _addDay2 = _interopRequireDefault(_addDay);

	var _addMonth = __webpack_require__(444);

	var _addMonth2 = _interopRequireDefault(_addMonth);

	var _addYear = __webpack_require__(447);

	var _addYear2 = _interopRequireDefault(_addYear);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Adds a given amount to a date.
	 *
	 * @param {Date} date - The date to add
	 * @param {number} amount - The amount to add
	 * @param {string} part - The date part to add to. ['D', 'M', 'Y']
	 * @param {number=1} newMonthDate - An optional date to set in the new month
	 *    if the new month does not have the old date. This only applies to month
	 *    addition.
	 * @return a new Date with the part added or the date if the part is not valid.
	 */
	function addDate(date, amount, part, newMonthDate) {
	  switch (part) {
	    case 'D':
	      return (0, _addDay2.default)(date, amount);
	    case 'M':
	      return (0, _addMonth2.default)(date, amount, newMonthDate);
	    case 'Y':
	      return (0, _addYear2.default)(date, amount);
	    default:
	      return date;
	  }
	}

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = addDay;

	var _isValidDate = __webpack_require__(443);

	var _isValidDate2 = _interopRequireDefault(_isValidDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Adds the specified number of days to a provided date. If the date
	 * is null, an invalid formatted date, or not a Date instance, null
	 * will be returned instead.
	 *
	 * @param {Date} date - The date to update
	 * @param {number} amount - The number of days to add. This can be positive
	 *    or negative.
	 * @return {Date} a new date with the number of days added or null.
	 */
	function addDay(date, amount) {
	  if (!(0, _isValidDate2.default)(date)) {
	    return null;
	  }

	  var d = new Date(date);
	  d.setDate(d.getDate() + amount);
	  return d;
	}

/***/ }),
/* 443 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = isValidDate;
	/**
	 * Checks if a variable provided is defined and a correctly formatted date.
	 *
	 * Examples:
	 * - isValidDate(null) -> false
	 * - isValidDate('') -> false
	 * - isValidDate(new Date('23--33')) - false (malformed date)
	 * - isValidDate(new Date()) -> true
	 *
	 * @param d - Any value that should be checked if it is a valid date
	 * @return {boolean} true if it is a valid date.
	 */
	function isValidDate(d) {
	  // just checking if getTime is a function is ridiculously quicker than instanceof Date
	  // and _seems_ safe enough
	  return !!d && typeof d.getTime === 'function' && d.getTime() === d.getTime();
	}

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = addMonth;

	var _isValidDate = __webpack_require__(443);

	var _isValidDate2 = _interopRequireDefault(_isValidDate);

	var _getDaysInMonth = __webpack_require__(445);

	var _getDaysInMonth2 = _interopRequireDefault(_getDaysInMonth);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Adds the specified number of months to a provided date. If the date
	 * is null, an invalid formatted date, or not a Date instance, null
	 * will be returned instead.
	 *
	 * When a new month is returned, it will make sure that the date matches
	 * the date in the old month if possible, if the new month does not have
	 * include the new date, the `newMonthDate` will be used instead.
	 *
	 * @param {Date} date - The date to update
	 * @param {number} amount - The number of months to add. This can be positive
	 *    or negative.
	 * @param {number=1} newMonthDate - An optional date to set in the new month
	 *    if the new month does not have the old date.
	 * @return {Date} a new date with the number of days added or null.
	 */
	function addMonth(date, amount, newMonthDate) {
	  if (!(0, _isValidDate2.default)(date)) {
	    return null;
	  } else if (amount === 0) {
	    return new Date(date);
	  }

	  if (!newMonthDate) {
	    // 0 is invalid for this case
	    newMonthDate = date.getDate();
	  }

	  var d = new Date(date);
	  d.setDate(1); // reset to first day to prevent month overflows
	  d.setMonth(d.getMonth() + amount);

	  if (newMonthDate !== 1 && newMonthDate <= (0, _getDaysInMonth2.default)(d)) {
	    // set the date back to the correct day if it still exists within the month
	    d.setDate(newMonthDate);
	  }

	  return d;
	}

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = getDaysInMonth;

	var _getLastDay = __webpack_require__(446);

	var _getLastDay2 = _interopRequireDefault(_getLastDay);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Gets the number of days in a month for the provided date.
	 *
	 * @param {Date} date - The date to get the number of days for
	 * @return {number} the number of days in the month or -1 if it is false-ish
	 *    or an invalid date object.
	 */
	function getDaysInMonth(date) {
	  var day = (0, _getLastDay2.default)(date);
	  return day === null ? -1 : day.getDate();
	}

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = getLastDay;

	var _isValidDate = __webpack_require__(443);

	var _isValidDate2 = _interopRequireDefault(_isValidDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Gets the last day in a month as a new Date.
	 *
	 * @param {Date} date - The date to get the last date in a month for
	 * @return {Date} the last day in the month as a date object or null.
	 */
	function getLastDay(date) {
	  if (!(0, _isValidDate2.default)(date)) {
	    return null;
	  }

	  return new Date(date.getFullYear(), date.getMonth() + 1, 0);
	}

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = addYear;

	var _isValidDate = __webpack_require__(443);

	var _isValidDate2 = _interopRequireDefault(_isValidDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Adds the specified number of years to a provided date. If the date
	 * is null, an invalid formatted date, or not a Date instance, null
	 * will be returned instead.
	 *
	 * @param {Date} date - The date to update
	 * @param {number} amount - The number of years to add. This can be positive
	 *    or negative.
	 * @return {Date} a new date with the number of years added or null.
	 */
	function addYear(date, amount) {
	  if (!(0, _isValidDate2.default)(date)) {
	    return null;
	  }

	  var d = new Date(date);
	  d.setFullYear(d.getFullYear() + amount);

	  return d;
	}

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = isSameDay;

	var _isSameMonth = __webpack_require__(449);

	var _isSameMonth2 = _interopRequireDefault(_isSameMonth);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Checks if two dates are part of the same date. This will also
	 * make sure the dates are part of the same year and month.
	 *
	 * @param {Date} d1 - The first date to compare.
	 * @param {Date} d2 - The second date to compare.
	 * @param {boolean=false} bothNullValue - boolean for what should be returned if
	 *  both values are null.
	 * @return {boolean} true if both the dates are defined and part of the same year, month, and day
	 *  or if both values are null it will return the `bothNullValue`.
	 */
	function isSameDay(d1, d2) {
	  var bothNullValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  if (!d1 && !d2) {
	    return bothNullValue;
	  }

	  return (0, _isSameMonth2.default)(d1, d2, bothNullValue) && d1.getDate() === d2.getDate();
	}

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = isSameMonth;

	var _isSameYear = __webpack_require__(450);

	var _isSameYear2 = _interopRequireDefault(_isSameYear);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Checks if two dates are part of the same month. This will also
	 * make sure the dates are part of the same year.
	 *
	 * @param {Date} d1 - The first date to compare.
	 * @param {Date} d2 - The second date to compare.
	 * @param {boolean=false} bothNullValue - boolean for what should be returned if
	 *  both values are null.
	 * @return {boolean} true if both the dates are defined and part of the same year and month
	 *  or if both values are null it will return the `bothNullValue`
	 */
	function isSameMonth(d1, d2) {
	  var bothNullValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  if (!d1 && !d2) {
	    return bothNullValue;
	  }

	  return (0, _isSameYear2.default)(d1, d2, bothNullValue) && d1.getMonth() === d2.getMonth();
	}

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = isSameYear;

	var _isValidDate = __webpack_require__(443);

	var _isValidDate2 = _interopRequireDefault(_isValidDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Checks if two dates are part of the same year.
	 *
	 * @param {Date} d1 - The first date to compare.
	 * @param {Date} d2 - The second date to compare.
	 * @param {boolean=false} bothNullValue - boolean for what should be returned if
	 *  both values are null.
	 * @return {boolean} true if both the dates are defined and part of the same year or
	 *  if both values are null it will return the `bothNullValue`.
	 */
	function isSameYear(d1, d2) {
	  var bothNullValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  if (!d1 && !d2) {
	    return bothNullValue;
	  } else if (!(0, _isValidDate2.default)(d1) || !(0, _isValidDate2.default)(d2)) {
	    return false;
	  }

	  return d1.getFullYear() === d2.getFullYear();
	}

/***/ }),
/* 451 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/** @module utils/DateUtils/DateTimeFormat */

	/**
	 * A _really_ terrible DateTimeFormat mock if it is not available in
	 * the browser or node version.
	 */
	var DateTimeFormat = function () {
	  if (typeof Intl !== 'undefined' && typeof Intl.DateTimeFormat !== 'undefined') {
	    return Intl.DateTimeFormat;
	  }

	  // Very bad 'mock' of Intl.DateTimeFormat
	  return function () {
	    // eslint-disable-line no-shadow
	    function DateTimeFormat(locales, formatOptions) {
	      _classCallCheck(this, DateTimeFormat);

	      this.locales = locales;
	      this.options = formatOptions;
	    }

	    DateTimeFormat.prototype.format = function format(date) {
	      return date.toLocaleString();
	    };

	    return DateTimeFormat;
	  }();
	}();

	exports.default = DateTimeFormat;

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _DialogFooter = __webpack_require__(406);

	var _DialogFooter2 = _interopRequireDefault(_DialogFooter);

	var _DatePickerHeader = __webpack_require__(453);

	var _DatePickerHeader2 = _interopRequireDefault(_DatePickerHeader);

	var _DatePickerCalendar = __webpack_require__(455);

	var _DatePickerCalendar2 = _interopRequireDefault(_DatePickerCalendar);

	var _YearPicker = __webpack_require__(462);

	var _YearPicker2 = _interopRequireDefault(_YearPicker);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DatePicker = function (_PureComponent) {
	  _inherits(DatePicker, _PureComponent);

	  function DatePicker() {
	    _classCallCheck(this, DatePicker);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  DatePicker.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        okLabel = _props.okLabel,
	        okPrimary = _props.okPrimary,
	        onOkClick = _props.onOkClick,
	        cancelLabel = _props.cancelLabel,
	        cancelPrimary = _props.cancelPrimary,
	        onCancelClick = _props.onCancelClick,
	        DateTimeFormat = _props.DateTimeFormat,
	        locales = _props.locales,
	        calendarTempDate = _props.calendarTempDate,
	        calendarMode = _props.calendarMode,
	        changeCalendarMode = _props.changeCalendarMode,
	        style = _props.style,
	        className = _props.className,
	        inline = _props.inline,
	        icon = _props.icon,
	        displayMode = _props.displayMode,
	        firstDayOfWeek = _props.firstDayOfWeek,
	        disableWeekEnds = _props.disableWeekEnds,
	        showAllDays = _props.showAllDays,
	        disableOuterDates = _props.disableOuterDates,
	        headerClassName = _props.headerClassName,
	        contentClassName = _props.contentClassName,
	        footerClassName = _props.footerClassName,
	        calendarClassName = _props.calendarClassName,
	        yearPickerClassName = _props.yearPickerClassName,
	        calendarDateClassName = _props.calendarDateClassName,
	        calendarOuterDateClassName = _props.calendarOuterDateClassName,
	        calendarTitleClassName = _props.calendarTitleClassName,
	        calendarTitleFormat = _props.calendarTitleFormat,
	        calendarWeekdayClassName = _props.calendarWeekdayClassName,
	        calendarWeekdayFormat = _props.calendarWeekdayFormat,
	        props = _objectWithoutProperties(_props, ['okLabel', 'okPrimary', 'onOkClick', 'cancelLabel', 'cancelPrimary', 'onCancelClick', 'DateTimeFormat', 'locales', 'calendarTempDate', 'calendarMode', 'changeCalendarMode', 'style', 'className', 'inline', 'icon', 'displayMode', 'firstDayOfWeek', 'disableWeekEnds', 'showAllDays', 'disableOuterDates', 'headerClassName', 'contentClassName', 'footerClassName', 'calendarClassName', 'yearPickerClassName', 'calendarDateClassName', 'calendarOuterDateClassName', 'calendarTitleClassName', 'calendarTitleFormat', 'calendarWeekdayClassName', 'calendarWeekdayFormat']);

	    var picker = void 0;
	    if (calendarMode === 'calendar') {
	      picker = _react2.default.createElement(_DatePickerCalendar2.default, _extends({}, props, {
	        key: 'calendar',
	        className: calendarClassName,
	        calendarTempDate: calendarTempDate,
	        DateTimeFormat: DateTimeFormat,
	        locales: locales,
	        firstDayOfWeek: firstDayOfWeek,
	        disableWeekEnds: disableWeekEnds,
	        showAllDays: showAllDays,
	        disableOuterDates: disableOuterDates,
	        dateClassName: calendarDateClassName,
	        outerDateClassName: calendarOuterDateClassName,
	        titleClassName: calendarTitleClassName,
	        titleFormat: calendarTitleFormat,
	        weekdayClassName: calendarWeekdayClassName,
	        weekdayFormat: calendarWeekdayFormat
	      }));
	    } else {
	      picker = _react2.default.createElement(_YearPicker2.default, _extends({}, props, {
	        key: 'year',
	        className: yearPickerClassName,
	        calendarTempDate: calendarTempDate,
	        DateTimeFormat: DateTimeFormat,
	        locales: locales
	      }));
	    }

	    var actions = [{
	      key: 'cancel',
	      onClick: onCancelClick,
	      primary: cancelPrimary,
	      secondary: !cancelPrimary,
	      label: cancelLabel
	    }, {
	      key: 'ok',
	      onClick: onOkClick,
	      primary: okPrimary,
	      secondary: !okPrimary,
	      label: okLabel
	    }];

	    return _react2.default.createElement(
	      'div',
	      {
	        style: style,
	        className: (0, _classnames2.default)('md-picker md-picker--date', (_cn = {}, _cn['md-picker--' + displayMode] = displayMode, _cn['md-picker--inline'] = inline, _cn['md-picker--inline-icon'] = inline && icon, _cn), className)
	      },
	      _react2.default.createElement(_DatePickerHeader2.default, {
	        className: headerClassName,
	        DateTimeFormat: DateTimeFormat,
	        locales: locales,
	        calendarTempDate: calendarTempDate,
	        calendarMode: calendarMode,
	        changeCalendarMode: changeCalendarMode
	      }),
	      _react2.default.createElement(
	        'div',
	        { className: (0, _classnames2.default)('md-picker-content-container', contentClassName) },
	        picker,
	        _react2.default.createElement(_DialogFooter2.default, {
	          className: footerClassName,
	          actions: actions
	        })
	      )
	    );
	  };

	  return DatePicker;
	}(_react.PureComponent);

	DatePicker.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  okLabel: _propTypes2.default.node.isRequired,
	  okPrimary: _propTypes2.default.bool.isRequired,
	  onOkClick: _propTypes2.default.func.isRequired,
	  cancelLabel: _propTypes2.default.node.isRequired,
	  cancelPrimary: _propTypes2.default.bool.isRequired,
	  onCancelClick: _propTypes2.default.func.isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  calendarDate: _propTypes2.default.instanceOf(Date).isRequired,
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,
	  calendarMode: _propTypes2.default.oneOf(['calendar', 'year']).isRequired,
	  changeCalendarMode: _propTypes2.default.func.isRequired,
	  icon: _propTypes2.default.bool,
	  inline: _propTypes2.default.bool,
	  displayMode: _propTypes2.default.oneOf(['landscape', 'portrait']),

	  /**
	   * The first day of week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
	   */
	  firstDayOfWeek: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5, 6]),

	  /**
	   * True if weekends are to be greyed out.
	   */
	  disableWeekEnds: _propTypes2.default.bool,

	  /**
	   * True if dates from adjacent months should be shown in calendar.
	   */
	  showAllDays: _propTypes2.default.bool,
	  disableOuterDates: _propTypes2.default.bool,

	  /**
	   * An optional className to apply to the header of date picker.
	   */
	  headerClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the content container of date picker.
	   */
	  contentClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the footer of date picker.
	   */
	  footerClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the calendar container of date picker.
	   */
	  calendarClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the year picker of date picker.
	   */
	  yearPickerClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to a date in calendar.
	   */
	  calendarDateClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to a date from an adjacent month in calendar.
	   */
	  calendarOuterDateClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the title in calendar header.
	   */
	  calendarTitleClassName: _propTypes2.default.string,

	  /**
	   * The DateTimeFormat options to apply to format the title in calendar header.
	   */
	  calendarTitleFormat: _propTypes2.default.shape({
	    era: _propTypes2.default.oneOf(['narrow', 'short', 'long']),
	    year: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    month: _propTypes2.default.oneOf(['numeric', '2-digit', 'narrow', 'short', 'long'])
	  }),

	  /**
	   * An optional className to apply to a weekday in calendar header.
	   */
	  calendarWeekdayClassName: _propTypes2.default.string,

	  /**
	   * The DateTimeFormat option to apply to format a weekday in calendar header.
	   */
	  calendarWeekdayFormat: _propTypes2.default.oneOf(['narrow', 'short', 'long'])
	};
	exports.default = DatePicker;

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _PickerControl = __webpack_require__(454);

	var _PickerControl2 = _interopRequireDefault(_PickerControl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable new-cap */


	/**
	 * The `DatePickerHeader` component is the component that holds the
	 * current year and the current date. It allows the user to switch
	 * between calendar and year picker mode.
	 */
	var DatePickerHeader = function (_PureComponent) {
	  _inherits(DatePickerHeader, _PureComponent);

	  function DatePickerHeader(props) {
	    _classCallCheck(this, DatePickerHeader);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._selectYear = function (e) {
	      _this.props.changeCalendarMode('year', e);
	    };

	    _this._selectCalendar = function (e) {
	      _this.props.changeCalendarMode('calendar', e);
	    };

	    _this.state = _this._getFormattedDate(props);
	    return _this;
	  }

	  DatePickerHeader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        DateTimeFormat = _props.DateTimeFormat,
	        locales = _props.locales,
	        calendarTempDate = _props.calendarTempDate,
	        changeCalendarMode = _props.changeCalendarMode;

	    if (DateTimeFormat !== nextProps.DateTimeFormat || locales !== nextProps.locales || calendarTempDate !== nextProps.calendarTempDate || changeCalendarMode !== nextProps.changeCalendarMode) {
	      this.setState(this._getFormattedDate(nextProps));
	    }
	  };

	  DatePickerHeader.prototype._getFormattedDate = function _getFormattedDate(_ref) {
	    var DateTimeFormat = _ref.DateTimeFormat,
	        locales = _ref.locales,
	        calendarTempDate = _ref.calendarTempDate;

	    return {
	      year: DateTimeFormat(locales, { year: 'numeric' }).format(calendarTempDate),
	      weekday: DateTimeFormat(locales, { weekday: 'short' }).format(calendarTempDate),
	      date: DateTimeFormat(locales, { month: 'short', day: '2-digit' }).format(calendarTempDate)
	    };
	  };

	  DatePickerHeader.prototype.render = function render() {
	    var _state = this.state,
	        year = _state.year,
	        weekday = _state.weekday,
	        date = _state.date;
	    var _props2 = this.props,
	        calendarMode = _props2.calendarMode,
	        className = _props2.className;

	    return _react2.default.createElement(
	      'header',
	      { className: (0, _classnames2.default)('md-picker-header', className) },
	      _react2.default.createElement(
	        _PickerControl2.default,
	        { onClick: this._selectYear, active: calendarMode === 'year' },
	        _react2.default.createElement(
	          'h6',
	          { className: 'md-subheading-1' },
	          year
	        )
	      ),
	      _react2.default.createElement(
	        _PickerControl2.default,
	        { onClick: this._selectCalendar, active: calendarMode === 'calendar' },
	        _react2.default.createElement(
	          'h4',
	          { className: 'md-display-1' },
	          weekday + ',',
	          '\xA0'
	        ),
	        _react2.default.createElement(
	          'h4',
	          { className: 'md-display-1' },
	          date
	        )
	      )
	    );
	  };

	  return DatePickerHeader;
	}(_react.PureComponent);

	DatePickerHeader.propTypes = {
	  className: _propTypes2.default.string,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,
	  calendarMode: _propTypes2.default.oneOf(['calendar', 'year']).isRequired,
	  changeCalendarMode: _propTypes2.default.func.isRequired
	};
	exports.default = DatePickerHeader;

/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `PickerControl` component is the button that goes in the header
	 * of a `Picker` component. It is used to switch the view of the `Picker`
	 * from state to state.
	 *
	 * For example, this is the year and date views for the `DatePicker`.
	 */
	var PickerControl = function (_PureComponent) {
	  _inherits(PickerControl, _PureComponent);

	  function PickerControl() {
	    _classCallCheck(this, PickerControl);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  PickerControl.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        active = _props.active,
	        props = _objectWithoutProperties(_props, ['className', 'active']);

	    return _react2.default.createElement('button', _extends({}, props, {
	      type: 'button',
	      className: (0, _classnames2.default)('md-btn md-pointer--hover md-picker-control md-picker-text', {
	        'md-picker-text--active': active
	      }, className)
	    }));
	  };

	  return PickerControl;
	}(_react.PureComponent);

	PickerControl.propTypes = {
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool.isRequired,
	  onClick: _propTypes2.default.func.isRequired,
	  children: _propTypes2.default.node.isRequired
	};
	exports.default = PickerControl;

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _CalendarMonth = __webpack_require__(456);

	var _CalendarMonth2 = _interopRequireDefault(_CalendarMonth);

	var _CalendarHeader = __webpack_require__(460);

	var _CalendarHeader2 = _interopRequireDefault(_CalendarHeader);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DatePickerCalendar = function (_PureComponent) {
	  _inherits(DatePickerCalendar, _PureComponent);

	  function DatePickerCalendar() {
	    _classCallCheck(this, DatePickerCalendar);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  DatePickerCalendar.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        previousIcon = _props.previousIcon,
	        onPreviousClick = _props.onPreviousClick,
	        nextIcon = _props.nextIcon,
	        onNextClick = _props.onNextClick,
	        calendarDate = _props.calendarDate,
	        calendarTempDate = _props.calendarTempDate,
	        onCalendarDateClick = _props.onCalendarDateClick,
	        DateTimeFormat = _props.DateTimeFormat,
	        locales = _props.locales,
	        minDate = _props.minDate,
	        maxDate = _props.maxDate,
	        firstDayOfWeek = _props.firstDayOfWeek,
	        disableWeekEnds = _props.disableWeekEnds,
	        showAllDays = _props.showAllDays,
	        disableOuterDates = _props.disableOuterDates,
	        dateClassName = _props.dateClassName,
	        outerDateClassName = _props.outerDateClassName,
	        titleClassName = _props.titleClassName,
	        titleFormat = _props.titleFormat,
	        weekdayClassName = _props.weekdayClassName,
	        weekdayFormat = _props.weekdayFormat;


	    return _react2.default.createElement(
	      'section',
	      { className: (0, _classnames2.default)('md-picker-content md-picker-content--calendar', className) },
	      _react2.default.createElement(_CalendarHeader2.default, {
	        date: calendarDate,
	        minDate: minDate,
	        maxDate: maxDate,
	        DateTimeFormat: DateTimeFormat,
	        locales: locales,
	        onPreviousClick: onPreviousClick,
	        previousIcon: previousIcon,
	        onNextClick: onNextClick,
	        nextIcon: nextIcon,
	        firstDayOfWeek: firstDayOfWeek,
	        titleClassName: titleClassName,
	        titleFormat: titleFormat,
	        weekdayClassName: weekdayClassName,
	        weekdayFormat: weekdayFormat
	      }),
	      _react2.default.createElement(_CalendarMonth2.default, {
	        key: new DateTimeFormat(locales).format(calendarDate),
	        calendarDate: calendarDate,
	        calendarTempDate: calendarTempDate,
	        onCalendarDateClick: onCalendarDateClick,
	        minDate: minDate,
	        maxDate: maxDate,
	        DateTimeFormat: DateTimeFormat,
	        locales: locales,
	        firstDayOfWeek: firstDayOfWeek,
	        disableWeekEnds: disableWeekEnds,
	        showAllDays: showAllDays,
	        disableOuterDates: disableOuterDates,
	        dateClassName: dateClassName,
	        outerDateClassName: outerDateClassName
	      })
	    );
	  };

	  return DatePickerCalendar;
	}(_react.PureComponent);

	DatePickerCalendar.propTypes = {
	  className: _propTypes2.default.string,
	  previousIcon: _propTypes2.default.element,
	  onPreviousClick: _propTypes2.default.func.isRequired,
	  nextIcon: _propTypes2.default.element,
	  onNextClick: _propTypes2.default.func.isRequired,
	  onCalendarDateClick: _propTypes2.default.func.isRequired,
	  calendarDate: _propTypes2.default.instanceOf(Date).isRequired,
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  minDate: _propTypes2.default.instanceOf(Date),
	  maxDate: _propTypes2.default.instanceOf(Date),

	  /**
	   * The first day of week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
	   */
	  firstDayOfWeek: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5, 6]),

	  /**
	   * True if weekends are to be greyed out.
	   */
	  disableWeekEnds: _propTypes2.default.bool,

	  /**
	   * True if dates from adjacent months should be shown.
	   */
	  showAllDays: _propTypes2.default.bool,
	  disableOuterDates: _propTypes2.default.bool,

	  /**
	   * An optional className to apply to a date in calendar.
	   */
	  dateClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to a date from an adjacent month.
	   */
	  outerDateClassName: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the title in calendar header.
	   */
	  titleClassName: _propTypes2.default.string,

	  /**
	   * The DateTimeFormat options to apply to format the title in calendar header.
	   */
	  titleFormat: _propTypes2.default.shape({
	    era: _propTypes2.default.oneOf(['narrow', 'short', 'long']),
	    year: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    month: _propTypes2.default.oneOf(['numeric', '2-digit', 'narrow', 'short', 'long'])
	  }),

	  /**
	   * An optional className to apply to a weekday in calendar header.
	   */
	  weekdayClassName: _propTypes2.default.string,

	  /**
	   * The DateTimeFormat option to apply to format a weekday in calendar header.
	   */
	  weekdayFormat: _propTypes2.default.oneOf(['narrow', 'short', 'long'])
	};
	exports.default = DatePickerCalendar;

/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _addDate = __webpack_require__(441);

	var _addDate2 = _interopRequireDefault(_addDate);

	var _getLastDay = __webpack_require__(446);

	var _getLastDay2 = _interopRequireDefault(_getLastDay);

	var _stripTime = __webpack_require__(457);

	var _stripTime2 = _interopRequireDefault(_stripTime);

	var _toDayOfWeek = __webpack_require__(458);

	var _toDayOfWeek2 = _interopRequireDefault(_toDayOfWeek);

	var _CalendarDate = __webpack_require__(459);

	var _CalendarDate2 = _interopRequireDefault(_CalendarDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This component renders a month for the calendar view of the `DatePicker`.
	 */
	var CalendarMonth = function (_PureComponent) {
	  _inherits(CalendarMonth, _PureComponent);

	  function CalendarMonth() {
	    _classCallCheck(this, CalendarMonth);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  CalendarMonth.prototype.render = function render() {
	    var _props = this.props,
	        calendarDate = _props.calendarDate,
	        calendarTempDate = _props.calendarTempDate,
	        onCalendarDateClick = _props.onCalendarDateClick,
	        minDate = _props.minDate,
	        maxDate = _props.maxDate,
	        DateTimeFormat = _props.DateTimeFormat,
	        locales = _props.locales,
	        className = _props.className,
	        firstDayOfWeek = _props.firstDayOfWeek,
	        disableWeekEnds = _props.disableWeekEnds,
	        dateClassName = _props.dateClassName,
	        showAllDays = _props.showAllDays,
	        outerDateClassName = _props.outerDateClassName,
	        disableOuterDates = _props.disableOuterDates,
	        props = _objectWithoutProperties(_props, ['calendarDate', 'calendarTempDate', 'onCalendarDateClick', 'minDate', 'maxDate', 'DateTimeFormat', 'locales', 'className', 'firstDayOfWeek', 'disableWeekEnds', 'dateClassName', 'showAllDays', 'outerDateClassName', 'disableOuterDates']);

	    var days = [];
	    var firstDay = (0, _stripTime2.default)(calendarDate);
	    firstDay.setDate(1);
	    var lastDay = (0, _getLastDay2.default)(calendarDate);
	    var currentDate = (0, _toDayOfWeek2.default)(firstDay, 0);
	    var endDate = (0, _toDayOfWeek2.default)(lastDay, 6);
	    var activeDateTime = (0, _stripTime2.default)(calendarTempDate).getTime();
	    var todayTime = new Date().getTime();

	    if (firstDayOfWeek) {
	      currentDate = (0, _addDate2.default)(currentDate, firstDayOfWeek > firstDay.getDay() ? firstDayOfWeek - 7 : firstDayOfWeek, 'D');
	      endDate = (0, _addDate2.default)(endDate, firstDayOfWeek > lastDay.getDay() ? firstDayOfWeek - 7 : firstDayOfWeek, 'D');
	    }

	    while (currentDate <= endDate) {
	      var key = currentDate.getMonth() + '-' + currentDate.getDate();
	      var currentMonth = currentDate.getMonth() === calendarDate.getMonth();

	      var date = void 0;
	      if (currentMonth || showAllDays) {
	        var _cn;

	        var time = currentDate.getTime();
	        var isMinDateDisabled = minDate && minDate.getTime() > time;
	        var isMaxDateDisabled = maxDate && maxDate.getTime() < time;
	        var isWeekendDisabled = disableWeekEnds && (currentDate.getDay() === 0 || currentDate.getDay() === 6);
	        var disabled = !currentMonth && disableOuterDates || isMinDateDisabled || isMaxDateDisabled || isWeekendDisabled;

	        date = _react2.default.createElement(_CalendarDate2.default, {
	          key: key,
	          className: (0, _classnames2.default)(dateClassName, (_cn = {}, _cn[outerDateClassName] = !currentMonth && outerDateClassName, _cn)),
	          today: time === todayTime,
	          active: time === activeDateTime,
	          disabled: disabled,
	          onClick: onCalendarDateClick,
	          date: currentDate,
	          DateTimeFormat: DateTimeFormat,
	          locales: locales
	        });
	      } else {
	        date = _react2.default.createElement('div', { key: key, className: 'md-calendar-date' });
	      }

	      days.push(date);
	      currentDate = (0, _addDate2.default)(currentDate, 1, 'D');
	    }

	    return _react2.default.createElement(
	      'div',
	      _extends({ className: (0, _classnames2.default)('md-calendar-month', className) }, props),
	      days
	    );
	  };

	  return CalendarMonth;
	}(_react.PureComponent);

	CalendarMonth.propTypes = {
	  /**
	   * A className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The current selected date of the calendar. This is
	   * the date after hitting the Ok button or `value` || `defaultValue`.
	   */
	  calendarDate: _propTypes2.default.instanceOf(Date).isRequired,

	  /**
	   * The current selected date of the calendar before verifying
	   * the new date.
	   */
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,

	  /**
	   * An optional min date for the calendar. This will disable any
	   * dates that come before this date in the month.
	   */
	  minDate: _propTypes2.default.instanceOf(Date),

	  /**
	   * An optional max date for the calendar. This will disable any
	   * dates that come after this date in the month.
	   */
	  maxDate: _propTypes2.default.instanceOf(Date),

	  /**
	   * A function to call that will select a new date.
	   */
	  onCalendarDateClick: _propTypes2.default.func.isRequired,

	  /**
	   * The first day of week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
	   */
	  firstDayOfWeek: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5, 6]),

	  /**
	   * True if weekends are to be greyed out.
	   */
	  disableWeekEnds: _propTypes2.default.bool,

	  /**
	   * An optional className to apply to a date.
	   */
	  dateClassName: _propTypes2.default.string,

	  /**
	   * True if dates from adjacent months should be shown.
	   */
	  showAllDays: _propTypes2.default.bool,
	  disableOuterDates: _propTypes2.default.bool,

	  /**
	   * An optional className to apply to a date from an adjacent month.
	   */
	  outerDateClassName: _propTypes2.default.string,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired
	};
	CalendarMonth.defaultProps = {
	  firstDayOfWeek: 0
	};
	exports.default = CalendarMonth;

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = stripTime;

	var _isValidDate = __webpack_require__(443);

	var _isValidDate2 = _interopRequireDefault(_isValidDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Removes all the time parts (hours, minutes, seconds, milliseconds) from a date.
	 * The hour of the stripped time is set to 1 by default to help with cross-browser
	 * date implementations and how hour 0 sometimes is the previous day.
	 *
	 * @param {Date} date the date to strip
	 * @param {number=0} hours - the fake hours to set for the stripped time date.
	 * @return a new Date with the time stripped.
	 */
	function stripTime(date) {
	  var hours = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	  if (!(0, _isValidDate2.default)(date)) {
	    return null;
	  }

	  var d = new Date(date);
	  d.setHours(hours, 0, 0, 0);

	  return d;
	}

/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = toDayOfWeek;

	var _isValidDate = __webpack_require__(443);

	var _isValidDate2 = _interopRequireDefault(_isValidDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Takes in a date and returns a new date at the specified day of week.
	 *
	 * Examples:
	 * // to Sunday
	 * - toDayOfWeek(new Date(2018, 0, 1), 0) == new Date(2017, 11, 31)
	 *
	 * // to Monday
	 * - toDayOfWeek(new Date(2018, 0, 1), 1) == new Date(2018, 0, 1)
	 *
	 * @param {Date} date - The date to convert to a day of week
	 * @param {number=0} dow - The day of the week to convert to
	 * @return {Date} the new date set at the day of week or null if the
	 *    date is invalid or false-ish.
	 */
	function toDayOfWeek(date) {
	  var dow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	  if (!(0, _isValidDate2.default)(date)) {
	    return null;
	  }

	  var d = new Date(date);
	  var day = date.getDay();
	  var diff = d.getDate() - day + dow;
	  return new Date(d.setDate(diff));
	}

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This component renders a selectable date in the `CalendarMonth` component.
	 */
	var CalendarDate = function (_PureComponent) {
	  _inherits(CalendarDate, _PureComponent);

	  function CalendarDate(props) {
	    _classCallCheck(this, CalendarDate);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._setFocus = function (btn) {
	      if (btn && _this.props.active) {
	        btn.focus();
	      }
	    };

	    _this._handleClick = function (e) {
	      _this.props.onClick(new Date(_this.props.date), e);
	    };

	    _this._setActive = function () {
	      if (!_this.props.disabled) {
	        _this.setState({ desktopActive: true });
	      }
	    };

	    _this._setInactive = function () {
	      if (!_this.props.disabled) {
	        _this.setState({ desktopActive: false });
	      }
	    };

	    _this.state = _extends({}, _this._getFormattedDate(props), { desktopActive: false });
	    return _this;
	  }

	  CalendarDate.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        DateTimeFormat = _props.DateTimeFormat,
	        locales = _props.locales,
	        date = _props.date;

	    if (DateTimeFormat !== nextProps.DateTimeFormat || locales !== nextProps.locales || date !== nextProps.date) {
	      this.setState(this._getFormattedDate(nextProps));
	    }
	  };

	  CalendarDate.prototype._getFormattedDate = function _getFormattedDate(_ref) {
	    var DateTimeFormat = _ref.DateTimeFormat,
	        locales = _ref.locales,
	        date = _ref.date;

	    return {
	      date: new DateTimeFormat(locales, { day: 'numeric' }).format(date)
	    };
	  };

	  CalendarDate.prototype.render = function render() {
	    var _state = this.state,
	        date = _state.date,
	        desktopActive = _state.desktopActive;
	    var _props2 = this.props,
	        disabled = _props2.disabled,
	        active = _props2.active,
	        today = _props2.today,
	        className = _props2.className;


	    var fullyActive = today && !active && !desktopActive;
	    return _react2.default.createElement(
	      'button',
	      {
	        type: 'button',
	        ref: this._setFocus,
	        onFocus: this._setActive,
	        onBlur: this._setInactive,
	        onMouseOver: this._setActive,
	        onMouseLeave: this._setInactive,
	        className: (0, _classnames2.default)('md-calendar-date md-calendar-date--btn', {
	          'md-calendar-date--btn-active': active || desktopActive,
	          'md-pointer--hover': !disabled
	        }, (0, _themeColors2.default)({ disabled: disabled, primary: fullyActive }), 'md-btn', className),
	        onClick: this._handleClick,
	        disabled: disabled
	      },
	      _react2.default.createElement(
	        'span',
	        {
	          className: (0, _classnames2.default)('md-calendar-date--date', {
	            'md-picker-text--active': active || desktopActive,
	            'md-font-bold': fullyActive
	          })
	        },
	        date
	      )
	    );
	  };

	  return CalendarDate;
	}(_react.PureComponent);

	CalendarDate.propTypes = {
	  className: _propTypes2.default.string,
	  date: _propTypes2.default.instanceOf(Date).isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  disabled: _propTypes2.default.bool,
	  onClick: _propTypes2.default.func.isRequired,
	  active: _propTypes2.default.bool,
	  today: _propTypes2.default.bool
	};
	exports.default = CalendarDate;

/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	var _isMonthBefore = __webpack_require__(461);

	var _isMonthBefore2 = _interopRequireDefault(_isMonthBefore);

	var _toDayOfWeek = __webpack_require__(458);

	var _toDayOfWeek2 = _interopRequireDefault(_toDayOfWeek);

	var _addDate = __webpack_require__(441);

	var _addDate2 = _interopRequireDefault(_addDate);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This component renders the controls for a `DatePicker`'s Calendar.
	 * This will render a next and previous month button along with the
	 * current month/year. It also renders the abbreviiations for the days
	 * of the week.
	 */
	var CalendarHeader = function (_PureComponent) {
	  _inherits(CalendarHeader, _PureComponent);

	  function CalendarHeader(props) {
	    _classCallCheck(this, CalendarHeader);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this.state = _this._createState(props);
	    return _this;
	  }

	  CalendarHeader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        DateTimeFormat = _props.DateTimeFormat,
	        locales = _props.locales,
	        date = _props.date;

	    if (DateTimeFormat !== nextProps.DateTimeFormat || locales !== nextProps.locales || date !== nextProps.date) {
	      this.setState(this._createState(nextProps));
	    }
	  };

	  CalendarHeader.prototype._createState = function _createState() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props,
	        DateTimeFormat = _ref.DateTimeFormat,
	        locales = _ref.locales,
	        date = _ref.date,
	        firstDayOfWeek = _ref.firstDayOfWeek,
	        titleFormat = _ref.titleFormat,
	        weekdayClassName = _ref.weekdayClassName,
	        weekdayFormat = _ref.weekdayFormat;

	    var firstDay = (0, _toDayOfWeek2.default)(date, firstDayOfWeek);
	    var formatter = new DateTimeFormat(locales, { weekday: weekdayFormat });
	    var dows = [];
	    for (var i = 0; i < 7; i++) {
	      var dow = formatter.format((0, _addDate2.default)(firstDay, i, 'D'));
	      dows.push(_react2.default.createElement(
	        'h4',
	        {
	          key: i,
	          className: (0, _classnames2.default)('md-calendar-date md-calendar-dow', (0, _themeColors2.default)({ disabled: true }), weekdayClassName)
	        },
	        dow
	      ));
	    }

	    return {
	      dows: dows,
	      title: new DateTimeFormat(locales, titleFormat).format(date)
	    };
	  };

	  CalendarHeader.prototype.render = function render() {
	    var _state = this.state,
	        dows = _state.dows,
	        title = _state.title;
	    var _props2 = this.props,
	        date = _props2.date,
	        minDate = _props2.minDate,
	        maxDate = _props2.maxDate,
	        onPreviousClick = _props2.onPreviousClick,
	        previousIcon = _props2.previousIcon,
	        onNextClick = _props2.onNextClick,
	        nextIcon = _props2.nextIcon,
	        titleClassName = _props2.titleClassName;


	    var isPreviousDisabled = (0, _isMonthBefore2.default)(minDate, date);
	    var isNextDisabled = (0, _isMonthBefore2.default)(date, maxDate);
	    return _react2.default.createElement(
	      'header',
	      { className: 'md-calendar-header' },
	      _react2.default.createElement(
	        'div',
	        { className: 'md-calendar-controls' },
	        _react2.default.createElement(_Button2.default, {
	          icon: true,
	          onClick: onPreviousClick,
	          disabled: isPreviousDisabled,
	          className: 'md-calendar-control',
	          iconEl: previousIcon
	        }),
	        _react2.default.createElement(
	          'h4',
	          { className: (0, _classnames2.default)('md-title', titleClassName) },
	          title
	        ),
	        _react2.default.createElement(_Button2.default, {
	          icon: true,
	          onClick: onNextClick,
	          disabled: isNextDisabled,
	          className: 'md-calendar-control',
	          iconEl: nextIcon
	        })
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'md-calendar-dows' },
	        dows
	      )
	    );
	  };

	  return CalendarHeader;
	}(_react.PureComponent);

	CalendarHeader.propTypes = {
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  date: _propTypes2.default.instanceOf(Date).isRequired,
	  minDate: _propTypes2.default.instanceOf(Date),
	  maxDate: _propTypes2.default.instanceOf(Date),
	  previousIcon: _propTypes2.default.element,
	  onPreviousClick: _propTypes2.default.func.isRequired,
	  nextIcon: _propTypes2.default.node,
	  onNextClick: _propTypes2.default.func.isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  /**
	   * The first day of week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
	   */
	  firstDayOfWeek: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5, 6]),
	  /**
	   * An optional className to apply to the title.
	   */
	  titleClassName: _propTypes2.default.string,
	  /**
	   * The DateTimeFormat options to apply to format the title.
	   */
	  titleFormat: _propTypes2.default.shape({
	    era: _propTypes2.default.oneOf(['narrow', 'short', 'long']),
	    year: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    month: _propTypes2.default.oneOf(['numeric', '2-digit', 'narrow', 'short', 'long'])
	  }),
	  /**
	   * An optional className to apply to a weekday.
	   */
	  weekdayClassName: _propTypes2.default.string,
	  /**
	   * The DateTimeFormat option to apply to format a weekday.
	   */
	  weekdayFormat: _propTypes2.default.oneOf(['narrow', 'short', 'long'])
	};
	CalendarHeader.defaultProps = {
	  firstDayOfWeek: 0,
	  titleFormat: { month: 'long', year: 'numeric' },
	  weekdayFormat: 'narrow'
	};
	exports.default = CalendarHeader;

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = isMonthBefore;

	var _isValidDate = __webpack_require__(443);

	var _isValidDate2 = _interopRequireDefault(_isValidDate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Checks if a date is the month before another date without time
	 *
	 * @param {Date} date the date to check if it is before the other
	 * @param {Date} toCompare the date to compare to
	 * @return true if the date is before the other date's first day of month.
	 */
	function isMonthBefore(date, toCompare) {
	  if (!(0, _isValidDate2.default)(date) || !(0, _isValidDate2.default)(toCompare)) {
	    return false;
	  }

	  var d1 = new Date(date.getFullYear(), date.getMonth(), 1);
	  var d2 = new Date(toCompare.getFullYear(), toCompare.getMonth() - 1, 1);
	  return d1 > d2;
	}

/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _Year = __webpack_require__(463);

	var _Year2 = _interopRequireDefault(_Year);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `YearPicker` component is the Year view in a `DatePicker`. This
	 * will display a list of years to select from within the given range.
	 */
	var YearPicker = function (_PureComponent) {
	  _inherits(YearPicker, _PureComponent);

	  function YearPicker(props) {
	    _classCallCheck(this, YearPicker);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this.state = _this._getYearRange(props);
	    return _this;
	  }

	  YearPicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.yearsDisplayed !== nextProps.yearsDisplayed) {
	      this.setState(this._getFullYear(nextProps));
	    }
	  };

	  /**
	   * Gets the current start and end years for the year picker.
	   *
	   * @param {Object} props - The current props to extract the year range from.
	   * @return {Object} an object containign the start and end years
	   */


	  YearPicker.prototype._getYearRange = function _getYearRange(_ref) {
	    var minDate = _ref.minDate,
	        maxDate = _ref.maxDate,
	        yearsDisplayed = _ref.yearsDisplayed,
	        calendarTempDate = _ref.calendarTempDate;

	    var year = calendarTempDate.getFullYear();
	    var range = !minDate && !maxDate ? parseInt(yearsDisplayed / 2, 10) : yearsDisplayed;

	    var startYear = void 0;
	    var endYear = void 0;
	    if (minDate && maxDate) {
	      startYear = minDate.getFullYear();
	      endYear = maxDate.getFullYear();
	    } else if (!minDate && !maxDate) {
	      startYear = year - range;
	      endYear = year + range;
	      if (yearsDisplayed % 2 === 0) {
	        endYear -= 1;
	      }
	    } else if (!maxDate) {
	      startYear = minDate.getFullYear();
	      endYear = startYear + yearsDisplayed - 1;
	    } else {
	      endYear = maxDate.getFullYear();
	      startYear = endYear - yearsDisplayed + 1;
	    }

	    return { startYear: startYear, endYear: endYear };
	  };

	  YearPicker.prototype._setContainer = function _setContainer(container) {
	    if (container === null) {
	      return;
	    }

	    var offsetHeight = container.offsetHeight,
	        offsetWidth = container.offsetWidth;

	    var _container$querySelec = container.querySelector('.md-year--active'),
	        top = _container$querySelec.offsetTop,
	        height = _container$querySelec.offsetHeight;

	    // Portrait seems to be 3/4 of the way while landscape is about 1/2


	    if (offsetHeight > offsetWidth) {
	      container.scrollTop = top - offsetHeight * 3 / 4;
	    } else {
	      container.scrollTop = top - offsetHeight / 2 + height / 2;
	    }
	  };

	  YearPicker.prototype.render = function render() {
	    var _state = this.state,
	        startYear = _state.startYear,
	        endYear = _state.endYear;


	    var currentYear = this.props.calendarTempDate.getFullYear();
	    var years = [];
	    for (var year = startYear; year <= endYear; year++) {
	      years.push(_react2.default.createElement(_Year2.default, {
	        key: year,
	        year: year,
	        active: year === currentYear,
	        onClick: this.props.onCalendarYearClick
	      }));
	    }

	    return _react2.default.createElement(
	      'section',
	      {
	        className: (0, _classnames2.default)('md-picker-content md-picker-content--year', this.props.className),
	        ref: this._setContainer
	      },
	      _react2.default.createElement(
	        'ol',
	        { className: 'md-years' },
	        years
	      )
	    );
	  };

	  return YearPicker;
	}(_react.PureComponent);

	YearPicker.propTypes = {
	  className: _propTypes2.default.string,
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,
	  onCalendarYearClick: _propTypes2.default.func.isRequired,
	  yearsDisplayed: _propTypes2.default.number.isRequired,
	  minDate: _propTypes2.default.instanceOf(Date),
	  maxDate: _propTypes2.default.instanceOf(Date)
	};
	exports.default = YearPicker;

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This is a component for rendering a year in the Date Picker's Year picker
	 * list.
	 */
	var Year = function (_PureComponent) {
	  _inherits(Year, _PureComponent);

	  function Year() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Year);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { desktopActive: false }, _this._setActiveFocus = function (btn) {
	      if (btn && _this.props.active) {
	        btn.focus();
	      }
	    }, _this._setActive = function () {
	      _this.setState({ desktopActive: true });
	    }, _this._setInactive = function () {
	      _this.setState({ desktopActive: false });
	    }, _this._handleClick = function (e) {
	      _this.props.onClick(_this.props.year, e);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Year.prototype.render = function render() {
	    var desktopActive = this.state.desktopActive;
	    var _props = this.props,
	        active = _props.active,
	        className = _props.className,
	        year = _props.year;

	    return _react2.default.createElement(
	      'button',
	      {
	        type: 'button',
	        ref: this._setActiveFocus,
	        className: (0, _classnames2.default)('md-year', { 'md-year--active': active }, (0, _themeColors2.default)({
	          text: !active && !desktopActive,
	          primary: active || desktopActive
	        }), 'md-btn md-pointer--hover md-full-width', className),
	        onClick: this._handleClick
	      },
	      year
	    );
	  };

	  return Year;
	}(_react.PureComponent);

	Year.propTypes = {
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool.isRequired,
	  onClick: _propTypes2.default.func.isRequired,
	  year: _propTypes2.default.number.isRequired
	};
	exports.default = Year;

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _keyCodes = __webpack_require__(279);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _handleWindowClickListeners = __webpack_require__(350);

	var _handleWindowClickListeners2 = _interopRequireDefault(_handleWindowClickListeners);

	var _handleKeyboardAccessibility = __webpack_require__(341);

	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _DateTimeFormat = __webpack_require__(451);

	var _DateTimeFormat2 = _interopRequireDefault(_DateTimeFormat);

	var _formatTime = __webpack_require__(465);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	var _extractTimeParts = __webpack_require__(466);

	var _extractTimeParts2 = _interopRequireDefault(_extractTimeParts);

	var _DialogContainer = __webpack_require__(417);

	var _DialogContainer2 = _interopRequireDefault(_DialogContainer);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _TextField = __webpack_require__(359);

	var _TextField2 = _interopRequireDefault(_TextField);

	var _Collapse = __webpack_require__(259);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var _TimePicker = __webpack_require__(467);

	var _TimePicker2 = _interopRequireDefault(_TimePicker);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-shadow */


	/**
	 * The `TimePickerContainer` component is a wrapper for the main `TimePicker` component
	 * to manage the state and _logic_ for rendering the `TimePicker`. This component will
	 * either render inline or in a `Dialog` depending if the `inline` prop is set
	 * to `true`.
	 *
	 * NOTE: This component is actually exported as `TimePicker` when using the `import { member }` syntax.
	 * The following two lines are equivalent:
	 *
	 * ```js
	 * import { TimePicker } from 'react-md/lib/Pickers';
	 * import TimePicker from 'react-md/lib/Pickers/TimePickerContainer';
	 * ```
	 */
	var TimePickerContainer = function (_PureComponent) {
	  _inherits(TimePickerContainer, _PureComponent);

	  function TimePickerContainer(props) {
	    _classCallCheck(this, TimePickerContainer);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var initialDate = void 0;
	    if (props.defaultValue) {
	      initialDate = new Date(props.defaultValue);
	    } else if (props.value) {
	      initialDate = new Date(props.value);
	    } else {
	      initialDate = new Date();
	    }

	    var visible = typeof props.initiallyOpen !== 'undefined' ? props.initiallyOpen : !!props.defaultVisible;

	    _this.state = _extends({
	      visible: visible
	    }, _this._getTimeParts(initialDate, props), {
	      value: props.defaultValue,
	      time: initialDate,
	      timeMode: props.initialTimeMode || props.defaultTimeMode,
	      tempTime: initialDate
	    });
	    return _this;
	  }

	  TimePickerContainer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.value !== nextProps.value) {
	      var time = nextProps.value || new Date();
	      this.setState(_extends({ tempTime: time }, this._getTimeParts(time, nextProps)));
	    }
	  };

	  TimePickerContainer.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
	    var _props = this.props,
	        inline = _props.inline,
	        isOpen = _props.isOpen;

	    var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	    var pVisible = typeof prevProps.isOpen !== 'undefined' ? prevProps.isOpen : (0, _getField2.default)(prevProps, prevState, 'visible');

	    if (visible === pVisible) {
	      return;
	    }

	    if (visible) {
	      if (inline) {
	        (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, true);
	        window.addEventListener('keydown', this._closeOnEsc);
	      }
	    } else if (inline) {
	      (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);
	      window.removeEventListener('keydown', this._closeOnEsc);
	    }
	  };

	  TimePickerContainer.prototype.componentWillUnmount = function componentWillUnmount() {
	    var visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	    if (visible && this.props.inline) {
	      (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);
	      window.removeEventListener('keydown', this._closeOnEsc);
	    }
	  };

	  TimePickerContainer.prototype._getTimeParts = function _getTimeParts(date, props) {
	    return (0, _extractTimeParts2.default)(props.DateTimeFormat, props.locales, props.showSeconds, date);
	  };

	  TimePickerContainer.prototype._getTextFieldValue = function _getTextFieldValue(props, state) {
	    var DateTimeFormat = props.DateTimeFormat,
	        locales = props.locales,
	        showSeconds = props.showSeconds;

	    var value = (0, _getField2.default)(props, state, 'value');
	    if (!value) {
	      return '';
	    } else if (value instanceof Date) {
	      return (0, _formatTime2.default)(DateTimeFormat, locales, showSeconds, value);
	    } else {
	      // currently don't support value of string
	      return value;
	    }
	  };

	  TimePickerContainer.prototype.render = function render() {
	    var _state = this.state,
	        timeMode = _state.timeMode,
	        tempTime = _state.tempTime,
	        hours = _state.hours,
	        minutes = _state.minutes,
	        seconds = _state.seconds,
	        timePeriod = _state.timePeriod;

	    var _props2 = this.props,
	        style = _props2.style,
	        className = _props2.className,
	        pickerStyle = _props2.pickerStyle,
	        pickerClassName = _props2.pickerClassName,
	        inputStyle = _props2.inputStyle,
	        inputClassName = _props2.inputClassName,
	        textFieldStyle = _props2.textFieldStyle,
	        textFieldClassName = _props2.textFieldClassName,
	        id = _props2.id,
	        disabled = _props2.disabled,
	        label = _props2.label,
	        placeholder = _props2.placeholder,
	        icon = _props2.icon,
	        inline = _props2.inline,
	        displayMode = _props2.displayMode,
	        fullWidth = _props2.fullWidth,
	        lineDirection = _props2.lineDirection,
	        closeOnEsc = _props2.closeOnEsc,
	        hoverMode = _props2.hoverMode,
	        showSeconds = _props2.showSeconds,
	        portal = _props2.portal,
	        renderNode = _props2.renderNode,
	        lastChild = _props2.lastChild,
	        animateInline = _props2.animateInline,
	        block = _props2.block,
	        paddedBlock = _props2.paddedBlock,
	        active = _props2.active,
	        error = _props2.error,
	        floating = _props2.floating,
	        required = _props2.required,
	        leftIconStateful = _props2.leftIconStateful,
	        rightIcon = _props2.rightIcon,
	        rightIconStateful = _props2.rightIconStateful,
	        customSize = _props2.customSize,
	        errorText = _props2.errorText,
	        helpText = _props2.helpText,
	        helpOnFocus = _props2.helpOnFocus,
	        inlineIndicator = _props2.inlineIndicator,
	        disableScrollLocking = _props2.disableScrollLocking,
	        ariaLabel = _props2['aria-label'],
	        propValue = _props2.value,
	        propVisible = _props2.visible,
	        readOnly = _props2.readOnly,
	        defaultValue = _props2.defaultValue,
	        defaultVisible = _props2.defaultVisible,
	        defaultTimeMode = _props2.defaultTimeMode,
	        onVisibilityChange = _props2.onVisibilityChange,
	        isOpen = _props2.isOpen,
	        initialTimeMode = _props2.initialTimeMode,
	        initiallyOpen = _props2.initiallyOpen,
	        props = _objectWithoutProperties(_props2, ['style', 'className', 'pickerStyle', 'pickerClassName', 'inputStyle', 'inputClassName', 'textFieldStyle', 'textFieldClassName', 'id', 'disabled', 'label', 'placeholder', 'icon', 'inline', 'displayMode', 'fullWidth', 'lineDirection', 'closeOnEsc', 'hoverMode', 'showSeconds', 'portal', 'renderNode', 'lastChild', 'animateInline', 'block', 'paddedBlock', 'active', 'error', 'floating', 'required', 'leftIconStateful', 'rightIcon', 'rightIconStateful', 'customSize', 'errorText', 'helpText', 'helpOnFocus', 'inlineIndicator', 'disableScrollLocking', 'aria-label', 'value', 'visible', 'readOnly', 'defaultValue', 'defaultVisible', 'defaultTimeMode', 'onVisibilityChange', 'isOpen', 'initialTimeMode', 'initiallyOpen']);

	    var visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : (0, _getField2.default)(this.props, this.state, 'visible');

	    var picker = _react2.default.createElement(_TimePicker2.default, _extends({}, props, {
	      inline: inline,
	      icon: !!icon,
	      tempTime: tempTime,
	      timeMode: timeMode,
	      seconds: seconds,
	      hours: hours,
	      minutes: minutes,
	      timePeriod: timePeriod,
	      style: pickerStyle,
	      className: pickerClassName,
	      displayMode: displayMode,
	      onOkClick: this._handleOkClick,
	      onCancelClick: this._handleCancelClick,
	      setTimeMode: this._setTimeMode,
	      setTempTime: this._setTempTime,
	      hoverMode: hoverMode,
	      showSeconds: showSeconds
	    }));

	    var content = void 0;
	    if (inline) {
	      content = _react2.default.createElement(
	        _Collapse2.default,
	        { collapsed: !visible, animate: animateInline },
	        picker
	      );
	    } else {
	      content = _react2.default.createElement(
	        _DialogContainer2.default,
	        {
	          id: id + '-dialog',
	          visible: visible,
	          onHide: this._handleCancelClick,
	          dialogClassName: 'md-dialog--picker',
	          contentClassName: 'md-dialog-content--picker',
	          'aria-label': ariaLabel,
	          closeOnEsc: closeOnEsc,
	          portal: portal,
	          lastChild: lastChild,
	          renderNode: renderNode,
	          focusOnMount: false,
	          disableScrollLocking: disableScrollLocking
	        },
	        picker
	      );
	    }

	    return _react2.default.createElement(
	      'div',
	      { style: style, className: (0, _classnames2.default)('md-picker-container', className), ref: this._setContainer },
	      _react2.default.createElement(_TextField2.default, {
	        id: id,
	        style: textFieldStyle,
	        className: (0, _classnames2.default)({ 'md-pointer--hover': !disabled }, textFieldClassName),
	        inputStyle: inputStyle,
	        inputClassName: (0, _classnames2.default)({ 'md-pointer--hover': !disabled }, inputClassName),
	        active: active || visible,
	        error: error,
	        floating: floating || visible,
	        required: required,
	        disabled: disabled,
	        leftIcon: icon,
	        leftIconStateful: leftIconStateful,
	        rightIcon: rightIcon,
	        rightIconStateful: rightIconStateful,
	        inlineIndicator: inlineIndicator,
	        block: block,
	        paddedBlock: paddedBlock,
	        fullWidth: fullWidth,
	        lineDirection: lineDirection,
	        customSize: customSize,
	        helpText: helpText,
	        helpOnFocus: helpOnFocus,
	        errorText: errorText,
	        label: label,
	        placeholder: placeholder,
	        onClick: this._toggleOpen,
	        onKeyDown: this._handleKeyDown,
	        value: this._getTextFieldValue(this.props, this.state),
	        readOnly: true
	      }),
	      content
	    );
	  };

	  return TimePickerContainer;
	}(_react.PureComponent);

	TimePickerContainer.propTypes = {
	  /**
	   * An id for the text field in the time picker. This is require for a11y.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),

	  /**
	   * An aria-label to apply to the dialog when it has been opened. This is required for
	   * a11y.
	   */
	  'aria-label': (0, _isRequiredForA11y2.default)(_propTypes2.default.string),

	  /**
	   * An optional style to apply to the time picker's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the time picker's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the time picker.
	   */
	  pickerStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the time picker.
	   */
	  pickerClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the input tag.
	   */
	  inputStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the input tag.
	   */
	  inputClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the text field's container.
	   */
	  textFieldStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the text field's container.
	   */
	  textFieldClassName: _propTypes2.default.string,

	  /**
	   * An optional icon to display with the time picker.
	   *
	   * @see {@link TextFields/TextField#leftIcon}
	   */
	  icon: _propTypes2.default.node,

	  /**
	   * Boolean if the time picker is open by default.
	   */
	  defaultVisible: _propTypes2.default.bool,

	  /**
	   * An optional label to be displayed in the time picker's text
	   * field.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * An optional placeholder to be displayed in the time picker's text field.
	   */
	  placeholder: _propTypes2.default.string,

	  /**
	   * The value of the time picker. This will make the time picker
	   * be a controlled component.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.instanceOf(Date), 'onChange', 'defaultValue'),

	  /**
	   * An optional function to call when the selected date is changed
	   * by hitting the OK button. The newly formatted time string,
	   * the new Date object, and the change event will be given.
	   *
	   * `onChange(timeString, dateObject, event)`.
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * An optional default value to give for the year picker.
	   */
	  defaultValue: _propTypes2.default.instanceOf(Date),

	  /**
	   * A function to format the dates since it should be formatted to the user's
	   * locale. This _should_ be the `Intl.DateTimeFormat` function. You
	   * can also create your own if you really wanted. Inadvisable though.
	   *
	   * See [intl-polyfill](https://github.com/andyearnshaw/Intl.js/) for more info.
	   */
	  DateTimeFormat: _propTypes2.default.func.isRequired,

	  /**
	   * The locales to use for formatting the date. This will default to using
	   * the user's language in the browser or `'en-US'` when server rendering.
	   */
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,

	  /**
	   * The label to use for the ok button on the year picker.
	   */
	  okLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the ok button should be styled with the primary color.
	   */
	  okPrimary: _propTypes2.default.bool,

	  /**
	   * The label to use for the cancel button on the year picker.
	   */
	  cancelLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the cancel button should be styled with the primary color.
	   */
	  cancelPrimary: _propTypes2.default.bool,

	  /**
	   * The default mode to open the time picker in.
	   */
	  defaultTimeMode: _propTypes2.default.oneOf(['hour', 'minute', 'second']),

	  /**
	   * Boolean if the date should automatically be selected when a user clicks
	   * on a new date instead of making them hit the ok button.
	   */
	  autoOk: _propTypes2.default.bool,

	  /**
	   * Boolean if the date picker should be displayed inline instead of in a
	   * dialog.
	   */
	  inline: _propTypes2.default.bool,

	  /**
	   * An optional force of the display mode of the date picker.
	   * This _should_ not really be used since there are media queries
	   * to use the correct mode based on device orientation.
	   */
	  displayMode: _propTypes2.default.oneOf(['landscape', 'portrait']),

	  /**
	   * Boolean if the text field for the Time Picker should be displayed as full width.
	   */
	  fullWidth: _propTypes2.default.bool,

	  /**
	   * The direction that the text field divider expands from when the text field
	   * in the date picker gains focus.
	   */
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right']),

	  /**
	   * An optional boolean if the time picker is current visible by dialog or inline.
	   * If this is set, the `onVisibilityChange` function is required.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityChange', 'defaultVisible'),

	  /**
	   * An optional function to call when the date picker is opened in either a dialog, or
	   * inline. The callback will include the next state.
	   *
	   * ```js
	   * onVisibilityChange(!visible, e);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,

	  /**
	   * Boolean if the time picker is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * Boolean if the dialog should be able to close if a keyboard user presses the escape key.
	   */
	  closeOnEsc: _propTypes2.default.bool,

	  /**
	   * If true the hover mode of the Time Picker is activated.
	   * In hover mode no clicks are required to start selecting an hour
	   * and the time mode switches automatically when a time was chosen.
	   * When a minute is selected the chosen time is applied automatically.
	   */
	  hoverMode: _propTypes2.default.bool,

	  /**
	   * If true seconds will be selectable in the Time Picker.
	   */
	  showSeconds: _propTypes2.default.bool,

	  /**
	   * Boolean if the inline time picker's visibility should be animated.
	   */
	  animateInline: _propTypes2.default.bool,

	  /**
	   * Boolean if the time is required.
	   *
	   * @see {@link TextFields/TextField#required}
	   */
	  required: _propTypes2.default.bool,

	  /**
	   * @see {@link TextFields/TextField#block}
	   */
	  block: _TextField2.default.propTypes.block,

	  /**
	   * @see {@link TextFields/TextField#paddedBlock}
	   */
	  paddedBlock: _TextField2.default.propTypes.paddedBlock,

	  /**
	   * @see {@link TextFields/TextField#active}
	   */
	  active: _TextField2.default.propTypes.active,

	  /**
	   * @see {@link TextFields/TextField#error}
	   */
	  error: _TextField2.default.propTypes.error,

	  /**
	   * @see {@link TextFields/TextField#floating}
	   */
	  floating: _TextField2.default.propTypes.floating,

	  /**
	   * @see {@link TextFields/TextField#leftIconStateful}
	   */
	  leftIconStateful: _TextField2.default.propTypes.leftIconStateful,

	  /**
	   * @see {@link TextFields/TextField#rightIcon}
	   */
	  rightIcon: _TextField2.default.propTypes.rightIcon,

	  /**
	   * @see {@link TextFields/TextField#rightIconStateful}
	   */
	  rightIconStateful: _TextField2.default.propTypes.rightIconStateful,

	  /**
	   * @see {@link TextFields/TextField#customSize}
	   */
	  customSize: _TextField2.default.propTypes.customSize,

	  /**
	   * @see {@link TextFields/TextField#errorText}
	   */
	  errorText: _TextField2.default.propTypes.errorText,

	  /**
	   * @see {@link TextFields/TextField#helpText}
	   */
	  helpText: _TextField2.default.propTypes.helpText,

	  /**
	   * @see {@link TextFields/TextField#helpOnFocus}
	   */
	  helpOnFocus: _TextField2.default.propTypes.helpOnFocus,

	  /**
	   * @see {@link TextFields/TextField#inlineIndicator}
	   */
	  inlineIndicator: _TextField2.default.propTypes.inlineIndicator,

	  /**
	   * Boolean if the Portal's functionality of rendering in a separate react tree should be applied
	   * to the dialog.
	   *
	   * @see {@link Helpers/Portal}
	   */
	  portal: _propTypes2.default.bool,

	  /**
	   * An optional DOM Node to render the dialog into. The default is to render as the first child
	   * in the `body`.
	   */
	  renderNode: _propTypes2.default.object,

	  /**
	   * Boolean if the dialog should be rendered as the last child of the `renderNode` or `body` instead
	   * of the first.
	   */
	  lastChild: _propTypes2.default.bool,

	  /**
	   * @see {@link Dialogs/DialogContainer#disableScrollLocking}
	   */
	  disableScrollLocking: _propTypes2.default.bool,

	  /**
	   * Boolean if the TimePicker should be read only. This will prevent the user from opening the picker
	   * and only display the current date in the text field.
	   */
	  readOnly: _propTypes2.default.bool,

	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead'),
	  initiallyOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  initialTimeMode: (0, _deprecated2.default)(_propTypes2.default.oneOf(['hour', 'minute']), 'Use `defaultTimeMode` instead')
	};
	TimePickerContainer.defaultProps = {
	  animateInline: true,
	  defaultTimeMode: 'hour',
	  icon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'access_time'
	  ),
	  DateTimeFormat: _DateTimeFormat2.default, // eslint-disable-line object-shorthand
	  locales: typeof window !== 'undefined' ? window.navigator.userLanguage || window.navigator.language : 'en-US',
	  okLabel: 'Ok',
	  okPrimary: true,
	  cancelLabel: 'Cancel',
	  cancelPrimary: true,
	  closeOnEsc: true,
	  disableScrollLocking: false,
	  'aria-label': 'Select a time',
	  hoverMode: false,
	  showSeconds: false
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._setContainer = function (container) {
	    _this2._container = container;
	  };

	  this._closeOnEsc = function (e) {
	    if ((e.which || e.keyCode) === _keyCodes.ESC) {
	      _this2._handleCancelClick(e);
	    }
	  };

	  this._handleOutsideClick = function (e) {
	    if (_this2._container && !_this2._container.contains(e.target)) {
	      _this2._handleCancelClick(e);
	    }
	  };

	  this._toggleOpen = function (e) {
	    if (_this2.props.disabled || _this2.props.readOnly) {
	      return;
	    }

	    var visible = !(typeof _this2.props.isOpen !== 'undefined' ? _this2.props.isOpen : (0, _getField2.default)(_this2.props, _this2.state, 'visible'));

	    if (_this2.props.onVisibilityChange) {
	      _this2.props.onVisibilityChange(visible, e);
	    }

	    if (typeof _this2.props.isOpen === 'undefined' && typeof _this2.props.visible === 'undefined') {
	      var hoverMode = _this2.props.hoverMode;


	      if (hoverMode) {
	        _this2._setTimeMode('hour');
	      }

	      _this2.setState({ visible: visible });
	    }
	  };

	  this._setTimeMode = function (timeMode) {
	    if (_this2.state.timeMode === timeMode) {
	      return;
	    }

	    _this2.setState({ timeMode: timeMode });
	  };

	  this._setTempTime = function (time) {
	    if (_this2.state.tempTime === time) {
	      return;
	    }

	    _this2.setState(_extends({ tempTime: time }, _this2._getTimeParts(time, _this2.props)));
	  };

	  this._handleKeyDown = function (e) {
	    (0, _handleKeyboardAccessibility2.default)(e, _this2._toggleOpen, true, true);

	    if ((e.which || e.keyCode) === _keyCodes.TAB && _this2.state.active) {
	      _this2.setState({ active: false });
	    }
	  };

	  this._handleOkClick = function (e) {
	    var _props3 = _this2.props,
	        onVisibilityChange = _props3.onVisibilityChange,
	        onChange = _props3.onChange,
	        DateTimeFormat = _props3.DateTimeFormat,
	        locales = _props3.locales,
	        showSeconds = _props3.showSeconds;

	    var value = new Date(_this2.state.tempTime);
	    if (onChange) {
	      onChange((0, _formatTime2.default)(DateTimeFormat, locales, showSeconds, value), value, e);
	    }

	    if (onVisibilityChange) {
	      onVisibilityChange(false, e);
	    }

	    var state = _extends({ time: value }, _this2._getTimeParts(value, _this2.props));
	    if (typeof _this2.props.value === 'undefined') {
	      state.value = value;
	    }

	    if (typeof _this2.props.isOpen === 'undefined' && typeof _this2.props.visible === 'undefined') {
	      state.visible = false;
	    }

	    _this2.setState(state);
	  };

	  this._handleCancelClick = function (e) {
	    if (_this2.props.onVisibilityChange) {
	      _this2.props.onVisibilityChange(false, e);
	    }

	    var state = void 0;
	    if (typeof _this2.props.isOpen === 'undefined' && typeof _this2.props.visible === 'undefined') {
	      state = { visible: false };
	    }

	    var value = (0, _getField2.default)(_this2.props, _this2.state, 'value');
	    if (value) {
	      state = _extends({}, state, _this2._getTimeParts(value, _this2.props));
	      state.tempTime = _this2.state.time;
	    }

	    if (state) {
	      _this2.setState(state);
	    }
	  };
	};

	exports.default = TimePickerContainer;

/***/ }),
/* 465 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = formatTime;
	/** @module utils/DateUtils/formatTime */

	/**
	 * Formats a date as a time string using the DateTimeFormat function and locales.
	 *
	 * @param {function} DateTimeFormat the DateTimeFormat function to use.
	 * @param {string|string[]} locales the locales to use.
	 * @param {Boolean} showSeconds boolean if seconds should be formatted
	 * @param {Date} time the time to format into a string.
	 * @return a string of the formatted time.
	 */
	function formatTime(DateTimeFormat, locales, showSeconds, time) {
	  var format = void 0;
	  if (showSeconds === true) {
	    format = { hour: 'numeric', minute: '2-digit', second: '2-digit' };
	  } else {
	    format = { hour: 'numeric', minute: '2-digit' };
	  }

	  return new DateTimeFormat(locales, format).format(time);
	}

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = extractTimeParts;

	var _formatTime = __webpack_require__(465);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Extracts the hours, minutes, and optional time period from
	 * a date time.
	 *
	 * @param {function} DateTimeFormat the DateTimeFormat function to use.
	 * @param {string|string[]} locales the locales to use.
	 * @param {Boolean} showSeconds boolean if seconds should be extracted
	 * @param {Date} time the time to extract from.
	 * @return {Object} an object of { hours, minutes, timePeriod }
	 */
	function extractTimeParts(DateTimeFormat, locales, showSeconds, time) {
	  var hours = void 0;
	  var minutes = void 0;
	  var seconds = void 0;
	  var minuteSeparator = void 0;
	  var secondSeparator = void 0;
	  var remaining = void 0;
	  var formatted = (0, _formatTime2.default)(DateTimeFormat, locales, showSeconds, time);
	  // IE does not like lookaheads or splitting on [^0-9]
	  // it will include the non-printable characters..

	  if (showSeconds === true) {
	    var _formatted$match = formatted.match(/[0-9]+/g);

	    hours = _formatted$match[0];
	    minutes = _formatted$match[1];
	    seconds = _formatted$match[2];

	    var _formatted$match2 = formatted.match(/[ ,.:A-z]+/g);

	    minuteSeparator = _formatted$match2[0];
	    secondSeparator = _formatted$match2[1];
	    remaining = _formatted$match2.slice(2);
	  } else {
	    var _formatted$match3 = formatted.match(/[0-9]+/g);

	    hours = _formatted$match3[0];
	    minutes = _formatted$match3[1];

	    var _formatted$match4 = formatted.match(/[ ,.:A-z]+/g);

	    minuteSeparator = _formatted$match4[0];
	    remaining = _formatted$match4.slice(1);
	  }

	  var timePeriod = void 0;
	  if (remaining && remaining.length) {
	    timePeriod = remaining.join('').trim();
	  }

	  if (showSeconds === true) {
	    return {
	      hours: hours,
	      minutes: minuteSeparator + minutes,
	      seconds: secondSeparator + seconds,
	      timePeriod: timePeriod
	    };
	  }

	  return {
	    hours: hours,
	    minutes: minuteSeparator + minutes,
	    timePeriod: timePeriod
	  };
	} /** @module utils/DateUtils/extractTimeParts */

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _ClockFace = __webpack_require__(468);

	var _ClockFace2 = _interopRequireDefault(_ClockFace);

	var _DialogFooter = __webpack_require__(406);

	var _DialogFooter2 = _interopRequireDefault(_DialogFooter);

	var _TimePickerHeader = __webpack_require__(472);

	var _TimePickerHeader2 = _interopRequireDefault(_TimePickerHeader);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `TimePicker` component is used to display a time picker
	 * in the `TimePickerContainer` component.
	 */
	var TimePicker = function (_PureComponent) {
	  _inherits(TimePicker, _PureComponent);

	  function TimePicker() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, TimePicker);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._updateTime = function (newTime) {
	      var timePart = newTime;
	      var _this$props = _this.props,
	          tempTime = _this$props.tempTime,
	          setTempTime = _this$props.setTempTime,
	          timeMode = _this$props.timeMode,
	          timePeriod = _this$props.timePeriod;

	      var time = new Date(tempTime);
	      if (timeMode === 'hour') {
	        var isAM = timePeriod === 'AM';
	        var is12 = timePart === 12;
	        if (timePeriod && isAM && is12) {
	          timePart = 0;
	        } else if (timePeriod && !isAM && !is12) {
	          timePart += 12;
	        }

	        time.setHours(timePart);
	      }

	      if (timeMode === 'minute') {
	        time.setMinutes(timePart);
	      }

	      if (timeMode === 'second') {
	        time.setSeconds(timePart);
	      }

	      setTempTime(time);
	    }, _this._handleTimeChosen = function () {
	      var _this$props2 = _this.props,
	          hoverMode = _this$props2.hoverMode,
	          setTimeMode = _this$props2.setTimeMode,
	          onOkClick = _this$props2.onOkClick,
	          timeMode = _this$props2.timeMode;


	      if (hoverMode) {
	        if (timeMode === 'hour') {
	          setTimeMode('minute');
	        } else {
	          onOkClick();
	        }
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Takes in the new time (number o'clock or minutes), updates the temp time
	   * with that new time, and then calls the setTempTime prop.
	   */


	  TimePicker.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        okLabel = _props.okLabel,
	        okPrimary = _props.okPrimary,
	        onOkClick = _props.onOkClick,
	        cancelLabel = _props.cancelLabel,
	        cancelPrimary = _props.cancelPrimary,
	        onCancelClick = _props.onCancelClick,
	        style = _props.style,
	        className = _props.className,
	        setTimeMode = _props.setTimeMode,
	        setTempTime = _props.setTempTime,
	        timeMode = _props.timeMode,
	        tempTime = _props.tempTime,
	        hours = _props.hours,
	        minutes = _props.minutes,
	        seconds = _props.seconds,
	        timePeriod = _props.timePeriod,
	        displayMode = _props.displayMode,
	        inline = _props.inline,
	        icon = _props.icon,
	        hoverMode = _props.hoverMode,
	        showSeconds = _props.showSeconds;


	    var hoursInt = parseInt(hours, 10);
	    var minutesInt = parseInt(minutes.replace(/[^0-9]/g, ''), 10);
	    var secondsInt = void 0;
	    if (showSeconds) secondsInt = parseInt(seconds.replace(/[^0-9]/g, ''), 10);

	    var actions = [{
	      key: 'cancel',
	      onClick: onCancelClick,
	      primary: cancelPrimary,
	      secondary: !cancelPrimary,
	      label: cancelLabel
	    }, {
	      key: 'ok',
	      onClick: onOkClick,
	      primary: okPrimary,
	      secondary: !okPrimary,
	      label: okLabel
	    }];

	    var time = void 0;
	    if (timeMode === 'hour') time = hoursInt;
	    if (timeMode === 'minute') time = minutesInt;
	    if (timeMode === 'second') time = secondsInt;

	    return _react2.default.createElement(
	      'div',
	      {
	        style: style,
	        className: (0, _classnames2.default)('md-picker md-picker--time', (_cn = {}, _cn['md-picker--' + displayMode] = displayMode, _cn['md-picker--inline'] = inline, _cn['md-picker--inline-icon'] = inline && icon, _cn), className)
	      },
	      _react2.default.createElement(_TimePickerHeader2.default, {
	        tempTime: tempTime,
	        timeMode: timeMode,
	        setTimeMode: setTimeMode,
	        setTempTime: setTempTime,
	        hours: hours,
	        minutes: minutes,
	        seconds: seconds,
	        timePeriod: timePeriod,
	        showSeconds: showSeconds
	      }),
	      _react2.default.createElement(
	        'div',
	        { className: 'md-picker-content-container' },
	        _react2.default.createElement(
	          'div',
	          { className: 'md-picker-content md-picker-content--clock' },
	          _react2.default.createElement(_ClockFace2.default, {
	            time: time,
	            minutes: timeMode === 'minute' || timeMode === 'second',
	            onChange: this._updateTime,
	            timePeriod: timePeriod,
	            hoverMode: hoverMode,
	            onTimeChosen: this._handleTimeChosen
	          })
	        ),
	        _react2.default.createElement(_DialogFooter2.default, { actions: actions })
	      )
	    );
	  };

	  return TimePicker;
	}(_react.PureComponent);

	TimePicker.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  okLabel: _propTypes2.default.node.isRequired,
	  okPrimary: _propTypes2.default.bool.isRequired,
	  onOkClick: _propTypes2.default.func.isRequired,
	  cancelLabel: _propTypes2.default.node.isRequired,
	  cancelPrimary: _propTypes2.default.bool.isRequired,
	  onCancelClick: _propTypes2.default.func.isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  icon: _propTypes2.default.bool,
	  inline: _propTypes2.default.bool,
	  displayMode: _propTypes2.default.oneOf(['landscape', 'portrait']),

	  /**
	   * A function that will switch the state from hour to minute.
	   */
	  setTimeMode: _propTypes2.default.func.isRequired,

	  /**
	   * A function that will update the time for the TimePicker before
	   * the user selects ok. This function will be given a new Date object
	   * with a modified time.
	   */
	  setTempTime: _propTypes2.default.func.isRequired,

	  /**
	   * The current display mode of the time picker.
	   */
	  timeMode: _propTypes2.default.oneOf(['hour', 'minute', 'second']).isRequired,

	  /**
	   * The current time as a date object that is being displayed in the
	   * time picker.
	   */
	  tempTime: _propTypes2.default.instanceOf(Date).isRequired,

	  /**
	   * A string that is a representation of the hours in the user's locale.
	   */
	  hours: _propTypes2.default.string.isRequired,

	  /**
	   * A string that is a representation of the minutes in the user's locale.
	   * This will also include any separator the locale uses.
	   *
	   * Example: ':15' in '3:15 PM' for 'en-US'
	   */
	  minutes: _propTypes2.default.string.isRequired,

	  /**
	   * A string that is a representation of the seconds in the user's locale.
	   * This will also include any separator the locale uses.
	   *
	   * Example: ':00' in '3:15:00 PM' for 'en-US'
	   */
	  seconds: _propTypes2.default.string,

	  /**
	   * An optional time period if a user's locale uses it.
	   */
	  timePeriod: _propTypes2.default.string,

	  /**
	   * If true the hover mode of the Time Picker is activated.
	   * In hover mode no clicks are required to start selecting an hour
	   * and the timemode switches automatically when a time was chosen.
	   * When a minute is selected the chosen time is applied automatically.
	   */
	  hoverMode: _propTypes2.default.bool,

	  /**
	   * A boolean that if true, seconds are displayed
	   */
	  showSeconds: _propTypes2.default.bool
	};
	exports.default = TimePicker;

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _isValidClick = __webpack_require__(294);

	var _isValidClick2 = _interopRequireDefault(_isValidClick);

	var _captureNextEvent = __webpack_require__(283);

	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);

	var _touches = __webpack_require__(295);

	var _calcTimeFromPoint = __webpack_require__(469);

	var _calcTimeFromPoint2 = _interopRequireDefault(_calcTimeFromPoint);

	var _calcPageOffset = __webpack_require__(292);

	var _calcPageOffset2 = _interopRequireDefault(_calcPageOffset);

	var _ResizeObserver = __webpack_require__(357);

	var _ResizeObserver2 = _interopRequireDefault(_ResizeObserver);

	var _ClockTime = __webpack_require__(470);

	var _ClockTime2 = _interopRequireDefault(_ClockTime);

	var _ClockHand = __webpack_require__(471);

	var _ClockHand2 = _interopRequireDefault(_ClockHand);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `ClockFace` component is used for rendering all the clock's times
	 * and the clock hand.
	 */
	var ClockFace = function (_PureComponent) {
	  _inherits(ClockFace, _PureComponent);

	  function ClockFace(props) {
	    _classCallCheck(this, ClockFace);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._setFace = function (face) {
	      _this._face = face;
	      _this._setPositioning();
	    };

	    _this._setPositioning = function () {
	      if (!_this._face) {
	        return;
	      }

	      var radius = _this._face.offsetWidth / 2;
	      var offset = (0, _calcPageOffset2.default)(_this._face);
	      _this._center = { x: offset.left + radius, y: offset.top + radius };
	      _this._left = offset.left;
	      _this._top = offset.top;

	      if (_this.state.radius !== radius) {
	        _this.setState({ radius: radius });
	      }
	    };

	    _this._handleMouseEnter = function () {
	      var hoverMode = _this.props.hoverMode;


	      if (hoverMode) {
	        _this._enableMouseMoving();
	      }
	    };

	    _this._handleMouseLeave = function () {
	      var hoverMode = _this.props.hoverMode;


	      if (hoverMode) {
	        _this._disableMouseMoving();
	      }
	    };

	    _this._handleMouseDown = function (e) {
	      if (!(0, _isValidClick2.default)(e)) {
	        return;
	      }

	      var hoverMode = _this.props.hoverMode;


	      if (!hoverMode) {
	        _this._enableMouseMoving();
	      }
	    };

	    _this._handleMouseMove = function (e) {
	      if (!_this.state.moving) {
	        return;
	      }

	      e.preventDefault();
	      _this._calcNewTime(e);
	    };

	    _this._handleMouseUp = function (e) {
	      if (!(0, _isValidClick2.default)(e)) {
	        return;
	      }

	      var _this$props = _this.props,
	          onTimeChosen = _this$props.onTimeChosen,
	          hoverMode = _this$props.hoverMode;


	      if (_this._face) {
	        if (_this._face.contains(e.target)) {
	          onTimeChosen();
	          _this._calcNewTime(e);
	        } else {
	          (0, _captureNextEvent2.default)('click');
	        }
	      }

	      if (!hoverMode) {
	        _this._disableMouseMoving();
	      }
	    };

	    _this._handleTouchStart = function () {
	      (0, _captureNextEvent2.default)('mousedown');

	      (0, _touches.addTouchEvent)(window, 'move', _this._handleTouchMove);
	      (0, _touches.addTouchEvent)(window, 'end', _this._handleTouchEnd);
	      _this.setState({ moving: true });
	    };

	    _this._handleTouchMove = function (e) {
	      if (!_this.state.moving) {
	        return;
	      }

	      _this._calcNewTime(e);
	    };

	    _this._handleTouchEnd = function (e) {
	      _this._calcNewTime(e);
	      if (_this._face && !_this._face.contains(e.target)) {
	        (0, _captureNextEvent2.default)('click');
	      }

	      (0, _touches.removeTouchEvent)(window, 'move', _this._handleTouchMove);
	      (0, _touches.removeTouchEvent)(window, 'end', _this._handleTouchEnd);

	      _this.setState({ moving: false });
	    };

	    _this._calcNewTime = function (e) {
	      var _ref = e.changedTouches ? e.changedTouches[0] : e,
	          x = _ref.pageX,
	          y = _ref.pageY;

	      var innerRadius = _this.state.radius - 48;
	      var _this$props2 = _this.props,
	          onChange = _this$props2.onChange,
	          minutes = _this$props2.minutes,
	          timePeriod = _this$props2.timePeriod;

	      onChange((0, _calcTimeFromPoint2.default)({ x: x, y: y }, _this._center, innerRadius, minutes, timePeriod));
	    };

	    _this._enableMouseMoving = function () {
	      window.addEventListener('mousemove', _this._handleMouseMove);
	      window.addEventListener('mouseup', _this._handleMouseUp);

	      _this.setState({ moving: true });
	    };

	    _this._disableMouseMoving = function () {
	      window.removeEventListener('mousemove', _this._handleMouseMove);
	      window.removeEventListener('mouseup', _this._handleMouseUp);

	      _this.setState({ moving: false });
	    };

	    _this.state = { radius: 136, moving: false };
	    _this._center = {};
	    return _this;
	  }

	  ClockFace.prototype.componentWillUnmount = function componentWillUnmount() {
	    window.removeEventListener('mousemove', this._handleMouseMove);
	    window.removeEventListener('mouseup', this._handleMouseMove);

	    (0, _touches.removeTouchEvent)(window, 'move', this._handleTouchMove);
	    (0, _touches.removeTouchEvent)(window, 'end', this._handleTouchEnd);
	    clearInterval(this.interval);
	  };

	  ClockFace.prototype.render = function render() {
	    var _props = this.props,
	        time = _props.time,
	        minutes = _props.minutes,
	        timePeriod = _props.timePeriod,
	        onChange = _props.onChange,
	        hoverMode = _props.hoverMode;
	    var radius = this.state.radius;

	    var size = !minutes && !timePeriod ? 24 : 12;
	    var times = Array.apply(null, new Array(size)).map(function (_, i) {
	      var clockTime = i + 1;
	      if (minutes) {
	        clockTime = clockTime * 5 % 60;
	      } else {
	        clockTime %= 24;
	      }

	      return _react2.default.createElement(_ClockTime2.default, {
	        key: 'time-' + i,
	        index: i + 1,
	        time: clockTime,
	        active: clockTime === time,
	        radius: radius,
	        onKeyboardFocus: onChange
	      });
	    });

	    return _react2.default.createElement(
	      'div',
	      {
	        ref: this._setFace,
	        className: 'md-clock-face md-block-centered md-pointer--hover',
	        onMouseDown: this._handleMouseDown,
	        onMouseEnter: hoverMode ? this._handleMouseEnter : undefined,
	        onMouseLeave: hoverMode ? this._handleMouseLeave : undefined,
	        onTouchStart: this._handleTouchStart
	      },
	      _react2.default.createElement(_ResizeObserver2.default, { watchHeight: true, onResize: this._setPositioning }),
	      times,
	      _react2.default.createElement(_ClockHand2.default, { time: time, coords: radius, minutes: minutes })
	    );
	  };

	  return ClockFace;
	}(_react.PureComponent);

	ClockFace.propTypes = {
	  /**
	   * The current time for the clock.
	   */
	  time: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the clock is on the minutes view.
	   */
	  minutes: _propTypes2.default.bool.isRequired,

	  /**
	   * A function to call when a new time is selected. It gives the
	   * new time value. If it is 12 o'clock, 0 will be given.
	   */
	  onChange: _propTypes2.default.func.isRequired,

	  /**
	   * An optional time period string. This should be either AM or PM
	   * if the locale uses them.
	   */
	  timePeriod: _propTypes2.default.string,

	  /**
	   * If true the hover mode of the Time Picker is activated.
	   * In hover mode no clicks are required to start selecting an hour
	   * and the timemode switches automatically when a time was chosen.
	   * When a minute is selected the chosen time is applied automatically.
	   */
	  hoverMode: _propTypes2.default.bool,

	  onTimeChosen: _propTypes2.default.func.isRequired
	};
	exports.default = ClockFace;

/***/ }),
/* 469 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = calcTimeFromPoint;
	/** @module utils/NumberUtils/calcTimeFromPoint */

	function isPointInCircle(cx, cy, r, x, y) {
	  var distance = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);
	  return distance <= Math.pow(r, 2);
	}

	function toDegrees(radians) {
	  return radians * (180 / Math.PI);
	}

	/**
	 * Takes a point from a mouse or touch event and a center point of a circle to determine
	 * what the new time should be.
	 *
	 * If the point.y < center.y, the point is in the top half of the circle.
	 * If the point.x < center.x, the point is in the left half of the circle.
	 *
	 * @param {Object} point - The mouse or touch event's point that contains an x and y coordinate.
	 * @param {Object} center - The center point for the circle that contains an x and y coordinate.
	 * @param {Number} innerRadius - An inner radius for clocks that have 24 hour times. This is
	 *    a circle that contains hours 12-23.
	 * @param {Boolean} minutes - Boolena if the current time to be calculated is minutes instead of
	 *    hours.
	 * @param {Boolean} hour12 - Boolean if the clock is a 12 hour clock.
	 * @return {Number} the new time.
	 */
	function calcTimeFromPoint(point, center, innerRadius, minutes, hour12) {
	  var x = point.x - center.x;
	  var y = point.y - center.y;
	  var degrees = toDegrees(Math.atan2(y, x));
	  var sectors = minutes ? 60 : 12;
	  var sectorSize = 360 / sectors;
	  var time = Math.round(degrees / sectorSize);

	  // Since the css transform has 0π at π/2 place, we need to offset the
	  // time to that location.
	  time += minutes ? 15 : 3;

	  // If time is still negative, it is in the top half of the circle
	  if (time < 0) {
	    time += sectors;
	  }

	  // Finally, if it is a 24 hour clock, need to check if the point is actually
	  // selecting hours 13 - 24 (0).
	  if (!minutes && !hour12) {
	    var isInCircle = isPointInCircle(0, 0, innerRadius, x, y);

	    if (time === 0 && !isInCircle || time !== 0 && isInCircle) {
	      time += 12;
	    }
	  }

	  return time;
	}

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _keyCodes = __webpack_require__(279);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CLOCK_PADDING = 4;

	/**
	 * The `ClockTime` component is used for positioning hours or minutes
	 * in a clock. The time will be positioned based on it's given index
	 * and the radius of the clock.
	 */

	var ClockTime = function (_PureComponent) {
	  _inherits(ClockTime, _PureComponent);

	  function ClockTime(props) {
	    _classCallCheck(this, ClockTime);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._handleKeyUp = function (e) {
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        _this.props.onKeyboardFocus(_this.props.time);
	      }
	    };

	    _this._setTime = function (time) {
	      _this._time = time;
	      if (time !== null) {
	        _this._setPosition(_this.props, time);

	        if (_this.props.active) {
	          time.focus();
	        }
	      }
	    };

	    _this._setPosition = function (_ref, time) {
	      var radius = _ref.radius,
	          index = _ref.index;

	      // 36 is default size for the time
	      var size = (time.offsetWidth || 36) / 2;
	      var timeRadians = Math.PI / 2 - index * (Math.PI / 6);
	      var innerCircle = index > 12;

	      var outerRadius = radius - size;
	      var innerRadius = outerRadius - CLOCK_PADDING - (innerCircle ? size * 2 : 0);

	      _this.setState({
	        style: {
	          top: outerRadius - innerRadius * Math.sin(timeRadians),
	          left: outerRadius + innerRadius * Math.cos(timeRadians)
	        }
	      });
	    };

	    _this.state = {
	      // default size in scss
	      size: 18
	    };
	    return _this;
	  }

	  ClockTime.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.radius !== nextProps.radius || this.props.index !== nextProps.index) {
	      this._setPosition(nextProps, this._time);
	    }
	  };

	  ClockTime.prototype.render = function render() {
	    var _props = this.props,
	        time = _props.time,
	        active = _props.active;

	    return _react2.default.createElement(
	      'div',
	      {
	        ref: this._setTime,
	        tabIndex: 0,
	        className: (0, _classnames2.default)('md-clock-time md-text-no-select md-pointer--none', {
	          'md-picker-text--active': active
	        }, (0, _themeColors2.default)({ text: !active })),
	        style: this.state.style,
	        onKeyUp: this._handleKeyUp
	      },
	      _react2.default.createElement(
	        'span',
	        { className: 'md-clock-time-value' },
	        time
	      )
	    );
	  };

	  return ClockTime;
	}(_react.PureComponent);

	ClockTime.propTypes = {
	  /**
	   * The index of the current time to be displayed. This
	   * should be a number between 1 and 24.
	   */
	  index: _propTypes2.default.number.isRequired,

	  /**
	   * The time number to display.
	   */
	  time: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if this time is currently selected.
	   */
	  active: _propTypes2.default.bool.isRequired,

	  /**
	   * The radius of the clock.
	   */
	  radius: _propTypes2.default.number.isRequired,

	  onKeyboardFocus: _propTypes2.default.func.isRequired
	};
	exports.default = ClockTime;

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `ClockHand` component is just used to display the hand of the clock
	 * and a ball to surround the selected time.
	 */
	var ClockHand = function (_PureComponent) {
	  _inherits(ClockHand, _PureComponent);

	  function ClockHand(props) {
	    _classCallCheck(this, ClockHand);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this.state = { active: false };
	    return _this;
	  }

	  ClockHand.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    if (this.props.minutes !== nextProps.minutes) {
	      if (this.state.timeout) {
	        clearTimeout(this.state.timeout);
	      }

	      this.setState({
	        active: true,
	        timeout: setTimeout(function () {
	          return _this2.setState({ active: false, timeout: null });
	        }, 150)
	      });
	    }
	  };

	  ClockHand.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.state.timeout) {
	      clearTimeout(this.state.timeout);
	    }
	  };

	  ClockHand.prototype._calcCurrentDegrees = function _calcCurrentDegrees(_ref) {
	    var time = _ref.time,
	        minutes = _ref.minutes;

	    var timeAt0Deg = minutes ? 15 : 3;
	    var sectors = minutes ? 60 : 12;

	    return (time % sectors - timeAt0Deg) * (360 / sectors);
	  };

	  ClockHand.prototype.render = function render() {
	    var _props = this.props,
	        coords = _props.coords,
	        time = _props.time,
	        minutes = _props.minutes;


	    var degrees = this._calcCurrentDegrees(this.props);
	    var invisibleMinute = false;
	    if (minutes) {
	      invisibleMinute = degrees % (360 / 12) !== 0;
	    }

	    var rotateTransform = 'rotate3d(0, 0, 1, ' + degrees + 'deg)';
	    return _react2.default.createElement('div', {
	      className: (0, _classnames2.default)('md-clock-hand md-background--primary', {
	        'md-clock-hand--active': this.state.active,
	        'md-clock-hand--minute-hover': invisibleMinute,
	        'md-clock-hand--inner': !minutes && (time > 12 || time === 0)
	      }),
	      style: {
	        left: coords,
	        top: coords,
	        WebkitTransform: rotateTransform,
	        MozTransform: rotateTransform,
	        msTransform: rotateTransform,
	        transform: rotateTransform
	      }
	    });
	  };

	  return ClockHand;
	}(_react.PureComponent);

	ClockHand.propTypes = {
	  /**
	   * This is the x and y coordinate to use for the center of the `ClockFace`.
	   * This should really be whatever the radius of the `ClockFace` is.
	   */
	  coords: _propTypes2.default.number,

	  /**
	   * The current time of the clock.
	   */
	  time: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the clock is displaying minutes instead of hours.
	   */
	  minutes: _propTypes2.default.bool.isRequired
	};
	exports.default = ClockHand;

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _TimePeriods = __webpack_require__(473);

	var _TimePeriods2 = _interopRequireDefault(_TimePeriods);

	var _PickerControl = __webpack_require__(454);

	var _PickerControl2 = _interopRequireDefault(_PickerControl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `TimePickerHeader` component is used for rendering the
	 * current time for the `TimePicker` as well as switching between
	 * the different views for the time picker.
	 */
	var TimePickerHeader = function (_PureComponent) {
	  _inherits(TimePickerHeader, _PureComponent);

	  function TimePickerHeader() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, TimePickerHeader);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._setHour = function () {
	      _this.props.setTimeMode('hour');
	    }, _this._setMinute = function () {
	      _this.props.setTimeMode('minute');
	    }, _this._setSecond = function () {
	      _this.props.setTimeMode('second');
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  TimePickerHeader.prototype.render = function render() {
	    var _props = this.props,
	        timeMode = _props.timeMode,
	        hours = _props.hours,
	        minutes = _props.minutes,
	        seconds = _props.seconds,
	        timePeriod = _props.timePeriod,
	        setTempTime = _props.setTempTime,
	        tempTime = _props.tempTime,
	        showSeconds = _props.showSeconds;

	    var timePeriods = void 0;
	    if (timePeriod) {
	      timePeriods = _react2.default.createElement(_TimePeriods2.default, { tempTime: tempTime, setTempTime: setTempTime, timePeriod: timePeriod });
	    }

	    var secondsControl = showSeconds === true ? _react2.default.createElement(
	      _PickerControl2.default,
	      { onClick: this._setSecond, active: timeMode === 'second' },
	      _react2.default.createElement(
	        'h4',
	        { className: 'md-display-3' },
	        seconds
	      )
	    ) : null;

	    return _react2.default.createElement(
	      'header',
	      { className: 'md-picker-header md-text-right' },
	      _react2.default.createElement(
	        _PickerControl2.default,
	        { onClick: this._setHour, active: timeMode === 'hour' },
	        _react2.default.createElement(
	          'h4',
	          { className: 'md-display-3' },
	          hours
	        )
	      ),
	      _react2.default.createElement(
	        _PickerControl2.default,
	        { onClick: this._setMinute, active: timeMode === 'minute' },
	        _react2.default.createElement(
	          'h4',
	          { className: 'md-display-3' },
	          minutes
	        )
	      ),
	      secondsControl,
	      timePeriods
	    );
	  };

	  return TimePickerHeader;
	}(_react.PureComponent);

	TimePickerHeader.propTypes = {
	  /**
	   * The current time of the time picker.
	   */
	  tempTime: _propTypes2.default.instanceOf(Date).isRequired,

	  /**
	   * The current time type that is being changed.
	   */
	  timeMode: _propTypes2.default.oneOf(['hour', 'minute', 'second']).isRequired,

	  /**
	   * A function to update the time mode.
	   */
	  setTimeMode: _propTypes2.default.func.isRequired,

	  /**
	   * A function to update the time for the time picker.
	   */
	  setTempTime: _propTypes2.default.func.isRequired,

	  /**
	   * A formatted hours string for the user's locale. This
	   * would be '3' for en-US if the time was '3:15'
	   */
	  hours: _propTypes2.default.string.isRequired,

	  /**
	   * A formatted minutes string for the user's locale.
	   * This would be ':15' for en-US if the time was '3:15'.
	   */
	  minutes: _propTypes2.default.string.isRequired,

	  /**
	   * A formatted seconds string for the user's locale.
	   * This would be ':00' for en-US if the time was '3:15:00'.
	   */
	  seconds: _propTypes2.default.string,

	  /**
	   * An optional time period to use for locales that use
	   * 12 hour clocks and AM/PM.
	   */
	  timePeriod: _propTypes2.default.string,

	  /**
	   * A boolean that if true, seconds are displayed
	   */
	  showSeconds: _propTypes2.default.bool
	};
	exports.default = TimePickerHeader;

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _addHours = __webpack_require__(474);

	var _addHours2 = _interopRequireDefault(_addHours);

	var _PickerControl = __webpack_require__(454);

	var _PickerControl2 = _interopRequireDefault(_PickerControl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This component displays a section for switching between the AM
	 * and PM time periods.
	 */
	var TimePeriods = function (_PureComponent) {
	  _inherits(TimePeriods, _PureComponent);

	  function TimePeriods() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, TimePeriods);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._setAM = function () {
	      if (_this.props.timePeriod !== 'AM') {
	        _this.props.setTempTime((0, _addHours2.default)(_this.props.tempTime, -12));
	      }
	    }, _this._setPM = function () {
	      if (_this.props.timePeriod !== 'PM') {
	        _this.props.setTempTime((0, _addHours2.default)(_this.props.tempTime, 12));
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  TimePeriods.prototype.render = function render() {
	    var timePeriod = this.props.timePeriod;

	    return _react2.default.createElement(
	      'div',
	      { className: 'md-time-periods' },
	      _react2.default.createElement(
	        _PickerControl2.default,
	        { onClick: this._setAM, active: timePeriod === 'AM' },
	        _react2.default.createElement(
	          'h6',
	          { className: 'md-time-period' },
	          'AM'
	        )
	      ),
	      _react2.default.createElement(
	        _PickerControl2.default,
	        { onClick: this._setPM, active: timePeriod === 'PM' },
	        _react2.default.createElement(
	          'h6',
	          { className: 'md-time-period' },
	          'PM'
	        )
	      )
	    );
	  };

	  return TimePeriods;
	}(_react.PureComponent);

	TimePeriods.propTypes = {
	  /**
	   * The current time for the time picker.
	   */
	  tempTime: _propTypes2.default.instanceOf(Date).isRequired,

	  /**
	   * A function to update the time for the time picker.
	   */
	  setTempTime: _propTypes2.default.func.isRequired,

	  /**
	   * The current time period.
	   */
	  timePeriod: _propTypes2.default.string.isRequired
	};
	exports.default = TimePeriods;

/***/ }),
/* 474 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = addHours;
	/** @module utils/DateUtils/addHours */

	/**
	 * Adds hours to a date.
	 *
	 * @param {Date} time the time to increment
	 * @param {number} hours the number of hours to increment by.
	 * @return a new Date with the new hours set.
	 */
	function addHours(time, hours) {
	  var t = new Date(time.getTime());
	  t.setHours(t.getHours() + hours);
	  return t;
	}

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _between = __webpack_require__(257);

	var _between2 = _interopRequireDefault(_between);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * There are 3 different types of linear progress bars: `Determinate`,
	 * `Indeterminate`, and `Query Indeterminate`.
	 *
	 * A `Determinate` linear progress bar should be used when you can keep track of the
	 * progress and have a percentage complete you can work with. An example would be
	 * uploading/downloading a file.
	 *
	 * An `Indeterminate` linear progress bar should be used when you can not keep track
	 * of the progress yourself. An example might be waiting for an API call to complete.
	 *
	 * A `Query Indeterminate` linear progress bar is used when you are combining
	 * `Indeterminate` and `Determinate`. A Linear Progress component can be displayed
	 * as a query indeterminate progress bar by adding the prop `query={true}` to the
	 * component. Until a progress value is given, it will display the query linear
	 * progress animation. Afterwards, it will start the determinate animation of where
	 * you manually keep updating the value of the progress.
	 */
	var LinearProgress = function (_PureComponent) {
	  _inherits(LinearProgress, _PureComponent);

	  function LinearProgress() {
	    _classCallCheck(this, LinearProgress);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  /* eslint-disable max-len */
	  LinearProgress.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        progressClassName = _props.progressClassName,
	        progressStyle = _props.progressStyle,
	        value = _props.value,
	        query = _props.query,
	        centered = _props.centered,
	        props = _objectWithoutProperties(_props, ['className', 'progressClassName', 'progressStyle', 'value', 'query', 'centered']);

	    var isDeterminate = typeof value === 'number';

	    var accessibilityProps = {
	      role: 'progressbar',
	      'aria-valuemin': 0,
	      'aria-valuemax': 100
	    };

	    var style = void 0;
	    if (isDeterminate) {
	      style = { width: value + '%' };
	      accessibilityProps['aria-valuenow'] = value;
	    }
	    if (progressStyle) {
	      style = Object.assign(style || {}, typeof progressStyle === 'function' ? progressStyle(value, this) : progressStyle);
	    }

	    return _react2.default.createElement(
	      'div',
	      _extends({}, props, {
	        className: (0, _classnames2.default)('md-progress md-progress--linear', { 'md-block-centered': centered }, className)
	      }),
	      _react2.default.createElement('div', _extends({}, accessibilityProps, {
	        style: style,
	        className: (0, _classnames2.default)('md-progress--linear-active', {
	          'md-progress--linear-query': query,
	          'md-progress--linear-determinate': isDeterminate,
	          'md-progress--linear-indeterminate': !isDeterminate
	        }, typeof progressClassName === 'function' ? progressClassName(value, this) : progressClassName)
	      }))
	    );
	  };

	  return LinearProgress;
	}(_react.PureComponent);

	LinearProgress.propTypes = {
	  /**
	   * The `id` prop is required for accessibility concerns.
	   * [Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)
	   *
	   * > If the progressbar is describing the loading progress of a particular region of a page, the author
	   * __SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the
	   * region until it is finished loading. It is not possible for the user to alter the value of a progressbar
	   * because it is always readonly.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /* eslint-enable max-len */
	  /**
	   * An optional className to apply to the linear progress container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional className to apply to the progress bar element.
	   *
	   * If a function is specified it will be called to get necessary className.
	   * Current progress value and reference to the component will be passed into the function.
	   */
	  progressClassName: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the progress bar element.
	   *
	   * If a function is specified it will be called to get necessary style.
	   * Current progress value and reference to the component will be passed into the function.
	   */
	  progressStyle: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object]),

	  /**
	   * The current value of the progress. If this value is defined, it will
	   * be converted to a determinate circular progress. The progress will not
	   * advance unless this value changes.
	   *
	   * This value should also be a number between 0 and 100.
	   */
	  value: (0, _between2.default)(_propTypes2.default.number, 0, 100),

	  /**
	   * Boolean if this should be a query indeterminate progress bar.
	   */
	  query: _propTypes2.default.bool,

	  /**
	   * Boolean if the Linear Progress should be centered. This
	   * will only work if the `max-width` style is set.
	   */
	  centered: _propTypes2.default.bool
	};
	LinearProgress.defaultProps = {
	  query: false
	};
	exports.default = LinearProgress;

/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _keyCodes = __webpack_require__(279);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _minMaxLoop = __webpack_require__(477);

	var _minMaxLoop2 = _interopRequireDefault(_minMaxLoop);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _SelectionControl = __webpack_require__(390);

	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * A custom PropTypes validator to make sure that each `control` in the `controls` prop
	 * contains the given `propName`, or the `SelectionControlGroup` has defined that prop.
	 */
	function requiredByAllControls(validator) {
	  return function validate(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }

	    var err = validator.apply(undefined, [props, propName, component].concat(others));

	    if (!err && typeof props[propName] === 'undefined') {
	      var invalids = props.controls.filter(function (c) {
	        return !c[propName];
	      }).map(function (_, i) {
	        return i;
	      });
	      if (invalids.length) {
	        var invalidPrefix = invalids.length === props.controls.length ? 'All `controls`' : 'The `controls` at indexes `' + invalids.join('`, `') + '`';
	        var invalidMsg = invalidPrefix + ' are missing the `' + propName + '` prop.';

	        err = new Error('The `' + propName + '` prop is required to make `' + component + '` accessible for users of ' + ('assistive technologies such as screen readers. Either add the `' + propName + '` to the `' + component + '` ') + ('or add the `' + propName + '` to each `control` in the `controls` prop. ' + invalidMsg));
	      }
	    }

	    return err;
	  };
	}

	/**
	 * The `SelectionControlGroup` component is used to simplify the generation of a list
	 * of `SelectionControl`. Any common props are extracted to this component and passed
	 * to the `SelectionControl`.
	 */

	var SelectionControlGroup = function (_PureComponent) {
	  _inherits(SelectionControlGroup, _PureComponent);

	  function SelectionControlGroup(props) {
	    _classCallCheck(this, SelectionControlGroup);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._setGroup = function (group) {
	      _this._group = group;
	    };

	    _this._handleChange = function (e) {
	      var value = e.target.value;
	      if (_this.props.type === 'checkbox') {
	        var checked = e.target.checked;

	        var currentValue = (0, _getField2.default)(_this.props, _this.state, 'value');
	        var existsIndex = currentValue.indexOf(value);
	        if (existsIndex === -1 && checked) {
	          value = '' + (currentValue ? currentValue + ',' : '') + value;
	        } else if (existsIndex > -1 && !checked) {
	          value = currentValue.replace(new RegExp(value + ',?'), '');
	        } else {
	          value = currentValue;
	        }
	      }

	      if (_this.props.onChange) {
	        _this.props.onChange(value, e);
	      }

	      if (typeof _this.props.value === 'undefined') {
	        _this.setState({ value: value });
	      }
	    };

	    _this._handleKeyDown = function (e) {
	      if (_this.props.onKeyDown) {
	        _this.props.onKeyDown(e);
	      }

	      var key = e.which || e.keyCode;
	      var dec = key === _keyCodes.UP || key === _keyCodes.LEFT;
	      var inc = key === _keyCodes.DOWN || key === _keyCodes.RIGHT;
	      if (!_this._group || !dec && !inc) {
	        return;
	      }

	      e.preventDefault();
	      var radios = _this._group.querySelectorAll('*[role="radio"]');
	      _this._activeIndex = (0, _minMaxLoop2.default)(_this._activeIndex, 0, radios.length - 1, inc);
	      radios[_this._activeIndex].focus();
	      var value = _this.props.controls[_this._activeIndex].value;

	      if ((0, _getField2.default)(_this.props, _this.state, 'value') !== value) {
	        if (_this.props.onChange) {
	          _this.props.onChange(value, e);
	        }

	        if (typeof _this.props.value === 'undefined') {
	          _this.setState({ value: value });
	        }
	      }
	    };

	    var radio = props.type === 'radio';
	    _this.state = {};

	    if (typeof props.value === 'undefined') {
	      var value = props.defaultValue;

	      if (typeof value === 'undefined') {
	        value = radio ? props.controls[0].value : '';
	      }

	      _this.state.value = value;
	    }

	    var groupValue = (0, _getField2.default)(props, _this.state, 'value');
	    _this._activeIndex = -1;
	    props.controls.some(function (_ref, i) {
	      var value = _ref.value;

	      if (value === groupValue) {
	        _this._activeIndex = i;
	      }

	      return _this._activeIndex > -1;
	    });
	    return _this;
	  }

	  SelectionControlGroup.prototype._isChecked = function _isChecked(value, controlValue, type) {
	    return type === 'radio' ? value === controlValue : value.split(',').indexOf(controlValue) !== -1;
	  };

	  SelectionControlGroup.prototype.render = function render() {
	    var _this2 = this;

	    var _props = this.props,
	        id = _props.id,
	        name = _props.name,
	        type = _props.type,
	        label = _props.label,
	        labelClassName = _props.labelClassName,
	        className = _props.className,
	        controlStyle = _props.controlStyle,
	        controlClassName = _props.controlClassName,
	        Component = _props.component,
	        LabelComponent = _props.labelComponent,
	        inline = _props.inline,
	        disabled = _props.disabled,
	        checkedRadioIcon = _props.checkedRadioIcon,
	        uncheckedRadioIcon = _props.uncheckedRadioIcon,
	        checkedCheckboxIcon = _props.checkedCheckboxIcon,
	        uncheckedCheckboxIcon = _props.uncheckedCheckboxIcon,
	        ControlComponent = _props.controlComponent,
	        propValue = _props.value,
	        propControls = _props.controls,
	        defaultValue = _props.defaultValue,
	        props = _objectWithoutProperties(_props, ['id', 'name', 'type', 'label', 'labelClassName', 'className', 'controlStyle', 'controlClassName', 'component', 'labelComponent', 'inline', 'disabled', 'checkedRadioIcon', 'uncheckedRadioIcon', 'checkedCheckboxIcon', 'uncheckedCheckboxIcon', 'controlComponent', 'value', 'controls', 'defaultValue']);

	    var value = (0, _getField2.default)(this.props, this.state, 'value');
	    var radio = type === 'radio';

	    var controls = this.props.controls.map(function (control, i) {
	      var style = control.style;
	      if (controlStyle) {
	        style = style ? _extends({}, controlStyle, style) : controlStyle;
	      }

	      var checked = _this2._isChecked(value, control.value, type);
	      var controlProps = _extends({
	        id: '' + id + i,
	        key: 'control' + i,
	        name: '' + name + (type === 'checkbox' ? '[]' : ''),
	        type: type,
	        inline: inline,
	        disabled: disabled,
	        checked: checked,
	        tabIndex: !radio || checked || i === 0 && _this2._activeIndex === -1 ? undefined : -1,
	        checkedRadioIcon: checkedRadioIcon,
	        uncheckedRadioIcon: uncheckedRadioIcon,
	        checkedCheckboxIcon: checkedCheckboxIcon,
	        uncheckedCheckboxIcon: uncheckedCheckboxIcon,
	        'aria-describedby': id + '-group-label'
	      }, control, {
	        style: style,
	        className: (0, _classnames2.default)(controlClassName, control.className)
	      });

	      return _react2.default.createElement(ControlComponent, controlProps);
	    });

	    var ariaLabel = void 0;
	    if (label) {
	      ariaLabel = _react2.default.createElement(
	        LabelComponent,
	        { className: labelClassName, id: id + '-group-label' },
	        label
	      );
	    }

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        ref: this._setGroup,
	        className: (0, _classnames2.default)('md-selection-control-group', className),
	        onChange: this._handleChange,
	        onKeyDown: radio ? this._handleKeyDown : null
	      }),
	      ariaLabel,
	      controls
	    );
	  };

	  return SelectionControlGroup;
	}(_react.PureComponent);

	SelectionControlGroup.propTypes = {
	  /**
	   * An optional style to apply to the container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to every `SelectionControl`. This will be merged with any `style`
	   * that a `control` might have.
	   */
	  controlStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to every `SelectionControl`. This will be merged with any
	   * `className` that a `control` might have.
	   */
	  controlClassName: _propTypes2.default.string,

	  /**
	   * An optional base id to apply to each `SelectionControl`. When this is included, the id for
	   * each control will start with this and end with their current index. If this is omitted,
	   * each `control` in the `controls` prop *must* have an `id` prop. This is required for
	   * accessibility.
	   */
	  id: requiredByAllControls(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * The type to apply to each `SelectionControl` in the group. Only `checkbox` and `radio` is
	   * valid for a grouping.
	   */
	  type: _propTypes2.default.oneOf(['checkbox', 'radio']).isRequired,

	  /**
	   * The component to render the `SelectionControlGroup` in. This can only be a valid dom element
	   * since it relies on the ref callback to add keyboard accessibility.
	   */
	  component: _propTypes2.default.string.isRequired,

	  /**
	   * An optional label to display above the group of `SelectionControl`s.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * An optional className to apply to the node surrounding the `label` prop.
	   */
	  labelClassName: _propTypes2.default.string,

	  /**
	   * The component to render each item in the `controls` list as. By default, this will be the
	   * `SelectionControl` component but you can change this to any React component that accepts
	   * the selection control props. It is currently provided:
	   *
	   * ```js
	   * const controlProps = {
	   *   id: `${id}${i}`,
	   *   key: `control${i}`,
	   *   name: `${name}${type === 'checkbox' ? '[]' : ''}`,
	   *   type,
	   *   inline,
	   *   disabled,
	   *   checked,
	   *   tabIndex: !radio || checked || (i === 0 && this._activeIndex === -1) ? undefined : -1,
	   *   checkedRadioIcon,
	   *   uncheckedRadioIcon,
	   *   checkedCheckboxIcon,
	   *   uncheckedCheckboxIcon,
	   *   ...control,
	   *   style,
	   *   className: cn(controlClassName, control.className),
	   * };
	   * ```
	   */
	  controlComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * The component to render the optional `label` in.
	   */
	  labelComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

	  /**
	   * An optional function to call when any `SelectionControl`'s `checked` state is changed
	   * in the group. If the `type` of the group is `radio`, the `value` of the `checked` radio
	   * will be given in the callback. If the `type` of the group is `checkbox`, a comma-delimited
	   * string of all `checked` checkboxes values will be given.
	   *
	   * ```js
	   * // checkbox
	   * onChange('Alpha,Omega', changeEvent);
	   *
	   * // radio
	   * onChange('Omega', changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * A name to use for each `SelectionControl` in the group. If the `type` of the group is
	   * `checkbox`, the name will be updated to be an array name so that using
	   * `document.querySelector('input[name="yourName[]"].value` will give the comma-delimited
	   * string of checked checkboxes.
	   *
	   * It is either required to have this prop set or every `control` in the `controls` prop to
	   * have the `name` prop.
	   */
	  name: requiredByAllControls(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * The default value for the `SelectionControlGroup`. This can either be a single value
	   * or a comma-delimited string of checkbox values. When the `type` of the group is `radio`
	   * and the group is uncontrolled, it is recommended to set this prop. Otherwise the first
	   * value of the `controls` prop will be used as the default value.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional value to use for the `SelectionControlGroup`. This will make the component
	   * controlled and require the `onChange` prop to be defined. Like the `defaultValue`, this
	   * can either be a single value or a comma-delimited list of checkbox values.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]), 'onChange'),

	  /**
	   * A list of objects to create the `SelectionControl` components. The shape of the object
	   * is the `propTypes` of the `SelectionControl` component, except that `value` prop is
	   * now required.
	   *
	   * The `SelectionControl` will inherit any inheritable props from the `SelectionControlGroup`.
	   */
	  controls: _propTypes2.default.arrayOf(_propTypes2.default.shape({
	    key: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    label: _propTypes2.default.node.isRequired,
	    value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]).isRequired
	  })).isRequired,

	  /**
	   * Boolean if the `SelectionControl` should be displayed inline.
	   */
	  inline: _propTypes2.default.bool,

	  /**
	   * Boolean if all the selection controls in the group are disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional function to call when the keydown event is triggered.
	   */
	  onKeyDown: _propTypes2.default.func,

	  /**
	   * An icon to use for a checked `radio` control. This will be applied to each
	   * control that has a `type="radio"` in the `controls` list. This is just a simpler
	   * way of applying the custom icons for each radio in the list.
	   *
	   * This will default to the `checkedRadioIcon` on the `SelectionControl`.
	   *
	   * @see {@link #controls}
	   * @see {@link #uncheckedRadioIcon}
	   * @see {@link SelectionControls/SelectionControls#checkedRadioIcon}
	   * @see {@link SelectionControls/SelectionControls#uncheckedRadioIcon}
	   */
	  checkedRadioIcon: _propTypes2.default.node,

	  /**
	   * An icon to use for an unchecked `radio` control. This will be applied to each
	   * control that has a `type="radio"` in the `controls` list. This is just a simpler
	   * way of applying the custom icons for each radio in the list.
	   *
	   * This will default to the `uncheckedRadioIcon` on the `SelectionControl`.
	   *
	   * @see {@link #controls}
	   * @see {@link #checkedRadioIcon}
	   * @see {@link SelectionControls/SelectionControls#checkedRadioIcon}
	   * @see {@link SelectionControls/SelectionControls#uncheckedRadioIcon}
	   */
	  uncheckedRadioIcon: _propTypes2.default.node,

	  /**
	   * An icon to use for a checked `checkbox` control. This will be applied to each
	   * control that has a `type="checkbox"` in the `controls` list. This is just a simpler
	   * way of applying the custom icons for each checkbox in the list.
	   *
	   * This will default to the `checkedCheckboxIcon` on the `SelectionControl`.
	   *
	   * @see {@link #controls}
	   * @see {@link #uncheckedCheckboxIcon}
	   * @see {@link SelectionControls/SelectionControls#checkedCheckboxIcon}
	   * @see {@link SelectionControls/SelectionControls#uncheckedCheckboxIcon}
	   */
	  checkedCheckboxIcon: _propTypes2.default.node,

	  /**
	   * An icon to use for an unchecked `checkbox` control. This will be applied to each
	   * control that has a `type="checkbox"` in the `controls` list. This is just a simpler
	   * way of applying the custom icons for each checkbox in the list.
	   *
	   * This will default to the `uncheckedCheckboxIcon` on the `SelectionControl`.
	   *
	   * @see {@link #controls}
	   * @see {@link #checkedCheckboxIcon}
	   * @see {@link SelectionControls/SelectionControls#checkedCheckboxIcon}
	   * @see {@link SelectionControls/SelectionControls#uncheckedCheckboxIcon}
	   */
	  uncheckedCheckboxIcon: _propTypes2.default.node
	};
	SelectionControlGroup.defaultProps = {
	  component: 'fieldset',
	  labelComponent: 'legend',
	  labelClassName: 'md-subheading-1',
	  controlComponent: _SelectionControl2.default
	};
	exports.default = SelectionControlGroup;

/***/ }),
/* 477 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = minMaxLoop;
	/** @module utils/NumberUtils/minMaxLoop */

	/**
	 * Keeps a number within the min and max values. When the number becomes less
	 * than the min, it will loop around and be the max value. When the number is
	 * greater than the max, it will loop around and be the min value.
	 *
	 * @param {Number} current - the current number
	 * @param {Number} min - the minimum number allowed
	 * @param {Number} max - the maximum number allowed
	 * @param {Boolean} increment - boolean if the value should be incremented or decremented by
	 *    1.
	 * @return {Number} the next number
	 */
	function minMaxLoop(current, min, max) {
	  var increment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

	  var next = current + (increment ? 1 : -1);
	  if (max < next) {
	    next = min;
	  } else if (next < min) {
	    next = max;
	  }

	  return next;
	}

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _SelectionControl = __webpack_require__(390);

	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Checkbox` component is used for the selection of multiple options from a set.
	 */
	var Checkbox = function (_PureComponent) {
	  _inherits(Checkbox, _PureComponent);

	  function Checkbox() {
	    _classCallCheck(this, Checkbox);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Checkbox.prototype.render = function render() {
	    var _props = this.props,
	        checkedIcon = _props.checkedIcon,
	        uncheckedIcon = _props.uncheckedIcon,
	        checkedIconChildren = _props.checkedIconChildren,
	        checkedIconClassName = _props.checkedIconClassName,
	        uncheckedIconChildren = _props.uncheckedIconChildren,
	        uncheckedIconClassName = _props.uncheckedIconClassName,
	        props = _objectWithoutProperties(_props, ['checkedIcon', 'uncheckedIcon', 'checkedIconChildren', 'checkedIconClassName', 'uncheckedIconChildren', 'uncheckedIconClassName']);

	    var checked = (0, _getDeprecatedIcon2.default)(checkedIconClassName, checkedIconChildren, checkedIcon);
	    var unchecked = (0, _getDeprecatedIcon2.default)(uncheckedIconClassName, uncheckedIconChildren, uncheckedIcon);

	    return _react2.default.createElement(_SelectionControl2.default, _extends({
	      type: 'checkbox',
	      checkedCheckboxIcon: checked,
	      uncheckedCheckboxIcon: unchecked,
	      __superSecreteProp: true
	    }, props));
	  };

	  return Checkbox;
	}(_react.PureComponent);

	Checkbox.propTypes = {
	  /**
	   * An id to use with the checkbox. This is used for accessibility and so that the label
	   * triggers the checkbox toggle.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),

	  /**
	   * An optional style to apply to the checkbox's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the checkbox's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * A label to display with the checkbox. This is required for accessibility and triggering
	   * the toggle.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * Boolean if the label should appear before the checkbox icon.
	   */
	  labelBefore: _propTypes2.default.bool,

	  /**
	   * A name to use for the `Checkbox`. This is required for accessibility. If the checkbox is
	   * part of a group, it is recommended to make this a string ending in `[]` so that the
	   * value can be found from `document.querySelector('input[name="someName[]"]').value`.
	   */
	  name: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * Boolean if the `Checkbox` is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional function to call when the `checked` state of the `Checkbox` changes.
	   * The callback will include the new checked state and the changeEvent.
	   *
	   * ```js
	   * onChange(changeEvent.target.checked, changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * An optional value for the `Checkbox`. It is recommended to use a value though.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * Boolean if the `Checkbox` is checked by default.
	   */
	  defaultChecked: _propTypes2.default.bool,

	  /**
	   * A boolean if the `Checkbox` is currently checked. This will required the `onChange` prop
	   * to be defined.
	   */
	  checked: (0, _controlled2.default)(_propTypes2.default.bool, 'onChange', 'defaultChecked'),

	  /**
	   * Boolean if the `Checkbox` should be displayed inline.
	   */
	  inline: _propTypes2.default.bool,

	  /**
	   * The icon to display when the checkbox is checked.
	   */
	  checkedIcon: _propTypes2.default.node,

	  /**
	   * The icon to display when the checkbox is unchecked.
	   */
	  uncheckedIcon: _propTypes2.default.node,

	  checkedIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `checkedIcon` instead'),
	  checkedIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `checkedIcon` instead'),
	  uncheckedIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `uncheckedIcon` instead'),
	  uncheckedIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `uncheckedIcon` instead')
	};
	Checkbox.defaultProps = {
	  checkedIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'check_box'
	  ),
	  uncheckedIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'check_box_outline_blank'
	  )
	};
	exports.default = Checkbox;

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _SelectionControl = __webpack_require__(390);

	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Radio` component is used for the selection of a single option from a set. Unfortunately
	 * the `Radio` component must always be controlled because of the `FontIcon` toggles and how
	 * the `radio` input type works. It is recommended to use the `SelectionControlGroup` component
	 * to manage the `radio`.
	 */
	var Radio = function (_PureComponent) {
	  _inherits(Radio, _PureComponent);

	  function Radio() {
	    _classCallCheck(this, Radio);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Radio.prototype.render = function render() {
	    var _props = this.props,
	        checkedIcon = _props.checkedIcon,
	        uncheckedIcon = _props.uncheckedIcon,
	        checkedIconChildren = _props.checkedIconChildren,
	        checkedIconClassName = _props.checkedIconClassName,
	        uncheckedIconChildren = _props.uncheckedIconChildren,
	        uncheckedIconClassName = _props.uncheckedIconClassName,
	        props = _objectWithoutProperties(_props, ['checkedIcon', 'uncheckedIcon', 'checkedIconChildren', 'checkedIconClassName', 'uncheckedIconChildren', 'uncheckedIconClassName']);

	    var checked = (0, _getDeprecatedIcon2.default)(checkedIconClassName, checkedIconChildren, checkedIcon);
	    var unchecked = (0, _getDeprecatedIcon2.default)(uncheckedIconClassName, uncheckedIconChildren, uncheckedIcon);

	    return _react2.default.createElement(_SelectionControl2.default, _extends({
	      type: 'radio',
	      checkedCheckboxIcon: checked,
	      uncheckedCheckboxIcon: unchecked,
	      __superSecreteProp: true
	    }, props));
	  };

	  return Radio;
	}(_react.PureComponent);

	Radio.propTypes = {
	  /**
	   * An id to use with the radio. This is used for accessibility and so that the label
	   * triggers the radio toggle.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),

	  /**
	   * An optional style to apply to the radio's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the radio's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * A label to display with the radio. This is required for accessibility and triggering
	   * the toggle.
	   */
	  label: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the label should appear before the radio icon.
	   */
	  labelBefore: _propTypes2.default.bool,

	  /**
	   * A name to use for the `Radio`. This is required for accessibility.
	   */
	  name: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * Boolean if the `Radio` is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * A function to call when the `Radio` triggers the `change` event. The `onChange` callback
	   * will include the current value of the checked `radio` and the change event.
	   *
	   * ```js
	   * onChange(changeEvent.target.value, changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * The value for the `Radio` component.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]).isRequired,

	  /**
	   * A boolean if the `Radio` is currently checked.
	   */
	  checked: _propTypes2.default.bool.isRequired,

	  /**
	   * Boolean if the `Radio` should be displayed inline.
	   */
	  inline: _propTypes2.default.bool,

	  /**
	   * The icon to display when the radio is checked/selected.
	   */
	  checkedIcon: _propTypes2.default.node.isRequired,

	  /**
	   * The icon to display when the radio is not checked/selected.
	   */
	  uncheckedIcon: _propTypes2.default.node.isRequired,
	  checkedIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `checkedIcon` instead'),
	  checkedIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `checkedIcon` instead'),
	  uncheckedIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `uncheckedIcon` instead'),
	  uncheckedIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `uncheckedIcon` instead')
	};
	Radio.defaultProps = {
	  checkedIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'radio_button_checked'
	  ),
	  uncheckedIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'radio_button_unchecked'
	  )
	};
	exports.default = Radio;

/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _SelectionControl = __webpack_require__(390);

	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Switch = function (_PureComponent) {
	  _inherits(Switch, _PureComponent);

	  function Switch() {
	    _classCallCheck(this, Switch);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Switch.prototype.render = function render() {
	    var _props = this.props,
	        toggled = _props.toggled,
	        defaultToggled = _props.defaultToggled,
	        props = _objectWithoutProperties(_props, ['toggled', 'defaultToggled']);

	    if (typeof toggled !== 'undefined' && typeof props.checked === 'undefined') {
	      props.checked = toggled;
	    }

	    if (typeof defaultToggled !== 'undefined' && typeof props.defaultChecked === 'undefined') {
	      props.defaultChecked = defaultToggled;
	    }

	    return _react2.default.createElement(_SelectionControl2.default, _extends({ type: 'switch' }, props, { __superSecreteProp: true }));
	  };

	  return Switch;
	}(_react.PureComponent);

	Switch.propTypes = {
	  /**
	   * An id to use with the switch. This is used for accessibility and so that the label
	   * triggers the switch toggle.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),

	  /**
	   * An optional style to apply to the switch's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the switch's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * A label to display with the switch. This is required for accessibility and triggering
	   * the toggle.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * Boolean if the label should appear before the switch.
	   */
	  labelBefore: _propTypes2.default.bool,

	  /**
	   * A name to use for the `Switch`. This is required for accessibility since behind the scenes
	   * the `Switch` is renders as an `<input type="checkbox" />`.
	   */
	  name: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * Boolean if the `Switch` is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional function to call when the `checked` state of the `Switch` changes.
	   * The callback will include the new checked state and the changeEvent.
	   *
	   * ```js
	   * onChange(changeEvent.target.checked, changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * An optional value for the `Switch`. It is recommended to use a value though.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * Boolean if the `Switch` is checked by default.
	   */
	  defaultChecked: _propTypes2.default.bool,

	  /**
	   * A boolean if the `Switch` is currently checked. This will required the `onChange` prop
	   * to be defined.
	   */
	  checked: (0, _controlled2.default)(_propTypes2.default.bool, 'onChange', 'defaultChecked'),

	  defaultToggled: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use the `defaultChecked` prop instead'),
	  toggled: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use the `checked` prop instead')
	};
	exports.default = Switch;

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _keyCodes = __webpack_require__(279);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _isValidClick = __webpack_require__(294);

	var _isValidClick2 = _interopRequireDefault(_isValidClick);

	var _touches = __webpack_require__(295);

	var _calculateValueDistance = __webpack_require__(482);

	var _calculateValueDistance2 = _interopRequireDefault(_calculateValueDistance);

	var _isWithinStep = __webpack_require__(483);

	var _isWithinStep2 = _interopRequireDefault(_isWithinStep);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _SliderLabel = __webpack_require__(484);

	var _SliderLabel2 = _interopRequireDefault(_SliderLabel);

	var _Track = __webpack_require__(485);

	var _Track2 = _interopRequireDefault(_Track);

	var _TextField = __webpack_require__(359);

	var _TextField2 = _interopRequireDefault(_TextField);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Slider` component is used to let users select a value from a continuous
	 * or discrete range of values by moving the slider thumb.
	 *
	 * When the user has finished dragging the Slider or increments the value by using
	 * the edit field/keyboard arrows, the value will be rounded to the nearest `step`.
	 */
	var Slider = function (_PureComponent) {
	  _inherits(Slider, _PureComponent);

	  function Slider(props) {
	    _classCallCheck(this, Slider);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var min = props.min,
	        max = props.max,
	        step = props.step;

	    var scale = Math.abs(max - min) / step;

	    var value = typeof props.value !== 'undefined' ? props.value : props.defaultValue;

	    if (typeof value === 'undefined') {
	      value = min;
	    }

	    var distance = _this._calcDistance(value, min, max);
	    var thumbLeft = _this._calcLeft(distance);
	    var trackFillWidth = distance + '%';

	    if (typeof props.value !== 'undefined') {
	      value = undefined;
	    }

	    var trackWidth = void 0;
	    if (props.label && !props.editable && !props.leftIcon && !props.rightIcon) {
	      trackWidth = '100%';
	    }

	    _this.state = {
	      value: value,
	      scale: scale,
	      distance: distance,
	      thumbLeft: thumbLeft,
	      trackWidth: trackWidth,
	      trackFillWidth: trackFillWidth,
	      active: false,
	      dragging: false,
	      maskInked: false
	    };
	    _this._dragAdded = false;
	    return _this;
	  }

	  Slider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        leftIcon = _props.leftIcon,
	        rightIcon = _props.rightIcon,
	        label = _props.label,
	        min = _props.min,
	        max = _props.max,
	        step = _props.step,
	        value = _props.value;

	    if (value !== nextProps.value) {
	      var distance = this._calcDistance(nextProps.value, nextProps.min, nextProps.max);
	      this.setState({ distance: distance, trackFillWidth: distance + '%', thumbLeft: this._calcLeft(distance) });
	    }

	    if (leftIcon !== nextProps.leftIcon || rightIcon !== nextProps.rightIcon || label !== nextProps.label) {
	      this._calcTrackWidth(nextProps);
	    }

	    if (min !== nextProps.min || max !== nextProps.max || step !== nextProps.step) {
	      this.setState({ scale: Math.abs(nextProps.max - nextProps.min) / nextProps.step });
	    }
	  };

	  Slider.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
	    var _state = this.state,
	        active = _state.active,
	        manualIncrement = _state.manualIncrement;

	    var fn = window[(active ? 'add' : 'remove') + 'EventListener'];
	    if (active !== prevState.active) {
	      fn('click', this._blurOnOutsideClick);

	      if (active) {
	        this._focusThumb();
	      }
	    }

	    var addDrag = active && !manualIncrement;
	    fn = window[(addDrag ? 'add' : 'remove') + 'EventListener'];
	    if (this._dragAdded !== addDrag) {
	      fn('mousemove', this._handleDragMove);
	      fn('mouseup', this._handleDragEnd);
	      (0, _touches.setTouchEvent)(addDrag, window, 'move', this._handleDragMove);
	      (0, _touches.setTouchEvent)(addDrag, window, 'end', this._handleDragEnd);

	      this._dragAdded = addDrag;
	    }
	  };

	  Slider.prototype.componentWillUnmount = function componentWillUnmount() {
	    var rm = window.removeEventListener;
	    rm('click', this._blurOnOutsideClick);
	    rm('mousemove', this._handleMouseMove);
	    rm('mouseup', this._handleMouseUp);
	    (0, _touches.removeTouchEvent)(window, 'move', this._handleDragMove);
	    (0, _touches.removeTouchEvent)(window, 'end', this._handleDragEnd);

	    if (this._inkTimeout) {
	      clearTimeout(this._inkTimeout);
	    }

	    if (this._focusTimeout) {
	      clearTimeout(this._focusTimeout);
	    }
	  };

	  /**
	   * Gets the `left` position for the thumb based on the value given.
	   *
	   * @param {number} value - The current value.
	   * @return {string} the `calc` string.
	   */


	  Slider.prototype._calcLeft = function _calcLeft(value) {
	    return 'calc(' + value + '% - 6px)';
	  };

	  Slider.prototype._calcDistance = function _calcDistance(value, min, max) {
	    return Math.max(0, Math.min(100, (value - min) / (max - min) * 100));
	  };

	  /**
	   * Checks if a classList does not contain all the *bad* class names.
	   *
	   * @param {function} classList - The classList to check.
	   * @return {Boolean} true if the classList does not contain any of the *bad* class names.
	   */


	  Slider.prototype._isValidClassList = function _isValidClassList(classList) {
	    var invalid = false;
	    ['md-slider-label', 'md-slider-ind', 'md-icon'].some(function (cl) {
	      invalid = classList.contains(cl);
	      return invalid;
	    });

	    return !invalid;
	  };

	  Slider.prototype._isInTextField = function _isInTextField(e) {
	    var className = e.target.className;

	    // SVG's className is an object instead of a string

	    return typeof className.match === 'function' && className.match(/text-field/);
	  };

	  /**
	   * Checks if the target is within the text field container.
	   *
	   * @param {Object} target - The event target.
	   * @return {Boolean} true if the target is in the text field.
	   */


	  /**
	   * Updates the slider's thumb position and the slider's track fill width based
	   * on the thumb's current x position on the screen.
	   *
	   * The slider distance will be *normalized* when:
	   *  - The user does a quick jump
	   *  - The user stops dragging with the mouse
	   *  - The user drops dragging with touch
	   *
	   * If the position is not *normalized*, the `onDragChange` prop will be called
	   * with the new distance percentage, the value, and the move event.
	   *
	   * The `onChange` function will always be called.
	   *
	   * @param {Object} e - The current event to extract an x location from
	   * @param {bool} normalize - Boolean if the distance should be normalized
	   *    to the current scale of the slider.
	   */


	  /**
	   * This will either allow a user to start dragging the slider or quickly
	   * jump to a new value on the slider if the slider is not disabled.
	   *
	   * This will handle the `touchstart` and `mousedown` events.
	   *
	   * @param {Object} e - The touchstart or mousedown event.
	   */


	  /**
	   * This will set the active state of the slider to false if the user
	   * clicks outside of the slider's container.
	   *
	   * @param {Object} e - The window's click event.
	   */


	  /**
	   * Updates the slider with the `step` prop and calls the `onChange`
	   * function with the new value.
	   *
	   * @param {number} incrementedValue - The newly incremented value of the slider.
	   * @param {Object} e - Either the text field's change event, mouse down event, or
	   *    touch start event.
	   * @param {bool} disableTransition - Boolean if the jump's transition should be disabled.
	   */


	  /**
	   * This will increment the Slider's value by the `step` prop. If the left or
	   * right key arrow is pressed.
	   *
	   * @param {Object} e - the keydown event.
	   */


	  /**
	   * This function will animate the discrete Slider's ink if it gains focus
	   * by a tab event.
	   *
	   * @param {Object} e - the key up event.
	   */


	  /**
	   * For some reason the width of the track gets set to 0 if the `Slider` has a label and
	   * does not include the `leftIcon`, `rightIcon`, and is not `editable` OR it is
	   * `editable` and does not include the `leftIcon`. All other cases the width works
	   * correctly.
	   *
	   * This function just checks these things, and sets the width accordingly.
	   */


	  /**
	   * The ink for a Discrete slider is only visible for a short time on initial
	   * focus. This function will handle the in/out transitions.
	   */


	  /**
	   * This is a helper function for focusing the Slider's thumb component. There
	   * is a short delay because the body sometimes gets focused immediately after
	   * if there is no timeout..
	   */


	  Slider.prototype.render = function render() {
	    var _state2 = this.state,
	        dragging = _state2.dragging,
	        active = _state2.active,
	        thumbLeft = _state2.thumbLeft,
	        trackFillWidth = _state2.trackFillWidth,
	        maskInked = _state2.maskInked,
	        trackWidth = _state2.trackWidth,
	        scale = _state2.scale,
	        distance = _state2.distance;

	    var _props2 = this.props,
	        id = _props2.id,
	        min = _props2.min,
	        max = _props2.max,
	        disabled = _props2.disabled,
	        className = _props2.className,
	        trackStyle = _props2.trackStyle,
	        trackClassName = _props2.trackClassName,
	        thumbStyle = _props2.thumbStyle,
	        thumbClassName = _props2.thumbClassName,
	        discreteValueStyle = _props2.discreteValueStyle,
	        discreteValueClassName = _props2.discreteValueClassName,
	        label = _props2.label,
	        editable = _props2.editable,
	        step = _props2.step,
	        inputWidth = _props2.inputWidth,
	        leftIcon = _props2.leftIcon,
	        rightIcon = _props2.rightIcon,
	        discrete = _props2.discrete,
	        discreteTicks = _props2.discreteTicks,
	        tickWidth = _props2.tickWidth,
	        valuePrecision = _props2.valuePrecision,
	        propValue = _props2.value,
	        onChange = _props2.onChange,
	        onDragChange = _props2.onDragChange,
	        discreteInkTransitionTime = _props2.discreteInkTransitionTime,
	        stepPrecision = _props2.stepPrecision,
	        props = _objectWithoutProperties(_props2, ['id', 'min', 'max', 'disabled', 'className', 'trackStyle', 'trackClassName', 'thumbStyle', 'thumbClassName', 'discreteValueStyle', 'discreteValueClassName', 'label', 'editable', 'step', 'inputWidth', 'leftIcon', 'rightIcon', 'discrete', 'discreteTicks', 'tickWidth', 'valuePrecision', 'value', 'onChange', 'onDragChange', 'discreteInkTransitionTime', 'stepPrecision']);

	    var value = (0, _getField2.default)(this.props, this.state);
	    var rightChildren = rightIcon;
	    if (editable) {
	      rightChildren = _react2.default.createElement(_TextField2.default, {
	        id: id + '-editor',
	        ref: this._setField,
	        type: 'number',
	        value: value,
	        inputClassName: 'md-slider-editor',
	        style: { width: inputWidth },
	        onChange: this._handleTextFieldChange,
	        step: step
	      });
	    }

	    return _react2.default.createElement(
	      'div',
	      _extends({}, props, {
	        ref: this._setNode,
	        className: (0, _classnames2.default)('md-slider-container', className, {
	          'md-pointer--hover': !disabled
	        }),
	        onMouseDown: this._handleDragStart,
	        onTouchStart: this._handleDragStart
	      }),
	      _react2.default.createElement(
	        _SliderLabel2.default,
	        { htmlFor: id },
	        label
	      ),
	      _react2.default.createElement('input', {
	        id: id,
	        type: 'range',
	        className: 'md-slider-input',
	        readOnly: true,
	        min: min,
	        max: max,
	        value: value,
	        disabled: disabled
	      }),
	      leftIcon,
	      _react2.default.createElement(_Track2.default, {
	        ref: this._setTrack,
	        style: Object.assign({}, trackStyle, { width: trackWidth }),
	        className: (0, _classnames2.default)(trackClassName, {
	          'md-slider-track--ind-left': leftIcon,
	          'md-slider-track--ind-right': rightIcon
	        }),
	        thumbStyle: thumbStyle,
	        thumbClassName: thumbClassName,
	        discreteValueStyle: discreteValueStyle,
	        discreteValueClassName: discreteValueClassName,
	        active: active,
	        dragging: dragging,
	        disabled: disabled,
	        thumbLeft: thumbLeft,
	        trackFillWidth: trackFillWidth,
	        on: !disabled && distance > 0,
	        off: distance === 0,
	        maskInked: maskInked,
	        onThumbKeyUp: this._handleKeyUp,
	        onThumbKeyDown: this._handleKeyDown,
	        onThumbFocus: this._handleFocus,
	        discrete: discrete,
	        tickWidth: tickWidth,
	        discreteTicks: discreteTicks,
	        valuePrecision: valuePrecision,
	        step: step,
	        scale: scale,
	        value: value
	      }),
	      rightChildren
	    );
	  };

	  return Slider;
	}(_react.PureComponent);

	Slider.propTypes = {
	  /**
	   * An id to use for the `Slider`. This is required if the `label` prop
	   * is defined.
	   */
	  id: function id(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }

	    if (typeof props.label === 'undefined') {
	      return _propTypes2.default.string.apply(_propTypes2.default, [props, propName, component].concat(others));
	    }

	    return (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])).apply(undefined, [props, propName, component].concat(others));
	  },

	  /**
	   * An optional style to apply to the slider's container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the slider's container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the slider's thumb.
	   */
	  thumbStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the slider's thumb.
	   */
	  thumbClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the slider's track.
	   */
	  trackStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the slider's track.
	   */
	  trackClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the slider's track fill.
	   */
	  trackFillStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the slider's track fill.
	   */
	  trackFillClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to a discrete slider's value.
	   */
	  discreteValueStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to a discrete slider's value.
	   */
	  discreteValueClassName: _propTypes2.default.string,

	  /**
	   * The default value for the slider. This number must be between the min and max values if
	   * defined. If this is undefined, it's value will be set to the min value.
	   */
	  defaultValue: _propTypes2.default.number,

	  /**
	   * The min value for the slider. This value **must** be less than the `max` value.
	   */
	  min: function min(props, propName, component) {
	    for (var _len2 = arguments.length, others = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      others[_key2 - 3] = arguments[_key2];
	    }

	    var _PropTypes$number;

	    var err = (_PropTypes$number = _propTypes2.default.number).isRequired.apply(_PropTypes$number, [props, propName, component].concat(others));
	    if (!err) {
	      var min = props[propName];
	      var name = void 0;
	      if (min > props.value) {
	        name = 'value';
	      } else if (typeof props.defaultValue !== 'undefined' && min > props.defaultValue) {
	        name = 'defaultValue';
	      }

	      if (name) {
	        err = new Error('The \'' + propName + '\' prop must be less than or equal to the \'' + name + '\' prop for the \'' + component + '\' but ' + ('received: \'min: ' + min + '\' and \'' + name + ': ' + props[name] + '\''));
	      }
	    }

	    return err;
	  },

	  /**
	   * The max value for the slider. This value **must** be greater than the `min` value.
	   */
	  max: function max(props, propName, component) {
	    for (var _len3 = arguments.length, others = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
	      others[_key3 - 3] = arguments[_key3];
	    }

	    var _PropTypes$number2;

	    var err = (_PropTypes$number2 = _propTypes2.default.number).isRequired.apply(_PropTypes$number2, [props, propName, component].concat(others));
	    if (!err) {
	      var max = props[propName];
	      var name = void 0;
	      if (max < props.value) {
	        name = 'value';
	      } else if (max < props.defaultValue) {
	        name = 'defaultValue';
	      }

	      if (name) {
	        err = new Error('The \'' + propName + '\' prop must be greater than or equal to the \'' + name + '\' prop for the \'' + component + '\' but ' + ('received: \'' + propName + ': ' + max + '\' and \'' + name + ': ' + props[name] + '\''));
	      }
	    }

	    return err;
	  },

	  /**
	   * Boolean if the slider is disabled.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * An optional value for the slider. This will make the component controlled
	   * and require the `onChange` function.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.number, 'onChange'),

	  /**
	   * This is called when the slider's value gets updated. The value can be updated
	   * by one of the following:
	   *
	   * - Clicking a section of the slider
	   * - Dragging the slider with the mouse
	   * - Touching a section of the slider.
	   * - Dragging the slider with touch
	   * - Using the text field to update the value either by typing or incrementing
	   * - Using the left or right arrow keys to increment/decrement the value.
	   *
	   * The callback for this function is as follows:
	   *
	   * ```js
	   * onChange(value, event);
	   * ```
	   *
	   * where the event can either be:
	   * - a touch start event
	   * - a touch move event
	   * - a touch end event
	   * - a mouse down event
	   * - a mouse move event
	   * - a mouse up event
	   * - a key up event
	   * - a key down event
	   */
	  onChange: _propTypes2.default.func,

	  /**
	   * This is only called when the user is dragging the slider with either
	   * the mouse or touch. Probably not really useful. It just includes the
	   * new drag percentage while the `onChange` does not.
	   *
	   * The callback for this function is defined as:
	   *
	   * ```js
	   * onDragChange(dragPercentage, value, (touchMove || mouseMove) event);
	   * ```
	   */
	  onDragChange: _propTypes2.default.func,

	  /**
	   * An optional function to call when the slider's container has
	   * the mousedown event.
	   */
	  onMouseDown: _propTypes2.default.func,

	  /**
	   * An optional function to call when the slider's container has
	   * the touchstart event.
	   */
	  onTouchStart: _propTypes2.default.func,

	  /**
	   * An optional icon or letter to place to the left of the slider.
	   * if you want to use a non-font icon or a letter, use the `md-slider-ind`
	   * className on your element.
	   */
	  leftIcon: _propTypes2.default.element,

	  /**
	   * An optional icon or letter to place to the right of the slider.
	   * if you want to use a non-font icon or a letter, use the `md-slider-ind`
	   * className on your element.
	   *
	   * > NOTE: This can not be used if the `editable` prop is true.
	   */
	  rightIcon: _propTypes2.default.element,

	  /**
	   * An optional label to display above the slider. If this prop
	   * is set, then an `id` must also be given.
	   */
	  label: _propTypes2.default.node,

	  /**
	   * The incremental amount when the user hits left or right with the
	   * keyboard arrows, or the user hits the up or down buttons in the
	   * editable number text field. This number must be a number between
	   * 0 and 1 or a whole number above 1.
	   */
	  step: function step(props, propName, component) {
	    for (var _len4 = arguments.length, others = Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
	      others[_key4 - 3] = arguments[_key4];
	    }

	    var _PropTypes$number3;

	    var err = (_PropTypes$number3 = _propTypes2.default.number).isRequired.apply(_PropTypes$number3, [props, propName, component].concat(others));
	    if (!err) {
	      var step = props[propName];
	      if (step <= 0) {
	        err = new Error('The \'' + propName + '\' for the \'' + component + '\' must be a number greater than 0. The ' + ('current value is \'' + step + '\'.'));
	      } else {
	        var valueDefined = typeof props.value !== 'undefined';
	        var defaultDefined = typeof props.defaultValue !== 'undefined';
	        var value = props.value;
	        if (!valueDefined) {
	          value = defaultDefined ? props.defaultValue : props.min;
	        }

	        var name = void 0;
	        if (!(0, _isWithinStep2.default)(value, step)) {
	          if (valueDefined) {
	            name = 'value';
	          } else if (defaultDefined) {
	            name = 'defaultValue';
	          } else {
	            name = 'min';
	          }
	        }

	        if (name) {
	          err = new Error('The \'' + name + '\' prop on \'' + component + '\' should be a number divisible by the ' + ('\'' + propName + '\' prop. The current value is \'' + props[name] + '\' and the \'' + propName + '\' ') + ('is \'' + step + '\'.'));
	        }
	      }
	    }

	    return err;
	  },

	  /**
	   * Boolean if the Slider should be editable. This will place a number text field
	   * to the right of the slider. If this prop is set to `true`, the `rightIcon`
	   * prop can not be set.
	   */
	  editable: function editable(props, propName, component) {
	    for (var _len5 = arguments.length, others = Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {
	      others[_key5 - 3] = arguments[_key5];
	    }

	    var _PropTypes$bool;

	    if (typeof props[propName] === 'undefined') {
	      return null;
	    }

	    var err = (_PropTypes$bool = _propTypes2.default.bool).isRequired.apply(_PropTypes$bool, [props, propName, component].concat(others));
	    if (!err && typeof props.rightIcon !== 'undefined') {
	      err = new Error('The \'' + component + '\' is unable to be \'editable\' and include a \'rightIcon\'.');
	    }

	    return err;
	  },

	  /**
	   * The width for the number text field when the Slider is editable.
	   */
	  inputWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,

	  /**
	   * Boolean if the slider should be discrete. This will update the slider to include a
	   * _balloon_ with the current value inside. It will also not allow the `Slider` to be
	   * editable.
	   */
	  discrete: function discrete(props, propName, component) {
	    for (var _len6 = arguments.length, others = Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {
	      others[_key6 - 3] = arguments[_key6];
	    }

	    if (typeof props[propName] === 'undefined') {
	      return null;
	    }

	    var err = _propTypes2.default.bool.apply(_propTypes2.default, [props, propName, component].concat(others));
	    if (!err && typeof props.editable !== 'undefined') {
	      err = new Error('The \'' + component + '\' cannot be \'discrete\' and \'editable\'. Please choose one.');
	    }

	    return err;
	  },

	  /**
	   * The width of each tick for a discrete slider with ticks. This can either be a number
	   * which gets converted to `px`, or a valid CSS unit.
	   */
	  tickWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,

	  /**
	   * This is number divisible by the total number of values included in the Slider. Every
	   * value that is divisible by this number will include a tick mark. It is common recommended
	   * to have this equal to the `step` prop.
	   *
	   * This prop is completely optional.
	   */
	  discreteTicks: function discreteTicks(props, propName, component) {
	    for (var _len7 = arguments.length, others = Array(_len7 > 3 ? _len7 - 3 : 0), _key7 = 3; _key7 < _len7; _key7++) {
	      others[_key7 - 3] = arguments[_key7];
	    }

	    if (typeof props[propName] === 'undefined') {
	      return null;
	    }

	    var err = _propTypes2.default.number.apply(_propTypes2.default, [props, propName, component].concat(others));
	    if (!err) {
	      var min = props.min,
	          max = props.max,
	          step = props.step;

	      var range = Math.abs(max - min);

	      if (range / props[propName] % 1 !== 0) {
	        err = new Error('The \'' + propName + '\' must be a number divisible by the range set by the \'min\' and ' + ('\'max\' props. The current range is \'' + range + '\' by including the min: \'' + min + '\' and ') + ('max: \'' + max + '\' values. The current value of \'' + propName + '\' is \'' + props[propName] + '\'.'));
	      } else if (props[propName] % step !== 0) {
	        err = new Error('The \'step\' prop must be a number divisible by the \'' + propName + '\'. It is common to have ' + ('them as the same value. The current \'step\' is \'' + step + '\' and the \'' + propName + '\' is \'' + props[propName] + '\'.'));
	      }
	    }

	    return err;
	  },

	  /**
	   * The transition time for a discrete Slider's keyboard focus ink. This should match the
	   * `md-slider-discrete-ink-transition-time` value in your SCSS. This is used because
	   * the ink is only visible temporarily for a discrete slider when keyboard focusing.
	   */
	  discreteInkTransitionTime: _propTypes2.default.number.isRequired,

	  /**
	   * The precision that the value should be rounded to when the Slider is updated. This
	   * needs to be a whole number greater than or equal to 0.
	   */
	  valuePrecision: function valuePrecision(props, propName, component) {
	    for (var _len8 = arguments.length, others = Array(_len8 > 3 ? _len8 - 3 : 0), _key8 = 3; _key8 < _len8; _key8++) {
	      others[_key8 - 3] = arguments[_key8];
	    }

	    var _PropTypes$number4;

	    var err = (_PropTypes$number4 = _propTypes2.default.number).isRequired.apply(_PropTypes$number4, [props, propName, component].concat(others));
	    if (!err) {
	      var precision = props[propName];

	      if (precision % 1 !== 0 || precision < 0) {
	        err = new Error('The \'' + propName + '\' must be a positive whole number or 0 on the \'' + component + '\'. ' + ('The current \'' + propName + '\' is \'' + precision + '\''));
	      }
	    }

	    return err;
	  },

	  stepPrecision: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `step` and `valuePrecision` instead')
	};
	Slider.defaultProps = {
	  min: 0,
	  max: 100,
	  step: 1,
	  inputWidth: 40,
	  tickWidth: 6,
	  discreteInkTransitionTime: 300,
	  valuePrecision: 0
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._isTextField = function (target) {
	    return _this2._field && _this2._field.contains(target);
	  };

	  this._updatePosition = function (e, normalize) {
	    var x = (e.changedTouches ? e.changedTouches[0] : e).clientX;
	    var scale = _this2.state.scale;
	    var _props3 = _this2.props,
	        onChange = _props3.onChange,
	        onDragChange = _props3.onDragChange,
	        min = _props3.min,
	        max = _props3.max,
	        step = _props3.step;

	    var _calculateValueDistan = (0, _calculateValueDistance2.default)(x, _this2._track.offsetWidth, _this2._track.getBoundingClientRect().left, scale, step, min, max, normalize),
	        value = _calculateValueDistan.value,
	        distance = _calculateValueDistan.distance;

	    var isNewValue = (0, _getField2.default)(_this2.props, _this2.state, 'value') !== value;
	    if (onChange && isNewValue) {
	      onChange(value, e);
	    }

	    if (!normalize && onDragChange && (isNewValue || _this2.state.distance !== distance)) {
	      onDragChange(distance, value, e);
	    }

	    var state = {
	      active: true,
	      distance: distance,
	      manualIncrement: false,
	      dragging: !normalize,
	      thumbLeft: _this2._calcLeft(distance),
	      trackFillWidth: distance + '%'
	    };

	    if (e.type === 'touchend' || e.type === 'mousedown') {
	      state.maskInked = false;
	    }

	    if (typeof _this2.props.value === 'undefined') {
	      state.value = value;
	    }

	    _this2.setState(state);
	  };

	  this._handleDragStart = function (e) {
	    if (e.type === 'mousedown' && _this2.props.onMouseDown) {
	      _this2.props.onMouseDown(e);
	    } else if (e.type === 'touchstart' && _this2.props.onTouchStart) {
	      _this2.props.onTouchStart(e);
	    }

	    if (_this2.props.disabled || e.type === 'mousedown' && !(0, _isValidClick2.default)(e, 'mousedown') || _this2._isInTextField(e)) {
	      return;
	    }

	    var classList = e.target.classList;

	    var isDiscreteValue = classList.contains('md-slider-discrete-value');
	    if (classList.contains('md-slider-thumb') || isDiscreteValue) {
	      // Prevents text highlighting while dragging.
	      if (e.type.match(/mouse/)) {
	        e.preventDefault();
	      }
	      _this2.setState({ dragging: true, active: true, manualIncrement: false, maskInked: false });
	    } else if (!_this2._isTextField(e.target) && _this2._isValidClassList(classList)) {
	      _this2._updatePosition(e, true);
	    }
	  };

	  this._setNode = function (node) {
	    _this2._node = (0, _reactDom.findDOMNode)(node);
	  };

	  this._setTrack = function (track) {
	    _this2._track = (0, _reactDom.findDOMNode)(track);
	  };

	  this._setField = function (field) {
	    _this2._field = (0, _reactDom.findDOMNode)(field);
	    _this2._calcTrackWidth(_this2.props);
	  };

	  this._handleDragMove = function (e) {
	    if (_this2.props.disabled || !_this2.state.dragging) {
	      return;
	    }

	    // Stops the text highlighting while dragging
	    if (e.type.match(/mouse/)) {
	      e.preventDefault();
	    }

	    _this2._updatePosition(e, false);
	  };

	  this._handleDragEnd = function (e) {
	    if (!_this2.state.dragging || _this2.props.disabled || e.type === 'mouseup' && !(0, _isValidClick2.default)(e)) {
	      return;
	    }

	    _this2._updatePosition(e, true);
	  };

	  this._blurOnOutsideClick = function (e) {
	    if (_this2.state.dragging && !_this2.state.manualIncrement || _this2.props.disabled) {
	      return;
	    }

	    if (!_this2._node.contains(e.target)) {
	      _this2.setState({ active: false, maskInked: false });
	    }
	  };

	  this._handleIncrement = function (incrementedValue, e, disableTransition) {
	    var _props4 = _this2.props,
	        onChange = _props4.onChange,
	        min = _props4.min,
	        max = _props4.max,
	        discrete = _props4.discrete;


	    var value = Math.max(min, Math.min(max, incrementedValue));
	    var distance = _this2._calcDistance(value, min, max);

	    if (onChange) {
	      onChange(value, e);
	    }

	    var state = {
	      distance: distance,
	      manualIncrement: true,
	      thumbLeft: _this2._calcLeft(distance),
	      trackFillWidth: distance + '%',
	      dragging: Math.abs(_this2.state.distance - distance) < 2 && disableTransition
	    };

	    if (typeof _this2.props.value === 'undefined') {
	      state.value = value;
	    }

	    if (e.type === 'keydown' && !discrete) {
	      state.maskInked = true;
	    }

	    _this2.setState(state);
	  };

	  this._handleTextFieldChange = function (newValue, e) {
	    _this2._handleIncrement(newValue, e, false);
	  };

	  this._handleKeyDown = function (e) {
	    var key = e.which || e.keyCode;
	    var _props5 = _this2.props,
	        min = _props5.min,
	        max = _props5.max,
	        step = _props5.step,
	        disabled = _props5.disabled;

	    if (disabled) {
	      return;
	    }

	    if (key === _keyCodes.TAB) {
	      _this2.setState({ active: false, maskInked: false });
	      return;
	    } else if (key !== _keyCodes.LEFT && key !== _keyCodes.RIGHT) {
	      return;
	    }

	    var nextValue = (0, _getField2.default)(_this2.props, _this2.state, 'value');
	    nextValue = Math.max(min, Math.min((key === _keyCodes.LEFT ? -step : step) + nextValue, max));

	    _this2._handleIncrement(nextValue, e, true);
	  };

	  this._handleKeyUp = function (e) {
	    if ((e.which || e.keyCode) !== _keyCodes.TAB) {
	      return;
	    }

	    if (_this2.props.discrete) {
	      _this2._animateDiscreteInk();
	    }

	    _this2.setState({ maskInked: true });
	  };

	  this._handleFocus = function () {
	    _this2.setState({ active: true });
	  };

	  this._calcTrackWidth = function (props) {
	    var editable = props.editable,
	        leftIcon = props.leftIcon,
	        rightIcon = props.rightIcon,
	        inputWidth = props.inputWidth,
	        label = props.label;


	    if (!label) {
	      _this2.setState({ trackWidth: null });
	      return;
	    }

	    var trackWidth = null;
	    if (!leftIcon && !rightIcon && !editable) {
	      trackWidth = '100%';
	    } else if (_this2._field && editable && !leftIcon) {
	      var cs = window.getComputedStyle(_this2._field);
	      var pl = parseInt(cs.getPropertyValue('padding-left'), 10) || 0;
	      var ml = parseInt(cs.getPropertyValue('margin-left'), 10) || 0;

	      trackWidth = pl + ml + inputWidth;
	    }

	    if (trackWidth !== _this2.state.trackWidth) {
	      _this2.setState({ trackWidth: trackWidth });
	    }
	  };

	  this._animateDiscreteInk = function () {
	    var wait = _this2.props.discreteInkTransitionTime;
	    if (_this2._inkTimeout) {
	      clearTimeout(_this2._inkTimeout);
	    }

	    _this2._inkTimeout = setTimeout(function () {
	      _this2.setState({ leaving: true, maskInked: false });

	      _this2._inkTimeout = setTimeout(function () {
	        _this2._inkTimeout = null;
	        _this2.setState({ leaving: false });
	      }, wait);
	    }, wait);
	  };

	  this._focusThumb = function () {
	    if (_this2._focusTimeout) {
	      clearTimeout(_this2._focusTimeout);
	    }

	    _this2._focusTimeout = setTimeout(function () {
	      _this2._focusTimeout = null;
	      if (!_this2._thumb) {
	        _this2._thumb = _this2._node.querySelector('.md-slider-thumb');
	      }

	      _this2._thumb.focus();
	    }, 100);
	  };
	};

	exports.default = Slider;

/***/ }),
/* 482 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = calculateValueDistance;
	/** @module utils/NumberUtils/calculateValueDistance */

	/**
	 * This calculates the distance from a screen x location to a position in some element
	 * by comparing the width of the element and the element's page position to the screen
	 * x position.
	 *
	 * If the distance is not _normalized_ the distance will be updated to be a percentage
	 * of the element's total width.
	 *
	 * @param {Number} x - the screen x location.
	 * @param {Number} width - the element's width
	 * @param {Number} left - the element's page x position.
	 * @param {Boolean} normalize - boolean if the distance should be a percentage.
	 *
	 * @return {Number} the distance from the element's left position to the page x
	 *    location.
	 */
	function calculateDistance(x, width, left, normalize) {
	  var distance = Math.min(width, Math.max(0, x - left));

	  return normalize ? distance : distance / width * 100;
	}

	/**
	 * This calculates the new value and distance for a slider. It will compare the page x
	 * location of a touch or mouse event to the slider's track page x position. If the
	 * final value and distance should be _normalized_, they will be updated to be rounded
	 * with the scale and steps in mind.
	 *
	 * The distance will always be contained within a percentage of 0 - 100 while the
	 * value will be contained within the min and max values.
	 *
	 * @param {Number} x - the page x location of the touch or mouse event.
	 * @param {Number} width - the slider's width
	 * @param {Number} left - the slider's left position in the page.
	 * @param {Number} scale - the total number values included in the slider.
	 * @param {Number} step - the amount to increment by.
	 * @param {Number} min - the min value for the slider.
	 * @param {Number} max - the max value for the slider.
	 * @param {Boolean} normalize - boolean if the vaue and distance should be _normalized_.
	 *
	 * @return {Object} an object with the value and distance.
	 */
	function calculateValueDistance(x, width, left, scale, step, min, max, normalize) {
	  var value = void 0;
	  var distance = calculateDistance(x, width, left, normalize);
	  if (normalize) {
	    value = Math.round(distance / (width / scale));
	    if (step < 1) {
	      var decimals = String(step).split('.')[1];
	      var corrector = typeof decimals !== 'undefined' && decimals.length > 0 ? Math.pow(10, decimals.length) : 1;

	      var modded = value * corrector % (step * corrector);
	      if (modded !== 0 && modded >= step / 2) {
	        value += step - modded;
	      } else if (modded !== 0) {
	        value -= modded;
	      }
	    }

	    distance = value / scale * 100;
	    value = value * step + min;
	  } else {
	    value = min + step * Math.round(distance / 100 * scale);
	  }

	  return {
	    distance: Math.max(0, Math.min(100, distance)),
	    value: Math.max(min, Math.min(max, value))
	  };
	}

/***/ }),
/* 483 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = isWithinStep;
	/** @module utils/NumberUtils/isWithinStep */

	/**
	 * Checks if a provided value is within the current step. I don't remember the main
	 * usage for this, but it is for the Slider component.
	 *
	 * @param {number} value - the current value
	 * @param {number} step - the step value
	 * @return {Boolean} true if the vlaue is within the step
	 */
	function isWithinStep(value, step) {
	  var decimals = String(step).split('.')[1];
	  var corrector = typeof decimals !== 'undefined' && decimals.length > 0 ? Math.pow(10, decimals.length) : 1;

	  return value * corrector % (step * corrector) === 0;
	}

/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This is just the label component for the slider. It will
	 * return null if there are no children to display.
	 */
	var SliderLabel = function (_PureComponent) {
	  _inherits(SliderLabel, _PureComponent);

	  function SliderLabel() {
	    _classCallCheck(this, SliderLabel);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  SliderLabel.prototype.render = function render() {
	    var _props = this.props,
	        children = _props.children,
	        className = _props.className,
	        htmlFor = _props.htmlFor,
	        props = _objectWithoutProperties(_props, ['children', 'className', 'htmlFor']);

	    if (!children) {
	      return null;
	    }

	    return _react2.default.createElement(
	      'label',
	      _extends({}, props, {
	        htmlFor: htmlFor,
	        className: (0, _classnames2.default)('md-slider-label', (0, _themeColors2.default)({ text: true }), className)
	      }),
	      children
	    );
	  };

	  return SliderLabel;
	}(_react.PureComponent);

	SliderLabel.propTypes = {
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  htmlFor: function htmlFor(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }

	    var _PropTypes$string;

	    if (typeof props.children === 'undefined') {
	      return null;
	    }

	    return (_PropTypes$string = _propTypes2.default.string).isRequired.apply(_PropTypes$string, [props, propName, component].concat(others));
	  }
	};
	exports.default = SliderLabel;

/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _updateUnit = __webpack_require__(486);

	var _updateUnit2 = _interopRequireDefault(_updateUnit);

	var _TrackFill = __webpack_require__(487);

	var _TrackFill2 = _interopRequireDefault(_TrackFill);

	var _Thumb = __webpack_require__(488);

	var _Thumb2 = _interopRequireDefault(_Thumb);

	var _ThumbMask = __webpack_require__(489);

	var _ThumbMask2 = _interopRequireDefault(_ThumbMask);

	var _DiscreteValue = __webpack_require__(490);

	var _DiscreteValue2 = _interopRequireDefault(_DiscreteValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var half = function half(w) {
	  return w / 2;
	};

	/**
	 * The `Track` component is used for showing the current state of the slider.
	 * It will render the `TrackFill`, `Thumb`, and `ThumbMask` components.
	 */

	var Track = function (_PureComponent) {
	  _inherits(Track, _PureComponent);

	  function Track() {
	    _classCallCheck(this, Track);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Track.prototype.render = function render() {
	    var _props = this.props,
	        on = _props.on,
	        off = _props.off,
	        active = _props.active,
	        disabled = _props.disabled,
	        dragging = _props.dragging,
	        className = _props.className,
	        thumbLeft = _props.thumbLeft,
	        trackFillWidth = _props.trackFillWidth,
	        trackFillStyle = _props.trackFillStyle,
	        trackFillClassName = _props.trackFillClassName,
	        discreteValueStyle = _props.discreteValueStyle,
	        discreteValueClassName = _props.discreteValueClassName,
	        maskInked = _props.maskInked,
	        maskLeaving = _props.maskLeaving,
	        thumbStyle = _props.thumbStyle,
	        thumbClassName = _props.thumbClassName,
	        discrete = _props.discrete,
	        onThumbFocus = _props.onThumbFocus,
	        onThumbKeyUp = _props.onThumbKeyUp,
	        onThumbKeyDown = _props.onThumbKeyDown,
	        value = _props.value,
	        tickWidth = _props.tickWidth,
	        discreteTicks = _props.discreteTicks,
	        scale = _props.scale,
	        step = _props.step,
	        valuePrecision = _props.valuePrecision,
	        props = _objectWithoutProperties(_props, ['on', 'off', 'active', 'disabled', 'dragging', 'className', 'thumbLeft', 'trackFillWidth', 'trackFillStyle', 'trackFillClassName', 'discreteValueStyle', 'discreteValueClassName', 'maskInked', 'maskLeaving', 'thumbStyle', 'thumbClassName', 'discrete', 'onThumbFocus', 'onThumbKeyUp', 'onThumbKeyDown', 'value', 'tickWidth', 'discreteTicks', 'scale', 'step', 'valuePrecision']);

	    var ticks = [];
	    if (typeof discreteTicks !== 'undefined' && !disabled && discrete) {
	      var amt = scale / (discreteTicks / step);
	      var offset = (0, _updateUnit2.default)(tickWidth, half, 'px');
	      var inc = 100 / amt;

	      for (var i = 0; i <= amt; i++) {
	        var left = i * inc + '%';
	        var width = tickWidth;
	        if (i === 0 || i === amt) {
	          width = (0, _updateUnit2.default)(tickWidth, half);
	        } else {
	          left = 'calc(' + left + ' - ' + offset + ')';
	        }

	        ticks.push(_react2.default.createElement('span', {
	          key: 'tick-' + i,
	          className: 'md-slider-discrete-tick',
	          style: { left: left, width: width }
	        }));
	      }
	    }

	    return _react2.default.createElement(
	      'div',
	      _extends({}, props, { className: (0, _classnames2.default)('md-slider-track', className) }),
	      ticks,
	      _react2.default.createElement(_TrackFill2.default, {
	        style: trackFillStyle,
	        className: trackFillClassName,
	        disabled: disabled,
	        dragging: dragging,
	        trackFillWidth: trackFillWidth
	      }),
	      _react2.default.createElement(_Thumb2.default, {
	        style: thumbStyle,
	        className: thumbClassName,
	        on: on,
	        off: off,
	        disabled: disabled,
	        dragging: dragging,
	        active: active,
	        thumbLeft: thumbLeft,
	        onFocus: onThumbFocus,
	        onKeyUp: onThumbKeyUp,
	        onKeyDown: onThumbKeyDown,
	        discrete: discrete
	      }),
	      _react2.default.createElement(_DiscreteValue2.default, {
	        style: discreteValueStyle,
	        className: discreteValueClassName,
	        discrete: discrete,
	        dragging: dragging,
	        active: active,
	        value: value,
	        thumbLeft: thumbLeft,
	        valuePrecision: valuePrecision
	      }),
	      _react2.default.createElement(_ThumbMask2.default, {
	        dragging: dragging,
	        disabled: disabled,
	        thumbLeft: thumbLeft,
	        maskInked: maskInked,
	        discrete: discrete,
	        leaving: maskLeaving
	      })
	    );
	  };

	  return Track;
	}(_react.PureComponent);

	Track.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  thumbStyle: _propTypes2.default.object,
	  thumbClassName: _propTypes2.default.string,
	  trackFillStyle: _propTypes2.default.object,
	  trackFillClassName: _propTypes2.default.string,
	  discreteValueStyle: _propTypes2.default.object,
	  discreteValueClassName: _propTypes2.default.string,
	  on: _propTypes2.default.bool,
	  off: _propTypes2.default.bool,
	  active: _propTypes2.default.bool,
	  dragging: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  thumbLeft: _propTypes2.default.string.isRequired,
	  trackFillWidth: _propTypes2.default.string.isRequired,
	  value: _propTypes2.default.number.isRequired,
	  discrete: _propTypes2.default.bool,
	  maskInked: _propTypes2.default.bool,
	  maskLeaving: _propTypes2.default.bool,
	  onThumbKeyUp: _propTypes2.default.func.isRequired,
	  onThumbKeyDown: _propTypes2.default.func.isRequired,
	  onThumbFocus: _propTypes2.default.func.isRequired,
	  scale: _propTypes2.default.number,
	  step: _propTypes2.default.number,
	  discreteTicks: _propTypes2.default.number,
	  tickWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  valuePrecision: _propTypes2.default.number.isRequired
	};
	exports.default = Track;

/***/ }),
/* 486 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = updateUnit;
	/** @module utils/NumberUtils/updateUnit */

	/**
	 * Takes in a css unit (px, rem, em, etc) or a number and applies a function to the
	 * number part of the unit.
	 *
	 * If the unit was a number to start with and a `toUnit` is given, the number will
	 * be given the `toUnit`. Otherwise the number will be returned.
	 *
	 * If the unit was a string, the original units will be applied back to the updated
	 * unit's value.
	 *
	 * @param {number|String} unit - the unit to apply a function to.
	 * @param {function} fn - the function to apply to the number.
	 * @param {String=} toUnit - an optional unit to cast the updated unit to.
	 *
	 * @return {String|number} the updated unit.
	 */
	function updateUnit(unit, fn, toUnit) {
	  var updated = fn(parseInt(unit, 10));

	  if (typeof unit === 'number') {
	    return toUnit ? '' + updated + toUnit : updated;
	  }

	  return '' + updated + unit.replace(/[0-9]/g, '');
	}

/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `TrackFill` component is used for showing a colored bar
	 * within the `Track` component to show the `Slider`'s position.
	 *
	 * If the `Slider` is disabled, this will just return null.
	 */
	var TrackFill = function (_PureComponent) {
	  _inherits(TrackFill, _PureComponent);

	  function TrackFill() {
	    _classCallCheck(this, TrackFill);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  TrackFill.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        trackFillWidth = _props.trackFillWidth,
	        dragging = _props.dragging,
	        disabled = _props.disabled,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'trackFillWidth', 'dragging', 'disabled']);

	    if (disabled) {
	      return null;
	    }

	    return _react2.default.createElement('hr', _extends({}, props, {
	      style: Object.assign({}, style, { width: trackFillWidth }),
	      className: (0, _classnames2.default)('md-slider-track-fill', className, {
	        'md-slider-track-fill--dragging': dragging
	      })
	    }));
	  };

	  return TrackFill;
	}(_react.PureComponent);

	TrackFill.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  dragging: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  trackFillWidth: _propTypes2.default.string.isRequired
	};
	exports.default = TrackFill;

/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _AccessibleFakeButton = __webpack_require__(340);

	var _AccessibleFakeButton2 = _interopRequireDefault(_AccessibleFakeButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Thumb` component is the little ball for the slider.
	 */
	var Thumb = function (_PureComponent) {
	  _inherits(Thumb, _PureComponent);

	  function Thumb() {
	    _classCallCheck(this, Thumb);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  Thumb.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        on = _props.on,
	        off = _props.off,
	        active = _props.active,
	        disabled = _props.disabled,
	        dragging = _props.dragging,
	        thumbLeft = _props.thumbLeft,
	        discrete = _props.discrete,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'on', 'off', 'active', 'disabled', 'dragging', 'thumbLeft', 'discrete']);

	    return _react2.default.createElement(_AccessibleFakeButton2.default, _extends({
	      disabled: disabled
	    }, props, {
	      style: Object.assign({}, style, { left: thumbLeft }),
	      className: (0, _classnames2.default)('md-slider-thumb', className, {
	        'md-slider-thumb--active': active,
	        'md-slider-thumb--dragging': dragging,
	        'md-slider-thumb--disabled': disabled,
	        'md-slider-thumb--on': on,
	        'md-slider-thumb--continuous-off': !discrete && off,
	        'md-slider-thumb--discrete': discrete,
	        'md-slider-thumb--discrete-on': discrete && active && on,
	        'md-slider-thumb--discrete-off': discrete && !disabled && off,
	        'md-slider-thumb--discrete-active': discrete && active,
	        'md-slider-thumb--discrete-active-off': discrete && active && off
	      })
	    }));
	  };

	  return Thumb;
	}(_react.PureComponent);

	Thumb.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  thumbLeft: _propTypes2.default.string.isRequired,
	  on: _propTypes2.default.bool,
	  off: _propTypes2.default.bool,
	  active: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  dragging: _propTypes2.default.bool,
	  discrete: _propTypes2.default.bool
	};
	exports.default = Thumb;

/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `ThumbMask` component is used for either:
	 *
	 *  - rendering the ink behind the `Thumb` component when the `Thumb`
	 *  has keyboard focus or touch focus
	 *  - rendering a underlay to make the `Track` look broken for disabled
	 *  Sliders.
	 */
	var ThumbMask = function (_PureComponent) {
	  _inherits(ThumbMask, _PureComponent);

	  function ThumbMask() {
	    _classCallCheck(this, ThumbMask);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  ThumbMask.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        thumbLeft = _props.thumbLeft,
	        disabled = _props.disabled,
	        dragging = _props.dragging,
	        maskInked = _props.maskInked,
	        discrete = _props.discrete,
	        leaving = _props.leaving,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'thumbLeft', 'disabled', 'dragging', 'maskInked', 'discrete', 'leaving']);

	    return _react2.default.createElement('span', _extends({}, props, {
	      style: Object.assign({}, style, { left: thumbLeft }),
	      className: (0, _classnames2.default)('md-slider-thumb md-slider-thumb--mask', className, {
	        'md-slider-thumb--dragging': dragging,
	        'md-slider-thumb--mask-inked': maskInked,
	        'md-slider-thumb--mask-disabled': disabled,
	        'md-slider-thumb--discrete-mask-inked': maskInked && discrete,
	        'md-slider-thumb--discrete-mask-leaving': discrete && leaving
	      })
	    }));
	  };

	  return ThumbMask;
	}(_react.PureComponent);

	ThumbMask.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  disabled: _propTypes2.default.bool,
	  thumbLeft: _propTypes2.default.string.isRequired,
	  maskInked: _propTypes2.default.bool,
	  dragging: _propTypes2.default.bool,
	  discrete: _propTypes2.default.bool,
	  leaving: _propTypes2.default.bool
	};
	exports.default = ThumbMask;

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DiscreteValue = function (_PureComponent) {
	  _inherits(DiscreteValue, _PureComponent);

	  function DiscreteValue() {
	    _classCallCheck(this, DiscreteValue);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  DiscreteValue.prototype.render = function render() {
	    var _props = this.props,
	        style = _props.style,
	        className = _props.className,
	        discrete = _props.discrete,
	        dragging = _props.dragging,
	        thumbLeft = _props.thumbLeft,
	        active = _props.active,
	        value = _props.value,
	        valuePrecision = _props.valuePrecision,
	        props = _objectWithoutProperties(_props, ['style', 'className', 'discrete', 'dragging', 'thumbLeft', 'active', 'value', 'valuePrecision']);

	    if (!discrete || !active) {
	      return null;
	    }

	    var valueStr = value.toFixed(valuePrecision);
	    if (valuePrecision > 0) {
	      var _valueStr$split = valueStr.split('.'),
	          w = _valueStr$split[0],
	          d = _valueStr$split[1];

	      if (parseInt(d, 10) === 0) {
	        valueStr = w;
	      }
	    }
	    return _react2.default.createElement(
	      'span',
	      _extends({}, props, {
	        style: Object.assign({}, style, { left: thumbLeft }),
	        className: (0, _classnames2.default)('md-slider-discrete-value', className, {
	          'md-slider-discrete-value--dragging': dragging
	        })
	      }),
	      valueStr
	    );
	  };

	  return DiscreteValue;
	}(_react.PureComponent);

	DiscreteValue.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  discrete: _propTypes2.default.bool,
	  dragging: _propTypes2.default.bool,
	  active: _propTypes2.default.bool,
	  value: _propTypes2.default.number.isRequired,
	  thumbLeft: _propTypes2.default.string.isRequired,
	  valuePrecision: _propTypes2.default.number.isRequired
	};
	exports.default = DiscreteValue;

/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _CSSTransitionGroup = __webpack_require__(317);

	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _CSSTransitionGroupTick = __webpack_require__(280);

	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);

	var _isInvalidAnimate = __webpack_require__(492);

	var _isInvalidAnimate2 = _interopRequireDefault(_isInvalidAnimate);

	var _Portal = __webpack_require__(375);

	var _Portal2 = _interopRequireDefault(_Portal);

	var _Snackbar = __webpack_require__(493);

	var _Snackbar2 = _interopRequireDefault(_Snackbar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CHAINED_TOAST_DELAY = 50;

	/**
	 * The `Snackbar` component is used for displaying a concise and small message to the user about
	 * an operation performed.
	 *
	 * > The main component for the `Snackbar` is actually named the `SnackbarContainer`, so you need
	 * to make sure the import is `react-md/lib/Snackbars` or `react-md/lib/Snackbars/SnackbarContainer`.
	 * The first import is preferable.
	 */

	var SnackbarContainer = function (_PureComponent) {
	  _inherits(SnackbarContainer, _PureComponent);

	  function SnackbarContainer(props) {
	    _classCallCheck(this, SnackbarContainer);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _initialiseProps.call(_this);

	    var visible = !!props.toasts.length;
	    _this.state = {
	      visible: visible,
	      toast: null
	    };
	    return _this;
	  }

	  SnackbarContainer.prototype.componentDidMount = function componentDidMount() {
	    var toasts = this.props.toasts;

	    if (toasts.length) {
	      this._initAndToast(toasts[0]);
	    }
	  };

	  SnackbarContainer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _nextProps$toasts = nextProps.toasts,
	        toast = _nextProps$toasts[0];
	    var _props$toasts = this.props.toasts,
	        prevToast = _props$toasts[0];

	    if (toast === prevToast || toast === this.state.toast) {
	      return;
	    }

	    if (!toast) {
	      this._createLeaveTimer();
	    } else if (!this.state.visible) {
	      this._initAndToast(toast);
	    } else {
	      this._createSwapTimer(toast);
	    }
	  };

	  SnackbarContainer.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._initTimeout) {
	      clearTimeout(this._initTimeout);
	    }

	    if (this._leaveTimeout) {
	      clearTimeout(this._leaveTimeout);
	    }

	    if (this._swapTimeout) {
	      clearTimeout(this._swapTimeout);
	    }

	    if (this._dismissTimeout) {
	      clearTimeout(this._dismissTimeout);
	    }
	  };

	  /**
	   * This function takes in a new toast object and checks if the message will span
	   * multiple lines of text by creating the new snackbar before the `Snackbar` component
	   * gets made, checking the height of the message, and then removing the temporary
	   * snackbar.
	   */


	  SnackbarContainer.prototype.render = function render() {
	    var _state = this.state,
	        visible = _state.visible,
	        toast = _state.toast,
	        multiline = _state.multiline;

	    var _props = this.props,
	        transitionName = _props.transitionName,
	        transitionEnterTimeout = _props.transitionEnterTimeout,
	        transitionLeaveTimeout = _props.transitionLeaveTimeout,
	        dismiss = _props.dismiss,
	        onDismiss = _props.onDismiss,
	        lastChild = _props.lastChild,
	        portal = _props.portal,
	        propRenderNode = _props.renderNode,
	        toasts = _props.toasts,
	        props = _objectWithoutProperties(_props, ['transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'dismiss', 'onDismiss', 'lastChild', 'portal', 'renderNode', 'toasts']);

	    var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');

	    var snackbar = void 0;
	    if (toast) {
	      snackbar = _react2.default.createElement(_Snackbar2.default, _extends({}, props, {
	        key: 'snackbar',
	        leaveTimeout: transitionLeaveTimeout,
	        toast: toast,
	        multiline: multiline,
	        onDismiss: onDismiss || dismiss
	      }));
	    }

	    var container = _react2.default.createElement(
	      _CSSTransitionGroup2.default,
	      {
	        ref: this._setContainer,
	        key: 'container',
	        className: 'md-snackbar-container',
	        transitionName: transitionName,
	        transitionEnterTimeout: transitionEnterTimeout,
	        transitionLeaveTimeout: transitionLeaveTimeout
	      },
	      snackbar
	    );

	    if (!portal) {
	      return visible ? container : null;
	    }

	    return _react2.default.createElement(
	      _Portal2.default,
	      { visible: visible, renderNode: renderNode, lastChild: lastChild },
	      container
	    );
	  };

	  return SnackbarContainer;
	}(_react.PureComponent);

	SnackbarContainer.propTypes = {
	  /**
	   * An id for the Snackbar once a toast has been added and is visible. This is a recommended
	   * prop for accessibility concerns. If it is omitted, the id will become `'snackbar-alert'`
	   * when there is no action on the toast, or `'snackbar-alert-dialog'` when there is an action
	   * on the toast.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply to the snackbar once it appears.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the snackbar once it appears.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An immutable controlled queue of toasts that should appear in the snackbar.
	   * The snackbar will always display the first toast in this list. When the user has
	   * either clicked the action of the toast, or the `autohideTimeout` has been reached,
	   * the `onDismiss` function will be called. The `onDismiss` function should remove the
	   * first toast and return a new list of remaining toasts.
	   *
	   * ```js
	   * let toasts = [];
	   * const onDismiss = () => {
	   *   const [, ...remainingToasts] = toasts;
	   *   toasts = remainingToasts;
	   * };
	   * ```
	   */
	  toasts: _propTypes2.default.arrayOf(_propTypes2.default.shape({
	    /**
	     * The text to display in the toast.
	     */
	    text: _propTypes2.default.node.isRequired,

	    /**
	     * An optional action to take. If this value is a string, the `label` for the
	     * button will be this value, Otherwise, all the keys in the action object will
	     * be applied to the `Button`.
	     */
	    action: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.shape({
	      onClick: _propTypes2.default.func,
	      children: _propTypes2.default.node,
	      // Deprecated
	      label: _propTypes2.default.node
	    })])
	  })).isRequired,

	  /**
	   * A function to call that will dismiss a toast. This will automatically be bound to
	   * any toast that has an `action` and it will also be called when the `autohideTimeout`
	   * has been reached.
	   */
	  onDismiss: _propTypes2.default.func.isRequired,

	  /**
	   * Boolean if the snackbar's toasts should automatically be dismissed after the
	   * `autohideTimeout` has been reached.
	   */
	  autohide: _propTypes2.default.bool,

	  /**
	   * The amount of time before the snackbar should be dequeued and the next toast
	   * should be displayed.
	   */
	  autohideTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * The transition name to use for the snackbar appearing and disappearing.
	   */
	  transitionName: _propTypes2.default.string.isRequired,

	  /**
	   * The transition time for the snackbar to enter. This should match the `$md-snackbar-transition-time`
	   * sass variable.
	   */
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * The transition time for the snackbar to leave. This should match the `$md-snackbar-transition-time`
	   * sass variable.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,

	  /**
	   * When the app contains a floating action button that is fixed to the bottom of the screen,
	   * you should set this to be a ref of the floating action button. When a snackbar appears,
	   * the FAB will be moved to not overlay the snackbar.
	   */
	  fab: function fab(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);

	    if (!propValue) {
	      return null;
	    }

	    if (propType !== 'object' || typeof propValue.render !== 'function' || (0, _isInvalidAnimate2.default)(propValue)) {
	      var componentNameSafe = componentName || '<<anonymous>>';
	      var propFullNameSafe = propFullName || propName;
	      return new Error('Invalid ' + location + ' `' + propFullNameSafe + '` supplied to `' + componentNameSafe + '`, expected a ' + 'ref to a floating `Button` component. This should not be a DOMElement from `findDOMNode` but instead ' + 'the React ref object.');
	    }

	    return null;
	  },

	  /**
	   * Boolean if the Portal's functionality of rendering in a separate react tree should be applied
	   * to the snackbar.
	   *
	   * @see {@link Helpers/Portal}
	   */
	  portal: _propTypes2.default.bool,

	  /**
	   * An optional DOM node to render the Snackbar in. If this is omitted, it will render as the first
	   * child in the `body`.
	   */
	  renderNode: _propTypes2.default.object,

	  /**
	   * Boolean if the snackbar should render as the last child in the `renderNode` or `body` instead of
	   * as the first.
	   */
	  lastChild: _propTypes2.default.bool,
	  dismiss: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onDismiss` instead')
	};
	SnackbarContainer.defaultProps = {
	  autohide: true,
	  toasts: [],
	  autohideTimeout: 3000,
	  transitionName: 'md-snackbar',
	  transitionEnterTimeout: 300,
	  transitionLeaveTimeout: 300
	};
	SnackbarContainer.contextTypes = {
	  renderNode: _propTypes2.default.object
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this._setContainer = function (container) {
	    _this2._container = (0, _reactDom.findDOMNode)(container);
	  };

	  this._isMultiline = function (toast) {
	    var container = _this2._container;
	    if (container === null) {
	      return false;
	    }

	    var message = document.createElement('p');
	    message.classList.add('md-snackbar--toast');
	    message.innerHTML = toast.text;

	    var snackbar = void 0;
	    if (toast.action) {
	      message.classList.add('md-snackbar--action');

	      snackbar = document.createElement('section');
	      snackbar.className = 'md-snackbar';
	      snackbar.appendChild(message);

	      var action = document.createElement('button');
	      action.innerHTML = typeof toast.action === 'string' ? toast.action : toast.action.label;
	      action.className = 'md-btn md-btn--flat md-btn--text md-btn--snackbar';
	      snackbar.appendChild(action);
	    } else {
	      snackbar = message;
	    }

	    // Only style we really want from the .md-snackbar
	    snackbar.style.maxWidth = '568px';

	    container.appendChild(snackbar);
	    var multiline = message.offsetHeight > 20;
	    container.removeChild(snackbar);

	    return multiline;
	  };

	  this._initAndToast = function (toast) {
	    _this2._initTimeout = setTimeout(function () {
	      _this2._initTimeout = null;

	      _this2.setState({ toast: toast, multiline: _this2._isMultiline(toast) });
	    }, _CSSTransitionGroupTick2.default);

	    _this2.setState({ visible: true });
	  };

	  this._createLeaveTimer = function () {
	    var time = _this2.props.transitionLeaveTimeout;

	    _this2._leaveTimeout = setTimeout(function () {
	      _this2._leaveTimeout = null;

	      _this2.setState({ visible: false });
	    }, time + _CSSTransitionGroupTick2.default);

	    _this2.setState({ toast: null });
	  };

	  this._createSwapTimer = function (toast) {
	    _this2._swapTimeout = setTimeout(function () {
	      _this2._swapTimeout = null;

	      _this2.setState({ toast: toast, multiline: _this2._isMultiline(toast) });
	    }, _this2.props.transitionLeaveTimeout + CHAINED_TOAST_DELAY);

	    _this2.setState({ toast: null });
	  };
	};

	exports.default = SnackbarContainer;

/***/ }),
/* 492 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = isInvalidAnimate;
	var gcc = 'getComposedComponent';

	/**
	 * Just checks if the fab is actually a ref to the FAB Button.
	 */
	function isInvalidAnimate(fab) {
	  return typeof fab[gcc] !== 'function' || typeof fab[gcc]()[gcc] !== 'function' || typeof fab[gcc]()[gcc]()._animateForSnackbar !== 'function';
	}

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	var _isInvalidAnimate = __webpack_require__(492);

	var _isInvalidAnimate2 = _interopRequireDefault(_isInvalidAnimate);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Snackbar = function (_PureComponent) {
	  _inherits(Snackbar, _PureComponent);

	  function Snackbar() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Snackbar);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._handleClick = function (e) {
	      var _this$props = _this.props,
	          onDismiss = _this$props.onDismiss,
	          action = _this$props.toast.action,
	          leaveTimeout = _this$props.leaveTimeout,
	          multiline = _this$props.multiline;

	      if (typeof action.onClick === 'function') {
	        action.onClick(e);
	      }

	      if (_this._fab) {
	        _this._fab._animateForSnackbar(multiline, leaveTimeout);
	      }

	      onDismiss();
	    }, _this._clearTimeout = function () {
	      if (_this._timeout) {
	        clearTimeout(_this._timeout);
	        _this._timeout = null;
	      }
	    }, _this._handleAutohide = function () {
	      var _this$props2 = _this.props,
	          autohide = _this$props2.autohide,
	          autohideTimeout = _this$props2.autohideTimeout,
	          onDismiss = _this$props2.onDismiss,
	          multiline = _this$props2.multiline,
	          leaveTimeout = _this$props2.leaveTimeout;

	      if (!autohide) {
	        return;
	      }

	      window.addEventListener('blur', _this._handleWindowBlur);
	      _this._eventType = 'blur';
	      _this._timeout = setTimeout(function () {
	        _this._timeout = null;
	        _this._eventType = null;

	        window.removeEventListener('blur', _this._handleWindowBlur);

	        if (_this._fab) {
	          _this._fab._animateForSnackbar(multiline, leaveTimeout);
	        }

	        onDismiss();
	      }, autohideTimeout || _this.state.toast);
	    }, _this._handleWindowBlur = function () {
	      _this._clearTimeout();
	      window.removeEventListener('blur', _this._handleWindowBlur);
	      window.addEventListener('focus', _this._handleWindowFocus);
	      _this._eventType = 'focus';
	    }, _this._handleWindowFocus = function () {
	      window.removeEventListener('focus', _this._handleWindowFocus);
	      _this._eventType = null;
	      _this._handleAutohide();
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Snackbar.prototype.componentWillMount = function componentWillMount() {
	    var _props = this.props,
	        fab = _props.fab,
	        multiline = _props.multiline,
	        onAppear = _props.toast.onAppear;

	    if (onAppear) {
	      onAppear();
	    }

	    if (!fab || (0, _isInvalidAnimate2.default)(fab)) {
	      return;
	    }

	    this._fab = fab.getComposedComponent().getComposedComponent();
	    this._fab._animateForSnackbar(multiline);
	  };

	  Snackbar.prototype.componentDidMount = function componentDidMount() {
	    this._handleAutohide();
	  };

	  Snackbar.prototype.componentWillUnmount = function componentWillUnmount() {
	    this._clearTimeout();

	    if (this._eventType === 'focus') {
	      window.removeEventListener('focus', this._handleWindowFocus);
	    } else if (this._eventType === 'blur') {
	      window.removeEventListener('blur', this._handleWindowBlur);
	    }
	  };

	  Snackbar.prototype.render = function render() {
	    var _props2 = this.props,
	        className = _props2.className,
	        toast = _props2.toast,
	        multiline = _props2.multiline,
	        propId = _props2.id,
	        fab = _props2.fab,
	        autohide = _props2.autohide,
	        autohideTimeout = _props2.autohideTimeout,
	        leaveTimeout = _props2.leaveTimeout,
	        onDismiss = _props2.onDismiss,
	        props = _objectWithoutProperties(_props2, ['className', 'toast', 'multiline', 'id', 'fab', 'autohide', 'autohideTimeout', 'leaveTimeout', 'onDismiss']);

	    var text = toast.text,
	        action = toast.action;
	    var id = this.props.id;


	    var Component = 'p';
	    if (action) {
	      Component = 'section';
	      text = _react2.default.createElement(
	        'p',
	        { className: 'md-snackbar--toast md-snackbar--action' },
	        text
	      );

	      var btnProps = {
	        flat: true,
	        onClick: this._handleClick,
	        children: action,
	        secondary: true,
	        className: 'md-btn--snackbar'
	      };

	      if (typeof action !== 'string') {
	        btnProps = Object.assign(btnProps, action, {
	          className: (0, _classnames2.default)(btnProps.className, action.className),
	          onClick: this._handleClick
	        });
	      }

	      action = _react2.default.createElement(_Button2.default, btnProps);
	    }

	    if (!id) {
	      id = 'snackbar-alert' + (action ? '-dialog' : '');
	    }

	    var role = 'alert' + (action ? 'dialog' : '');
	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        id: id,
	        role: role,
	        className: (0, _classnames2.default)('md-snackbar', {
	          'md-snackbar--multiline': multiline,
	          'md-snackbar--toast': !action
	        }, className)
	      }),
	      text,
	      action
	    );
	  };

	  return Snackbar;
	}(_react.PureComponent);

	Snackbar.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  onDismiss: _propTypes2.default.func.isRequired,
	  toast: _propTypes2.default.shape({
	    text: _propTypes2.default.node.isRequired,
	    action: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.shape({
	      label: _propTypes2.default.node,
	      children: _propTypes2.default.node,
	      onClick: _propTypes2.default.func
	    })]),
	    onAppear: _propTypes2.default.func
	  }).isRequired,
	  multiline: _propTypes2.default.bool,
	  autohide: _propTypes2.default.bool,
	  autohideTimeout: _propTypes2.default.number,
	  fab: _propTypes2.default.object,
	  leaveTimeout: _propTypes2.default.number.isRequired
	};
	exports.default = Snackbar;

/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _themeColors = __webpack_require__(255);

	var _themeColors2 = _interopRequireDefault(_themeColors);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `SVGIcon` component is used for rendering inline SVG icons or sprite-mapped SVGs
	 * as an icon.
	 */
	var SVGIcon = function (_PureComponent) {
	  _inherits(SVGIcon, _PureComponent);

	  function SVGIcon(props) {
	    _classCallCheck(this, SVGIcon);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

	    _this._getIds = function (_ref) {
	      var use = _ref.use,
	          labels = _ref['aria-labelledby'],
	          title = _ref.title,
	          desc = _ref.desc;

	      var titleId = null;
	      var descId = null;
	      var labelledBy = null;
	      if (title || desc) {
	        if (use) {
	          var baseId = use.replace(/.*#/, '');
	          titleId = baseId + '-title';
	          descId = baseId + '-desc';

	          if (title) {
	            labelledBy = baseId + '-title';
	          }

	          if (desc) {
	            labelledBy = '' + (labelledBy ? labelledBy + ' ' : '') + descId;
	          }
	        } else if (labels) {
	          var _labels$split = labels.split(' ');

	          titleId = _labels$split[0];
	          descId = _labels$split[1];
	        }
	      }

	      return { titleId: titleId, descId: descId, labelledBy: labelledBy };
	    };

	    _this._mergeStyles = function (_ref2) {
	      var style = _ref2.style,
	          size = _ref2.size;

	      if (style && size) {
	        return _extends({ height: size, width: size }, style);
	      } else if (style) {
	        return style;
	      } else if (size) {
	        return { height: size, width: size };
	      }

	      return undefined;
	    };

	    _this.state = _extends({
	      styles: _this._mergeStyles(props)
	    }, _this._getIds(props));
	    return _this;
	  }

	  SVGIcon.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _props = this.props,
	        style = _props.style,
	        size = _props.size,
	        use = _props.use,
	        title = _props.title,
	        desc = _props.desc,
	        labels = _props['aria-labelledby'];

	    var nextState = void 0;
	    if (style !== nextProps.style || size !== nextProps.size) {
	      nextState = { styles: this._mergeStyles(nextProps) };
	    }

	    if (title !== nextProps.title || desc !== nextProps.desc || (nextProps.title || nextProps.desc) && (use !== nextProps.use || labels !== nextProps['aria-labelledby'])) {
	      nextState = _extends({}, nextState, this._getIds(nextProps));
	    }

	    if (nextState) {
	      this.setState(nextState);
	    }
	  };

	  SVGIcon.prototype.render = function render() {
	    var _state = this.state,
	        styles = _state.styles,
	        titleId = _state.titleId,
	        descId = _state.descId,
	        labelledBy = _state.labelledBy;

	    var _props2 = this.props,
	        className = _props2.className,
	        disabled = _props2.disabled,
	        use = _props2.use,
	        primary = _props2.primary,
	        secondary = _props2.secondary,
	        error = _props2.error,
	        inherit = _props2.inherit,
	        titleAttr = _props2.titleAttr,
	        ariaLabelledBy = _props2['aria-labelledby'],
	        size = _props2.size,
	        propTitle = _props2.title,
	        propDesc = _props2.desc,
	        propStyle = _props2.style,
	        propChildren = _props2.children,
	        props = _objectWithoutProperties(_props2, ['className', 'disabled', 'use', 'primary', 'secondary', 'error', 'inherit', 'titleAttr', 'aria-labelledby', 'size', 'title', 'desc', 'style', 'children']);

	    var _props3 = this.props,
	        children = _props3.children,
	        title = _props3.title,
	        desc = _props3.desc;

	    if (!children && use) {
	      children = _react2.default.createElement('use', { xlinkHref: use });
	    }

	    if (title) {
	      title = _react2.default.createElement(
	        'title',
	        { id: titleId },
	        title
	      );
	    }

	    if (desc) {
	      desc = _react2.default.createElement(
	        'desc',
	        { id: descId },
	        desc
	      );
	    }

	    return _react2.default.createElement(
	      'svg',
	      _extends({}, props, {
	        title: titleAttr,
	        'aria-labelledby': ariaLabelledBy || labelledBy,
	        style: styles,
	        className: (0, _classnames2.default)('md-icon', (0, _themeColors2.default)({
	          disabled: disabled,
	          error: error,
	          inherit: inherit,
	          primary: primary,
	          secondary: secondary
	        }, className))
	      }),
	      title,
	      desc,
	      children
	    );
	  };

	  return SVGIcon;
	}(_react.PureComponent);

	SVGIcon.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * Boolean if the primary theme color should be applied.
	   */
	  primary: _propTypes2.default.bool,

	  /**
	   * Boolean if the secondary theme color should be applied.
	   */
	  secondary: _propTypes2.default.bool,

	  /**
	   * Boolean if the icon is considered disabled and should inherit the
	   * disabled color.
	   */
	  disabled: _propTypes2.default.bool,

	  /**
	   * Boolean if the icon is considered errored and should inherit the error color.
	   */
	  error: _propTypes2.default.bool,

	  /**
	   * Boolean if the color of the icon should be inherited by parent elements.
	   */
	  inherit: _propTypes2.default.bool,

	  /**
	   * The role to apply to the SVG. When using icons, it is generally recommended to leave it as the default
	   * `img` so that it is insured as a graphic.
	   */
	  role: _propTypes2.default.oneOf(['img', 'presentation']),

	  /**
	   * This prop is the title attribute to provide to the `<svg>` element itself. This should be used when you
	   * are using a spritesheet that has defined `<title>` with each SVG symbol.
	   */
	  titleAttr: _propTypes2.default.string,

	  /**
	   * An optional list of ids to use to label the SVG icon with. This is helpful to add when you use the `title`
	   * and `desc` props as this is used to create ids for those two props. This is super beneficial to screen readers.
	   *
	   * When this is defined, it is a space-delimited string of ids to provide to the title and desc (in order). If
	   * this is omitted and the `use` prop is defined, it will take everything after the `#` sign and append `-title` and
	   * `-desc` as a fallback. Check out the examples for more information about this.
	   *
	   * @see {@link #title}
	   * @see {@link #desc}
	   */
	  'aria-labelledby': _propTypes2.default.string,

	  /**
	   * An optional title to give to your SVG icon. This is generally recommended for accessibility when not using
	   * the `use` prop, or your spritemap does not contain `<title>` and `<desc>.
	   *
	   * @see {@link #aria-labelledby}
	   */
	  title: _propTypes2.default.string,

	  /**
	   * An optional description to give to your SVG icon. This is generally recommended for accessibility when not using
	   * the `use` prop, or your spritemap does not contain `<title>` and `<desc>.
	   *
	   * @see {@link #aria-labelledby}
	   */
	  desc: _propTypes2.default.string,

	  /**
	   * This should be a link to a part of an SVG spritemap. So normally one of the following:
	   * - `'#some-custom-svg'`
	   * - `'/images/spritemap.svg#some-custom-svg'`
	   *
	   * This prop **should not** be used with the `children` prop as only one will be rendered.
	   *
	   * > NOTE: IE **does not support** external SVGs. Please see the demo for more details.
	   */
	  use: _propTypes2.default.string,

	  /**
	   * Any `<svg>` children to render to create your icon. This can not be used with the `use` prop.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element), _propTypes2.default.node]),

	  /**
	   * Boolean if the SVG should gain the `focusable` attribute. This is disabled by default since IE11
	   * and Edge actually default this to true and keyboard's will tab focus all SVGs.
	   */
	  focusable: _propTypes2.default.string,

	  /**
	   * An optional size to apply to the SVG. This can be used to set both the
	   * `height` and `width` simultaneously. This will be provided as inline styles
	   * since the `height` and `width` are normally controlled by CSS, and CSS has
	   * higher precedence than the `height`/`width` attributes.
	   */
	  size: _propTypes2.default.number,

	  /**
	   * The `height` prop should not be used since the `height` and `width` are controlled by CSS and the CSS
	   * has a higher precedence than inline attributes. If you want to set the `height`, it should be done via
	   * CSS or the `size` prop.
	   *
	   * @see {@link #size}
	   */
	  height: (0, _deprecated2.default)(_propTypes2.default.number, 'Use the `size` prop instead'),

	  /**
	   * The `width` prop should not be used since the `height` and `width` are controlled by CSS and the CSS
	   * has a higher precedence than inline attributes. If you want to set the `height`, it should be done via
	   * CSS or the `size` prop.
	   *
	   * @see {@link #size}
	   */
	  width: (0, _deprecated2.default)(_propTypes2.default.number, 'Use the `size` prop instead'),

	  /**
	   * The viewBox attribute allows you to specify that a given set of graphics stretch to
	   * fit a particular container element.
	   *
	   * The value of the viewBox attribute is a list of four numbers min-x, min-y, width and
	   * height, separated by white space and/or a comma, which specify a rectangle in user
	   * space which should be mapped to the bounds of the viewport established by the given
	   * element, taking into account attribute preserveAspectRatio.
	   *
	   * Negative values for width or height are not permitted and a value of zero disables
	   * rendering of the element.An optional viewbox for the SVG.
	   *
	   * For example, if the SVG element is 250 (width) by 200 (height) and you provide
	   * `viewBox="0 0 25 20"`, the coordinates inside the SVG will go from the top left corner
	   * (0, 0) to the bottom right (25, 20) and each unit will be worth `10px`.
	   */
	  viewBox: _propTypes2.default.string,

	  /**
	   * An optional xmlns string to provide. The `use` prop will not work without this prop
	   * defined.
	   */
	  xmlns: _propTypes2.default.string
	};
	SVGIcon.defaultProps = {
	  role: 'img',
	  focusable: 'false',
	  xmlns: 'http://www.w3.org/2000/svg',
	  viewBox: '0 0 24 24'
	};
	exports.default = SVGIcon;

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(31);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactSwipeableViews = __webpack_require__(496);

	var _reactSwipeableViews2 = _interopRequireDefault(_reactSwipeableViews);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _between = __webpack_require__(257);

	var _between2 = _interopRequireDefault(_between);

	var _ResizeObserver = __webpack_require__(357);

	var _ResizeObserver2 = _interopRequireDefault(_ResizeObserver);

	var _Paper = __webpack_require__(256);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _TabPanel = __webpack_require__(519);

	var _TabPanel2 = _interopRequireDefault(_TabPanel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `TabsContainer` component is used when you want to have your `Tabs` connected with
	 * the `SwipeableViews`. This component will traverse the children subtree and extract out
	 * the `children` from each tab, and render them in a swipeable container. However,
	 * since this is using the `React.Children` traversal, You will have to keep the `Tabs`
	 * and `Tab` component as a direct descendent. You are unable to make a separate component
	 * that encompasses the `Tab` component.
	 *
	 * ```js
	 * // valid
	 * <TabsContainer>
	 *   <Tabs>
	 *     <Tab />
	 *   </Tabs>
	 * </TabsContainer>
	 *
	 * // invalid
	 * <TabsContainer>
	 *   <Tabs>
	 *     <MyCustomTab />
	 *   </Tabs>
	 * </TabsContainer>
	 * ```
	 *
	 * This is because it seems you are unable to access the `MyCustomTab`'s child Tab props correctly.
	 * You can however have the tab's children as a separate component if you wish.
	 */
	var TabsContainer = function (_PureComponent) {
	  _inherits(TabsContainer, _PureComponent);

	  function TabsContainer(props) {
	    _classCallCheck(this, TabsContainer);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._handleTabChange = function (index, tabId, tabControlsId, tabChildren, event) {
	      if (_this.props.onTabChange) {
	        _this.props.onTabChange(index, tabId, tabControlsId, tabChildren, event);
	      }

	      if (typeof _this.props.activeTabIndex === 'undefined') {
	        _this.setState({ activeTabIndex: index });
	      }
	    };

	    _this._handleSwipeChange = function (activeTabIndex) {
	      _this._handleTabChange(activeTabIndex);
	    };

	    _this._setContainer = function (container) {
	      _this._container = (0, _reactDom.findDOMNode)(container);
	    };

	    _this._resizePanel = function () {
	      if (!_this._container) {
	        return;
	      }

	      var activePanel = _this._container.querySelector('.md-tab-panel[aria-hidden=false]');
	      if (activePanel && _this.state.panelHeight !== activePanel.scrollHeight) {
	        _this.setState({ panelHeight: activePanel.scrollHeight });
	      }
	    };

	    _this.state = {};
	    if (typeof props.activeTabIndex === 'undefined') {
	      _this.state.activeTabIndex = props.defaultTabIndex;
	    }
	    return _this;
	  }

	  TabsContainer.prototype.componentDidMount = function componentDidMount() {
	    this._resizePanel();
	  };

	  TabsContainer.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
	    var prevIndex = (0, _getField2.default)(prevProps, prevState, 'activeTabIndex');
	    var currIndex = (0, _getField2.default)(this.props, this.state, 'activeTabIndex');

	    if (prevIndex !== currIndex) {
	      this._resizePanel();
	    }
	  };

	  TabsContainer.prototype.render = function render() {
	    var _this2 = this,
	        _baseSlideStyle;

	    var panelHeight = this.state.panelHeight;

	    var _props = this.props,
	        Component = _props.component,
	        style = _props.style,
	        className = _props.className,
	        panelStyle = _props.panelStyle,
	        panelClassName = _props.panelClassName,
	        panelComponent = _props.panelComponent,
	        headerStyle = _props.headerStyle,
	        headerClassName = _props.headerClassName,
	        slideStyle = _props.slideStyle,
	        slideHeightProp = _props.slideHeightProp,
	        swipeableViewsStyle = _props.swipeableViewsStyle,
	        swipeableViewsClassName = _props.swipeableViewsClassName,
	        headerComponent = _props.headerComponent,
	        headerZDepth = _props.headerZDepth,
	        children = _props.children,
	        colored = _props.colored,
	        fixed = _props.fixed,
	        labelAndIcon = _props.labelAndIcon,
	        swipeableViewsProps = _props.swipeableViewsProps,
	        themed = _props.themed,
	        propToolbar = _props.toolbar,
	        propActiveTabeIndex = _props.activeTabIndex,
	        onTabChange = _props.onTabChange,
	        defaultTabIndex = _props.defaultTabIndex,
	        props = _objectWithoutProperties(_props, ['component', 'style', 'className', 'panelStyle', 'panelClassName', 'panelComponent', 'headerStyle', 'headerClassName', 'slideStyle', 'slideHeightProp', 'swipeableViewsStyle', 'swipeableViewsClassName', 'headerComponent', 'headerZDepth', 'children', 'colored', 'fixed', 'labelAndIcon', 'swipeableViewsProps', 'themed', 'toolbar', 'activeTabIndex', 'onTabChange', 'defaultTabIndex']);

	    var toolbar = this.props.toolbar;


	    var activeTabIndex = (0, _getField2.default)(this.props, this.state, 'activeTabIndex');

	    var tabsEl = _react.Children.only(children);
	    var tabId = tabsEl.props.tabId;
	    var content = _react.Children.map(tabsEl.props.children, function (tab, index) {
	      if (!tab) {
	        return tab;
	      }

	      return _react2.default.createElement(
	        _TabPanel2.default,
	        {
	          id: tab.props.controlsId || tabId + '-panel-' + index,
	          active: activeTabIndex === index,
	          style: panelStyle,
	          className: panelClassName,
	          component: panelComponent,
	          controlledById: tab.props.id || tabId + '-' + index
	        },
	        _react2.default.createElement(_ResizeObserver2.default, { watchHeight: true, onResize: _this2._resizePanel }),
	        tab.props.children
	      );
	    });

	    var childrenProps = _react.Children.only(children).props;
	    var tabs = (0, _react.cloneElement)(children, {
	      colored: typeof childrenProps.colored !== 'undefined' ? childrenProps.colored : colored,
	      onTabChange: this._handleTabChange,
	      activeTabIndex: activeTabIndex
	    });

	    var prominentToolbar = false;
	    if (toolbar) {
	      var toolbarProps = _react.Children.only(toolbar).props;
	      toolbar = (0, _react.cloneElement)(toolbar, {
	        component: toolbarProps.component || 'div',
	        colored: typeof toolbarProps.colored !== 'undefined' ? childrenProps.colored : colored
	      });

	      prominentToolbar = toolbarProps.prominent || toolbarProps.prominentTitle;
	    }

	    var header = void 0;
	    if (fixed) {
	      header = _react2.default.createElement(
	        _Paper2.default,
	        {
	          style: headerStyle,
	          className: (0, _classnames2.default)('md-tabs-fixed-container', {
	            'md-toolbar--themed': themed
	          }, headerClassName),
	          zDepth: headerZDepth,
	          component: headerComponent
	        },
	        toolbar,
	        tabs
	      );
	    }

	    var baseSlideStyle = (_baseSlideStyle = {}, _baseSlideStyle[slideHeightProp] = panelHeight, _baseSlideStyle);

	    return _react2.default.createElement(
	      Component,
	      _extends({
	        style: style,
	        className: (0, _classnames2.default)('md-tabs-container', className)
	      }, props, {
	        ref: this._setContainer
	      }),
	      header,
	      header ? null : toolbar,
	      header ? null : tabs,
	      _react2.default.createElement(
	        _reactSwipeableViews2.default,
	        _extends({}, swipeableViewsProps, {
	          style: swipeableViewsStyle,
	          className: (0, _classnames2.default)('md-tabs-content', {
	            'md-tabs-content--offset': !toolbar && !labelAndIcon && fixed,
	            'md-tabs-content--offset-icon': !toolbar && fixed && labelAndIcon,
	            'md-tabs-content--offset-toolbar': toolbar && fixed && !prominentToolbar && !labelAndIcon,
	            'md-tabs-content--offset-toolbar-prominent': toolbar && fixed && prominentToolbar && !labelAndIcon,
	            'md-tabs-content--offset-toolbar-icon': fixed && toolbar && labelAndIcon && !prominentToolbar,
	            'md-tabs-content--offset-toolbar-prominent-icon': fixed && toolbar && labelAndIcon && prominentToolbar
	          }, swipeableViewsClassName),
	          slideStyle: _extends({}, baseSlideStyle, typeof slideStyle === 'function' ? slideStyle(baseSlideStyle, panelHeight) : slideStyle),
	          index: activeTabIndex,
	          onChangeIndex: this._handleSwipeChange
	        }),
	        content
	      )
	    );
	  };

	  return TabsContainer;
	}(_react.PureComponent);

	TabsContainer.propTypes = {
	  /**
	   * An optional style to apply to the container.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the container.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to each `TabPanel` that gets generated. Each tab's children
	   * will get wrapped in a `TabPanel` component.
	   */
	  panelStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to each each `TabPanel` that gets generated. Each tab's
	   * children will get wrapped in a `TabPanel` component.
	   */
	  panelClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the header component when the tabs are fixed to the top of the page.
	   * The optional toolbar and tabs get wrapped in a `Paper` component.
	   */
	  headerStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the header component when the tabs are fixed to the top of the page.
	   * The optional toolbar and tabs get wrapped in a `Paper` component.
	   */
	  headerClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the `SwipeableViews`.
	   *
	   * @see https://github.com/oliviertassinari/react-swipeable-views#user-content-swipeableviews-
	   */
	  swipeableViewsStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the `SwipeableViews` container.
	   */
	  swipeableViewsClassName: _propTypes2.default.string,

	  /**
	   * An optional style to apply to each slide component or a function that returns such style.
	   *
	   * Default style and height of slide component will be passed in the function.
	   * The function should return a style that will be merged with default style, or `null`.
	   *
	   * @see https://github.com/oliviertassinari/react-swipeable-views#user-content-swipeableviews-
	   */
	  slideStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

	  /**
	   * The property that should be used to set height of a slide component.
	   */
	  slideHeightProp: _propTypes2.default.oneOf(['height', 'minHeight', 'maxHeight']),

	  /**
	   * This should be a `Tabs` component with children of `Tab`. This is used to figure out which
	   * tab's content is currently visible.
	   */
	  children: _propTypes2.default.element.isRequired,

	  /**
	   * The component to render the container as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * The component to render each `TabPanel` as.
	   */
	  panelComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),

	  /**
	   * An optional toolbar to render above the tabs.
	   */
	  toolbar: _propTypes2.default.element,

	  /**
	   * An optional active tab index to use. If this is defined, the component will be controlled
	   * and require the `onTabChange` prop to be defined.
	   */
	  activeTabIndex: (0, _controlled2.default)(_propTypes2.default.number, 'onTabChange', 'defaultTabIndex'),

	  /**
	   * An optional function to call when a new tab is selected by swiping or clicking a tab. When
	   * a new tab has been clicked, the callback will include the active tab index, the tab's `id`,
	   * the tab's `controlsId`, the tab's `children`, and the click event.
	   *
	   * If the tab was changed by swiping, it will only contain the new active tab index.
	   *
	   * ```js
	   * onTabChange(newActiveTabIndex, tabId, tabControlsId, tabChildren, event);
	   * ```
	   */
	  onTabChange: _propTypes2.default.func,

	  /**
	   * The default tab index to use when the component is uncontrolled.
	   */
	  defaultTabIndex: _propTypes2.default.number.isRequired,

	  /**
	   * Boolean if the `toolbar` and `Tabs` should be cloned with `colored: true`.
	   */
	  colored: _propTypes2.default.bool,

	  /**
	   * Boolean if the `toolbar` should be applied with the theme color. This _really_ only
	   * applies when you create a `fixed` tabs container.
	   */
	  themed: _propTypes2.default.bool,

	  /**
	   * Boolean if the tabs and the optional toolbar should be fixed to the top of the page.
	   */
	  fixed: _propTypes2.default.bool,

	  /**
	   * A boolean if a `fixed` `TabsContainer` has tabs with a label and an icon.
	   */
	  labelAndIcon: _propTypes2.default.bool,

	  /**
	   * An optional component to render the fixed tabs header as.
	   */
	  headerComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),

	  /**
	   * The zDepth for the fixed tabs header.
	   */
	  headerZDepth: (0, _between2.default)(_propTypes2.default.number, 0, 5),

	  /**
	   * Any additional props to apply to the SwipeableViews component. View the
	   * [SwipeableViews API](https://github.com/oliviertassinari/react-swipeable-views#api)
	   * for valid attributes.
	   *
	   * You will not be able to set the `style`, `className`, `slideStyle`, `index`,
	   * or `onChangeIndex` props for the SwipeableViews.
	   *
	   * The styling and classnames can be updated with the other TabsContainer props.
	   */
	  swipeableViewsProps: _propTypes2.default.object
	};
	TabsContainer.defaultProps = {
	  component: 'section',
	  defaultTabIndex: 0,
	  headerZDepth: 1,
	  slideHeightProp: 'height'
	};
	exports.default = TabsContainer;

/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(497);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _SwipeableViews = _interopRequireDefault(__webpack_require__(498));

	var _default = _SwipeableViews.default;
	exports.default = _default;

/***/ }),
/* 497 */
/***/ (function(module, exports) {

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	module.exports = _interopRequireDefault;

/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(497);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getDomTreeShapes = getDomTreeShapes;
	exports.findNativeHandler = findNativeHandler;
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(499));

	var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(500));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(502));

	var _createClass2 = _interopRequireDefault(__webpack_require__(503));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(504));

	var _inherits2 = _interopRequireDefault(__webpack_require__(507));

	var _react = _interopRequireDefault(__webpack_require__(1));

	var _propTypes = _interopRequireDefault(__webpack_require__(173));

	var _warning = _interopRequireDefault(__webpack_require__(509));

	var _properties = _interopRequireDefault(__webpack_require__(324));

	var _on = _interopRequireDefault(__webpack_require__(510));

	var _off = _interopRequireDefault(__webpack_require__(511));

	var _reactSwipeableViewsCore = __webpack_require__(512);

	function addEventListenerEnhanced(node, event, handler, options) {
	  (0, _on.default)(node, event, handler, options);
	  return {
	    remove: function remove() {
	      (0, _off.default)(node, event, handler, options);
	    }
	  };
	}

	var styleInjected = false; // Support old version of iOS and IE 10.
	// To be deleted in 2019.

	function injectStyle() {
	  // Inject once for all the instances
	  if (!styleInjected) {
	    var style = document.createElement('style');
	    style.innerHTML = "\n      .react-swipeable-view-container {\n        display: -webkit-box;\n        display: -ms-flexbox;\n      }\n      .react-swipeable-view-container > div {\n        -ms-flex-negative: 0;\n      }\n    ";

	    if (document.body) {
	      document.body.appendChild(style);
	    }

	    styleInjected = true;
	  }
	}

	var styles = {
	  container: {
	    direction: 'ltr',
	    display: 'flex',
	    willChange: 'transform'
	  },
	  slide: {
	    width: '100%',
	    WebkitFlexShrink: 0,
	    flexShrink: 0,
	    overflow: 'auto'
	  }
	};
	var axisProperties = {
	  root: {
	    x: {
	      overflowX: 'hidden'
	    },
	    'x-reverse': {
	      overflowX: 'hidden'
	    },
	    y: {
	      overflowY: 'hidden'
	    },
	    'y-reverse': {
	      overflowY: 'hidden'
	    }
	  },
	  flexDirection: {
	    x: 'row',
	    'x-reverse': 'row-reverse',
	    y: 'column',
	    'y-reverse': 'column-reverse'
	  },
	  transform: {
	    x: function x(translate) {
	      return "translate(".concat(-translate, "%, 0)");
	    },
	    'x-reverse': function xReverse(translate) {
	      return "translate(".concat(translate, "%, 0)");
	    },
	    y: function y(translate) {
	      return "translate(0, ".concat(-translate, "%)");
	    },
	    'y-reverse': function yReverse(translate) {
	      return "translate(0, ".concat(translate, "%)");
	    }
	  },
	  length: {
	    x: 'width',
	    'x-reverse': 'width',
	    y: 'height',
	    'y-reverse': 'height'
	  },
	  rotationMatrix: {
	    x: {
	      x: [1, 0],
	      y: [0, 1]
	    },
	    'x-reverse': {
	      x: [-1, 0],
	      y: [0, 1]
	    },
	    y: {
	      x: [0, 1],
	      y: [1, 0]
	    },
	    'y-reverse': {
	      x: [0, -1],
	      y: [1, 0]
	    }
	  },
	  scrollPosition: {
	    x: 'scrollLeft',
	    'x-reverse': 'scrollLeft',
	    y: 'scrollTop',
	    'y-reverse': 'scrollTop'
	  },
	  scrollLength: {
	    x: 'scrollWidth',
	    'x-reverse': 'scrollWidth',
	    y: 'scrollHeight',
	    'y-reverse': 'scrollHeight'
	  },
	  clientLength: {
	    x: 'clientWidth',
	    'x-reverse': 'clientWidth',
	    y: 'clientHeight',
	    'y-reverse': 'clientHeight'
	  }
	};

	function createTransition(property, options) {
	  var duration = options.duration,
	      easeFunction = options.easeFunction,
	      delay = options.delay;
	  return "".concat(property, " ").concat(duration, " ").concat(easeFunction, " ").concat(delay);
	} // We are using a 2x2 rotation matrix.


	function applyRotationMatrix(touch, axis) {
	  var rotationMatrix = axisProperties.rotationMatrix[axis];
	  return {
	    pageX: rotationMatrix.x[0] * touch.pageX + rotationMatrix.x[1] * touch.pageY,
	    pageY: rotationMatrix.y[0] * touch.pageX + rotationMatrix.y[1] * touch.pageY
	  };
	}

	function adaptMouse(event) {
	  event.touches = [{
	    pageX: event.pageX,
	    pageY: event.pageY
	  }];
	  return event;
	}

	function getDomTreeShapes(element, rootNode) {
	  var domTreeShapes = [];

	  while (element && element !== rootNode) {
	    // We reach a Swipeable View, no need to look higher in the dom tree.
	    if (element.hasAttribute('data-swipeable')) {
	      break;
	    }

	    var style = window.getComputedStyle(element);

	    if ( // Ignore the scroll children if the element is absolute positioned.
	    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden
	    style.getPropertyValue('overflow-x') === 'hidden') {
	      domTreeShapes = [];
	    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
	      // Ignore the nodes that have no width.
	      // Keep elements with a scroll
	      domTreeShapes.push({
	        element: element,
	        scrollWidth: element.scrollWidth,
	        scrollHeight: element.scrollHeight,
	        clientWidth: element.clientWidth,
	        clientHeight: element.clientHeight,
	        scrollLeft: element.scrollLeft,
	        scrollTop: element.scrollTop
	      });
	    }

	    element = element.parentNode;
	  }

	  return domTreeShapes;
	} // We can only have one node at the time claiming ownership for handling the swipe.
	// Otherwise, the UX would be confusing.
	// That's why we use a singleton here.


	var nodeWhoClaimedTheScroll = null;

	function findNativeHandler(params) {
	  var domTreeShapes = params.domTreeShapes,
	      pageX = params.pageX,
	      startX = params.startX,
	      axis = params.axis;
	  return domTreeShapes.some(function (shape) {
	    // Determine if we are going backward or forward.
	    var goingForward = pageX >= startX;

	    if (axis === 'x' || axis === 'y') {
	      goingForward = !goingForward;
	    }

	    var scrollPosition = shape[axisProperties.scrollPosition[axis]];
	    var areNotAtStart = scrollPosition > 0;
	    var areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];

	    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
	      nodeWhoClaimedTheScroll = shape.element;
	      return true;
	    }

	    return false;
	  });
	}

	var SwipeableViews =
	/*#__PURE__*/
	function (_React$Component) {
	  (0, _inherits2.default)(SwipeableViews, _React$Component);

	  function SwipeableViews(props, context) {
	    var _this;

	    (0, _classCallCheck2.default)(this, SwipeableViews);
	    _this = (0, _possibleConstructorReturn2.default)(this, (SwipeableViews.__proto__ || Object.getPrototypeOf(SwipeableViews)).call(this, props, context));
	    _this.rootNode = null;
	    _this.containerNode = null;
	    _this.ignoreNextScrollEvents = false;
	    _this.viewLength = 0;
	    _this.startX = 0;
	    _this.lastX = 0;
	    _this.vx = 0;
	    _this.startY = 0;
	    _this.isSwiping = undefined;
	    _this.started = false;
	    _this.startIndex = 0;
	    _this.transitionListener = null;
	    _this.touchMoveListener = null;
	    _this.activeSlide = null;
	    _this.indexCurrent = null;

	    _this.handleSwipeStart = function (event) {
	      var axis = _this.props.axis; // Latency and rapid rerenders on some devices can leave
	      // a period where rootNode briefly equals null.

	      if (_this.rootNode === null) {
	        return;
	      }

	      var touch = applyRotationMatrix(event.touches[0], axis);
	      _this.viewLength = _this.rootNode.getBoundingClientRect()[axisProperties.length[axis]];
	      _this.startX = touch.pageX;
	      _this.lastX = touch.pageX;
	      _this.vx = 0;
	      _this.startY = touch.pageY;
	      _this.isSwiping = undefined;
	      _this.started = true;
	      var computedStyle = window.getComputedStyle(_this.containerNode);
	      var transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');

	      if (transform && transform !== 'none') {
	        var transformValues = transform.split('(')[1].split(')')[0].split(',');
	        var rootStyle = window.getComputedStyle(_this.rootNode);
	        var tranformNormalized = applyRotationMatrix({
	          pageX: parseInt(transformValues[4], 10),
	          pageY: parseInt(transformValues[5], 10)
	        }, axis);
	        _this.startIndex = -tranformNormalized.pageX / (_this.viewLength - parseInt(rootStyle.paddingLeft, 10) - parseInt(rootStyle.paddingRight, 10)) || 0;
	      }
	    };

	    _this.handleSwipeMove = function (event) {
	      // The touch start event can be cancel.
	      // Makes sure we set a starting point.
	      if (!_this.started) {
	        _this.handleTouchStart(event);

	        return;
	      } // Latency and rapid rerenders on some devices
	      // can leave a period where rootNode briefly equals null.


	      if (_this.rootNode === null) {
	        return;
	      } // We are not supposed to hanlde this touch move.


	      if (nodeWhoClaimedTheScroll !== null && nodeWhoClaimedTheScroll !== _this.rootNode) {
	        return;
	      }

	      var _this$props = _this.props,
	          axis = _this$props.axis,
	          children = _this$props.children,
	          ignoreNativeScroll = _this$props.ignoreNativeScroll,
	          onSwitching = _this$props.onSwitching,
	          resistance = _this$props.resistance;
	      var touch = applyRotationMatrix(event.touches[0], axis); // We don't know yet.

	      if (_this.isSwiping === undefined) {
	        var dx = Math.abs(touch.pageX - _this.startX);
	        var dy = Math.abs(touch.pageY - _this.startY);
	        var isSwiping = dx > dy && dx > _reactSwipeableViewsCore.constant.UNCERTAINTY_THRESHOLD; // We let the parent handle the scroll.

	        if (!resistance && (axis === 'y' || axis === 'y-reverse') && (_this.indexCurrent === 0 && _this.startX < touch.pageX || _this.indexCurrent === _react.default.Children.count(_this.props.children) - 1 && _this.startX > touch.pageX)) {
	          _this.isSwiping = false;
	          return;
	        } // We are likely to be swiping, let's prevent the scroll event.


	        if (dx > dy) {
	          event.preventDefault();
	        }

	        if (isSwiping === true || dy > _reactSwipeableViewsCore.constant.UNCERTAINTY_THRESHOLD) {
	          _this.isSwiping = isSwiping;
	          _this.startX = touch.pageX; // Shift the starting point.

	          return; // Let's wait the next touch event to move something.
	        }
	      }

	      if (_this.isSwiping !== true) {
	        return;
	      } // We are swiping, let's prevent the scroll event.


	      event.preventDefault(); // Low Pass filter.

	      _this.vx = _this.vx * 0.5 + (touch.pageX - _this.lastX) * 0.5;
	      _this.lastX = touch.pageX;

	      var _computeIndex = (0, _reactSwipeableViewsCore.computeIndex)({
	        children: children,
	        resistance: resistance,
	        pageX: touch.pageX,
	        startIndex: _this.startIndex,
	        startX: _this.startX,
	        viewLength: _this.viewLength
	      }),
	          index = _computeIndex.index,
	          startX = _computeIndex.startX; // Add support for native scroll elements.


	      if (nodeWhoClaimedTheScroll === null && !ignoreNativeScroll) {
	        var domTreeShapes = getDomTreeShapes(event.target, _this.rootNode);
	        var hasFoundNativeHandler = findNativeHandler({
	          domTreeShapes: domTreeShapes,
	          startX: _this.startX,
	          pageX: touch.pageX,
	          axis: axis
	        }); // We abort the touch move handler.

	        if (hasFoundNativeHandler) {
	          return;
	        }
	      } // We are moving toward the edges.


	      if (startX) {
	        _this.startX = startX;
	      } else if (nodeWhoClaimedTheScroll === null) {
	        nodeWhoClaimedTheScroll = _this.rootNode;
	      }

	      _this.setIndexCurrent(index);

	      var callback = function callback() {
	        if (onSwitching) {
	          onSwitching(index, 'move');
	        }
	      };

	      if (_this.state.displaySameSlide || !_this.state.isDragging) {
	        _this.setState({
	          displaySameSlide: false,
	          isDragging: true
	        }, callback);
	      }

	      callback();
	    };

	    _this.handleSwipeEnd = function () {
	      nodeWhoClaimedTheScroll = null; // The touch start event can be cancel.
	      // Makes sure that a starting point is set.

	      if (!_this.started) {
	        return;
	      }

	      _this.started = false;

	      if (_this.isSwiping !== true) {
	        return;
	      }

	      var indexLatest = _this.state.indexLatest;
	      var indexCurrent = _this.indexCurrent;
	      var delta = indexLatest - indexCurrent;
	      var indexNew; // Quick movement

	      if (Math.abs(_this.vx) > _this.props.threshold) {
	        if (_this.vx > 0) {
	          indexNew = Math.floor(indexCurrent);
	        } else {
	          indexNew = Math.ceil(indexCurrent);
	        }
	      } else if (Math.abs(delta) > _this.props.hysteresis) {
	        // Some hysteresis with indexLatest.
	        indexNew = delta > 0 ? Math.floor(indexCurrent) : Math.ceil(indexCurrent);
	      } else {
	        indexNew = indexLatest;
	      }

	      var indexMax = _react.default.Children.count(_this.props.children) - 1;

	      if (indexNew < 0) {
	        indexNew = 0;
	      } else if (indexNew > indexMax) {
	        indexNew = indexMax;
	      }

	      _this.setIndexCurrent(indexNew);

	      _this.setState({
	        indexLatest: indexNew,
	        isDragging: false
	      }, function () {
	        if (_this.props.onSwitching) {
	          _this.props.onSwitching(indexNew, 'end');
	        }

	        if (_this.props.onChangeIndex && indexNew !== indexLatest) {
	          _this.props.onChangeIndex(indexNew, indexLatest, {
	            reason: 'swipe'
	          });
	        } // Manually calling handleTransitionEnd in that case as isn't otherwise.


	        if (indexCurrent === indexLatest) {
	          _this.handleTransitionEnd();
	        }
	      });
	    };

	    _this.handleTouchStart = function (event) {
	      if (_this.props.onTouchStart) {
	        _this.props.onTouchStart(event);
	      }

	      _this.handleSwipeStart(event);
	    };

	    _this.handleTouchEnd = function (event) {
	      if (_this.props.onTouchEnd) {
	        _this.props.onTouchEnd(event);
	      }

	      _this.handleSwipeEnd(event);
	    };

	    _this.handleMouseDown = function (event) {
	      if (_this.props.onMouseDown) {
	        _this.props.onMouseDown(event);
	      }

	      event.persist();

	      _this.handleSwipeStart(adaptMouse(event));
	    };

	    _this.handleMouseUp = function (event) {
	      if (_this.props.onMouseUp) {
	        _this.props.onMouseUp(event);
	      }

	      _this.handleSwipeEnd(adaptMouse(event));
	    };

	    _this.handleMouseLeave = function (event) {
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(event);
	      } // Filter out events


	      if (_this.started) {
	        _this.handleSwipeEnd(adaptMouse(event));
	      }
	    };

	    _this.handleMouseMove = function (event) {
	      if (_this.props.onMouseMove) {
	        _this.props.onMouseMove(event);
	      } // Filter out events


	      if (_this.started) {
	        _this.handleSwipeMove(adaptMouse(event));
	      }
	    };

	    _this.handleScroll = function (event) {
	      if (_this.props.onScroll) {
	        _this.props.onScroll(event);
	      } // Ignore events bubbling up.


	      if (event.target !== _this.rootNode) {
	        return;
	      }

	      if (_this.ignoreNextScrollEvents) {
	        _this.ignoreNextScrollEvents = false;
	        return;
	      }

	      var indexLatest = _this.state.indexLatest;
	      var indexNew = Math.ceil(event.target.scrollLeft / event.target.clientWidth) + indexLatest;
	      _this.ignoreNextScrollEvents = true; // Reset the scroll position.

	      event.target.scrollLeft = 0;

	      if (_this.props.onChangeIndex && indexNew !== indexLatest) {
	        _this.props.onChangeIndex(indexNew, indexLatest, {
	          reason: 'focus'
	        });
	      }
	    };

	    _this.updateHeight = function () {
	      if (_this.activeSlide !== null) {
	        var child = _this.activeSlide.children[0];

	        if (child !== undefined && child.offsetHeight !== undefined && _this.state.heightLatest !== child.offsetHeight) {
	          _this.setState({
	            heightLatest: child.offsetHeight
	          });
	        }
	      }
	    };

	    if (false) {
	      (0, _reactSwipeableViewsCore.checkIndexBounds)(_this.props);
	    }

	    _this.setIndexCurrent(_this.props.index);

	    _this.state = {
	      indexLatest: _this.props.index,
	      // Set to true as soon as the component is swiping.
	      // It's the state counter part of this.isSwiping.
	      isDragging: false,
	      // Help with SSR logic and lazy loading logic.
	      isFirstRender: true,
	      heightLatest: 0,
	      // Let the render method that we are going to display the same slide than previously.
	      displaySameSlide: true
	    };
	    return _this;
	  }

	  (0, _createClass2.default)(SwipeableViews, [{
	    key: "getChildContext",
	    value: function getChildContext() {
	      var _this2 = this;

	      return {
	        swipeableViews: {
	          slideUpdateHeight: function slideUpdateHeight() {
	            _this2.updateHeight();
	          }
	        }
	      };
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this3 = this;

	      // Subscribe to transition end events.
	      this.transitionListener = addEventListenerEnhanced(this.containerNode, _properties.default.end, function (event) {
	        if (event.target !== _this3.containerNode) {
	          return;
	        }

	        _this3.handleTransitionEnd();
	      }); // Block the thread to handle that event.

	      this.touchMoveListener = addEventListenerEnhanced(this.rootNode, 'touchmove', function (event) {
	        // Handling touch events is disabled.
	        if (_this3.props.disabled) {
	          return;
	        }

	        _this3.handleSwipeMove(event);
	      }, {
	        passive: false
	      }); // eslint-disable-next-line react/no-did-mount-set-state

	      this.setState({
	        isFirstRender: false
	      });
	      injectStyle(); // Send all functions in an object if action param is set.

	      if (this.props.action) {
	        this.props.action({
	          updateHeight: this.updateHeight
	        });
	      }
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var index = nextProps.index;

	      if (typeof index === 'number' && index !== this.props.index) {
	        if (false) {
	          (0, _reactSwipeableViewsCore.checkIndexBounds)(nextProps);
	        }

	        this.setIndexCurrent(index);
	        this.setState({
	          // If true, we are going to change the children. We shoudn't animate it.
	          displaySameSlide: (0, _reactSwipeableViewsCore.getDisplaySameSlide)(this.props, nextProps),
	          indexLatest: index
	        });
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.transitionListener.remove();
	      this.touchMoveListener.remove();
	    }
	  }, {
	    key: "setIndexCurrent",
	    value: function setIndexCurrent(indexCurrent) {
	      if (!this.props.animateTransitions && this.indexCurrent !== indexCurrent) {
	        this.handleTransitionEnd();
	      }

	      this.indexCurrent = indexCurrent;

	      if (this.containerNode) {
	        var axis = this.props.axis;
	        var transform = axisProperties.transform[axis](indexCurrent * 100);
	        this.containerNode.style.WebkitTransform = transform;
	        this.containerNode.style.transform = transform;
	      }
	    }
	  }, {
	    key: "handleTransitionEnd",
	    value: function handleTransitionEnd() {
	      if (!this.props.onTransitionEnd) {
	        return;
	      } // Filters out when changing the children


	      if (this.state.displaySameSlide) {
	        return;
	      } // The rest callback is triggered when swiping. It's just noise.
	      // We filter it out.


	      if (!this.state.isDragging) {
	        this.props.onTransitionEnd();
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this4 = this;

	      var _props = this.props,
	          action = _props.action,
	          animateHeight = _props.animateHeight,
	          animateTransitions = _props.animateTransitions,
	          axis = _props.axis,
	          children = _props.children,
	          containerStyleProp = _props.containerStyle,
	          disabled = _props.disabled,
	          disableLazyLoading = _props.disableLazyLoading,
	          enableMouseEvents = _props.enableMouseEvents,
	          hysteresis = _props.hysteresis,
	          ignoreNativeScroll = _props.ignoreNativeScroll,
	          index = _props.index,
	          onChangeIndex = _props.onChangeIndex,
	          onSwitching = _props.onSwitching,
	          onTransitionEnd = _props.onTransitionEnd,
	          resistance = _props.resistance,
	          slideStyleProp = _props.slideStyle,
	          slideClassName = _props.slideClassName,
	          springConfig = _props.springConfig,
	          style = _props.style,
	          threshold = _props.threshold,
	          other = (0, _objectWithoutProperties2.default)(_props, ["action", "animateHeight", "animateTransitions", "axis", "children", "containerStyle", "disabled", "disableLazyLoading", "enableMouseEvents", "hysteresis", "ignoreNativeScroll", "index", "onChangeIndex", "onSwitching", "onTransitionEnd", "resistance", "slideStyle", "slideClassName", "springConfig", "style", "threshold"]);
	      var _state = this.state,
	          displaySameSlide = _state.displaySameSlide,
	          heightLatest = _state.heightLatest,
	          isDragging = _state.isDragging,
	          isFirstRender = _state.isFirstRender,
	          indexLatest = _state.indexLatest;
	      var touchEvents = !disabled ? {
	        onTouchStart: this.handleTouchStart,
	        onTouchEnd: this.handleTouchEnd
	      } : {};
	      var mouseEvents = !disabled && enableMouseEvents ? {
	        onMouseDown: this.handleMouseDown,
	        onMouseUp: this.handleMouseUp,
	        onMouseLeave: this.handleMouseLeave,
	        onMouseMove: this.handleMouseMove
	      } : {}; // There is no point to animate if we are already providing a height.

	       false ? (0, _warning.default)(!animateHeight || !containerStyleProp || !containerStyleProp.height, "react-swipeable-view: You are setting animateHeight to true but you are\nalso providing a custom height.\nThe custom height has a higher priority than the animateHeight property.\nSo animateHeight is most likely having no effect at all.") : void 0;
	      var slideStyle = (0, _extends2.default)({}, styles.slide, slideStyleProp);
	      var transition;
	      var WebkitTransition;

	      if (isDragging || !animateTransitions || displaySameSlide) {
	        transition = 'all 0s ease 0s';
	        WebkitTransition = 'all 0s ease 0s';
	      } else {
	        transition = createTransition('transform', springConfig);
	        WebkitTransition = createTransition('-webkit-transform', springConfig);

	        if (heightLatest !== 0) {
	          var additionalTranstion = ", ".concat(createTransition('height', springConfig));
	          transition += additionalTranstion;
	          WebkitTransition += additionalTranstion;
	        }
	      }

	      var containerStyle = {
	        height: null,
	        WebkitFlexDirection: axisProperties.flexDirection[axis],
	        flexDirection: axisProperties.flexDirection[axis],
	        WebkitTransition: WebkitTransition,
	        transition: transition
	      }; // Apply the styles for SSR considerations

	      if (disableLazyLoading || !isFirstRender) {
	        var transform = axisProperties.transform[axis](this.indexCurrent * 100);
	        containerStyle.WebkitTransform = transform;
	        containerStyle.transform = transform;
	      }

	      if (animateHeight) {
	        containerStyle.height = heightLatest;
	      }

	      return _react.default.createElement("div", (0, _extends2.default)({
	        ref: function ref(node) {
	          _this4.rootNode = node;
	        },
	        style: (0, _extends2.default)({}, axisProperties.root[axis], style)
	      }, other, touchEvents, mouseEvents, {
	        onScroll: this.handleScroll
	      }), _react.default.createElement("div", {
	        ref: function ref(node) {
	          _this4.containerNode = node;
	        },
	        style: (0, _extends2.default)({}, containerStyle, styles.container, containerStyleProp),
	        className: "react-swipeable-view-container"
	      }, _react.default.Children.map(children, function (child, indexChild) {
	        if (!disableLazyLoading && isFirstRender && indexChild !== indexLatest) {
	          return null;
	        }

	         false ? (0, _warning.default)(_react.default.isValidElement(child), "react-swipeable-view: one of the children provided is invalid: ".concat(child, ".\nWe are expecting a valid React Element")) : void 0;
	        var ref;
	        var hidden = true;

	        if (indexChild === indexLatest) {
	          hidden = false;

	          if (animateHeight) {
	            ref = function ref(node) {
	              _this4.activeSlide = node;

	              _this4.updateHeight();
	            };

	            slideStyle.overflowY = 'hidden';
	          }
	        }

	        return _react.default.createElement("div", {
	          ref: ref,
	          style: slideStyle,
	          className: slideClassName,
	          "aria-hidden": hidden,
	          "data-swipeable": "true"
	        }, child);
	      })));
	    }
	  }]);
	  return SwipeableViews;
	}(_react.default.Component); // Added as an ads for people using the React dev tools in production.
	// So they know, the tool used to build the awesome UI they
	// are looking at/retro engineering.


	SwipeableViews.displayName = 'ReactSwipableView';
	SwipeableViews.propTypes =  false ? {
	  /**
	   * This is callback property. It's called by the component on mount.
	   * This is useful when you want to trigger an action programmatically.
	   * It currently only supports updateHeight() action.
	   *
	   * @param {object} actions This object contains all posible actions
	   * that can be triggered programmatically.
	   */
	  action: _propTypes.default.func,

	  /**
	   * If `true`, the height of the container will be animated to match the current slide height.
	   * Animating another style property has a negative impact regarding performance.
	   */
	  animateHeight: _propTypes.default.bool,

	  /**
	   * If `false`, changes to the index prop will not cause an animated transition.
	   */
	  animateTransitions: _propTypes.default.bool,

	  /**
	   * The axis on which the slides will slide.
	   */
	  axis: _propTypes.default.oneOf(['x', 'x-reverse', 'y', 'y-reverse']),

	  /**
	   * Use this property to provide your slides.
	   */
	  children: _propTypes.default.node.isRequired,

	  /**
	   * This is the inlined style that will be applied
	   * to each slide container.
	   */
	  containerStyle: _propTypes.default.object,

	  /**
	   * If `true`, it will disable touch events.
	   * This is useful when you want to prohibit the user from changing slides.
	   */
	  disabled: _propTypes.default.bool,

	  /**
	   * This is the config used to disable lazyloding,
	   * if `true` will render all the views in first rendering.
	   */
	  disableLazyLoading: _propTypes.default.bool,

	  /**
	   * If `true`, it will enable mouse events.
	   * This will allow the user to perform the relevant swipe actions with a mouse.
	   */
	  enableMouseEvents: _propTypes.default.bool,

	  /**
	   * Configure hysteresis between slides. This value determines how far
	   * should user swipe to switch slide.
	   */
	  hysteresis: _propTypes.default.number,

	  /**
	   * If `true`, it will ignore native scroll container.
	   * It can be used to filter out false positive that blocks the swipe.
	   */
	  ignoreNativeScroll: _propTypes.default.bool,

	  /**
	   * This is the index of the slide to show.
	   * This is useful when you want to change the default slide shown.
	   * Or when you have tabs linked to each slide.
	   */
	  index: _propTypes.default.number,

	  /**
	   * This is callback prop. It's call by the
	   * component when the shown slide change after a swipe made by the user.
	   * This is useful when you have tabs linked to each slide.
	   *
	   * @param {integer} index This is the current index of the slide.
	   * @param {integer} indexLatest This is the oldest index of the slide.
	   * @param {object} meta Meta data containing more information about the event.
	   */
	  onChangeIndex: _propTypes.default.func,

	  /**
	   * @ignore
	   */
	  onMouseDown: _propTypes.default.func,

	  /**
	   * @ignore
	   */
	  onMouseLeave: _propTypes.default.func,

	  /**
	   * @ignore
	   */
	  onMouseMove: _propTypes.default.func,

	  /**
	   * @ignore
	   */
	  onMouseUp: _propTypes.default.func,

	  /**
	   * @ignore
	   */
	  onScroll: _propTypes.default.func,

	  /**
	   * This is callback prop. It's called by the
	   * component when the slide switching.
	   * This is useful when you want to implement something corresponding
	   * to the current slide position.
	   *
	   * @param {integer} index This is the current index of the slide.
	   * @param {string} type Can be either `move` or `end`.
	   */
	  onSwitching: _propTypes.default.func,

	  /**
	   * @ignore
	   */
	  onTouchEnd: _propTypes.default.func,

	  /**
	   * @ignore
	   */
	  onTouchMove: _propTypes.default.func,

	  /**
	   * @ignore
	   */
	  onTouchStart: _propTypes.default.func,

	  /**
	   * The callback that fires when the animation comes to a rest.
	   * This is useful to defer CPU intensive task.
	   */
	  onTransitionEnd: _propTypes.default.func,

	  /**
	   * If `true`, it will add bounds effect on the edges.
	   */
	  resistance: _propTypes.default.bool,

	  /**
	   * This is the className that will be applied
	   * on the slide component.
	   */
	  slideClassName: _propTypes.default.string,

	  /**
	   * This is the inlined style that will be applied
	   * on the slide component.
	   */
	  slideStyle: _propTypes.default.object,

	  /**
	   * This is the config used to create CSS transitions.
	   * This is useful to change the dynamic of the transition.
	   */
	  springConfig: _propTypes.default.shape({
	    duration: _propTypes.default.string,
	    easeFunction: _propTypes.default.string,
	    delay: _propTypes.default.string
	  }),

	  /**
	   * This is the inlined style that will be applied
	   * on the root component.
	   */
	  style: _propTypes.default.object,

	  /**
	   * This is the threshold used for detecting a quick swipe.
	   * If the computed speed is above this value, the index change.
	   */
	  threshold: _propTypes.default.number
	} : {};
	SwipeableViews.defaultProps = {
	  animateHeight: false,
	  animateTransitions: true,
	  axis: 'x',
	  disabled: false,
	  disableLazyLoading: false,
	  enableMouseEvents: false,
	  hysteresis: 0.6,
	  ignoreNativeScroll: false,
	  index: 0,
	  threshold: 5,
	  springConfig: {
	    duration: '0.35s',
	    easeFunction: 'cubic-bezier(0.15, 0.3, 0.25, 1)',
	    delay: '0s'
	  },
	  resistance: false
	};
	SwipeableViews.childContextTypes = {
	  swipeableViews: _propTypes.default.shape({
	    slideUpdateHeight: _propTypes.default.func
	  })
	};
	var _default = SwipeableViews;
	exports.default = _default;

/***/ }),
/* 499 */
/***/ (function(module, exports) {

	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	var objectWithoutPropertiesLoose = __webpack_require__(501);

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};
	  var target = objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	module.exports = _objectWithoutProperties;

/***/ }),
/* 501 */
/***/ (function(module, exports) {

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	module.exports = _objectWithoutPropertiesLoose;

/***/ }),
/* 502 */
/***/ (function(module, exports) {

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	module.exports = _classCallCheck;

/***/ }),
/* 503 */
/***/ (function(module, exports) {

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	module.exports = _createClass;

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

	var _typeof = __webpack_require__(505);

	var assertThisInitialized = __webpack_require__(506);

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return assertThisInitialized(self);
	}

	module.exports = _possibleConstructorReturn;

/***/ }),
/* 505 */
/***/ (function(module, exports) {

	function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

	function _typeof(obj) {
	  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
	    module.exports = _typeof = function _typeof(obj) {
	      return _typeof2(obj);
	    };
	  } else {
	    module.exports = _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
	    };
	  }

	  return _typeof(obj);
	}

	module.exports = _typeof;

/***/ }),
/* 506 */
/***/ (function(module, exports) {

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	module.exports = _assertThisInitialized;

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

	var setPrototypeOf = __webpack_require__(508);

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) setPrototypeOf(subClass, superClass);
	}

	module.exports = _inherits;

/***/ }),
/* 508 */
/***/ (function(module, exports) {

	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf;

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @providesModule warning
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var __DEV__ = ("production") !== 'production';

	var warning = function() {};

	if (__DEV__) {
	  var printWarning = function printWarning(format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    var argIndex = 0;
	    var message = 'Warning: ' +
	      format.replace(/%s/g, function() {
	        return args[argIndex++];
	      });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  }

	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	          '`warning(condition, format, ...args)` requires a warning ' +
	          'message argument'
	      );
	    }
	    if (!condition) {
	      printWarning.apply(null, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;


/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _inDOM = __webpack_require__(323);

	var _inDOM2 = _interopRequireDefault(_inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var on = function on() {};
	if (_inDOM2.default) {
	  on = function () {

	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.addEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.attachEvent('on' + eventName, function (e) {
	        e = e || window.event;
	        e.target = e.target || e.srcElement;
	        e.currentTarget = node;
	        handler.call(node, e);
	      });
	    };
	  }();
	}

	exports.default = on;
	module.exports = exports['default'];

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _inDOM = __webpack_require__(323);

	var _inDOM2 = _interopRequireDefault(_inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var off = function off() {};
	if (_inDOM2.default) {
	  off = function () {
	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.removeEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.detachEvent('on' + eventName, handler);
	    };
	  }();
	}

	exports.default = off;
	module.exports = exports['default'];

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(497);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "checkIndexBounds", {
	  enumerable: true,
	  get: function get() {
	    return _checkIndexBounds.default;
	  }
	});
	Object.defineProperty(exports, "computeIndex", {
	  enumerable: true,
	  get: function get() {
	    return _computeIndex.default;
	  }
	});
	Object.defineProperty(exports, "constant", {
	  enumerable: true,
	  get: function get() {
	    return _constant.default;
	  }
	});
	Object.defineProperty(exports, "getDisplaySameSlide", {
	  enumerable: true,
	  get: function get() {
	    return _getDisplaySameSlide.default;
	  }
	});
	Object.defineProperty(exports, "mod", {
	  enumerable: true,
	  get: function get() {
	    return _mod.default;
	  }
	});

	var _checkIndexBounds = _interopRequireDefault(__webpack_require__(513));

	var _computeIndex = _interopRequireDefault(__webpack_require__(515));

	var _constant = _interopRequireDefault(__webpack_require__(516));

	var _getDisplaySameSlide = _interopRequireDefault(__webpack_require__(517));

	var _mod = _interopRequireDefault(__webpack_require__(518));

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(497);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = _interopRequireDefault(__webpack_require__(1));

	var _warning = _interopRequireDefault(__webpack_require__(514));

	var checkIndexBounds = function checkIndexBounds(props) {
	  var index = props.index,
	      children = props.children;

	  var childrenCount = _react.default.Children.count(children);

	   false ? (0, _warning.default)(index >= 0 && index <= childrenCount, "react-swipeable-view: the new index: ".concat(index, " is out of bounds: [0-").concat(childrenCount, "].")) : void 0;
	};

	var _default = checkIndexBounds;
	exports.default = _default;

/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @providesModule warning
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var __DEV__ = ("production") !== 'production';

	var warning = function() {};

	if (__DEV__) {
	  var printWarning = function printWarning(format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    var argIndex = 0;
	    var message = 'Warning: ' +
	      format.replace(/%s/g, function() {
	        return args[argIndex++];
	      });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  }

	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	          '`warning(condition, format, ...args)` requires a warning ' +
	          'message argument'
	      );
	    }
	    if (!condition) {
	      printWarning.apply(null, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;


/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(497);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = computeIndex;

	var _react = _interopRequireDefault(__webpack_require__(1));

	var _constant = _interopRequireDefault(__webpack_require__(516));

	function computeIndex(params) {
	  var children = params.children,
	      startIndex = params.startIndex,
	      startX = params.startX,
	      pageX = params.pageX,
	      viewLength = params.viewLength,
	      resistance = params.resistance;
	  var indexMax = _react.default.Children.count(children) - 1;
	  var index = startIndex + (startX - pageX) / viewLength;
	  var newStartX;

	  if (!resistance) {
	    // Reset the starting point
	    if (index < 0) {
	      index = 0;
	      newStartX = (index - startIndex) * viewLength + pageX;
	    } else if (index > indexMax) {
	      index = indexMax;
	      newStartX = (index - startIndex) * viewLength + pageX;
	    }
	  } else if (index < 0) {
	    index = Math.exp(index * _constant.default.RESISTANCE_COEF) - 1;
	  } else if (index > indexMax) {
	    index = indexMax + 1 - Math.exp((indexMax - index) * _constant.default.RESISTANCE_COEF);
	  }

	  return {
	    index: index,
	    startX: newStartX
	  };
	}

/***/ }),
/* 516 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var _default = {
	  RESISTANCE_COEF: 0.6,
	  // This value is closed to what browsers are using internally to
	  // trigger a native scroll.
	  UNCERTAINTY_THRESHOLD: 3 // px

	};
	exports.default = _default;

/***/ }),
/* 517 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var getDisplaySameSlide = function getDisplaySameSlide(props, nextProps) {
	  var displaySameSlide = false;

	  if (props.children.length && nextProps.children.length) {
	    var oldChildren = props.children[props.index];
	    var oldKey = oldChildren ? oldChildren.key : 'empty';

	    if (oldKey !== null) {
	      var newChildren = nextProps.children[nextProps.index];
	      var newKey = newChildren ? newChildren.key : 'empty';

	      if (oldKey === newKey) {
	        displaySameSlide = true;
	      }
	    }
	  }

	  return displaySameSlide;
	};

	var _default = getDisplaySameSlide;
	exports.default = _default;

/***/ }),
/* 518 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	// Extended version of % with negative integer support.
	function mod(n, m) {
	  var q = n % m;
	  return q < 0 ? q + m : q;
	}

	var _default = mod;
	exports.default = _default;

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * This component is just a simple accessibility wrapper when using tabs. If you use the
	 * `TabsContainer` component, you *should* not manually use this as the `TabsContainer`
	 * generates this for you.
	 */
	var TabPanel = function (_PureComponent) {
	  _inherits(TabPanel, _PureComponent);

	  function TabPanel() {
	    _classCallCheck(this, TabPanel);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  TabPanel.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.component,
	        id = _props.id,
	        active = _props.active,
	        className = _props.className,
	        controlledById = _props.controlledById,
	        children = _props.children,
	        props = _objectWithoutProperties(_props, ['component', 'id', 'active', 'className', 'controlledById', 'children']);

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        id: id,
	        className: (0, _classnames2.default)('md-tab-panel', className),
	        role: 'tabpanel',
	        'aria-hidden': !active,
	        'aria-labelledby': controlledById
	      }),
	      children
	    );
	  };

	  return TabPanel;
	}(_react.PureComponent);

	TabPanel.propTypes = {
	  /**
	   * An id for the panel. This is used for a11y. This should equal the `controlsId`
	   * of whichever tab's children will be placed in here.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * An id for the tab that owns this panel. This should equal the `id` of whichever
	   * tab's children will be placed in here.
	   */
	  controlledById: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The component to render the panel as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * Boolean if the panel is currently active. This is used to generated the `aria-hidden`
	   * attribute.
	   */
	  active: _propTypes2.default.bool,

	  /**
	   * Any children to display.
	   */
	  children: _propTypes2.default.node
	};
	TabPanel.defaultProps = {
	  component: 'div'
	};
	exports.default = TabPanel;

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _getField = __webpack_require__(251);

	var _getField2 = _interopRequireDefault(_getField);

	var _controlled = __webpack_require__(250);

	var _controlled2 = _interopRequireDefault(_controlled);

	var _TabIndicator = __webpack_require__(521);

	var _TabIndicator2 = _interopRequireDefault(_TabIndicator);

	var _IconSeparator = __webpack_require__(284);

	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);

	var _ResizeObserver = __webpack_require__(357);

	var _ResizeObserver2 = _interopRequireDefault(_ResizeObserver);

	var _FontIcon = __webpack_require__(254);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _getDeprecatedIcon = __webpack_require__(253);

	var _getDeprecatedIcon2 = _interopRequireDefault(_getDeprecatedIcon);

	var _MenuTab = __webpack_require__(522);

	var _MenuTab2 = _interopRequireDefault(_MenuTab);

	var _TabOverflowButton = __webpack_require__(523);

	var _TabOverflowButton2 = _interopRequireDefault(_TabOverflowButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MOBILE_PADDING = 72;
	var DESKTOP_PADDING = 80;
	var MOBILE_TAB_MIN_WIDTH = 72;
	var DESKTOP_TAB_MIN_WIDTH = 160;

	/**
	 * The `Tabs` component is used to manage the state of which tab is currently active.
	 */

	var Tabs = function (_PureComponent) {
	  _inherits(Tabs, _PureComponent);

	  function Tabs(props) {
	    _classCallCheck(this, Tabs);

	    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

	    _this._setContainer = function (container) {
	      _this._container = container;
	      _this._positionElements(_this._container !== null);
	    };

	    _this._positionElements = function (initialRender) {
	      initialRender = typeof initialRender === 'boolean' && initialRender;
	      if (!_this._container) {
	        return;
	      }

	      var _this$props = _this.props,
	          centered = _this$props.centered,
	          overflowMenu = _this$props.overflowMenu;
	      var mobile = _this.props.mobile;


	      var paddingLeft = void 0;
	      if (!centered && _this._shouldAlign(_this.props)) {
	        paddingLeft = _this._calcPaddingLeft(_this._container, mobile);
	      }

	      var overflowAtIndex = void 0;
	      if (!mobile) {
	        overflowAtIndex = _this._calcOverflowIndex(_this._container, paddingLeft, overflowMenu);
	      }

	      var indicatorPosition = _this._calcIndicatorPosition(_this._container, initialRender ? paddingLeft : 0);

	      _this.setState(_extends({ mobile: mobile, paddingLeft: paddingLeft, overflowAtIndex: overflowAtIndex }, indicatorPosition), _this._scrollActiveIntoView);
	    };

	    _this._scrollActiveIntoView = function () {
	      if (!_this._container || !_this.state.mobile) {
	        return;
	      }

	      var active = _this._container.querySelector('.md-tab--active');
	      if (!active) {
	        return;
	      }

	      var allTabs = Array.prototype.slice.call(_this._container.querySelectorAll('.md-tab'));
	      if (allTabs[0] === active) {
	        _this._container.scrollLeft = 0;
	        return;
	      }

	      var _this$_container = _this._container,
	          containerWidth = _this$_container.offsetWidth,
	          scrollLeft = _this$_container.scrollLeft;
	      var activeWidth = active.offsetWidth,
	          activeOffset = active.offsetLeft;

	      var inFullViewLeft = activeOffset - scrollLeft >= 0;
	      var inFullViewRight = activeOffset + activeWidth - (containerWidth + scrollLeft) <= 0;
	      if (inFullViewLeft && inFullViewRight) {
	        return;
	      }

	      var offset = 0;
	      allTabs.some(function (tab, i) {
	        if (i < _this.props.activeTabIndex) {
	          offset += tab.offsetWidth;
	        }

	        return i < _this.state.activeTabIndex;
	      });

	      _this._container.scrollLeft = offset;
	    };

	    _this._handleTabChange = function (index, tabId, tabControlsId, tabChildren, event) {
	      if (_this.props.onTabChange) {
	        _this.props.onTabChange(index, tabId, tabControlsId, tabChildren, event);
	      }

	      if (typeof _this.props.activeTabIndex === 'undefined') {
	        _this.setState(_extends({
	          activeTabIndex: index
	        }, _this._calcIndicatorPosition(_this._container, 0, index, _this.state.overflowAtIndex)));
	      }
	    };

	    _this._mapToOverflowTabProps = function (tab, i) {
	      var index = i + _this.state.overflowAtIndex;
	      var active = (0, _getField2.default)(_this.props, _this.state, 'activeTabIndex') === index;
	      var tabEl = _react.Children.only(tab);
	      var handleTabChange = _this._handleTabChange;

	      return {
	        active: active,
	        primaryText: tabEl.props.label,
	        onClick: function handleClick(event) {
	          var _tabEl$props = tabEl.props,
	              onClick = _tabEl$props.onClick,
	              id = _tabEl$props.id,
	              controlsId = _tabEl$props.controlsId,
	              children = _tabEl$props.children;

	          if (onClick) {
	            onClick(index, event);
	          }

	          handleTabChange(index, id, controlsId, children, event);
	        }
	      };
	    };

	    _this._nextIndexes = function (increment) {
	      var _this$state = _this.state,
	          overflowIndex = _this$state.overflowIndex,
	          overflowAtIndex = _this$state.overflowAtIndex;

	      var visibleAmt = (overflowAtIndex - overflowIndex) * (increment ? 1 : -1);

	      _this.setState({
	        overflowIndex: overflowIndex + visibleAmt,
	        overflowAtIndex: overflowAtIndex + visibleAmt
	      });
	    };

	    _this._showNextTabs = function () {
	      _this._nextIndexes(true);
	    };

	    _this._showPreviousTabs = function () {
	      _this._nextIndexes(false);
	    };

	    var defaultTabIndex = typeof props.activeTabIndex === 'undefined' ? props.defaultTabIndex : props.activeTabIndex;
	    var indicatorWidth = props.mobile ? MOBILE_TAB_MIN_WIDTH : DESKTOP_TAB_MIN_WIDTH;
	    _this.state = {
	      indicatorWidth: indicatorWidth,
	      indicatorOffset: indicatorWidth * defaultTabIndex,
	      indicatorVisible: true,
	      overflowIndex: 0
	    };

	    if (typeof props.activeTabIndex === 'undefined') {
	      _this.state.activeTabIndex = defaultTabIndex;
	    }
	    return _this;
	  }

	  Tabs.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.activeTabIndex !== nextProps.activeTabIndex) {
	      this.setState(_extends({}, this._calcIndicatorPosition(this._container, 0, nextProps.activeTabIndex, this.state.overflowAtIndex)), this._scrollActiveIntoView);
	    } else if (!this._shouldAlign(nextProps) && this._shouldAlign(this.props)) {
	      this.setState({ paddingLeft: null });
	    }
	  };

	  Tabs.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
	    if (this._shouldAlign(this.props) && this.state.overflowAtIndex !== prevState.overflowAtIndex) {
	      var paddingLeft = this._calcPaddingLeft(this._container, this.state.mobile);
	      // Have to wait for the overflow menus to appear, then wop
	      /* eslint-disable react/no-did-update-set-state */
	      this.setState({ paddingLeft: paddingLeft });
	    } else {
	      var labels = _react.Children.map(_react.Children.toArray(this.props.children), function (_ref) {
	        var label = _ref.props.label;
	        return label;
	      });
	      var prevLabels = _react.Children.map(_react.Children.toArray(prevProps.children), function (_ref2) {
	        var label = _ref2.props.label;
	        return label;
	      });
	      if (labels.length !== prevLabels.length || labels.filter(function (_, i) {
	        return labels[i] !== prevLabels[i];
	      }).length) {
	        this.setState(_extends({}, this._calcIndicatorPosition(this._container, 0, this.props.activeTabIndex, this.state.overflowAtIndex)), this._scrollActiveIntoView);
	      }
	    }
	  };

	  Tabs.prototype._shouldAlign = function _shouldAlign(props) {
	    return typeof props.alignToKeyline === 'boolean' ? props.alignToKeyline : _react.Children.toArray(props.children).filter(function (child) {
	      return !!child;
	    }).length > 3;
	  };

	  Tabs.prototype._calcPaddingLeft = function _calcPaddingLeft(container, mobile) {
	    var mediaPadding = mobile ? MOBILE_PADDING : DESKTOP_PADDING;
	    var tab = container.querySelector('.md-tab');

	    var _tab$querySelector = tab.querySelector('.md-tab-label'),
	        labelOffset = _tab$querySelector.offsetLeft;

	    return mediaPadding - labelOffset;
	  };

	  Tabs.prototype._calcOverflowIndex = function _calcOverflowIndex(container) {
	    var paddingLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    var menu = arguments[2];

	    var containerWidth = container.offsetWidth;
	    var overflowIndex = 0;
	    if (containerWidth < container.scrollWidth) {
	      var tabs = Array.prototype.slice.call(container.querySelectorAll('.md-tab'));
	      var totalWidth = 0;
	      tabs.some(function (tab, i) {
	        overflowIndex = i;
	        totalWidth += tab.offsetWidth;

	        return totalWidth > containerWidth;
	      });
	    }

	    return Math.max(0, overflowIndex - (menu ? 1 : 0));
	  };

	  Tabs.prototype._calcIndicatorPosition = function _calcIndicatorPosition(container) {
	    var paddingLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    var activeTabIndex = arguments[2];
	    var overflowAtIndex = arguments[3];

	    var activeItem = void 0;
	    if (typeof activeTabIndex === 'number') {
	      if (overflowAtIndex > 0 && activeTabIndex >= overflowAtIndex) {
	        activeItem = container.querySelector('.md-menu--tab');
	      } else {
	        activeItem = container.querySelectorAll('.md-tab')[activeTabIndex];
	      }
	    } else {
	      activeItem = container.querySelector('.md-tab--active');
	    }

	    if (!activeItem) {
	      return { indicatorVisible: false };
	    }

	    var _activeItem = activeItem,
	        indicatorWidth = _activeItem.offsetWidth,
	        indicatorOffset = _activeItem.offsetLeft;

	    return {
	      indicatorWidth: indicatorWidth,
	      indicatorOffset: indicatorOffset + paddingLeft,
	      indicatorVisible: !overflowAtIndex || overflowAtIndex > activeTabIndex
	    };
	  };

	  Tabs.prototype.render = function render() {
	    var _this2 = this;

	    var _state = this.state,
	        indicatorOffset = _state.indicatorOffset,
	        indicatorWidth = _state.indicatorWidth,
	        indicatorVisible = _state.indicatorVisible,
	        overflowIndex = _state.overflowIndex,
	        overflowAtIndex = _state.overflowAtIndex,
	        paddingLeft = _state.paddingLeft;

	    var _props = this.props,
	        Component = _props.component,
	        style = _props.style,
	        className = _props.className,
	        activeTabClassName = _props.activeTabClassName,
	        inactiveTabClassName = _props.inactiveTabClassName,
	        colored = _props.colored,
	        centered = _props.centered,
	        tabId = _props.tabId,
	        overflowMenu = _props.overflowMenu,
	        overflowMenuLabel = _props.overflowMenuLabel,
	        nextIcon = _props.nextIcon,
	        previousIcon = _props.previousIcon,
	        overflowMenuIcon = _props.overflowMenuIcon,
	        overflowMenuIconChildren = _props.overflowMenuIconChildren,
	        overflowMenuIconClassName = _props.overflowMenuIconClassName,
	        nextIconChildren = _props.nextIconChildren,
	        nextIconClassName = _props.nextIconClassName,
	        previousIconChildren = _props.previousIconChildren,
	        previousIconClassName = _props.previousIconClassName,
	        propActiveIndex = _props.activeTabIndex,
	        defaultTabIndex = _props.defaultTabIndex,
	        onTabChange = _props.onTabChange,
	        alignToKeyline = _props.alignToKeyline,
	        mobile = _props.mobile,
	        defaultMedia = _props.defaultMedia,
	        desktopMinWidth = _props.desktopMinWidth,
	        props = _objectWithoutProperties(_props, ['component', 'style', 'className', 'activeTabClassName', 'inactiveTabClassName', 'colored', 'centered', 'tabId', 'overflowMenu', 'overflowMenuLabel', 'nextIcon', 'previousIcon', 'overflowMenuIcon', 'overflowMenuIconChildren', 'overflowMenuIconClassName', 'nextIconChildren', 'nextIconClassName', 'previousIconChildren', 'previousIconClassName', 'activeTabIndex', 'defaultTabIndex', 'onTabChange', 'alignToKeyline', 'mobile', 'defaultMedia', 'desktopMinWidth']);

	    var activeTabIndex = (0, _getField2.default)(this.props, this.state, 'activeTabIndex');

	    var icon = false;
	    var children = _react.Children.map(_react.Children.toArray(this.props.children), function (tab, index) {
	      var handleOnClick = function handleOnClick(tabIndex, id, tabControlsId, tabChildren, event) {
	        if (tab.props.onClick) {
	          tab.props.onClick(tabId, id, tabControlsId, tabChildren, event);
	        }

	        _this2._handleTabChange(tabIndex, id, tabControlsId, tabChildren, event);
	      };

	      if (tab.props.icon) {
	        icon = true;
	      }

	      return (0, _react.cloneElement)(tab, {
	        index: index,
	        activeClassName: activeTabClassName,
	        inactiveClassName: inactiveTabClassName,
	        id: tab.props.id || tabId + '-' + index,
	        controlsId: tab.props.controlsId || tabId + '-panel-' + index,
	        active: index === activeTabIndex,
	        onClick: handleOnClick
	      });
	    });

	    var overflow = void 0;
	    var nextControl = void 0;
	    var previousControl = void 0;
	    if (overflowAtIndex) {
	      var length = children.length;
	      if (overflowMenu) {
	        overflow = _react2.default.createElement(_MenuTab2.default, {
	          id: tabId + '-overflow-menu',
	          activeTabIndex: activeTabIndex,
	          overflowAtIndex: overflowAtIndex,
	          label: _react2.default.createElement(
	            _IconSeparator2.default,
	            { label: overflowMenuLabel },
	            (0, _getDeprecatedIcon2.default)(overflowMenuIconClassName, overflowMenuIconChildren, overflowMenuIcon)
	          ),
	          tabs: children.slice(overflowAtIndex, children.length).map(this._mapToOverflowTabProps)
	        });
	      }

	      children = children.slice(overflowIndex, overflowAtIndex);

	      if (!overflowMenu && overflowIndex > 0) {
	        previousControl = _react2.default.createElement(_TabOverflowButton2.default, {
	          left: true,
	          icon: icon,
	          iconEl: (0, _getDeprecatedIcon2.default)(previousIconClassName, previousIconChildren, previousIcon),
	          onClick: this._showPreviousTabs
	        });
	      }

	      if (!overflowMenu && length > 3 && overflowAtIndex + overflowIndex <= length) {
	        nextControl = _react2.default.createElement(_TabOverflowButton2.default, {
	          icon: icon,
	          onClick: this._showNextTabs,
	          iconEl: (0, _getDeprecatedIcon2.default)(nextIconClassName, nextIconChildren, nextIcon)
	        });
	      }
	    }

	    return _react2.default.createElement(
	      Component,
	      _extends({}, props, {
	        style: _extends({}, style, { paddingLeft: paddingLeft }),
	        className: (0, _classnames2.default)('md-tabs', {
	          'md-tabs--pagination': overflowAtIndex && !overflowMenu,
	          'md-tabs--centered': centered,
	          'md-background--primary': colored
	        }, className),
	        role: 'tablist'
	      }),
	      _react2.default.createElement(_ResizeObserver2.default, { watchWidth: true, watchHeight: true, onResize: this._positionElements, elRef: this._setContainer }),
	      previousControl,
	      children,
	      nextControl,
	      overflow,
	      _react2.default.createElement(_TabIndicator2.default, { offset: indicatorOffset, width: indicatorWidth, visible: indicatorVisible })
	    );
	  };

	  return Tabs;
	}(_react.PureComponent);

	Tabs.propTypes = {
	  /**
	   * A base id to use for each `Tab`. When the child tabs are created, they are cloned
	   * with some additional accessibility props. Each tab will get a prop with this and the
	   * current index of the tab.
	   */
	  tabId: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The className to use when a tab is currently active. The default className does not
	   * actually apply any styles.
	   *
	   * If this prop is set, it will override any `activeClassName` props applied to the child
	   * `Tab`s. Either set a custom `activeClassName` on each `Tab`, or use this prop to apply
	   * the same `activeClassName` to each `Tab`.
	   *
	   * @see {@link Tabs/Tab#activeClassName}
	   */
	  activeTabClassName: _propTypes2.default.string,

	  /**
	   * The className to use when the tab is not active and not selected. By default,
	   * this will set inactive tabs' color to `$md-white-base`. This works great
	   * if the tabs are placed on a colored toolbar but fails when the tabs are not colored
	   * or on a white background. In these cases, it is recommended to change this value
	   * to `md-text--secondary` or some other class name.
	   *
	   * If this prop is set, it will override any `inactiveClassName` props applied to the child
	   * `Tab`s. Either set a custom `inactiveClassName` on each `Tab`, or use this prop to apply
	   * the same `inactiveClassName` to each `Tab`.
	   *
	   * @see {@link Tabs/Tab#inactiveClassName}
	   */
	  inactiveTabClassName: _propTypes2.default.string,

	  /**
	   * The component to render the tabs in.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * This should either be a single `Tab` component or a list of `Tab` components. Unfortunately,
	   * the child *must* be exactly a `Tab` component because this is unable to extract the correct
	   * `label` and `children` from a custom `Tab` component.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]).isRequired,

	  /**
	   * Boolean if the tabs should be centered instead of aligned to the keyline. The tabs will
	   * only be aligned to the keyline when there are more than 3 tabs and the `alignToKeyline`
	   * prop is `false`.
	   */
	  centered: _propTypes2.default.bool,

	  /**
	   * Boolean if the tabs should align to a toolbar's title keyline. If this is undefined,
	   * the tabs will try to align to the keyline when there are more than 3 tabs.
	   */
	  alignToKeyline: _propTypes2.default.bool,

	  /**
	   * Boolean if the tabs should be colored with the primary color. If this is false or undefined,
	   * the tabs will be colored for the light or dark theme.
	   */
	  colored: _propTypes2.default.bool,

	  /**
	   * A boolean if the overflow tabs on desktop displays should appear in a menu. If this is false,
	   * the additional tabs will be available by using pagination buttons.
	   */
	  overflowMenu: _propTypes2.default.bool,

	  /**
	   * An optional function to call when the active tab is changed. The callback will include
	   * the new active tab index and a click event.
	   *
	   * ```js
	   * onTabChange(newTabIndex, event);
	   * ```
	   */
	  onTabChange: _propTypes2.default.func,

	  /**
	   * An optional active tab index to use. If this is defined, it will make the component controlled
	   * and require the `onTabChange` prop to be defined.
	   */
	  activeTabIndex: (0, _controlled2.default)(_propTypes2.default.number, 'onTabChange', 'defaultTabIndex'),

	  /**
	   * The default tab index to use when the component is uncontrolled.
	   */
	  defaultTabIndex: _propTypes2.default.number.isRequired,

	  /**
	   * When the `overflowMenu` prop is false, this will be used to render the "next slice of tabs"
	   * when there are too many tabs to display at once on desktop screens.
	   */
	  nextIcon: _propTypes2.default.element,

	  /**
	   * When the `overflowMenu` prop is false, this will be used to render the "previous slice of tabs"
	   * when there are too many tabs to display at once on desktop screens.
	   */
	  previousIcon: _propTypes2.default.element,

	  /**
	   * When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.
	   * This will be to render the icon to the right of the label.
	   */
	  overflowMenuIcon: _propTypes2.default.element,

	  /**
	   * When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.
	   * This will be the text that displays as a tab.
	   */
	  overflowMenuLabel: _propTypes2.default.node.isRequired,

	  /**
	   * Boolean if the tabs are currently rendered on a mobile or tablet device. This is used to calculate
	   * overflow/padding on the tabs.
	   */
	  mobile: _propTypes2.default.bool,
	  defaultMedia: (0, _deprecated2.default)(_propTypes2.default.oneOf(['mobile', 'tablet', 'desktop']), 'Use `mobile` instead'),
	  desktopMinWidth: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `mobile` instead'),
	  nextIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `nextIcon` prop instead'),
	  nextIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `nextIcon` prop instead'),
	  previousIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `previousIcon` prop instead'),
	  previousIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `previousIcon` prop instead'),
	  overflowMenuIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `overflowMenuIcon` prop instead'),
	  overflowMenuIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `overflowMenuIcon` prop instead')
	};
	Tabs.defaultProps = {
	  component: 'ul',
	  defaultTabIndex: 0,
	  nextIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'keyboard_arrow_right'
	  ),
	  previousIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'keyboard_arrow_left'
	  ),
	  overflowMenuLabel: 'More',
	  overflowMenuIcon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'arrow_drop_down'
	  )
	};
	exports.default = Tabs;

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactMotion = __webpack_require__(260);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TabIndicator = function (_PureComponent) {
	  _inherits(TabIndicator, _PureComponent);

	  function TabIndicator() {
	    _classCallCheck(this, TabIndicator);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  TabIndicator.prototype.render = function render() {
	    var visible = this.props.visible;

	    return _react2.default.createElement(
	      _reactMotion.Motion,
	      {
	        style: {
	          x: (0, _reactMotion.spring)(this.props.offset),
	          width: (0, _reactMotion.spring)(this.props.width),
	          height: (0, _reactMotion.spring)(visible ? 2 : 0)
	        }
	      },
	      function (_ref) {
	        var x = _ref.x,
	            height = _ref.height,
	            width = _ref.width;

	        var transform = 'translate3d(' + x + 'px, 0, 0)';
	        return _react2.default.createElement('span', {
	          style: {
	            height: height,
	            width: width,
	            WebkitTransform: transform,
	            MozTransform: transform,
	            msTransform: transform,
	            transform: transform
	          },
	          className: 'md-tab-indicator'
	        });
	      }
	    );
	  };

	  return TabIndicator;
	}(_react.PureComponent);

	TabIndicator.propTypes = {
	  offset: _propTypes2.default.number.isRequired,
	  width: _propTypes2.default.number.isRequired,
	  visible: _propTypes2.default.bool
	};
	exports.default = TabIndicator;

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _isRequiredForA11y = __webpack_require__(305);

	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);

	var _Menu = __webpack_require__(348);

	var _Menu2 = _interopRequireDefault(_Menu);

	var _AccessibleFakeInkedButton = __webpack_require__(339);

	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);

	var _mapToListParts = __webpack_require__(413);

	var _mapToListParts2 = _interopRequireDefault(_mapToListParts);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `MenuTab` component is used when there are too many desktop tabs
	 * to be displayed without any overflow. If the `Tabs` component is used,
	 * this will automatically be included when the `menuOverflow` prop is true.
	 */
	var MenuTab = function (_PureComponent) {
	  _inherits(MenuTab, _PureComponent);

	  function MenuTab() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, MenuTab);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { visible: false }, _this._toggleVisible = function (e) {
	      if (_this.props.onClick) {
	        _this.props.onClick(e);
	      }

	      _this.setState({ visible: !_this.state.visible });
	    }, _this._handleClose = function () {
	      _this.setState({ visible: false });
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  MenuTab.prototype.render = function render() {
	    var _props = this.props,
	        id = _props.id,
	        style = _props.style,
	        className = _props.className,
	        tabStyle = _props.tabStyle,
	        tabClassName = _props.tabClassName,
	        tabs = _props.tabs,
	        label = _props.label,
	        activeTabIndex = _props.activeTabIndex,
	        overflowAtIndex = _props.overflowAtIndex,
	        props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'tabStyle', 'tabClassName', 'tabs', 'label', 'activeTabIndex', 'overflowAtIndex']);

	    var active = activeTabIndex >= overflowAtIndex;

	    var tab = _react2.default.createElement(
	      _AccessibleFakeInkedButton2.default,
	      _extends({}, props, {
	        onClick: this._toggleVisible,
	        style: tabStyle,
	        className: (0, _classnames2.default)('md-tab md-tab--menu', tabClassName)
	      }),
	      label
	    );

	    return _react2.default.createElement(
	      _Menu2.default,
	      {
	        id: id,
	        style: style,
	        className: (0, _classnames2.default)('md-menu--tab', {
	          'md-tab--active': active,
	          'md-tab--inactive': !active
	        }, className),
	        toggle: tab,
	        visible: this.state.visible,
	        onClose: this._handleClose
	      },
	      tabs.map(_mapToListParts2.default)
	    );
	  };

	  return MenuTab;
	}(_react.PureComponent);

	MenuTab.propTypes = {
	  /**
	   * An id to give the tab's menu.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

	  /**
	   * The current active tab index. This is used to determine which list item
	   * is active in the menu, and if the styles for an active tab should be applied
	   * to the menu.
	   */
	  activeTabIndex: _propTypes2.default.number.isRequired,

	  /**
	   * An tab index that caused the overflow to happen.
	   */
	  overflowAtIndex: _propTypes2.default.number.isRequired,

	  /**
	   * A list of tabs that should be rendered in the menu once opened. This can either
	   * be:
	   *
	   * - a `ListItem`, `Divider`, or `Subheader` component
	   * - a string to use as the `primaryText` for a list item
	   * - an object that defines props to generate a `ListItem`, `Divider`, or `Subheader` component
	   */
	  tabs: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string, _propTypes2.default.shape({
	    divider: _propTypes2.default.bool,
	    subheader: _propTypes2.default.bool,
	    primaryText: _propTypes2.default.node
	  })])).isRequired,

	  /**
	   * An optional style to apply to the menu.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the menu.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional style to apply to the tab in the menu.
	   */
	  tabStyle: _propTypes2.default.object,

	  /**
	   * An optional className to apply to the tab in the menu.
	   */
	  tabClassName: _propTypes2.default.string,

	  /**
	   * An optional function to call when the tab is clicked.
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * The label to display in the tab. This should normally be some text with
	   * a drop down arrow next to it.
	   */
	  label: _propTypes2.default.node.isRequired
	};
	exports.default = MenuTab;

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TabOverflowButton = function (_PureComponent) {
	  _inherits(TabOverflowButton, _PureComponent);

	  function TabOverflowButton() {
	    _classCallCheck(this, TabOverflowButton);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  TabOverflowButton.prototype.render = function render() {
	    var _props = this.props,
	        left = _props.left,
	        icon = _props.icon,
	        props = _objectWithoutProperties(_props, ['left', 'icon']);

	    return _react2.default.createElement(_Button2.default, _extends({}, props, {
	      icon: true,
	      className: (0, _classnames2.default)('md-icon--inherit md-btn--tab-overflow', {
	        'md-btn--tab-overflow-left': left,
	        'md-btn--tab-overflow-right': !left,
	        'md-btn--tab-overflow-icon': icon
	      })
	    }));
	  };

	  return TabOverflowButton;
	}(_react.PureComponent);

	TabOverflowButton.propTypes = {
	  left: _propTypes2.default.bool,
	  icon: _propTypes2.default.bool
	};
	exports.default = TabOverflowButton;

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _oneRequired = __webpack_require__(416);

	var _oneRequired2 = _interopRequireDefault(_oneRequired);

	var _AccessibleFakeInkedButton = __webpack_require__(339);

	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `Tab` component is used for rendering a single tab in the `Tabs` component.
	 * It can optionally have either a `label`, an `icon` or both.
	 */
	var Tab = function (_PureComponent) {
	  _inherits(Tab, _PureComponent);

	  function Tab() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Tab);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._handleClick = function (e) {
	      if (_this.props.onClick) {
	        _this.props.onClick(_this.props.index, _this.props.id, _this.props.controlsId, _this.props.children, e);
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Tab.prototype.render = function render() {
	    var _cn;

	    var _props = this.props,
	        id = _props.id,
	        controlsId = _props.controlsId,
	        className = _props.className,
	        activeClassName = _props.activeClassName,
	        inactiveClassName = _props.inactiveClassName,
	        active = _props.active,
	        propIcon = _props.icon,
	        propLabel = _props.label,
	        index = _props.index,
	        props = _objectWithoutProperties(_props, ['id', 'controlsId', 'className', 'activeClassName', 'inactiveClassName', 'active', 'icon', 'label', 'index']);

	    var _props2 = this.props,
	        icon = _props2.icon,
	        label = _props2.label;

	    if (icon) {
	      var iconEl = _react.Children.only(icon);
	      icon = (0, _react.cloneElement)(icon, {
	        className: (0, _classnames2.default)('md-icon--tab', iconEl.props.className)
	      });
	    }

	    if ((0, _react.isValidElement)(label)) {
	      var labelEl = _react.Children.only(label);
	      label = (0, _react.cloneElement)(label, {
	        className: (0, _classnames2.default)('md-tab-label', labelEl.props.className)
	      });
	    } else {
	      label = _react2.default.createElement(
	        'div',
	        { className: 'md-tab-label' },
	        label
	      );
	    }
	    return _react2.default.createElement(
	      _AccessibleFakeInkedButton2.default,
	      _extends({}, props, {
	        id: id,
	        role: 'tab',
	        onClick: this._handleClick,
	        className: (0, _classnames2.default)('md-tab', (_cn = {
	          'md-tab--icon': label && icon
	        }, _cn[activeClassName] = activeClassName && active, _cn[inactiveClassName] = inactiveClassName && !active, _cn), className),
	        'aria-controls': controlsId,
	        'aria-selected': active
	      }),
	      icon,
	      label
	    );
	  };

	  return Tab;
	}(_react.PureComponent);

	Tab.propTypes = {
	  /**
	   * An id for the tab. This is required for a11y. If you use the `Tabs` component, this
	   * will automatically be generated for you and injected into this component.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An id for a `TabPanel` that holds the children from this tab. This is required for a11y.
	   * If you use the `Tabs` component, this will automatically be generated for you and injected
	   * into this component.
	   */
	  controlsId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,

	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * The className to use when the tab is currently active. The default className does
	   * not actually apply any styles.
	   *
	   * @see {@link Tabs/Tabs#activeTabClassName}
	   */
	  activeClassName: _propTypes2.default.string,

	  /**
	   * The className to use when the tab is not active. By default, this will set inactive
	   * tabs' color to `$md-white-base`. This works great if the tabs are placed on a
	   * colored toolbar but fails when the tabs are not colored or on a white background.
	   * In these cases, it is recommended to change this value to `md-text--secondary`
	   * or some other class name.
	   *
	   * @see {@link Tabs/Tabs#inactiveTabClassName}
	   */
	  inactiveClassName: _propTypes2.default.string,

	  /**
	   * The component to render as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  /**
	   * Any children to display once the tab has been selected.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * An optional icon to display in the tab. This can either be used alone, or it
	   * will be placed above the `label` if both are given.
	   */
	  icon: _propTypes2.default.element,

	  /**
	   * An optional label to display in the tab. This can either be used alone, or it
	   * will be placed below the `icon` if both are given.
	   */
	  label: (0, _oneRequired2.default)(_propTypes2.default.node, 'icon'),

	  /**
	   * An optional function to call when the tab is clicked. The callback includes this tab's index,
	   * id, controlsId, children, and finally click event. All the additional parameters are included
	   * if you are not using the `TabsContainer` component. The `id` and `controlsId` are mainly passed
	   * for accessibility.
	   *
	   * ```js
	   * onClick(index, id, controlsId, children, event);
	   * ```
	   */
	  onClick: _propTypes2.default.func,

	  /**
	   * Boolean if the tab is currently active. If you use the `Tabs` component, this is automatically
	   * injected.
	   */
	  active: _propTypes2.default.bool,

	  /**
	   * Tab's index. If you use the `Tabs` component, this is automatically injected.
	   */
	  index: _propTypes2.default.number
	};
	Tab.defaultProps = {
	  component: 'li',
	  activeClassName: 'md-tab--active',
	  inactiveClassName: 'md-tab--inactive'
	};
	exports.default = Tab;

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = Tooltipped;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _TooltipContainer = __webpack_require__(300);

	var _TooltipContainer2 = _interopRequireDefault(_TooltipContainer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * Adds a tooltip for a component/element given as the only child.
	 *
	 * The component should render its children, or the tooltip will not be shown.
	 * Also the component should be positioned by `className` or `style`
	 * (CSS property `position` should have value `relative`, `absolute` or `fixed`),
	 * or the tooltip can appear incorrectly.
	 * Use `setPosition={true}` to automatically add `position: 'relative'` to the `style` of the wrapped component.
	 *
	 * Besides of `children` and `setPosition` all props set for `Tooltipped` component are passed through
	 * to `TooltipContainer` that is added as a child of the wrapped component and controls the tooltip.
	 *
	 * ```js
	 * <Tooltipped
	 *   label="Tooltip for text"
	 *   position="left"
	 *   delay={1000}
	 * >
	 *   <span style={{position: 'absolute', top: '10px', left: '70%'}}>
	 *     Some text
	 *     <div>Another line of text</div>
	 *   </span>
	 * </Tooltipped>
	 * ```
	 *
	 * ```js
	 * <Tooltipped
	 *   setPosition={true}
	 *   label="Avatar's tooltip"
	 *   position="top"
	 * >
	 *   <span style={{marginLeft: '30px'}}>
	 *       <Avatar random>T</Avatar>
	 *   </span>
	 * </Tooltipped>
	 * ```
	 */
	function Tooltipped(_ref) {
	  var children = _ref.children,
	      setPosition = _ref.setPosition,
	      props = _objectWithoutProperties(_ref, ['children', 'setPosition']);

	  var target = _react2.default.Children.only(children);
	  var targetProps = target.props;

	  if (props.label) {
	    var clonedProps = targetProps;
	    if (setPosition) {
	      clonedProps = _extends({}, clonedProps, {
	        style: _extends({}, clonedProps.style, { position: 'relative' })
	      });
	    }

	    target = _react2.default.cloneElement(target, clonedProps, [targetProps.children, _react2.default.createElement(_TooltipContainer2.default, _extends({ key: 'tooltipContainer' }, props))]);
	  }

	  return target;
	}

	Tooltipped.displayName = 'Tooltipped';

	Tooltipped.propTypes = {
	  /**
	   * A component/element the tooltip should be linked to.
	   */
	  children: _propTypes2.default.element.isRequired,
	  /**
	   * Tooltip's content.
	   */
	  label: _propTypes2.default.node,
	  /**
	   * Whether `position: relative` should be added to the `style` property of the wrapped component.
	   */
	  setPosition: _propTypes2.default.bool
	};

/***/ }),
/* 526 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.default = '1.4.2';

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouterDom = __webpack_require__(190);

	var _LoginForm = __webpack_require__(528);

	var _LoginForm2 = _interopRequireDefault(_LoginForm);

	var _api = __webpack_require__(215);

	var _api2 = _interopRequireDefault(_api);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LoginPage = function (_React$Component) {
	    _inherits(LoginPage, _React$Component);

	    function LoginPage(props, context) {
	        _classCallCheck(this, LoginPage);

	        // set the initial component state
	        var _this = _possibleConstructorReturn(this, (LoginPage.__proto__ || Object.getPrototypeOf(LoginPage)).call(this, props, context));

	        _this.state = {
	            loading: false,
	            errors: {},
	            successMessage: '',
	            user: {
	                username: '',
	                password: '',
	                data: null
	            }
	        };
	        _this.processForm = _this.processForm.bind(_this);
	        _this.changeUser = _this.changeUser.bind(_this);
	        _this.checkResponse = _this.checkResponse.bind(_this);
	        return _this;
	    }

	    _createClass(LoginPage, [{
	        key: 'sanitize',
	        value: function sanitize() {
	            if (this.state.user) {
	                var username = encodeURIComponent(this.state.user.username);
	                var password = encodeURIComponent(this.state.user.password);
	                return {
	                    "username": username,
	                    "password": password
	                };
	            }
	        }
	        /**
	         * Process the form.
	         *
	         * @param {object} event - the JavaScript event object
	         */

	    }, {
	        key: 'processForm',
	        value: function processForm(event) {
	            // prevent the form submission event
	            event.preventDefault();
	            var user = this.state.user;
	            if (user.username.length > 0) {
	                this.setState({ loading: true });
	                _api2.default.logIn(this.sanitize(), this.checkResponse);
	            }
	        }
	    }, {
	        key: 'checkResponse',
	        value: function checkResponse(response) {
	            var code = response.status;
	            if (code === 200) {
	                var user = this.state.user;
	                user['data'] = response.data;
	                this.setState({
	                    loading: false,
	                    user: user
	                });
	                if (this.props.loginHandler) {
	                    this.props.loginHandler.handleLoginSuccess(response.data, this.getReferer());
	                }
	            } else {
	                var errors = [];
	                if (code === 401) {
	                    errors.push('Bad credentials! Make sure you type correctly your access data');
	                } else {
	                    errors.push('Try again in a minute and if it is still failing, call @dtodo1paco');
	                }
	                this.setState({
	                    loading: false,
	                    errors: {
	                        summary: 'Ooops! something went wrong.',
	                        errors: errors
	                    }
	                });
	            }
	        }

	        /**
	         * Change the user object.
	         *
	         * @param {string} value - the value set to the field
	         * @param {object} event - the JavaScript event object
	         */

	    }, {
	        key: 'changeUser',
	        value: function changeUser(value, event) {
	            var field = event.target.name;
	            var user = this.state.user;
	            user[field] = value;
	            this.setState({
	                user: user
	            });
	        }
	    }, {
	        key: 'getReferer',
	        value: function getReferer() {
	            if (this.props.location.state != null && this.props.location.state.referer != null) {
	                return this.props.location.state.referer;
	            }
	            return null;
	        }

	        /**
	         * Render the component.
	         */

	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(_LoginForm2.default, {
	                onSubmit: this.processForm,
	                onChange: this.changeUser,
	                errors: this.state.errors,
	                successMessage: this.state.successMessage,
	                userName: this.state.user.username,
	                userPass: this.state.user.password
	            });
	        }
	    }]);

	    return LoginPage;
	}(_react2.default.Component);

	exports.default = LoginPage;

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(173);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactRouterDom = __webpack_require__(190);

	var _Cards = __webpack_require__(529);

	var _Buttons = __webpack_require__(309);

	var _TextFields = __webpack_require__(532);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var LoginForm = function LoginForm(_ref) {
	    var onSubmit = _ref.onSubmit,
	        onChange = _ref.onChange,
	        errors = _ref.errors,
	        successMessage = _ref.successMessage,
	        userName = _ref.userName,
	        userPass = _ref.userPass;
	    return _react2.default.createElement(
	        _Cards.Card,
	        { className: 'main-form md-block-centered' },
	        _react2.default.createElement(_Cards.CardTitle, { title: 'Login' }),
	        successMessage && _react2.default.createElement(
	            'div',
	            { className: 'message message-success' },
	            successMessage
	        ),
	        errors.summary && _react2.default.createElement(
	            'div',
	            { className: 'message message-error' },
	            errors.summary,
	            errors.errors.map(function (item, i) {
	                return _react2.default.createElement(
	                    'li',
	                    { key: i },
	                    item
	                );
	            })
	        ),
	        _react2.default.createElement(
	            'form',
	            { action: '/', onSubmit: onSubmit, className: 'md-grid', id: 'login-form' },
	            _react2.default.createElement(_TextFields.TextField, {
	                required: true,
	                errorText: 'Please, type your email address',
	                id: 'username',
	                name: 'username',
	                label: 'Email address',
	                lineDirection: 'center',
	                placeholder: 'myemailaddress@example.com',
	                value: userName,
	                onChange: onChange,
	                className: 'md-cell md-cell--12 md-cell--4-phone md-cell--8-tablet'
	            }),
	            _react2.default.createElement(_TextFields.TextField, {
	                required: true,
	                type: 'password',
	                errorText: 'Please, type your password',
	                id: 'password',
	                name: 'password',
	                label: 'Password',
	                lineDirection: 'center',
	                value: userPass,
	                onChange: onChange,
	                className: 'md-cell md-cell--12 md-cell--4-phone md-cell--8-tablet'
	            }),
	            _react2.default.createElement(
	                _Buttons.Button,
	                { id: 'login-submit', flat: true, type: 'submit', onSubmit: onSubmit, primary: true,
	                    className: 'md-cell md-cell--12 md-cell--4-phone md-cell--8-tablet' },
	                'Log in'
	            ),
	            _react2.default.createElement(
	                _Cards.CardText,
	                null,
	                'Don\'t have an account? ',
	                _react2.default.createElement(
	                    _reactRouterDom.Link,
	                    { to: '/signup' },
	                    'Create one'
	                ),
	                '.'
	            )
	        )
	    );
	};

	LoginForm.propTypes = {
	    onSubmit: _propTypes2.default.func.isRequired,
	    onChange: _propTypes2.default.func.isRequired,
	    errors: _propTypes2.default.object.isRequired,
	    successMessage: _propTypes2.default.string.isRequired,
	    userName: _propTypes2.default.string.isRequired,
	    userPass: _propTypes2.default.string.isRequired
	};

	exports.default = LoginForm;

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.CardActionOverlay = exports.CardText = exports.CardActions = exports.CardMedia = exports.CardTitle = exports.Card = undefined;

	var _Card2 = __webpack_require__(244);

	var _Card3 = _interopRequireDefault(_Card2);

	var _CardTitle2 = __webpack_require__(275);

	var _CardTitle3 = _interopRequireDefault(_CardTitle2);

	var _CardMedia2 = __webpack_require__(530);

	var _CardMedia3 = _interopRequireDefault(_CardMedia2);

	var _CardActions2 = __webpack_require__(303);

	var _CardActions3 = _interopRequireDefault(_CardActions2);

	var _CardText2 = __webpack_require__(378);

	var _CardText3 = _interopRequireDefault(_CardText2);

	var _CardActionOverlay2 = __webpack_require__(531);

	var _CardActionOverlay3 = _interopRequireDefault(_CardActionOverlay2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Card3.default;
	exports.Card = _Card3.default;
	exports.CardTitle = _CardTitle3.default;
	exports.CardMedia = _CardMedia3.default;
	exports.CardActions = _CardActions3.default;
	exports.CardText = _CardText3.default;
	exports.CardActionOverlay = _CardActionOverlay3.default;

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(248);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _deprecated = __webpack_require__(249);

	var _deprecated2 = _interopRequireDefault(_deprecated);

	var _componentDeprecated = __webpack_require__(311);

	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);

	var _Media = __webpack_require__(307);

	var _Media2 = _interopRequireDefault(_Media);

	var _MediaOverlay = __webpack_require__(308);

	var _MediaOverlay2 = _interopRequireDefault(_MediaOverlay);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `CardMedia` component is used to display images or some sort
	 * media.
	 */
	var CardMedia = function (_PureComponent) {
	  _inherits(CardMedia, _PureComponent);

	  function CardMedia() {
	    _classCallCheck(this, CardMedia);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  CardMedia.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        children = _props.children,
	        props = _objectWithoutProperties(_props, ['className', 'children']);

	    delete props.overlay;

	    var overlay = this.props.overlay;

	    if (overlay) {
	      overlay = _react2.default.createElement(
	        _MediaOverlay2.default,
	        null,
	        overlay
	      );
	    }

	    return _react2.default.createElement(
	      _Media2.default,
	      _extends({ className: (0, _classnames2.default)('md-card-media', className) }, props),
	      children,
	      overlay
	    );
	  };

	  return CardMedia;
	}(_react.PureComponent);

	CardMedia.aspect = {
	  equal: '1-1',
	  wide: '16-9'
	};
	CardMedia.propTypes = {
	  /**
	   * An optional className to apply to the card media component.
	   */
	  className: _propTypes2.default.string,

	  /**
	   * An optional overlay component to be rendered over the media. This *should*
	   * be A `CardTitle`, `CardActions` or both.
	   */
	  overlay: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `MediaOverlay` component as a child instead'),

	  /**
	   * Any media to display.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * Boolean if the aspect ratio should be forced.
	   */
	  forceAspect: _propTypes2.default.bool,

	  /**
	   * The aspect ratio to use.
	   */
	  aspectRatio: _propTypes2.default.oneOf([CardMedia.aspect.equal, CardMedia.aspect.wide]).isRequired,

	  /**
	   * Boolean if this component should be expandable when there is a `CardExpander`
	   * above it in the `Card`.
	   */
	  expandable: _propTypes2.default.bool,

	  /**
	   * The component to render the card media as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	  deprecated: (0, _componentDeprecated2.default)('There were no unique styles for media in cards so it is simpler to just use the ' + '`Media` component.')
	};
	CardMedia.defaultProps = {
	  forceAspect: true,
	  aspectRatio: CardMedia.aspect.wide,
	  component: 'section'
	};
	exports.default = CardMedia;

/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(245);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _CardTitle = __webpack_require__(275);

	var _CardTitle2 = _interopRequireDefault(_CardTitle);

	var _CardActions = __webpack_require__(303);

	var _CardActions2 = _interopRequireDefault(_CardActions);

	var _Button = __webpack_require__(278);

	var _Button2 = _interopRequireDefault(_Button);

	var _componentDeprecated = __webpack_require__(311);

	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The `CardActionOverlay` component is a simple wrapper for generating an overlay
	 * for the `CardMedia` component by having a `CardTitle` and an array of props
	 * for generating `FlatButton` for the `CardActions` component.
	 */
	var CardActionOverlay = function (_PureComponent) {
	  _inherits(CardActionOverlay, _PureComponent);

	  function CardActionOverlay() {
	    _classCallCheck(this, CardActionOverlay);

	    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
	  }

	  CardActionOverlay.prototype.render = function render() {
	    var _props = this.props,
	        actions = _props.actions,
	        titleProps = _objectWithoutProperties(_props, ['actions']);

	    return _react2.default.createElement(
	      'span',
	      null,
	      _react2.default.createElement(_CardTitle2.default, titleProps),
	      _react2.default.createElement(
	        _CardActions2.default,
	        null,
	        actions.map(function (actionProps, i) {
	          return _react2.default.createElement(_Button2.default, _extends({ flat: true, key: i }, actionProps));
	        })
	      )
	    );
	  };

	  return CardActionOverlay;
	}(_react.PureComponent);

	CardActionOverlay.propTypes = {
	  /**
	   * The title to use.
	   */
	  title: _propTypes2.default.node,

	  /**
	   * The optional subtitle to use.
	   */
	  subtitle: _propTypes2.default.node,

	  /**
	   * An array of flat button props.
	   */
	  actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
	    label: _propTypes2.default.node.isRequired
	  })),

	  /**
	   * Any children to display in the `CardTitle` component.
	   */
	  children: _propTypes2.default.node,
	  deprecated: (0, _componentDeprecated2.default)('It is not a worthwhile component since the same thing can be accomplished with the `MediaOverlay` component.')
	};
	exports.default = CardActionOverlay;

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.TextField = undefined;

	var _TextField2 = __webpack_require__(359);

	var _TextField3 = _interopRequireDefault(_TextField2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _TextField3.default;
	exports.TextField = _TextField3.default;

/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouterDom = __webpack_require__(190);

	var _CircularProgress = __webpack_require__(304);

	var _CircularProgress2 = _interopRequireDefault(_CircularProgress);

	var _URLDataTable = __webpack_require__(534);

	var _URLDataTable2 = _interopRequireDefault(_URLDataTable);

	var _Message = __webpack_require__(536);

	var _Message2 = _interopRequireDefault(_Message);

	var _api = __webpack_require__(215);

	var _api2 = _interopRequireDefault(_api);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DashboardPage = function (_React$Component) {
	    _inherits(DashboardPage, _React$Component);

	    function DashboardPage(props) {
	        _classCallCheck(this, DashboardPage);

	        var _this = _possibleConstructorReturn(this, (DashboardPage.__proto__ || Object.getPrototypeOf(DashboardPage)).call(this, props));

	        _this.state = {
	            loading: false,
	            urls: null,
	            goToLogin: false
	        };
	        _this.checkResponse = _this.checkResponse.bind(_this);
	        _this.relogin = _this.relogin.bind(_this);
	        return _this;
	    }

	    _createClass(DashboardPage, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.doSearch();
	        }
	    }, {
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps, nextState) {
	            var loadingChanged = this.state.loading != nextState.loading;
	            var urlsChanged = this.state.urls != nextState.urls;
	            return loadingChanged || urlsChanged;
	        }
	    }, {
	        key: 'doSearch',
	        value: function doSearch() {
	            this.setState({ loading: true });
	            _api2.default.getModel("/user/urls", this.checkResponse);
	        }
	    }, {
	        key: 'checkResponse',
	        value: function checkResponse(response) {
	            var urls = [];
	            var errorSum = {};
	            if (response.status === 200 && response.data != null) {
	                urls = response.data;
	            } else {
	                errorSum = response;
	            }
	            this.setState({ loading: false, urls: urls, errors: errorSum });
	        }
	    }, {
	        key: 'buildHeadersFromData',
	        value: function buildHeadersFromData() {
	            var headers = [];
	            if (this.state.data != null && this.state.data.length > 0) {
	                var obj = this.state.data[0];
	                var keys = Object.keys(obj);
	                keys.map(function (item, i) {
	                    headers.push(item);
	                });
	            }
	            return headers;
	        }
	    }, {
	        key: 'relogin',
	        value: function relogin() {
	            console.log("relogin");
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var messages = null;
	            if (this.state.errors != null && this.state.errors.summary) {
	                var relogin = _react2.default.createElement(
	                    'div',
	                    null,
	                    'Click ',
	                    _react2.default.createElement(
	                        'a',
	                        { href: '#', onClick: this.relogin },
	                        'here'
	                    ),
	                    ' to go to login page'
	                );
	                this.state.errors.errors.push(relogin);
	                messages = _react2.default.createElement(_Message2.default, { success: false, summary: this.state.errors.summary, messages: this.state.errors.errors });
	            }

	            var content = null;
	            if (this.state.loading || this.state.urls === null) {
	                content = _react2.default.createElement(_CircularProgress2.default, { key: 'progress', id: 'url-shortener-dashboard' });
	            } else if (this.state.goToLogin === true) {
	                var referer = { from: '/dashboard' };
	                content = _react2.default.createElement('div', null); // <Redirect to="/login" state={referer} />;
	            } else {
	                var headers = [{ label: 'Created', field: 'created' }, { label: 'Code', field: 'shortened' }, { label: 'Source', field: 'source' }];
	                content = _react2.default.createElement(_URLDataTable2.default, { headers: headers, data: this.state.urls, pageSize: 10 });
	            }
	            return _react2.default.createElement(
	                'div',
	                { id: 'dashboard-page' },
	                messages,
	                content
	            );
	        }
	    }]);

	    return DashboardPage;
	}(_react2.default.Component);

	exports.default = DashboardPage;

/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactMd = __webpack_require__(315);

	var _arraysUtil = __webpack_require__(535);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var URLDataTable = function (_React$Component) {
	    _inherits(URLDataTable, _React$Component);

	    function URLDataTable(props) {
	        _classCallCheck(this, URLDataTable);

	        var _this = _possibleConstructorReturn(this, (URLDataTable.__proto__ || Object.getPrototypeOf(URLDataTable)).call(this, props));

	        var headers = props.headers;
	        _this.state = {
	            headers: headers,
	            data: props.data,
	            pageSize: props.pageSize,
	            slicedData: props.data.slice(0, props.pageSize),
	            order: {
	                asc: false,
	                field: 'created'
	            }
	        };
	        _this.handlePagination = _this.handlePagination.bind(_this);
	        return _this;
	    }

	    _createClass(URLDataTable, [{
	        key: 'handlePagination',
	        value: function handlePagination(start, rowsPerPage) {
	            this.setState({ slicedData: this.state.data.slice(start, start + rowsPerPage) });
	        }
	    }, {
	        key: 'handleSort',
	        value: function handleSort(field) {
	            var ascending = !this.state.order.asc;
	            var sortedItems = this.state.slicedData.slice();
	            sortedItems = sortedItems.sort((0, _arraysUtil.sort_by)(field.toLowerCase(), ascending, null));
	            this.setState({
	                order: {
	                    asc: ascending,
	                    field: field
	                },
	                slicedData: sortedItems
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var _state = this.state,
	                slicedData = _state.slicedData,
	                headers = _state.headers,
	                pageSize = _state.pageSize;

	            var rowsPerPageLabel = this.props.mobile ? 'Rows' : 'Rows per page';
	            return _react2.default.createElement(
	                _reactMd.DataTable,
	                { baseId: 'simple-pagination' },
	                _react2.default.createElement(
	                    _reactMd.TableHeader,
	                    null,
	                    _react2.default.createElement(
	                        _reactMd.TableRow,
	                        { selectable: true },
	                        headers.map(function (header) {
	                            return _react2.default.createElement(
	                                _reactMd.TableColumn,
	                                { key: header.field, grow: true,
	                                    sorted: _this2.state.order.field === header.field && _this2.state.order.asc,
	                                    role: 'button', onClick: function onClick() {
	                                        return _this2.handleSort(header.field);
	                                    } },
	                                header.label
	                            );
	                        })
	                    )
	                ),
	                _react2.default.createElement(
	                    _reactMd.TableBody,
	                    null,
	                    slicedData.map(function (_ref) {
	                        var shortened = _ref.shortened,
	                            source = _ref.source,
	                            owner = _ref.owner,
	                            created = _ref.created;
	                        return _react2.default.createElement(
	                            _reactMd.TableRow,
	                            { key: created, selectable: true },
	                            _react2.default.createElement(
	                                _reactMd.TableColumn,
	                                null,
	                                created
	                            ),
	                            _react2.default.createElement(
	                                _reactMd.TableColumn,
	                                null,
	                                shortened
	                            ),
	                            _react2.default.createElement(
	                                _reactMd.TableColumn,
	                                null,
	                                source
	                            )
	                        );
	                    })
	                ),
	                _react2.default.createElement(_reactMd.TablePagination, { rows: this.state.data.length, rowsPerPageLabel: rowsPerPageLabel,
	                    onPagination: this.handlePagination })
	            );
	        }
	    }]);

	    return URLDataTable;
	}(_react2.default.Component);

	exports.default = URLDataTable;

/***/ }),
/* 535 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.sort_by = sort_by;
	function sort_by(field, reverse, primer) {
	    var key = primer ? function (x) {
	        return primer(x[field]);
	    } : function (x) {
	        return x[field];
	    };

	    reverse = !reverse ? 1 : -1;

	    return function (a, b) {
	        return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
	    };
	}

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Message = function Message(props) {

	    var showSuccess = function showSuccess(summary, messages) {
	        return _react2.default.createElement(
	            "div",
	            { className: "message message-success" },
	            summary,
	            messages.map(function (item, i) {
	                return _react2.default.createElement(
	                    "li",
	                    { key: i },
	                    item
	                );
	            })
	        );
	    };
	    var showErrors = function showErrors(summary, errors) {
	        return _react2.default.createElement(
	            "div",
	            { className: "message message-error" },
	            summary,
	            errors.map(function (item, i) {
	                return _react2.default.createElement(
	                    "li",
	                    { key: i },
	                    item
	                );
	            })
	        );
	    };
	    if (props.success) {
	        return showSuccess(props.summary, props.messages);
	    } else {
	        return showErrors(props.summary, props.messages);
	    }
	};

	exports.default = Message;

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Media = __webpack_require__(306);

	var _Media2 = _interopRequireDefault(_Media);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var NotFound = function (_React$Component) {
	    _inherits(NotFound, _React$Component);

	    function NotFound() {
	        _classCallCheck(this, NotFound);

	        return _possibleConstructorReturn(this, (NotFound.__proto__ || Object.getPrototypeOf(NotFound)).apply(this, arguments));
	    }

	    _createClass(NotFound, [{
	        key: "render",
	        value: function render() {
	            return _react2.default.createElement(
	                _Media2.default,
	                null,
	                _react2.default.createElement(
	                    "h1",
	                    null,
	                    "404 Not Found"
	                ),
	                _react2.default.createElement("img", { id: "not-found-image",
	                    src: "https://images.hellogiggles.com/uploads/2016/09/30045207/www.reddit.com-.gif",
	                    role: "presentation"
	                }),
	                _react2.default.createElement(_Media.MediaOverlay, null)
	            );
	        }
	    }]);

	    return NotFound;
	}(_react2.default.Component);

	exports.default = NotFound;

/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouterDom = __webpack_require__(190);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Logout = function (_React$Component) {
	    _inherits(Logout, _React$Component);

	    function Logout() {
	        _classCallCheck(this, Logout);

	        return _possibleConstructorReturn(this, (Logout.__proto__ || Object.getPrototypeOf(Logout)).apply(this, arguments));
	    }

	    _createClass(Logout, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.props.loginHandler.handleLogout();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(_reactRouterDom.Redirect, { to: this.props.goTo });
	        }
	    }]);

	    return Logout;
	}(_react2.default.Component);

	exports.default = Logout;

/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouterDom = __webpack_require__(190);

	var _FooterDtodo1paco = __webpack_require__(540);

	var _FooterDtodo1paco2 = _interopRequireDefault(_FooterDtodo1paco);

	var _AppMenu = __webpack_require__(541);

	var _AppMenu2 = _interopRequireDefault(_AppMenu);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var App = function (_React$Component) {
	    _inherits(App, _React$Component);

	    function App() {
	        _classCallCheck(this, App);

	        return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
	    }

	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {}
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(_AppMenu2.default, { title: this.props.title,
	                    currentUser: this.props.loginHandler.getUserAuth() }),
	                _react2.default.createElement(
	                    'main',
	                    null,
	                    this.props.children
	                ),
	                _react2.default.createElement(_FooterDtodo1paco2.default, null)
	            );
	        }
	    }]);

	    return App;
	}(_react2.default.Component);

	exports.default = App;

/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var FooterDtodo1paco = function FooterDtodo1paco(props) {
	    return _react2.default.createElement(
	        "footer",
	        null,
	        _react2.default.createElement(
	            "span",
	            null,
	            _react2.default.createElement(
	                "a",
	                { href: "https://dtodo1paco.github.io/cv/fjap.html" },
	                "@",
	                "dtodo1paco"
	            )
	        )
	    );
	};

	exports.default = FooterDtodo1paco;

/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouterDom = __webpack_require__(190);

	var _Toolbars = __webpack_require__(542);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var AppMenu = function AppMenu(props) {
	    return _react2.default.createElement(_Toolbars.Toolbar, {
	        colored: false,
	        nav: _react2.default.createElement(
	            _reactRouterDom.Link,
	            { className: 'index-link', to: '/' },
	            props.title
	        ),
	        title: null,
	        actions: _react2.default.createElement(
	            'div',
	            null,
	            props.currentUser ? _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'span',
	                    { className: 'username' },
	                    props.currentUser.sub
	                ),
	                _react2.default.createElement(
	                    _reactRouterDom.Link,
	                    { to: '/logout' },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        'Log out'
	                    )
	                )
	            ) : _react2.default.createElement(
	                'div',
	                { className: 'top-bar-right-links' },
	                _react2.default.createElement(
	                    _reactRouterDom.Link,
	                    { to: '/login' },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        'Log in'
	                    )
	                ),
	                _react2.default.createElement(
	                    _reactRouterDom.Link,
	                    { to: '/signup' },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        'Sign up'
	                    )
	                )
	            )
	        )
	    });
	};
	exports.default = AppMenu;

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.Toolbar = undefined;

	var _Toolbar2 = __webpack_require__(435);

	var _Toolbar3 = _interopRequireDefault(_Toolbar2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Toolbar3.default;
	exports.Toolbar = _Toolbar3.default;

/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(544);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(546)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../node_modules/css-loader/index.js?importLoaders=2!../node_modules/postcss-loader/index.js!../node_modules/sass-loader/lib/loader.js?sourceMap&outputStyle=expanded!./styles.scss", function() {
				var newContent = require("!!../node_modules/css-loader/index.js?importLoaders=2!../node_modules/postcss-loader/index.js!../node_modules/sass-loader/lib/loader.js?sourceMap&outputStyle=expanded!./styles.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(545)(false);
	// imports
	exports.push([module.id, "@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700|Material+Icons);", ""]);
	exports.push([module.id, "@import url(https://unpkg.com/react-md@1.0.0/dist/react-md.teal-pink.min.css);", ""]);

	// module
	exports.push([module.id, ".md-display-4 {\n  letter-spacing: -.1px;\n}\n\n.md-display-3 {\n  letter-spacing: -.05px;\n}\n\n.md-display-2, h1, .md-display-1, h2, .md-headline {\n  letter-spacing: 0;\n}\n\nh3, .md-title {\n  letter-spacing: .5px;\n}\n\nh4, .md-subheading-2, h5, .md-subheading-1, p, .md-body-1, h6, .md-body-2 {\n  letter-spacing: .1px;\n}\n\ncaption, .md-caption {\n  letter-spacing: .2px;\n}\n\nh1, .md-display-1,\n.md-display-2,\n.md-display-3,\n.md-display-4,\nh2,\n.md-headline,\nh3,\n.md-title,\nh5,\n.md-subheading-1,\nh4,\n.md-subheading-2,\np,\n.md-body-1,\nh6,\n.md-body-2,\ncaption,\n.md-caption {\n  margin: 0;\n}\n\nh1, .md-display-1,\n.md-display-2,\n.md-display-3,\n.md-display-4,\nh2,\n.md-headline,\nh3,\n.md-title {\n  margin-bottom: 14px;\n}\n\n\nh5,\n.md-subheading-1,\nh4,\n.md-subheading-2,\np,\n.md-body-1,\nh6,\n.md-body-2,\ncaption,\n.md-caption {\n  margin-bottom: 10px;\n}\n\n\n.md-display-3,\n.md-display-4,\nh3,\n.md-title {\n  white-space: nowrap;\n}\n\nh1, .md-display-1,\n.md-display-2,\n.md-display-3,\nh2,\n.md-headline,\nh5,\n.md-subheading-1,\nh4,\n.md-subheading-2,\np,\n.md-body-1,\ncaption,\n.md-caption {\n  font-weight: 400;\n}\n\n\nh3,\n.md-title,\nh6,\n.md-body-2 {\n  font-weight: 500;\n}\n\n\n.md-display-4 {\n  font-size: 112px;\n  font-weight: 300;\n  line-height: 128px;\n}\n\n\n.md-display-3 {\n  font-size: 56px;\n  line-height: 84px;\n}\n\n\n.md-display-2 {\n  font-size: 45px;\n  line-height: 48px;\n}\n\nh1, .md-display-1 {\n  font-size: 34px;\n  line-height: 40px;\n}\n\n\nh2,\n.md-headline {\n  font-size: 24px;\n  line-height: 32px;\n}\n\n\nh3,\n.md-title {\n  font-size: 20px;\n  line-height: 28px;\n}\n\n\nh4,\n.md-subheading-2 {\n  line-height: 28px;\n}\n\n\nh5,\n.md-subheading-1 {\n  line-height: 24px;\n}\n\n\np,\n.md-body-1 {\n  line-height: 20px;\n}\n\n\nh6,\n.md-body-2 {\n  line-height: 24px;\n}\n\n\ncaption,\n.md-caption {\n  font-size: 12px;\n}\n\n.md-text-left, .md-picker-control {\n  text-align: left;\n}\n\n.md-text-center, .md-calendar-date {\n  text-align: center;\n}\n\n.md-text-right {\n  text-align: right;\n}\n\n.md-text-justify {\n  text-align: justify;\n}\n\n.md-text-capitalize {\n  text-transform: capitalize;\n}\n\n.md-text-lowercalse {\n  text-transform: lowercase;\n}\n\n.md-text-uppercase {\n  text-transform: uppercase;\n}\n\n.md-text-nowrap {\n  white-space: nowrap;\n}\n\n.md-text-no-select {\n  user-select: none;\n}\n\n.md-font-light {\n  font-weight: 300;\n}\n\n.md-font-regular {\n  font-weight: 400;\n}\n\n.md-font-medium, .md-btn .md-icon-text, .md-clock-time-value {\n  font-weight: 500;\n}\n\n.md-font-semibold {\n  font-weight: 600;\n}\n\n.md-font-bold {\n  font-weight: 700;\n}\n\n.md-transition--sharp {\n  transition-timing-function: cubic-bezier(0.4, 0, 0.6, 1);\n}\n\n.md-transition--standard {\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.md-transition--acceleration, .md-drop-down-leave.md-drop-down-leave-active {\n  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);\n}\n\n\n.md-transition--decceleration,\n.md-transition--deceleration,\n.md-drop-down-enter.md-drop-down-enter-active {\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n}\n\n.md-calendar-date, .md-inline-block {\n  display: inline-block;\n  vertical-align: bottom;\n}\n\n.md-full-width {\n  width: 100%;\n}\n\n.md-text-container, .md-bottom-nav .md-icon, .md-block-centered {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.md-grid.md-grid--no-spacing > .md-cell.md-cell--right, .md-cell--right, .md-collapser--card, .md-divider--expand-from-right::after {\n  margin-left: auto;\n}\n\n.md-grid.md-grid--no-spacing > .md-cell.md-cell--right, .md-cell--right, .md-collapser--card, .md-divider--expand-from-right::after {\n  margin-left: auto;\n}\n\n.md-expansion-panel-list, .md-list-unstyled, .md-list, .md-tabs {\n  list-style: none;\n  margin: 0;\n  padding-left: 0;\n}\n\n.md-media img, .md-media iframe, .md-media svg, .md-media video, .md-media embed, .md-media object {\n  bottom: 0;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 100%;\n}\n\n@media screen and (min-width: 320px) {\n  .md-subheading-2,\n  .md-subheading-1 {\n    font-size: 16px;\n  }\n  .md-body-2,\n  .md-body-1 {\n    font-size: 14px;\n  }\n  h5,\n  h4 {\n    font-size: 16px;\n  }\n  h6,\n  p {\n    font-size: 14px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-subheading-2,\n  .md-subheading-1 {\n    font-size: 15px;\n  }\n  .md-body-2,\n  .md-body-1 {\n    font-size: 13px;\n  }\n  h5,\n  h4 {\n    font-size: 15px;\n  }\n  h6,\n  p {\n    font-size: 13px;\n  }\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\nhtml {\n  background: #fafafa;\n  font-size: 14px;\n  min-width: 100%;\n}\n\nbody {\n  font-family: \"Roboto\", sans-serif;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  font-weight: 400;\n  line-height: 1.42857;\n  text-rendering: optimizeLegibility;\n}\n\n\nh2,\n.md-headline,\nh3,\n.md-title,\nh4,\n.md-subheading-2,\nh5,\n.md-subheading-1,\nh6,\n.md-body-2,\np,\n.md-body-1 {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n\n.md-display-4,\n.md-display-3,\n.md-display-2, h1, .md-display-1,\ncaption,\n.md-caption {\n  color: rgba(0, 0, 0, 0.54);\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nbutton,\ninput,\ntextarea,\nhtml {\n  font-family: \"Roboto\", sans-serif;\n}\n\n.md-text-container {\n  max-width: 640px;\n  width: 100%;\n}\n\n.md-text-container.md-text-container.md-cell {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.md-fake-btn {\n  background: transparent;\n  position: relative;\n}\n\n.md-fake-btn--no-outline {\n  outline-style: none;\n}\n\n.md-no-scroll.md-no-scroll {\n  overflow: hidden;\n  position: fixed;\n}\n\n.md-pointer--hover:hover {\n  cursor: pointer;\n}\n\n.md-pointer--none {\n  pointer-events: none;\n}\n\n.md-content-jump {\n  left: -1000px;\n  position: absolute;\n  top: -1000px;\n}\n\n.md-content-jump:active, .md-content-jump:focus {\n  left: 0;\n  top: 0;\n}\n\n.md-grid {\n  align-items: stretch;\n  display: flex;\n  flex-flow: row wrap;\n  margin: 0 auto;\n}\n\n.md-grid.md-grid--no-spacing {\n  padding: 0;\n}\n\n.md-grid.md-grid--no-spacing > .md-cell {\n  margin: 0;\n}\n\n.md-grid--stacked {\n  flex-direction: column;\n}\n\n.md-cell--top {\n  align-self: flex-start;\n}\n\n.md-cell--middle {\n  align-self: center;\n}\n\n.md-cell--center {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.md-cell--bottom {\n  align-self: flex-end;\n}\n\n.md-cell--stretch {\n  align-self: stretch;\n}\n\n@media (max-width: 599px) {\n  .md-grid {\n    padding: 8px;\n  }\n  .md-cell {\n    width: calc(100% - 16px);\n    margin: 8px;\n  }\n  .md-grid.md-grid--no-spacing > .md-cell {\n    width: 100%;\n  }\n  .md-cell--phone-hidden {\n    display: none !important;\n  }\n  .md-cell--order-1,\n  .md-cell--order-1-phone.md-cell--order-1-phone {\n    order: 1;\n  }\n  .md-cell--order-2,\n  .md-cell--order-2-phone.md-cell--order-2-phone {\n    order: 2;\n  }\n  .md-cell--order-3,\n  .md-cell--order-3-phone.md-cell--order-3-phone {\n    order: 3;\n  }\n  .md-cell--order-4,\n  .md-cell--order-4-phone.md-cell--order-4-phone {\n    order: 4;\n  }\n  .md-cell--order-5,\n  .md-cell--order-5-phone.md-cell--order-5-phone {\n    order: 5;\n  }\n  .md-cell--order-6,\n  .md-cell--order-6-phone.md-cell--order-6-phone {\n    order: 6;\n  }\n  .md-cell--order-7,\n  .md-cell--order-7-phone.md-cell--order-7-phone {\n    order: 7;\n  }\n  .md-cell--order-8,\n  .md-cell--order-8-phone.md-cell--order-8-phone {\n    order: 8;\n  }\n  .md-cell--order-9,\n  .md-cell--order-9-phone.md-cell--order-9-phone {\n    order: 9;\n  }\n  .md-cell--order-10,\n  .md-cell--order-10-phone.md-cell--order-10-phone {\n    order: 10;\n  }\n  .md-cell--order-11,\n  .md-cell--order-11-phone.md-cell--order-11-phone {\n    order: 11;\n  }\n  .md-cell--order-12,\n  .md-cell--order-12-phone.md-cell--order-12-phone {\n    order: 12;\n  }\n  .md-cell--1,\n  .md-cell--1-phone.md-cell--1-phone {\n    width: calc(25% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--1, .md-grid.md-grid--no-spacing >\n  .md-cell--1-phone.md-cell--1-phone {\n    width: 25%;\n  }\n  .md-cell--2,\n  .md-cell--2-phone.md-cell--2-phone {\n    width: calc(50% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--2, .md-grid.md-grid--no-spacing >\n  .md-cell--2-phone.md-cell--2-phone {\n    width: 50%;\n  }\n  .md-cell--3,\n  .md-cell--3-phone.md-cell--3-phone {\n    width: calc(75% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--3, .md-grid.md-grid--no-spacing >\n  .md-cell--3-phone.md-cell--3-phone {\n    width: 75%;\n  }\n  .md-cell--4,\n  .md-cell--4-phone.md-cell--4-phone {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--4, .md-grid.md-grid--no-spacing >\n  .md-cell--4-phone.md-cell--4-phone {\n    width: 100%;\n  }\n  .md-cell--5,\n  .md-cell--5-phone.md-cell--5-phone {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--5, .md-grid.md-grid--no-spacing >\n  .md-cell--5-phone.md-cell--5-phone {\n    width: 100%;\n  }\n  .md-cell--6,\n  .md-cell--6-phone.md-cell--6-phone {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--6, .md-grid.md-grid--no-spacing >\n  .md-cell--6-phone.md-cell--6-phone {\n    width: 100%;\n  }\n  .md-cell--7,\n  .md-cell--7-phone.md-cell--7-phone {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--7, .md-grid.md-grid--no-spacing >\n  .md-cell--7-phone.md-cell--7-phone {\n    width: 100%;\n  }\n  .md-cell--8,\n  .md-cell--8-phone.md-cell--8-phone {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--8, .md-grid.md-grid--no-spacing >\n  .md-cell--8-phone.md-cell--8-phone {\n    width: 100%;\n  }\n  .md-cell--9,\n  .md-cell--9-phone.md-cell--9-phone {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--9, .md-grid.md-grid--no-spacing >\n  .md-cell--9-phone.md-cell--9-phone {\n    width: 100%;\n  }\n  .md-cell--10,\n  .md-cell--10-phone.md-cell--10-phone {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--10, .md-grid.md-grid--no-spacing >\n  .md-cell--10-phone.md-cell--10-phone {\n    width: 100%;\n  }\n  .md-cell--11,\n  .md-cell--11-phone.md-cell--11-phone {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--11, .md-grid.md-grid--no-spacing >\n  .md-cell--11-phone.md-cell--11-phone {\n    width: 100%;\n  }\n  .md-cell--12,\n  .md-cell--12-phone.md-cell--12-phone {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--12, .md-grid.md-grid--no-spacing >\n  .md-cell--12-phone.md-cell--12-phone {\n    width: 100%;\n  }\n  .md-cell--1-offset,\n  .md-cell--1-phone-offset.md-cell--1-phone-offset {\n    margin-left: calc(25% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--1-offset, .md-grid--no-spacing >\n  .md-cell--1-phone-offset.md-cell--1-phone-offset {\n    margin-left: 25%;\n  }\n  .md-cell--2-offset,\n  .md-cell--2-phone-offset.md-cell--2-phone-offset {\n    margin-left: calc(50% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--2-offset, .md-grid--no-spacing >\n  .md-cell--2-phone-offset.md-cell--2-phone-offset {\n    margin-left: 50%;\n  }\n  .md-cell--3-offset,\n  .md-cell--3-phone-offset.md-cell--3-phone-offset {\n    margin-left: calc(75% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--3-offset, .md-grid--no-spacing >\n  .md-cell--3-phone-offset.md-cell--3-phone-offset {\n    margin-left: 75%;\n  }\n}\n\n@media (min-width: 600px) and (max-width: 839px) {\n  .md-grid {\n    padding: 8px;\n  }\n  .md-cell {\n    width: calc(50% - 16px);\n    margin: 8px;\n  }\n  .md-grid.md-grid--no-spacing > .md-cell {\n    width: 50%;\n  }\n  .md-cell--tablet-hidden {\n    display: none !important;\n  }\n  .md-cell--order-1,\n  .md-cell--order-1-tablet.md-cell--order-1-tablet {\n    order: 1;\n  }\n  .md-cell--order-2,\n  .md-cell--order-2-tablet.md-cell--order-2-tablet {\n    order: 2;\n  }\n  .md-cell--order-3,\n  .md-cell--order-3-tablet.md-cell--order-3-tablet {\n    order: 3;\n  }\n  .md-cell--order-4,\n  .md-cell--order-4-tablet.md-cell--order-4-tablet {\n    order: 4;\n  }\n  .md-cell--order-5,\n  .md-cell--order-5-tablet.md-cell--order-5-tablet {\n    order: 5;\n  }\n  .md-cell--order-6,\n  .md-cell--order-6-tablet.md-cell--order-6-tablet {\n    order: 6;\n  }\n  .md-cell--order-7,\n  .md-cell--order-7-tablet.md-cell--order-7-tablet {\n    order: 7;\n  }\n  .md-cell--order-8,\n  .md-cell--order-8-tablet.md-cell--order-8-tablet {\n    order: 8;\n  }\n  .md-cell--order-9,\n  .md-cell--order-9-tablet.md-cell--order-9-tablet {\n    order: 9;\n  }\n  .md-cell--order-10,\n  .md-cell--order-10-tablet.md-cell--order-10-tablet {\n    order: 10;\n  }\n  .md-cell--order-11,\n  .md-cell--order-11-tablet.md-cell--order-11-tablet {\n    order: 11;\n  }\n  .md-cell--order-12,\n  .md-cell--order-12-tablet.md-cell--order-12-tablet {\n    order: 12;\n  }\n  .md-cell--1,\n  .md-cell--1-tablet.md-cell--1-tablet {\n    width: calc(12.5% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--1, .md-grid.md-grid--no-spacing >\n  .md-cell--1-tablet.md-cell--1-tablet {\n    width: 12.5%;\n  }\n  .md-cell--2,\n  .md-cell--2-tablet.md-cell--2-tablet {\n    width: calc(25% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--2, .md-grid.md-grid--no-spacing >\n  .md-cell--2-tablet.md-cell--2-tablet {\n    width: 25%;\n  }\n  .md-cell--3,\n  .md-cell--3-tablet.md-cell--3-tablet {\n    width: calc(37.5% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--3, .md-grid.md-grid--no-spacing >\n  .md-cell--3-tablet.md-cell--3-tablet {\n    width: 37.5%;\n  }\n  .md-cell--4,\n  .md-cell--4-tablet.md-cell--4-tablet {\n    width: calc(50% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--4, .md-grid.md-grid--no-spacing >\n  .md-cell--4-tablet.md-cell--4-tablet {\n    width: 50%;\n  }\n  .md-cell--5,\n  .md-cell--5-tablet.md-cell--5-tablet {\n    width: calc(62.5% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--5, .md-grid.md-grid--no-spacing >\n  .md-cell--5-tablet.md-cell--5-tablet {\n    width: 62.5%;\n  }\n  .md-cell--6,\n  .md-cell--6-tablet.md-cell--6-tablet {\n    width: calc(75% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--6, .md-grid.md-grid--no-spacing >\n  .md-cell--6-tablet.md-cell--6-tablet {\n    width: 75%;\n  }\n  .md-cell--7,\n  .md-cell--7-tablet.md-cell--7-tablet {\n    width: calc(87.5% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--7, .md-grid.md-grid--no-spacing >\n  .md-cell--7-tablet.md-cell--7-tablet {\n    width: 87.5%;\n  }\n  .md-cell--8,\n  .md-cell--8-tablet.md-cell--8-tablet {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--8, .md-grid.md-grid--no-spacing >\n  .md-cell--8-tablet.md-cell--8-tablet {\n    width: 100%;\n  }\n  .md-cell--9,\n  .md-cell--9-tablet.md-cell--9-tablet {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--9, .md-grid.md-grid--no-spacing >\n  .md-cell--9-tablet.md-cell--9-tablet {\n    width: 100%;\n  }\n  .md-cell--10,\n  .md-cell--10-tablet.md-cell--10-tablet {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--10, .md-grid.md-grid--no-spacing >\n  .md-cell--10-tablet.md-cell--10-tablet {\n    width: 100%;\n  }\n  .md-cell--11,\n  .md-cell--11-tablet.md-cell--11-tablet {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--11, .md-grid.md-grid--no-spacing >\n  .md-cell--11-tablet.md-cell--11-tablet {\n    width: 100%;\n  }\n  .md-cell--12,\n  .md-cell--12-tablet.md-cell--12-tablet {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--12, .md-grid.md-grid--no-spacing >\n  .md-cell--12-tablet.md-cell--12-tablet {\n    width: 100%;\n  }\n  .md-cell--1-offset,\n  .md-cell--1-tablet-offset.md-cell--1-tablet-offset {\n    margin-left: calc(12.5% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--1-offset, .md-grid--no-spacing >\n  .md-cell--1-tablet-offset.md-cell--1-tablet-offset {\n    margin-left: 12.5%;\n  }\n  .md-cell--2-offset,\n  .md-cell--2-tablet-offset.md-cell--2-tablet-offset {\n    margin-left: calc(25% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--2-offset, .md-grid--no-spacing >\n  .md-cell--2-tablet-offset.md-cell--2-tablet-offset {\n    margin-left: 25%;\n  }\n  .md-cell--3-offset,\n  .md-cell--3-tablet-offset.md-cell--3-tablet-offset {\n    margin-left: calc(37.5% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--3-offset, .md-grid--no-spacing >\n  .md-cell--3-tablet-offset.md-cell--3-tablet-offset {\n    margin-left: 37.5%;\n  }\n  .md-cell--4-offset,\n  .md-cell--4-tablet-offset.md-cell--4-tablet-offset {\n    margin-left: calc(50% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--4-offset, .md-grid--no-spacing >\n  .md-cell--4-tablet-offset.md-cell--4-tablet-offset {\n    margin-left: 50%;\n  }\n  .md-cell--5-offset,\n  .md-cell--5-tablet-offset.md-cell--5-tablet-offset {\n    margin-left: calc(62.5% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--5-offset, .md-grid--no-spacing >\n  .md-cell--5-tablet-offset.md-cell--5-tablet-offset {\n    margin-left: 62.5%;\n  }\n  .md-cell--6-offset,\n  .md-cell--6-tablet-offset.md-cell--6-tablet-offset {\n    margin-left: calc(75% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--6-offset, .md-grid--no-spacing >\n  .md-cell--6-tablet-offset.md-cell--6-tablet-offset {\n    margin-left: 75%;\n  }\n  .md-cell--7-offset,\n  .md-cell--7-tablet-offset.md-cell--7-tablet-offset {\n    margin-left: calc(87.5% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--7-offset, .md-grid--no-spacing >\n  .md-cell--7-tablet-offset.md-cell--7-tablet-offset {\n    margin-left: 87.5%;\n  }\n}\n\n@media (min-width: 840px) {\n  .md-grid {\n    padding: 8px;\n  }\n  .md-cell {\n    width: calc(33.33333% - 16px);\n    margin: 8px;\n  }\n  .md-grid.md-grid--no-spacing > .md-cell {\n    width: 33.33333%;\n  }\n  .md-cell--desktop-hidden {\n    display: none !important;\n  }\n  .md-cell--order-1,\n  .md-cell--order-1-desktop.md-cell--order-1-desktop {\n    order: 1;\n  }\n  .md-cell--order-2,\n  .md-cell--order-2-desktop.md-cell--order-2-desktop {\n    order: 2;\n  }\n  .md-cell--order-3,\n  .md-cell--order-3-desktop.md-cell--order-3-desktop {\n    order: 3;\n  }\n  .md-cell--order-4,\n  .md-cell--order-4-desktop.md-cell--order-4-desktop {\n    order: 4;\n  }\n  .md-cell--order-5,\n  .md-cell--order-5-desktop.md-cell--order-5-desktop {\n    order: 5;\n  }\n  .md-cell--order-6,\n  .md-cell--order-6-desktop.md-cell--order-6-desktop {\n    order: 6;\n  }\n  .md-cell--order-7,\n  .md-cell--order-7-desktop.md-cell--order-7-desktop {\n    order: 7;\n  }\n  .md-cell--order-8,\n  .md-cell--order-8-desktop.md-cell--order-8-desktop {\n    order: 8;\n  }\n  .md-cell--order-9,\n  .md-cell--order-9-desktop.md-cell--order-9-desktop {\n    order: 9;\n  }\n  .md-cell--order-10,\n  .md-cell--order-10-desktop.md-cell--order-10-desktop {\n    order: 10;\n  }\n  .md-cell--order-11,\n  .md-cell--order-11-desktop.md-cell--order-11-desktop {\n    order: 11;\n  }\n  .md-cell--order-12,\n  .md-cell--order-12-desktop.md-cell--order-12-desktop {\n    order: 12;\n  }\n  .md-cell--1,\n  .md-cell--1-desktop.md-cell--1-desktop {\n    width: calc(8.33333% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--1, .md-grid.md-grid--no-spacing >\n  .md-cell--1-desktop.md-cell--1-desktop {\n    width: 8.33333%;\n  }\n  .md-cell--2,\n  .md-cell--2-desktop.md-cell--2-desktop {\n    width: calc(16.66667% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--2, .md-grid.md-grid--no-spacing >\n  .md-cell--2-desktop.md-cell--2-desktop {\n    width: 16.66667%;\n  }\n  .md-cell--3,\n  .md-cell--3-desktop.md-cell--3-desktop {\n    width: calc(25% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--3, .md-grid.md-grid--no-spacing >\n  .md-cell--3-desktop.md-cell--3-desktop {\n    width: 25%;\n  }\n  .md-cell--4,\n  .md-cell--4-desktop.md-cell--4-desktop {\n    width: calc(33.33333% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--4, .md-grid.md-grid--no-spacing >\n  .md-cell--4-desktop.md-cell--4-desktop {\n    width: 33.33333%;\n  }\n  .md-cell--5,\n  .md-cell--5-desktop.md-cell--5-desktop {\n    width: calc(41.66667% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--5, .md-grid.md-grid--no-spacing >\n  .md-cell--5-desktop.md-cell--5-desktop {\n    width: 41.66667%;\n  }\n  .md-cell--6,\n  .md-cell--6-desktop.md-cell--6-desktop {\n    width: calc(50% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--6, .md-grid.md-grid--no-spacing >\n  .md-cell--6-desktop.md-cell--6-desktop {\n    width: 50%;\n  }\n  .md-cell--7,\n  .md-cell--7-desktop.md-cell--7-desktop {\n    width: calc(58.33333% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--7, .md-grid.md-grid--no-spacing >\n  .md-cell--7-desktop.md-cell--7-desktop {\n    width: 58.33333%;\n  }\n  .md-cell--8,\n  .md-cell--8-desktop.md-cell--8-desktop {\n    width: calc(66.66667% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--8, .md-grid.md-grid--no-spacing >\n  .md-cell--8-desktop.md-cell--8-desktop {\n    width: 66.66667%;\n  }\n  .md-cell--9,\n  .md-cell--9-desktop.md-cell--9-desktop {\n    width: calc(75% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--9, .md-grid.md-grid--no-spacing >\n  .md-cell--9-desktop.md-cell--9-desktop {\n    width: 75%;\n  }\n  .md-cell--10,\n  .md-cell--10-desktop.md-cell--10-desktop {\n    width: calc(83.33333% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--10, .md-grid.md-grid--no-spacing >\n  .md-cell--10-desktop.md-cell--10-desktop {\n    width: 83.33333%;\n  }\n  .md-cell--11,\n  .md-cell--11-desktop.md-cell--11-desktop {\n    width: calc(91.66667% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--11, .md-grid.md-grid--no-spacing >\n  .md-cell--11-desktop.md-cell--11-desktop {\n    width: 91.66667%;\n  }\n  .md-cell--12,\n  .md-cell--12-desktop.md-cell--12-desktop {\n    width: calc(100% - 16px);\n  }\n  .md-grid.md-grid--no-spacing > .md-cell--12, .md-grid.md-grid--no-spacing >\n  .md-cell--12-desktop.md-cell--12-desktop {\n    width: 100%;\n  }\n  .md-cell--1-offset,\n  .md-cell--1-desktop-offset.md-cell--1-desktop-offset {\n    margin-left: calc(8.33333% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--1-offset, .md-grid--no-spacing >\n  .md-cell--1-desktop-offset.md-cell--1-desktop-offset {\n    margin-left: 8.33333%;\n  }\n  .md-cell--2-offset,\n  .md-cell--2-desktop-offset.md-cell--2-desktop-offset {\n    margin-left: calc(16.66667% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--2-offset, .md-grid--no-spacing >\n  .md-cell--2-desktop-offset.md-cell--2-desktop-offset {\n    margin-left: 16.66667%;\n  }\n  .md-cell--3-offset,\n  .md-cell--3-desktop-offset.md-cell--3-desktop-offset {\n    margin-left: calc(25% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--3-offset, .md-grid--no-spacing >\n  .md-cell--3-desktop-offset.md-cell--3-desktop-offset {\n    margin-left: 25%;\n  }\n  .md-cell--4-offset,\n  .md-cell--4-desktop-offset.md-cell--4-desktop-offset {\n    margin-left: calc(33.33333% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--4-offset, .md-grid--no-spacing >\n  .md-cell--4-desktop-offset.md-cell--4-desktop-offset {\n    margin-left: 33.33333%;\n  }\n  .md-cell--5-offset,\n  .md-cell--5-desktop-offset.md-cell--5-desktop-offset {\n    margin-left: calc(41.66667% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--5-offset, .md-grid--no-spacing >\n  .md-cell--5-desktop-offset.md-cell--5-desktop-offset {\n    margin-left: 41.66667%;\n  }\n  .md-cell--6-offset,\n  .md-cell--6-desktop-offset.md-cell--6-desktop-offset {\n    margin-left: calc(50% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--6-offset, .md-grid--no-spacing >\n  .md-cell--6-desktop-offset.md-cell--6-desktop-offset {\n    margin-left: 50%;\n  }\n  .md-cell--7-offset,\n  .md-cell--7-desktop-offset.md-cell--7-desktop-offset {\n    margin-left: calc(58.33333% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--7-offset, .md-grid--no-spacing >\n  .md-cell--7-desktop-offset.md-cell--7-desktop-offset {\n    margin-left: 58.33333%;\n  }\n  .md-cell--8-offset,\n  .md-cell--8-desktop-offset.md-cell--8-desktop-offset {\n    margin-left: calc(66.66667% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--8-offset, .md-grid--no-spacing >\n  .md-cell--8-desktop-offset.md-cell--8-desktop-offset {\n    margin-left: 66.66667%;\n  }\n  .md-cell--9-offset,\n  .md-cell--9-desktop-offset.md-cell--9-desktop-offset {\n    margin-left: calc(75% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--9-offset, .md-grid--no-spacing >\n  .md-cell--9-desktop-offset.md-cell--9-desktop-offset {\n    margin-left: 75%;\n  }\n  .md-cell--10-offset,\n  .md-cell--10-desktop-offset.md-cell--10-desktop-offset {\n    margin-left: calc(83.33333% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--10-offset, .md-grid--no-spacing >\n  .md-cell--10-desktop-offset.md-cell--10-desktop-offset {\n    margin-left: 83.33333%;\n  }\n  .md-cell--11-offset,\n  .md-cell--11-desktop-offset.md-cell--11-desktop-offset {\n    margin-left: calc(91.66667% + 8px);\n  }\n  .md-grid--no-spacing > .md-cell--11-offset, .md-grid--no-spacing >\n  .md-cell--11-desktop-offset.md-cell--11-desktop-offset {\n    margin-left: 91.66667%;\n  }\n}\n\n.md-autocomplete-container {\n  position: relative;\n}\n\n.md-autocomplete-suggestion {\n  color: rgba(0, 0, 0, 0.54);\n  line-height: 1.15;\n  overflow: hidden;\n  position: absolute;\n  top: 12px;\n  white-space: nowrap;\n}\n\n@media screen and (min-width: 320px) {\n  .md-autocomplete-suggestion {\n    font-size: 16px;\n  }\n  .md-autocomplete-suggestion--floating {\n    top: 37px;\n  }\n  .md-autocomplete-suggestion--block {\n    top: 18px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-autocomplete-suggestion {\n    font-size: 13px;\n  }\n  .md-autocomplete-suggestion--floating {\n    top: 33px;\n  }\n  .md-autocomplete-suggestion--block {\n    top: 15px;\n  }\n}\n\n.md-avatar {\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  border-radius: 50%;\n  height: 40px;\n  overflow: hidden;\n  text-align: center;\n  width: 40px;\n}\n\n.md-avatar .md-icon {\n  color: inherit;\n}\n\n.md-avatar--icon-sized {\n  height: 24px;\n  width: 24px;\n}\n\n.md-avatar-img {\n  height: 100%;\n  width: auto;\n}\n\n.md-avatar-content {\n  align-items: center;\n  display: flex;\n  font-size: 24px;\n  height: 100%;\n  justify-content: center;\n  width: 100%;\n}\n\n.md-avatar--default {\n  background: #616161;\n  color: #f5f5f5;\n}\n\n@media screen and (min-width: 1025px) {\n  .md-avatar-content {\n    font-size: 20px;\n  }\n  .md-avatar--icon-sized {\n    height: 20px;\n    width: 20px;\n  }\n}\n\n.md-avatar--red {\n  background: #d50000;\n  color: #ffebee;\n}\n\n.md-avatar--pink {\n  background: #d81b60;\n  color: #fff;\n}\n\n.md-avatar--purple {\n  background: #7b1fa2;\n  color: #e1bee7;\n}\n\n.md-avatar--deep-purple {\n  background: #311b92;\n  color: #d1c4e9;\n}\n\n.md-avatar--indigo {\n  background: #3949ab;\n  color: #c5cae9;\n}\n\n.md-avatar--blue {\n  background: #2962ff;\n  color: #fff;\n}\n\n.md-avatar--light-blue {\n  background: #4fc3f7;\n  color: #311b92;\n}\n\n.md-avatar--cyan {\n  background: #26c6da;\n  color: #004d40;\n}\n\n.md-avatar--teal {\n  background: #1de9b6;\n  color: #004d40;\n}\n\n.md-avatar--green {\n  background: #2e7d32;\n  color: #e8f5e9;\n}\n\n.md-avatar--light-green {\n  background: #aed581;\n  color: #1b5e20;\n}\n\n.md-avatar--lime {\n  background: #d4e157;\n  color: #00695c;\n}\n\n.md-avatar--yellow {\n  background: #ff0;\n  color: #795548;\n}\n\n.md-avatar--amber {\n  background: #ffca28;\n  color: #4e342e;\n}\n\n.md-avatar--orange {\n  background: #fb8c00;\n  color: #212121;\n}\n\n.md-avatar--deep-orange {\n  background: #ff3d00;\n  color: #212121;\n}\n\n.md-avatar--brown {\n  background: #795548;\n  color: #efebe9;\n}\n\n.md-avatar--grey {\n  background: #616161;\n  color: #f5f5f5;\n}\n\n.md-avatar--blue-grey {\n  background: #455a64;\n  color: #eceff1;\n}\n\n.md-badge-container {\n  position: relative;\n}\n\n.md-badge {\n  position: absolute;\n  right: -8px;\n  top: -8px;\n}\n\n.md-badge--circular {\n  align-items: center;\n  border-radius: 50%;\n  display: flex;\n  font-size: 10px;\n  height: 24px;\n  justify-content: center;\n  width: 24px;\n}\n\n.md-badge--default {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.md-bottom-navigation {\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  z-index: 11;\n}\n\n.md-bottom-navigation--shifting {\n  transition-duration: 0.3s;\n  transition-property: background;\n}\n\n.md-bottom-navigation--dynamic {\n  transform: translate3d(0, 0, 0);\n  transition-duration: 0.3s;\n  transition-property: background, transform;\n}\n\n.md-bottom-navigation--dynamic-inactive {\n  transform: translate3d(0, 100%, 0);\n}\n\n.md-bottom-navigation-offset {\n  padding-bottom: 56px;\n}\n\n.md-bottom-nav {\n  color: inherit;\n  display: block;\n  flex-grow: 1;\n  font-size: 12px;\n  height: 56px;\n  max-width: 168px;\n  padding: 8px 12px 10px;\n  text-align: center;\n  text-decoration: none;\n  user-select: none;\n}\n\n.md-bottom-nav--active {\n  flex-shrink: 0;\n  font-size: 14px;\n  padding-top: 6px;\n}\n\n.md-bottom-nav--fixed {\n  min-width: 80px;\n}\n\n.md-bottom-nav--shifting {\n  min-width: 96px;\n  position: static;\n  transition-duration: 0.15s;\n  transition-property: max-width;\n}\n\n.md-bottom-nav--shifting-inactive {\n  max-width: 96px;\n  min-width: 56px;\n  padding-top: 16px;\n}\n\n.md-bottom-nav--shifting .md-ink-container {\n  overflow: visible;\n}\n\n.md-bottom-nav--shifting .md-ink {\n  background: rgba(255, 255, 255, 0.12);\n}\n\n.md-bottom-nav-label {\n  transition-duration: 0.15s;\n  transition-property: color, font-size;\n}\n\n.md-bottom-nav-label--shifting-inactive {\n  max-width: 32px;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\na.md-btn {\n  text-decoration: none;\n}\n\n.md-btn {\n  background: transparent;\n  border: 0;\n  position: relative;\n  transition-duration: 0.15s;\n  transition-property: background, color;\n}\n\n.md-btn[disabled] * {\n  pointer-events: none;\n}\n\n.md-btn--tooltip {\n  overflow: visible;\n}\n\n.md-btn:focus {\n  outline-style: none;\n}\n\n.md-btn .md-icon-separator {\n  height: 100%;\n}\n\n.md-btn--hover {\n  background: rgba(153, 153, 153, 0.12);\n}\n\n.md-btn--color-primary-active {\n  background: rgba(63, 81, 181, 0.12);\n}\n\n.md-btn--color-secondary-active {\n  background: rgba(255, 64, 129, 0.12);\n}\n\n.md-btn--text {\n  border-radius: 2px;\n  font-weight: 500;\n  min-width: 88px;\n  padding: 8px 16px;\n  text-transform: uppercase;\n}\n\n.md-btn--raised {\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n  transition: background 0.15s, box-shadow 0.3s, color 0.15s;\n}\n\n.md-btn--raised-disabled {\n  background: rgba(0, 0, 0, 0.12);\n}\n\n.md-btn--raised-pressed {\n  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.4);\n}\n\n.md-btn--icon {\n  border-radius: 50%;\n  color: rgba(0, 0, 0, 0.54);\n  height: 48px;\n  padding: 12px;\n  width: 48px;\n}\n\n.md-btn--floating {\n  height: 56px;\n  padding: 16px;\n  transition-property: background, box-shadow, color;\n  width: 56px;\n}\n\n.md-btn--floating-mini {\n  height: 40px;\n  padding: 8px;\n  width: 40px;\n}\n\n.md-btn--fixed {\n  position: fixed;\n  z-index: 10;\n}\n\n@media screen and (min-width: 320px) {\n  .md-btn--text {\n    height: 36px;\n    margin-bottom: 6px;\n    margin-top: 6px;\n    font-size: 14px;\n  }\n  .md-btn--text::before, .md-btn--text::after {\n    content: '';\n    height: 6px;\n    left: 0;\n    position: absolute;\n    right: 0;\n  }\n  .md-btn--text::before {\n    top: -6px;\n  }\n  .md-btn--text::after {\n    bottom: -6px;\n  }\n  .md-btn--fixed-tl {\n    left: 16px;\n    top: 16px;\n  }\n  .md-btn--fixed-tr {\n    right: 16px;\n    top: 16px;\n  }\n  .md-btn--fixed-bl {\n    bottom: 16px;\n    left: 16px;\n  }\n  .md-btn--fixed-br {\n    bottom: 16px;\n    right: 16px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-btn--text {\n    height: 32px;\n    margin-bottom: 0;\n    margin-top: 0;\n    font-size: 13px;\n  }\n  .md-btn--text::before, .md-btn--text::after {\n    display: none;\n    visibility: hidden;\n  }\n  .md-btn--text::before {\n    top: 0;\n  }\n  .md-btn--text::after {\n    bottom: 0;\n  }\n  .md-btn--fixed-tl {\n    left: 24px;\n    top: 24px;\n  }\n  .md-btn--fixed-tr {\n    right: 24px;\n    top: 24px;\n  }\n  .md-btn--fixed-bl {\n    bottom: 24px;\n    left: 24px;\n  }\n  .md-btn--fixed-br {\n    bottom: 24px;\n    right: 24px;\n  }\n  .md-btn--icon {\n    height: 40px;\n    width: 40px;\n    padding: 10px;\n  }\n  .md-btn--floating {\n    height: 48px;\n    padding: 14px;\n    width: 48px;\n  }\n  .md-btn--floating-mini {\n    height: 40px;\n    padding: 10px;\n    width: 40px;\n  }\n}\n\n.md-card {\n  display: block;\n}\n\n.md-card--raise {\n  transition-duration: 0.3s;\n  transition-property: box-shadow;\n}\n\n.md-collapser--card {\n  transition-duration: 0.3s;\n  transition-property: background, transform;\n}\n\n.md-card-text {\n  font-size: 14px;\n  padding: 16px;\n}\n\n.md-card-text p {\n  font-size: inherit;\n}\n\n.md-card-text p:last-child {\n  margin-bottom: 0;\n}\n\n.md-card-text:last-child {\n  padding-bottom: 24px;\n}\n\n.md-card-title {\n  align-items: center;\n  display: flex;\n  padding: 16px;\n}\n\n.md-card-title:last-child {\n  padding-bottom: 24px;\n}\n\n.md-card-title--primary {\n  padding-top: 24px;\n}\n\n.md-card-title--title {\n  font-size: 14px;\n  line-height: 1.42857;\n  margin: 0;\n  white-space: normal;\n}\n\n.md-card-title--large {\n  font-size: 24px;\n}\n\n.md-card-title--one-line {\n  overflow: hidden;\n}\n\n.md-card-title--one-line .md-card-title--title {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.md-avatar--card {\n  flex-shrink: 0;\n  margin-right: 16px;\n}\n\n.md-dialog-footer--card {\n  align-items: center;\n  display: flex;\n  justify-content: flex-start;\n}\n\n.md-dialog-footer--card-centered {\n  justify-content: center;\n}\n\n.md-card--table .md-card-title {\n  padding-left: 24px;\n}\n\n.md-chip {\n  align-items: center;\n  background: #e0e0e0;\n  border: 0;\n  border-radius: 16px;\n  display: inline-flex;\n  height: 32px;\n  padding-left: 12px;\n  padding-right: 12px;\n  position: relative;\n  transition-duration: 0.15s;\n  transition-property: box-shadow, background;\n  vertical-align: top;\n  white-space: nowrap;\n}\n\n.md-chip:focus {\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n  outline-style: none;\n}\n\n.md-chip--hover.md-chip--hover {\n  background: #616161;\n}\n\n.md-chip-text {\n  color: rgba(0, 0, 0, 0.87);\n  font-size: 13px;\n  transition-duration: 0.15s;\n  transition-property: color;\n}\n\n.md-chip .md-avatar {\n  border: 0;\n  height: 32px;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 32px;\n}\n\n.md-chip--avatar {\n  padding-left: 40px;\n}\n\n.md-chip-icon {\n  color: rgba(0, 0, 0, 0.54);\n  margin-left: 4px;\n  margin-right: 4px;\n  position: absolute;\n  right: 0;\n  top: 4px;\n  z-index: 1;\n}\n\n.md-chip-icon--rotate {\n  transform: rotate3d(0, 0, 1, 45deg);\n}\n\n.md-chip--remove {\n  padding-right: 32px;\n}\n\n.md-chip-text--contact {\n  font-size: 14px;\n}\n\n.md-chip-text--hover {\n  color: #fff;\n}\n\n@media screen and (min-width: 1025px) {\n  .md-chip-icon {\n    margin-left: 6px;\n    margin-right: 6px;\n    top: 6px;\n  }\n}\n\n.md-collapser.md-collapser {\n  transition-duration: 0.15s;\n  transition-property: transform;\n}\n\n.md-collapser .md-tooltip-container {\n  transform: rotate3d(0, 0, 1, 0deg);\n  transition-duration: 0.15s;\n  transition-property: transform;\n}\n\n.md-collapser--flipped {\n  transform: rotate3d(0, 0, 1, 180deg);\n}\n\n.md-collapser--flipped .md-tooltip-container {\n  transform: rotate3d(0, 0, 1, -180deg);\n}\n\n.md-data-table {\n  border-collapse: collapse;\n  max-width: 100%;\n}\n\n.md-data-table--full-width {\n  width: 100%;\n}\n\n.md-data-table--responsive {\n  -webkit-overflow-scrolling: touch;\n  overflow-x: auto;\n}\n\nthead .md-table-row,\ntbody .md-table-row:not(:last-child) {\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n}\n\ntbody .md-table-row {\n  transition-duration: 0.15s;\n  transition-property: background;\n}\n\ntbody .md-table-row--active {\n  background: #f5f5f5;\n}\n\n@media (min-device-width: 1025px) {\n  tbody .md-table-row--hover {\n    background: #eee;\n  }\n}\n\n.md-table-column {\n  line-height: normal;\n  padding-bottom: 0;\n  padding-right: 24px;\n  padding-top: 0;\n  vertical-align: middle;\n  white-space: nowrap;\n}\n\n.md-table-column:first-child {\n  padding-left: 24px;\n}\n\n.md-table-column--relative {\n  position: relative;\n}\n\n.md-table-column--adjusted {\n  padding-right: 56px;\n}\n\n.md-table-column--header {\n  font-size: 12px;\n  font-weight: 500;\n  height: 56px;\n}\n\n.md-table-column--header .md-icon {\n  font-size: 16px;\n}\n\n.md-table-column--data {\n  font-size: 13px;\n  height: 48px;\n}\n\n.md-table-column--plain {\n  height: 48px;\n  white-space: normal;\n}\n\n.md-table-column--grow {\n  width: 100%;\n}\n\n.md-table-column--select-header {\n  padding-left: 16px;\n}\n\n.md-table-column .md-icon-separator {\n  line-height: inherit;\n}\n\n.md-table-checkbox .md-selection-control-label {\n  display: flex;\n}\n\n.md-table-checkbox .md-selection-control-container {\n  margin-left: 12px;\n  margin-right: 12px;\n}\n\n.md-edit-dialog.md-dialog {\n  width: 250px;\n}\n\n.md-edit-dialog__label {\n  overflow: hidden;\n  padding: 16px 0;\n  text-overflow: ellipsis;\n  width: 250px;\n}\n\n@media screen and (max-width: 1024px) {\n  .md-edit-dialog__label {\n    font-size: 16px;\n  }\n}\n\n.md-edit-dialog__content {\n  display: flex;\n  padding: 24px;\n  padding-bottom: 8px;\n}\n\n.md-edit-dialog__content:not(:first-child) {\n  padding-top: 0;\n}\n\n.md-edit-dialog__header {\n  font-weight: 500;\n}\n\n.md-edit-dialog__header.md-text-field {\n  font-size: 12px;\n}\n\n.md-edit-dialog__blocked-field {\n  height: 47px;\n  width: 250px;\n}\n\n.md-edit-dialog__blocked-field.md-edit-dialog__blocked-field {\n  padding-bottom: 0;\n  padding-top: 0;\n}\n\n.md-edit-dialog__blocked-field .md-text-field-icon-container {\n  align-items: center;\n}\n\n.md-table-column--select-field {\n  padding-left: 24px;\n}\n\n.md-select-field-column .md-select-field--btn {\n  height: 47px;\n}\n\n.md-table-footer--pagination .md-table-column {\n  padding-left: 0;\n}\n\n.md-table-pagination {\n  height: 56px;\n}\n\n.md-table-pagination--controls {\n  align-items: center;\n  display: inline-flex;\n  justify-content: flex-start;\n  position: absolute;\n  white-space: nowrap;\n}\n\n@media (max-width: 767px) {\n  .md-table-pagination .md-text-field {\n    font-size: 13px;\n  }\n  .md-table-pagination .md-icon-text:first-child {\n    padding-right: 4px;\n  }\n  .md-table-pagination__label {\n    display: none;\n  }\n}\n\n.md-table-card-header {\n  position: relative;\n}\n\n.md-table-card-header--no-title {\n  align-items: center;\n  display: flex;\n  height: 80px;\n  padding-right: 2px;\n}\n\n.md-table-card-header .md-card-title {\n  padding-right: 2px;\n}\n\n.md-table-card-header .md-card-title:last-child {\n  padding-bottom: 16px;\n}\n\n.md-table-card-header .md-btn--dialog + .md-btn--dialog {\n  margin-left: 8px;\n}\n\n.md-card-title--contextual {\n  background: #fce4ec;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  z-index: 1;\n}\n\n.md-card-title--title-contextual {\n  color: #ff4081;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 80px;\n}\n\n.md-drop-down-enter {\n  transform: translate3d(0, -100%, 0);\n}\n\n.md-drop-down-enter.md-drop-down-enter-active {\n  transform: translate3d(0, 0, 0);\n  transition-duration: 0.15s;\n  transition-property: transform;\n}\n\n.md-drop-down-leave {\n  transform: translate3d(0, 0, 0);\n}\n\n.md-drop-down-leave.md-drop-down-leave-active {\n  transform: translate3d(0, -100%, 0);\n  transition-duration: 0.15s;\n  transition-property: transform;\n}\n\n.md-data-table--fixed {\n  overflow-y: hidden;\n}\n\n.md-data-table__fixed-wrapper {\n  display: table;\n  min-width: 100%;\n  position: relative;\n}\n\n.md-data-table__fixed-wrapper--header {\n  padding-top: 56px;\n}\n\n.md-data-table__fixed-wrapper--footer {\n  padding-bottom: 48px;\n}\n\n.md-data-table__scroll-wrapper {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.md-table-column--fixed {\n  height: 0;\n  padding-bottom: 0;\n  padding-top: 0;\n  visibility: hidden;\n  white-space: nowrap;\n}\n\n.md-table-column--fixed > * {\n  display: none;\n}\n\n.md-table-column--fixed .md-table-column__fixed {\n  display: block;\n}\n\n.md-table-column__fixed {\n  position: absolute;\n  visibility: visible;\n}\n\n.md-table-column__fixed--header {\n  top: 0;\n}\n\n.md-table-column__fixed--footer {\n  bottom: 0;\n}\n\n.md-table-column__fixed--flex {\n  align-items: center;\n  display: flex;\n}\n\n.md-table-column__fixed--flex-right {\n  justify-content: flex-end;\n}\n\n.md-table-column__fixed .md-table-checkbox--header {\n  display: flex;\n  height: 56px;\n}\n\n.md-table-column__fixed .md-table-checkbox--footer {\n  display: flex;\n  height: 48px;\n}\n\n.md-dialog-container.md-overlay {\n  transition-duration: 0.3s;\n  z-index: 20;\n}\n\n.md-dialog {\n  width: 280px;\n  cursor: auto;\n  position: fixed;\n}\n\n.md-dialog--centered {\n  left: 50%;\n  top: 50%;\n  transform: translate3d(-50%, -50%, 0);\n  max-height: calc(100% - 48px);\n  max-width: calc(100% - 80px);\n}\n\n.md-dialog--centered .md-list {\n  padding-bottom: 8px;\n  padding-top: 0;\n}\n\n.md-dialog--centered .md-list-tile {\n  height: auto;\n  padding: 16px 24px;\n}\n\n.md-dialog--centered .md-tile-text--primary {\n  white-space: normal;\n}\n\n.md-dialog--centered-enter {\n  transform: translate3d(-50%, calc(-50% + -30px), 0);\n}\n\n.md-dialog--centered-enter.md-dialog--centered-enter-active {\n  transform: translate3d(-50%, -50%, 0);\n  transition-duration: 0.3s;\n  transition-property: transform;\n}\n\n.md-dialog--centered-leave {\n  transform: translate3d(-50%, -50%, 0);\n}\n\n.md-dialog--centered-leave.md-dialog--centered-leave-active {\n  transform: translate3d(-50%, calc(-50% + -30px), 0);\n  transition-duration: 0.3s;\n  transition-property: transform;\n}\n\n.md-dialog--full-page {\n  bottom: 0;\n  left: 0;\n  overflow: auto;\n  top: 0;\n  width: 100vw;\n  z-index: 110;\n}\n\n.md-dialog--full-page-enter {\n  transform: scale(0);\n}\n\n.md-dialog--full-page-enter.md-dialog--full-page-enter-active {\n  transform: scale(1);\n  transition-duration: 0.3s;\n  transition-property: transform;\n}\n\n.md-dialog--full-page-leave {\n  transform: scale(1);\n}\n\n.md-dialog--full-page-leave.md-dialog--full-page-leave-active {\n  transform: scale(0);\n  transition-duration: 0.3s;\n  transition-property: transform;\n}\n\n.md-title--dialog {\n  margin-bottom: 0;\n  padding: 24px;\n  padding-bottom: 20px;\n  white-space: normal;\n}\n\n.md-dialog-content {\n  -webkit-overflow-scrolling: touch;\n  overflow: auto;\n}\n\n.md-dialog-content--padded {\n  padding: 24px;\n}\n\n.md-dialog-content--padded:not(:first-child) {\n  padding-top: 0;\n}\n\n.md-dialog-footer {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.md-dialog-footer--inline {\n  padding: 8px;\n}\n\n.md-dialog-footer--inline .md-btn--dialog + .md-btn--dialog {\n  margin-left: 8px;\n}\n\n.md-dialog-footer--stacked {\n  align-items: flex-end;\n  flex-direction: column;\n  padding-bottom: 8px;\n  padding-right: 8px;\n}\n\n.md-dialog-footer--stacked .md-btn--dialog {\n  margin-bottom: 6px;\n  margin-top: 6px;\n}\n\n.md-btn--dialog {\n  height: 36px;\n  min-width: 64px;\n  padding-left: 8px;\n  padding-right: 8px;\n}\n\n.md-divider {\n  background: rgba(0, 0, 0, 0.12);\n  border: 0;\n  content: '';\n  display: block;\n  height: 1px;\n  margin: 0;\n}\n\n.md-divider--vertical {\n  height: 100%;\n  width: 1px;\n}\n\n.md-divider--inset {\n  margin-left: 72px;\n}\n\n.md-divider-border {\n  border-color: rgba(0, 0, 0, 0.12);\n  border-style: solid;\n  border-width: 0;\n}\n\n.md-divider-border--top {\n  border-top-width: 1px;\n}\n\n.md-divider-border--right {\n  border-right-width: 1px;\n}\n\n.md-divider-border--bottom {\n  border-bottom-width: 1px;\n}\n\n.md-divider-border--left {\n  border-left-width: 1px;\n}\n\n@media screen and (min-width: 320px) and (max-width: 1024px) {\n  .md-drawer--left {\n    max-width: 320px;\n    transform: translate3d(-100%, 0, 0);\n    width: calc(100vw - 56px);\n  }\n  .md-drawer--right {\n    left: 0;\n    transform: translate3d(100%, 0, 0);\n  }\n  .md-drawer--mini.md-drawer--mini {\n    width: 48px;\n  }\n  .md-list-tile--mini.md-list-tile--mini {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n  .md-drawer-relative--mini.md-drawer-relative--mini {\n    margin-left: 48px;\n  }\n  .md-toolbar ~ .md-list--drawer {\n    height: calc(100% - 56px);\n  }\n}\n\n@media screen and (min-width: 320px) and (min-aspect-ratio: 13 / 9) {\n  .md-toolbar ~ .md-list--drawer {\n    height: calc(100% - 48px);\n  }\n}\n\n@media screen and (min-width: 768px) {\n  .md-drawer--left {\n    max-width: 400px;\n    transform: translate3d(-256px, 0, 0);\n    width: 256px;\n  }\n  .md-drawer--right {\n    transform: translate3d(100%, 0, 0);\n  }\n  .md-drawer--mini.md-drawer--mini {\n    width: 72px;\n  }\n  .md-list-tile--mini.md-list-tile--mini {\n    padding-left: 26px;\n    padding-right: 26px;\n  }\n  .md-drawer-relative {\n    margin-left: 256px;\n  }\n  .md-drawer-relative--mini.md-drawer-relative--mini {\n    margin-left: 72px;\n  }\n  .md-toolbar ~ .md-list--drawer {\n    height: calc(100% - 64px);\n  }\n}\n\n.md-drawer {\n  transition-duration: 0.3s;\n  transition-property: transform;\n}\n\n.md-drawer--fixed {\n  bottom: 0;\n  position: fixed;\n  top: 0;\n  z-index: 17;\n}\n\n.md-drawer--inline {\n  display: inline-block;\n  height: 100%;\n}\n\n.md-drawer--left {\n  left: 0;\n}\n\n.md-drawer--right {\n  right: 0;\n}\n\n.md-drawer--active {\n  transform: translate3d(0, 0, 0);\n}\n\n.md-drawer--mini {\n  z-index: 16;\n}\n\n.md-list--drawer {\n  -webkit-overflow-scrolling: touch;\n  height: 100%;\n  overflow-y: auto;\n}\n\n.md-overlay--drawer.md-overlay--drawer {\n  transition-duration: 0.3s;\n}\n\n.md-expansion-panel {\n  background: #fff;\n  transition-duration: 0.15s;\n  transition-property: margin;\n}\n\n.md-expansion-panel--expanded:not(:first-child) {\n  margin-top: 16px;\n}\n\n.md-expansion-panel--expanded:not(:last-child) {\n  margin-bottom: 16px;\n}\n\n.md-panel-column:not(:last-child) {\n  padding-right: 16px;\n}\n\n.md-panel-column--overflown {\n  flex-shrink: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: break-word;\n}\n\n.md-panel-column:not(:last-child) {\n  padding-right: 16px;\n}\n\n.md-panel-header {\n  align-items: center;\n  display: flex;\n  font-size: 15px;\n  height: 48px;\n  justify-content: space-between;\n  padding-left: 24px;\n  padding-right: 24px;\n  transition-duration: 0.15s;\n  transition-property: background, height;\n}\n\n.md-panel-header--expanded {\n  height: 64px;\n}\n\n.md-panel-header--focused {\n  background: #eee;\n}\n\n.md-panel-content {\n  padding: 0 24px 16px;\n}\n\n.md-panel-secondary-label {\n  color: rgba(0, 0, 0, 0.54);\n  font-size: 12px;\n}\n\n.md-file-input {\n  height: 0;\n  opacity: 0;\n  overflow: hidden;\n  position: absolute;\n  width: 0;\n}\n\n.md-file-input-container {\n  position: relative;\n}\n\n.md-file-input-container .md-btn {\n  display: block;\n}\n\n.md-ink-container {\n  border-radius: inherit;\n  height: 100%;\n  left: 0;\n  overflow: hidden;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  z-index: 1;\n}\n\n.md-ink-container--2x {\n  height: 200%;\n  left: -50%;\n  top: -50%;\n  width: 200%;\n}\n\n.md-ink {\n  background: rgba(0, 0, 0, 0.12);\n  border-radius: 50%;\n  display: block;\n  opacity: 1;\n  position: absolute;\n  transform: scale(0);\n  z-index: -1;\n}\n\n.md-ink--active {\n  transition-duration: 0.45s;\n  transition-property: opacity, transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);\n}\n\n.md-ink--expanded {\n  transform: scale(1);\n}\n\n.md-ink--leaving {\n  opacity: 0;\n  transition-duration: .3s;\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n}\n\n.md-icon {\n  color: rgba(0, 0, 0, 0.54);\n  font-size: 24px;\n  text-align: center;\n  transition-duration: 0.15s;\n  transition-property: color;\n  user-select: none;\n}\n\nsvg.md-icon {\n  fill: currentColor;\n  height: 24px;\n  width: 24px;\n}\n\n.md-icon-separator {\n  align-items: center;\n  display: flex;\n  font-weight: inherit;\n  text-align: left;\n}\n\n.md-icon-separator .md-icon {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n\n.md-icon-text {\n  flex-grow: 1;\n  flex-shrink: 0;\n  font-weight: inherit;\n  line-height: inherit;\n}\n\n.md-icon-text:first-child {\n  padding-right: 16px;\n}\n\n.md-icon-text:last-child {\n  padding-left: 16px;\n}\n\n@media screen and (min-width: 1025px) {\n  .material-icons.md-icon {\n    font-size: 20px;\n  }\n  svg.md-icon {\n    height: 20px;\n    width: 20px;\n  }\n}\n\n.md-layover-enter {\n  transform: scale(0);\n}\n\n.md-layover-enter.md-layover-enter-active {\n  transform: scale(1);\n  transition-duration: 0.2s;\n  transition-property: transform;\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n}\n\n.md-layover-leave {\n  opacity: 1;\n}\n\n.md-layover-leave.md-layover-leave-active {\n  opacity: 0;\n  transition-duration: 0.2s;\n  transition-property: opacity;\n  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);\n}\n\n.md-layover-child {\n  position: fixed;\n  z-index: 100;\n}\n\n.md-layover-child--tl {\n  transform-origin: 0 0;\n}\n\n.md-layover-child--tr {\n  transform-origin: 100% 0;\n}\n\n.md-layover-child--bl {\n  transform-origin: 0 100%;\n}\n\n.md-layover-child--br {\n  transform-origin: 100% 100%;\n}\n\n.md-layover-child--below {\n  transform-origin: 50% 0;\n}\n\n.md-layover-child--below.md-layover-enter {\n  transform: scaleY(0);\n}\n\n.md-layover-child--below.md-layover-enter.md-layover-enter-active {\n  transform: scaleY(1);\n}\n\n.md-layover--simplified {\n  position: relative;\n}\n\n.md-layover-child--simplified {\n  position: absolute;\n}\n\n.md-list {\n  background: #fff;\n  user-select: none;\n}\n\n.md-list .md-avatar,\n.md-list .md-icon {\n  flex-shrink: 0;\n}\n\n.md-list .md-divider {\n  margin-bottom: 8px;\n  margin-top: 8px;\n}\n\n.md-list .md-list:not(.md-list--menu) {\n  background: inherit;\n}\n\n.md-list-tile {\n  align-items: center;\n  display: flex;\n  padding-left: 16px;\n  padding-right: 16px;\n  text-decoration: none;\n  transition-duration: 0.15s;\n  transition-property: background;\n}\n\n.md-list-tile--active {\n  background: rgba(0, 0, 0, 0.12);\n}\n\n.md-list-item--inset {\n  padding-left: 72px;\n}\n\n.md-tile-content {\n  flex-grow: 1;\n  overflow: hidden;\n}\n\n.md-tile-content--left-icon {\n  padding-left: 32px;\n}\n\n.md-tile-content--left-avatar {\n  padding-left: 16px;\n}\n\n.md-tile-content--right-padding {\n  padding-right: 16px;\n}\n\n.md-tile-addon {\n  line-height: 1.42857;\n}\n\n.md-tile-addon--icon {\n  height: 24px;\n}\n\n.md-tile-addon--avatar {\n  height: 40px;\n}\n\n.md-text--theme-primary .md-icon {\n  color: inherit;\n}\n\n.md-tile-text--primary, .md-tile-text--secondary {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.md-tile-text--three-lines {\n  white-space: pre-line;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n}\n\n.md-list-tile--three-lines .md-tile-addon {\n  align-self: flex-start;\n}\n\n.md-list--nested-1 .md-list-tile {\n  padding-left: 72px;\n}\n\n.md-list--nested-2 .md-list-tile {\n  padding-left: 108px;\n}\n\n.md-list-control {\n  flex-grow: 1;\n}\n\n.md-list-control .md-selection-control-label {\n  width: 100%;\n}\n\n.md-list-control .md-selection-control-label > span {\n  width: 100%;\n}\n\n.md-tile-content--left-button {\n  padding-left: 24px;\n}\n\n.md-list-control--right {\n  justify-content: flex-end;\n}\n\n.md-list-tile--control-left {\n  padding-left: 0;\n}\n\n.md-list-tile--control-right {\n  padding-right: 0;\n}\n\n@media screen and (min-width: 320px) {\n  .md-list {\n    padding-bottom: 8px;\n    padding-top: 8px;\n  }\n  .md-list-tile {\n    height: 48px;\n  }\n  .md-tile-text--primary {\n    font-size: 16px;\n  }\n  .md-tile-text--secondary {\n    font-size: 14px;\n  }\n  .md-list-tile--avatar {\n    height: 56px;\n  }\n  .md-list-tile--two-lines {\n    height: 72px;\n  }\n  .md-list-tile--three-lines {\n    height: 88px;\n  }\n  .md-list-tile--three-lines .md-tile-text--secondary {\n    height: 40px;\n  }\n  .md-list-tile--three-lines .md-tile-addon {\n    margin-top: 14px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-list {\n    padding-bottom: 4px;\n    padding-top: 4px;\n  }\n  .md-list-tile {\n    height: 40px;\n  }\n  .md-tile-text--primary, .md-tile-text--secondary {\n    font-size: 13px;\n  }\n  .md-list-tile--avatar {\n    height: 48px;\n  }\n  .md-list-tile--two-lines {\n    height: 60px;\n  }\n  .md-list-tile--three-lines {\n    height: 76px;\n  }\n  .md-list-tile--three-lines .md-tile-text--secondary {\n    height: 37.14286px;\n  }\n  .md-list-tile--three-lines .md-tile-addon {\n    margin-top: 12px;\n  }\n  .md-tile-addon--icon {\n    height: 20px;\n  }\n  .md-tile-content--left-icon {\n    padding-left: 36px;\n  }\n}\n\n.md-list--inline {\n  display: flex;\n  padding: 0;\n}\n\n.md-media {\n  display: block;\n  height: 0;\n  overflow: hidden;\n  padding: 0;\n  position: relative;\n}\n\n.md-media--16-9 {\n  padding-bottom: 56.25%;\n}\n\n.md-media--4-3 {\n  padding-bottom: 75%;\n}\n\n.md-media--1-1 {\n  padding-bottom: 100%;\n}\n\n.md-media-overlay {\n  background: rgba(0, 0, 0, 0.54);\n  bottom: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 1;\n}\n\n.md-media-overlay .md-btn,\n.md-media-overlay .md-text {\n  color: #fff;\n}\n\n.md-media-overlay .md-text--secondary {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.md-list--menu {\n  min-width: 112px;\n}\n\n.md-list--menu-restricted {\n  -webkit-overflow-scrolling: touch;\n  overflow-y: auto;\n}\n\n.md-list--menu-contained {\n  width: 100%;\n}\n\n.md-list--menu-below {\n  left: 0;\n  top: 100%;\n  transform-origin: 50% 0;\n}\n\n.md-list--menu-tr {\n  right: 0;\n  top: 0;\n  transform-origin: 100% 0;\n}\n\n.md-list--menu-tl {\n  top: 0;\n  transform-origin: 0 0;\n}\n\n.md-list--menu-br {\n  right: 0;\n  transform-origin: 100% 100%;\n}\n\n.md-list--menu-bl {\n  transform-origin: 0 100%;\n}\n\n@media screen and (min-width: 1025px) {\n  .md-list--menu-cascading {\n    padding-bottom: 16px;\n    padding-top: 16px;\n  }\n  .md-list--menu-cascading .md-list-tile {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n  .md-list--menu-cascading .md-list-tile:not(.md-list-tile--two-lines):not(.md-list-tile--three-lines) {\n    height: 32px;\n  }\n  .md-list--menu-cascading .md-tile-text--primary {\n    font-size: 15px;\n  }\n  .md-list--menu-cascading .md-collapser {\n    transform: rotate3d(0, 0, 1, -90deg);\n  }\n  .md-list--menu-cascading .md-collapser--flipped {\n    transform: rotate3d(0, 0, 1, 90deg);\n  }\n}\n\n@media screen and (min-width: 320px) {\n  .md-list--menu-restricted {\n    max-height: 272px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-list--menu-restricted {\n    max-height: 264px;\n  }\n}\n\n@media screen and (min-width: 320px) {\n  .md-navigation-drawer-content {\n    min-height: calc(100vh - 56px);\n  }\n}\n\n@media screen and (min-width: 320px) and (min-aspect-ratio: 13 / 9) {\n  .md-navigation-drawer-content {\n    min-height: calc(100vh - 48px);\n  }\n}\n\n@media screen and (min-width: 768px) {\n  .md-navigation-drawer-content {\n    min-height: calc(100vh - 64px);\n  }\n  .md-title.md-title--persistent-offset {\n    margin-left: 216px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-title.md-title--persistent-offset {\n    margin-left: 226px;\n  }\n}\n\n.md-toolbar.md-toolbar--over-drawer {\n  z-index: 19;\n}\n\n.md-title--drawer-active.md-title--drawer-active {\n  transition-duration: 0.3s;\n  transition-property: margin-left;\n}\n\n.md-navigation-drawer-content {\n  display: block;\n}\n\n.md-navigation-drawer-content:focus {\n  outline-style: none;\n}\n\n.md-navigation-drawer-content--inactive {\n  margin-left: 0;\n}\n\n.md-navigation-drawer-content--active {\n  transition-duration: 0.3s;\n  transition-property: margin-left;\n}\n\n.md-navigation-drawer-content--prominent-offset {\n  min-height: calc(100vh - 128px);\n}\n\n.md-title.md-title--permanent-offset {\n  margin-left: 276px;\n}\n\n.md-cross-fade-enter {\n  opacity: .01;\n  transform: translate3d(0, 16px, 0);\n}\n\n.md-cross-fade-enter.md-cross-fade-enter-active {\n  opacity: 1;\n  transform: translate3d(0, 0, 0);\n  transition-duration: 0.3s;\n  transition-property: transform, opacity;\n}\n\n.md-overlay {\n  background: rgba(0, 0, 0, 0.4);\n  bottom: 0;\n  left: 0;\n  opacity: 0;\n  position: fixed;\n  right: 0;\n  top: 0;\n  transition-duration: 0.15s;\n  transition-property: opacity;\n  z-index: 16;\n}\n\n.md-overlay--active {\n  opacity: 1;\n}\n\n.md-paper--0 {\n  box-shadow: none;\n}\n\n@media screen and (min-width: 1025px) {\n  .md-paper--0-hover {\n    transition-duration: 0.3s;\n    transition-property: box-shadow;\n  }\n  .md-paper--0-hover:hover {\n    box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.4);\n  }\n}\n\n.md-paper--1 {\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n}\n\n.md-paper--2 {\n  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.4);\n}\n\n.md-paper--3 {\n  box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.4);\n}\n\n.md-paper--4 {\n  box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.4);\n}\n\n.md-paper--5 {\n  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.4);\n}\n\n.md-picker-container {\n  position: relative;\n}\n\n.md-picker-content-container {\n  background: #fff;\n}\n\n.md-picker--inline {\n  box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.4);\n  position: absolute;\n  z-index: 12;\n}\n\n.md-picker--inline-icon {\n  left: 40px;\n}\n\n.md-picker-control {\n  padding: 0;\n}\n\n.md-picker-text {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.md-picker-text.md-picker-text > * {\n  color: inherit;\n}\n\n.md-picker-text > * {\n  font-weight: inherit;\n  margin: 0;\n  transition-duration: 0.15s;\n  transition-property: color, font;\n}\n\n.md-picker-text--active {\n  color: #fff;\n  font-weight: 500;\n}\n\n.md-dialog--picker {\n  -webkit-overflow-scrolling: touch;\n  max-height: calc(100% - 16px);\n  max-width: calc(100% - 16px);\n  overflow: auto;\n  width: auto;\n}\n\n.md-dialog-content--picker {\n  padding: 0;\n}\n\n.md-picker-header {\n  background: #3f51b5;\n  padding: 24px;\n}\n\n@media (orientation: portrait) {\n  .md-picker {\n    width: 330px;\n  }\n  .md-picker .md-picker-header {\n    height: 110px;\n  }\n  .md-picker .md-time-periods {\n    display: inline-block;\n    padding-left: 1em;\n    padding-right: 24px;\n  }\n  .md-picker .md-picker-content {\n    height: 340px;\n  }\n  .md-picker .md-display-3 {\n    font-size: 5em;\n    line-height: 1;\n  }\n  .md-picker .md-calendar-dows {\n    padding-bottom: 12px;\n  }\n  .md-picker.md-picker--date .md-display-1 {\n    display: inline-block;\n  }\n  .md-picker .md-calendar-date--btn {\n    height: 44px;\n  }\n  .md-picker .md-calendar-date--btn::after {\n    height: 36px;\n    width: 36px;\n  }\n  .md-picker .md-clock-face {\n    height: 282px;\n    width: 282px;\n  }\n  .md-picker .md-clock-hand {\n    width: 121px;\n  }\n  .md-picker .md-clock-hand--inner {\n    width: 85px;\n  }\n}\n\n@media (orientation: landscape) {\n  .md-picker {\n    display: flex;\n    width: 560px;\n  }\n  .md-picker .md-picker-header {\n    width: 190px;\n  }\n  .md-picker .md-picker-content {\n    height: 280px;\n    width: 370px;\n  }\n  .md-picker .md-calendar-date--btn {\n    height: 35px;\n  }\n  .md-picker .md-calendar-date--btn::after {\n    height: 32px;\n    width: 32px;\n  }\n  .md-picker.md-picker--time .md-picker-header {\n    padding-top: 93.33333px;\n  }\n  .md-picker .md-clock-face {\n    height: 244px;\n    width: 244px;\n  }\n  .md-picker .md-clock-hand {\n    width: 102px;\n  }\n  .md-picker .md-clock-hand--inner {\n    width: 66px;\n  }\n  .md-picker .md-time-periods {\n    margin-left: auto;\n    margin-right: 2.5em;\n    width: 35px;\n  }\n  .md-picker .md-display-3 {\n    font-size: 3.25em;\n  }\n}\n\n@media (max-width: 320px) and (orientation: portrait) {\n  .md-picker {\n    width: 304px;\n  }\n}\n\n@media (max-height: 320px) and (orientation: landscape) {\n  .md-picker .md-picker-content {\n    height: 256px;\n    width: calc(100vw - 206px);\n  }\n}\n\n.md-picker--date .md-picker-control {\n  display: block;\n}\n\n.md-picker-content--calendar {\n  padding-left: 12px;\n  padding-right: 12px;\n}\n\n.md-calendar-controls {\n  align-items: center;\n  display: flex;\n}\n\n.md-calendar-controls .md-title {\n  flex-grow: 1;\n  font-size: 16px;\n  margin-bottom: 0;\n  text-align: center;\n}\n\n.md-calendar-date {\n  margin: 0;\n  width: calc(100% / 7);\n}\n\n.md-picker-content--year {\n  -webkit-overflow-scrolling: touch;\n  overflow-y: auto;\n}\n\n.md-years {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.md-year {\n  font-size: 16px;\n  padding: 12px;\n  transition-duration: 0.15s;\n  transition-property: color, font-size;\n}\n\n.md-year:focus:not(.md-year--active) {\n  font-size: 20px;\n}\n\n.md-year--active {\n  font-size: 24px;\n  font-weight: 500;\n}\n\n.md-calendar-date--btn::after {\n  background: #3f51b5;\n  border-radius: 50%;\n  content: '';\n  display: block;\n  left: 50%;\n  position: absolute;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%) scale(0);\n  transition-duration: 0.15s;\n  transition-property: transform;\n  z-index: 0;\n}\n\n.md-calendar-date--btn-active {\n  font-weight: 700;\n}\n\n.md-calendar-date--btn-active::after {\n  transform: translateX(-50%) translateY(-50%) scale(1);\n}\n\n.md-calendar-date--date {\n  position: relative;\n  z-index: 1;\n}\n\n.md-calendar-dow {\n  font-size: 13px;\n  font-weight: 700;\n  line-height: 1.42857;\n}\n\n.md-picker-content--clock {\n  padding: 24px;\n  padding-bottom: 12px;\n}\n\n.md-time-periods .md-picker-control {\n  display: block;\n}\n\n.md-time-period {\n  font-size: 1.14286em;\n  font-weight: 500;\n  margin: 0;\n  padding: 0;\n}\n\n.md-clock-face {\n  background: #f5f5f5;\n  border-radius: 50%;\n  position: relative;\n}\n\n.md-clock-hand {\n  height: 2px;\n  position: absolute;\n  transform-origin: 0 0;\n  transition-duration: 0.15s;\n  transition-property: width;\n  z-index: 1;\n}\n\n.md-clock-hand--active {\n  transition-property: transform, width;\n}\n\n.md-clock-hand::before, .md-clock-hand::after {\n  background: #3f51b5;\n  border-radius: 50%;\n  content: '';\n  position: absolute;\n}\n\n.md-clock-hand::before {\n  height: 6px;\n  left: -3px;\n  top: -2px;\n  width: 6px;\n}\n\n.md-clock-hand::after {\n  height: 36px;\n  right: -16px;\n  top: -18px;\n  transition-duration: 0.15s;\n  transition-property: background, border, transform;\n  width: 36px;\n}\n\n.md-clock-hand--minute-hover::after {\n  transform: scale(0.4);\n}\n\n.md-clock-time {\n  align-items: center;\n  display: flex;\n  height: 36px;\n  justify-content: center;\n  position: absolute;\n  width: 36px;\n  z-index: 8;\n}\n\n.md-clock-time:focus {\n  outline-style: none;\n}\n\n.md-progress {\n  display: block;\n  margin-bottom: 1em;\n  margin-top: 1em;\n}\n\n.md-progress--circular-determinate {\n  transition-duration: 0.15s;\n  transition-property: transform;\n}\n\n.md-progress--circular-indeterminate {\n  animation-duration: 2.4s;\n  animation-iteration-count: infinite;\n  animation-name: md-circular-progress;\n  animation-timing-function: linear;\n}\n\n.md-circular-progress-path {\n  fill: none;\n  stroke: #ff4081;\n  stroke-dasharray: 187px;\n}\n\n.md-circular-progress-path--animated {\n  animation-duration: 2.4s;\n  animation-iteration-count: infinite;\n  animation-name: md-circular-progress-dash;\n  animation-timing-function: ease-ine-out;\n  stroke-dashoffset: 0;\n}\n\n@keyframes md-circular-progress {\n  0% {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(135deg);\n  }\n  75% {\n    transform: rotate(450deg);\n  }\n  100% {\n    transform: rotate(720deg);\n  }\n}\n\n@keyframes md-circular-progress-dash {\n  0% {\n    stroke-dashoffset: 187px;\n  }\n  50% {\n    stroke-dashoffset: 46.75px;\n  }\n  100% {\n    stroke-dashoffset: 187px;\n  }\n}\n\n.md-progress--linear {\n  background: #ff80ab;\n  height: 3px;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n}\n\n.md-progress--linear-active {\n  background: #ff4081;\n}\n\n.md-progress--linear-determinate {\n  height: 100%;\n  position: absolute;\n  z-index: 1;\n}\n\n.md-progress--linear-indeterminate::before, .md-progress--linear-indeterminate::after {\n  background: inherit;\n  bottom: 0;\n  content: '';\n  position: absolute;\n  top: 0;\n  will-change: left, right;\n  z-index: 1;\n}\n\n.md-progress--linear-indeterminate::before {\n  animation-duration: 2.4s;\n  animation-iteration-count: infinite;\n  animation-name: md-linear-indeterminate;\n  animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.md-progress--linear-indeterminate::after {\n  animation-delay: 1.15s;\n  animation-duration: 2.4s;\n  animation-iteration-count: infinite;\n  animation-name: md-linear-indeterminate-short;\n  animation-timing-function: cubic-bezier(0.4, 0, 1, 1);\n}\n\n.md-progress--linear-query::before, .md-progress--linear-query::after {\n  animation-direction: reverse;\n}\n\n@keyframes md-linear-indeterminate {\n  0% {\n    left: -35%;\n    right: 100%;\n  }\n  60% {\n    left: 100%;\n    right: -90%;\n  }\n  100% {\n    left: 100%;\n    right: -90%;\n  }\n}\n\n@keyframes md-linear-indeterminate-short {\n  0% {\n    left: -200%;\n    right: 100%;\n  }\n  60% {\n    left: 107%;\n    right: -8%;\n  }\n  100% {\n    left: 107%;\n    right: -8%;\n  }\n}\n\n.md-select-field {\n  cursor: inherit;\n  display: flex;\n  flex-wrap: wrap;\n  user-select: none;\n}\n\n.md-select-field .md-divider {\n  width: 100%;\n}\n\n.md-select-field__toggle {\n  position: relative;\n}\n\n.md-select-field--btn.md-select-field--btn {\n  padding-bottom: 16px;\n  padding-left: 24px;\n  padding-right: 16px;\n  padding-top: 16px;\n}\n\n.md-select-field--text-field {\n  pointer-events: none;\n}\n\n.md-drop-enter {\n  transform: translate3d(0, -6px, 0);\n}\n\n.md-drop-enter.md-drop-enter-active {\n  transform: translate3d(0, 0, 0);\n  transition-duration: 0.3s;\n  transition-property: transform;\n}\n\n@media screen and (min-width: 320px) {\n  .md-select-field--btn {\n    height: 48px;\n  }\n  .md-select-field--text-field {\n    height: 18px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-select-field--btn {\n    height: 40px;\n  }\n  .md-select-field--text-field {\n    height: 15px;\n  }\n}\n\n.md-selection-control-container--inline {\n  display: inline-block;\n}\n\n.md-selection-control-input {\n  height: 0;\n  position: absolute;\n  visibility: hidden;\n  width: 0;\n}\n\n.md-selection-control-label {\n  align-items: center;\n  display: inline-flex;\n}\n\n.md-selection-control-group {\n  border: 0;\n}\n\n.md-switch-container {\n  align-items: center;\n  display: flex;\n  height: 48px;\n}\n\n.md-switch-container.md-selection-control-container--inline {\n  display: inline-flex;\n}\n\n.md-switch-track {\n  border-radius: 8px;\n  flex-shrink: 0;\n  height: 16px;\n  margin-left: 12px;\n  margin-right: 12px;\n  position: relative;\n  width: 40px;\n}\n\n.md-switch-track--on {\n  background: rgba(233, 30, 99, 0.5);\n}\n\n.md-switch-track--off {\n  background: rgba(0, 0, 0, 0.38);\n}\n\n.md-switch-track--disabled {\n  background: rgba(0, 0, 0, 0.12);\n}\n\n.md-switch-thumb {\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n  border-radius: 50%;\n  content: '';\n  display: block;\n  height: 24px;\n  position: absolute;\n  transition-duration: 0.15s;\n  transition-property: background, transform;\n  width: 24px;\n}\n\n.md-switch-thumb--on {\n  background: #e91e63;\n  transform: translate3d(20px, -4px, 0);\n}\n\n.md-switch-thumb--off {\n  background: #fafafa;\n  transform: translate3d(-4px, -4px, 0);\n}\n\n.md-switch-thumb--disabled {\n  background: #bdbdbd;\n}\n\n@media screen and (min-width: 320px) {\n  .md-selection-control-label {\n    font-size: 16px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-selection-control-label {\n    font-size: 13px;\n  }\n  .md-selection-control-container {\n    height: 40px;\n  }\n}\n\n.md-slider-container {\n  display: flex;\n  flex-wrap: wrap;\n  text-align: left;\n}\n\n.md-slider-label {\n  display: block;\n  width: 100%;\n}\n\n.md-slider-input {\n  height: 0;\n  position: absolute;\n  visibility: hidden;\n  width: 0;\n}\n\n.md-slider-track {\n  background: rgba(0, 0, 0, 0.26);\n  content: '';\n  display: block;\n  flex-grow: 1;\n  flex-shrink: 0;\n  height: 2px;\n  margin-bottom: 23px;\n  margin-top: 23px;\n  position: relative;\n}\n\n.md-slider-track-fill {\n  background: #3f51b5;\n  border: 0;\n  height: 2px;\n  left: 0;\n  margin: 0;\n  position: absolute;\n  top: 0;\n  transition-duration: 0.15s;\n  transition-property: width;\n}\n\n.md-slider-track-fill--dragging {\n  transition-property: none;\n}\n\n.md-slider-thumb {\n  border-radius: 50%;\n  content: '';\n  display: inline-block;\n  height: 14px;\n  position: absolute;\n  top: -6px;\n  transition-duration: 0.15s;\n  transition-property: left, transform, background;\n  width: 14px;\n  z-index: 5;\n}\n\n.md-slider-thumb:focus {\n  outline-style: none;\n}\n\n.md-slider-thumb--on {\n  background: #3f51b5;\n}\n\n.md-slider-thumb--active {\n  transform: scale(1.5);\n  transform-origin: center;\n}\n\n.md-slider-thumb--dragging {\n  transition-property: transform, background;\n}\n\n.md-slider-thumb--disabled {\n  background: rgba(0, 0, 0, 0.26);\n  transform: scale(0.75);\n}\n\n.md-slider-thumb--continuous-off {\n  background: #fff;\n  border: 2px solid;\n  border-color: rgba(0, 0, 0, 0.26);\n  position: relative;\n}\n\n.md-slider-thumb--mask {\n  transform: scale(1);\n}\n\n.md-slider-thumb--mask-inked {\n  background: rgba(63, 81, 181, 0.15);\n  transform: scale(3.5);\n  z-index: 4;\n}\n\n.md-slider-thumb--mask-disabled {\n  background: #fff;\n  border-radius: 0;\n  transform: scale(1.1);\n  z-index: 4;\n}\n\n.md-slider-thumb--discrete::after {\n  border-left: 7px solid transparent;\n  border-right: 7px solid transparent;\n  border-top: 7px solid transparent;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  content: '';\n  height: 0;\n  left: 0;\n  position: absolute;\n  top: 10px;\n  transition-duration: 0.15s;\n  transition-property: border-top-color, transform;\n  width: 0;\n}\n\n.md-slider-thumb--discrete-active {\n  top: 0;\n  transform: scale(2) translate3d(0, -18px, 0);\n}\n\n.md-slider-thumb--discrete-on::after {\n  border-top-color: #3f51b5;\n}\n\n.md-slider-thumb--discrete-off {\n  background: #000;\n}\n\n.md-slider-thumb--discrete-active-off {\n  background: #bdbdbd;\n}\n\n.md-slider-thumb--discrete-active-off::after {\n  border-top-color: #bdbdbd;\n}\n\n.md-slider-thumb--discrete-mask-inked {\n  transform: scale(2.5);\n  transition-duration: 0.3s;\n}\n\n.md-slider-thumb--discrete-mask-leaving {\n  background: rgba(63, 81, 181, 0.3);\n  transition-duration: 0.3s;\n  z-index: 4;\n}\n\n.md-slider-discrete-value {\n  align-items: center;\n  color: #fff;\n  display: flex;\n  font-size: 12px;\n  height: 28px;\n  justify-content: center;\n  position: absolute;\n  text-align: center;\n  transform: translate3d(-7px, -43px, 0);\n  transition-duration: 0.15s;\n  transition-property: left;\n  width: 28px;\n  z-index: 6;\n}\n\n.md-slider-discrete-tick {\n  background: #000;\n  content: '';\n  height: 2px;\n  position: absolute;\n  top: 0px;\n  z-index: 4;\n}\n\n.md-slider-discrete-value--dragging {\n  transition-property: none;\n}\n\n.md-slider-editor {\n  text-align: right;\n}\n\n.md-slider-container .md-text-field-container {\n  margin-left: 4px;\n  padding-right: 0;\n}\n\n@media screen and (min-width: 320px) {\n  .md-slider-ind {\n    font-size: 16px;\n    margin-top: 14px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-slider-ind {\n    font-size: 13px;\n    margin-top: 16px;\n  }\n}\n\n.md-slider-container .md-icon {\n  margin-bottom: 12px;\n  margin-top: 12px;\n}\n\n.md-slider-ind {\n  display: block;\n  text-align: center;\n}\n\n.md-slider-track--ind-left {\n  margin-left: 16px;\n}\n\n.md-slider-track--ind-right {\n  margin-right: 16px;\n}\n\n.md-subheader {\n  font-size: 14px;\n  font-weight: 500;\n  height: 48px;\n  line-height: 48px;\n  padding-left: 16px;\n  padding-right: 16px;\n}\n\n.md-snackbar-container {\n  position: absolute;\n}\n\n.md-snackbar {\n  align-items: center;\n  background: #323232;\n  bottom: 0;\n  display: flex;\n  height: 48px;\n  justify-content: space-between;\n  position: fixed;\n  transform-origin: 0 100%;\n  z-index: 20;\n}\n\n.md-snackbar--multiline {\n  height: 80px;\n}\n\n.md-snackbar--toast {\n  color: #fff;\n  margin-bottom: 0;\n  padding-left: 24px;\n  padding-right: 24px;\n}\n\n.md-snackbar-enter-active,\n.md-snackbar-leave-active {\n  transition-duration: 0.3s;\n  transition-property: transform;\n}\n\n.md-snackbar-enter-active *,\n.md-snackbar-leave-active * {\n  transition-duration: 0.3s;\n  transition-property: opacity;\n}\n\n.md-snackbar-enter.md-snackbar-enter-active {\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n}\n\n.md-snackbar-leave.md-snackbar-leave-active {\n  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);\n}\n\n.md-snackbar-enter *,\n.md-snackbar-leave.md-snackbar-leave-active * {\n  opacity: 0;\n}\n\n.md-snackbar-enter.md-snackbar-enter-active *,\n.md-snackbar-leave * {\n  opacity: 1;\n}\n\n.md-btn--snackbar {\n  padding-left: 24px;\n  padding-right: 24px;\n}\n\n@media screen and (min-width: 320px) {\n  .md-snackbar {\n    left: 0;\n    right: 0;\n  }\n  .md-snackbar-enter,\n  .md-snackbar-leave.md-snackbar-leave-active {\n    transform: translate3d(0, 100%, 0);\n  }\n  .md-snackbar-enter.md-snackbar-enter-active,\n  .md-snackbar-leave {\n    transform: translate3d(0, 0, 0);\n  }\n  .md-snackbar--action {\n    padding-right: 0;\n  }\n  .md-btn--snackbar-floating {\n    transition: bottom 0.3s, background 0.15s, box-shadow 0.15s, color 0.15s;\n    will-change: bottom;\n  }\n  .md-btn--snackbar-floating-adjust {\n    bottom: 64px;\n  }\n  .md-btn--snackbar-floating-multiline-adjust {\n    bottom: 96px;\n  }\n}\n\n@media screen and (min-width: 768px) {\n  .md-snackbar {\n    border-radius: 2px;\n    left: 50%;\n    max-width: 568px;\n    min-width: 288px;\n    right: auto;\n    transform: translate3d(-50%, 0, 0);\n  }\n  .md-snackbar-enter,\n  .md-snackbar-leave.md-snackbar-leave-active {\n    transform: translate3d(-50%, 100%, 0);\n  }\n  .md-snackbar-enter.md-snackbar-enter-active,\n  .md-snackbar-leave {\n    transform: translate3d(-50%, 0, 0);\n  }\n  .md-snackbar--action {\n    padding-right: 24px;\n  }\n  .md-btn--snackbar-floating-adjust {\n    bottom: 24px;\n  }\n  .md-btn--snackbar-floating-multiline-adjust {\n    bottom: 24px;\n  }\n}\n\n.md-tabs {\n  display: flex;\n  position: relative;\n}\n\n.md-tabs.md-background--primary .md-ink {\n  background: rgba(255, 255, 255, 0.12);\n}\n\n.md-tabs--centered {\n  justify-content: center;\n}\n\n.md-tabs--centered .md-tab {\n  flex-grow: 0;\n}\n\n.md-tabs--pagination .md-tab {\n  flex-grow: 0;\n}\n\n.md-tab {\n  align-items: center;\n  color: inherit;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 0;\n  height: 48px;\n  justify-content: flex-end;\n  overflow: hidden;\n  padding-bottom: 20px;\n  padding-left: 12px;\n  padding-right: 12px;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n}\n\n.md-tab--multiline {\n  font-size: 12px;\n  padding-bottom: 12px;\n}\n\n.md-tab--icon {\n  height: 72px;\n  padding-bottom: 16px;\n}\n\n.md-tab--inactive {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.md-tab-indicator {\n  background: #ff4081;\n  bottom: 0;\n  content: '';\n  height: 2px;\n  left: 0;\n  position: absolute;\n}\n\n.md-btn--tab-overflow {\n  bottom: 2px;\n  position: absolute;\n}\n\n.md-btn--tab-overflow--icon {\n  bottom: 8px;\n}\n\n.md-btn--tab-overflow-left {\n  left: 6px;\n  z-index: 3;\n}\n\n.md-btn--tab-overflow-right {\n  right: 12px;\n}\n\n.md-menu--tab {\n  margin-right: 100%;\n}\n\n.md-menu--tab .md-icon {\n  color: inherit;\n}\n\n.md-menu--tab .md-tab {\n  padding-top: 12px;\n}\n\n.md-icon--tab {\n  color: inherit;\n  margin-bottom: 10px;\n}\n\n.md-tab-toolbar {\n  width: 100%;\n}\n\n.md-tabs-fixed-container {\n  left: 0;\n  position: fixed;\n  right: 0;\n  top: 0;\n  z-index: 15;\n}\n\n.md-tabs-content--offset {\n  margin-top: 48px;\n}\n\n.md-tabs-content--offset-icon {\n  margin-top: 72px;\n}\n\n.md-tabs-content--offset-toolbar-prominent {\n  margin-top: 176px;\n}\n\n.md-tabs-content--offset-toolbar-prominent-icon {\n  margin-top: 200px;\n}\n\n@media screen and (min-width: 320px) {\n  .md-toolbar ~ .md-tabs {\n    margin-top: -1px;\n  }\n  .md-tabs {\n    -webkit-overflow-scrolling: touch;\n    overflow-x: auto;\n  }\n  .md-tab {\n    max-width: calc(100vw - 56px);\n    min-width: 72px;\n  }\n  .md-tab-label {\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 14px;\n  }\n}\n\n@media screen and (min-width: 320px) and (max-aspect-ratio: 13 / 9) {\n  .md-tabs-content--offset-toolbar {\n    margin-top: 104px;\n  }\n  .md-tabs-content--offset-toolbar-icon {\n    margin-top: 128px;\n  }\n}\n\n@media screen and (min-width: 320px) and (min-aspect-ratio: 13 / 9) {\n  .md-tabs-content--offset-toolbar {\n    margin-top: 96px;\n  }\n  .md-tabs-content--offset-toolbar-icon {\n    margin-top: 120px;\n  }\n}\n\n@media screen and (min-width: 768px) {\n  .md-tabs-content--offset-toolbar {\n    margin-top: 112px;\n  }\n  .md-tabs-content--offset-toolbar-icon {\n    margin-top: 136px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-toolbar ~ .md-tabs {\n    margin-top: 0;\n  }\n  .md-tabs {\n    overflow: visible;\n  }\n  .md-tab {\n    max-width: 264px;\n    min-width: 160px;\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n  .md-tab-label {\n    font-size: 13px;\n    line-height: 13px;\n  }\n  .md-icon--tab {\n    margin-bottom: 12px;\n    margin-top: 2px;\n  }\n}\n\n.md-text-field-container {\n  position: relative;\n}\n\n.md-text-field-container--input {\n  line-height: 1.15;\n}\n\n.md-text-field-container--input-block {\n  display: flex;\n}\n\n.md-text-field-container--input-block .md-text-field-message-container {\n  flex-shrink: 0;\n}\n\n.md-text-field-multiline-container,\n.md-text-field-container--multiline {\n  transition-duration: 0.15s;\n  transition-property: height;\n}\n\n.md-text-field-multiline-container {\n  position: relative;\n}\n\n.md-text-field-container--multiline {\n  display: flex;\n  flex-direction: column;\n}\n\n.md-text-field {\n  background: none;\n  border: 0;\n  line-height: inherit;\n  padding: 0;\n  width: 100%;\n}\n\n.md-text-field:placeholder {\n  color: rgba(0, 0, 0, 0.54);\n}\n\n.md-text-field:-moz-placeholder {\n  color: rgba(0, 0, 0, 0.54);\n}\n\n.md-text-field::-moz-placeholder {\n  color: rgba(0, 0, 0, 0.54);\n}\n\n.md-text-field:-ms-input-placeholder {\n  color: rgba(0, 0, 0, 0.54);\n}\n\n.md-text-field::-webkit-input-placeholder {\n  color: rgba(0, 0, 0, 0.54);\n}\n\n.md-text-field:focus {\n  outline-style: none;\n}\n\n.md-text-field[type=\"search\"] {\n  -webkit-appearance: textfield;\n}\n\n.md-text-field:-webkit-autofill, .md-text-field:-webkit-autofill:focus {\n  box-shadow: 0 0 0 50px #fff inset;\n}\n\n.md-text-field--margin {\n  margin-top: 13px;\n}\n\n.md-text-field[disabled]:placeholder {\n  color: rgba(0, 0, 0, 0.38);\n}\n\n.md-text-field[disabled]:-moz-placeholder {\n  color: rgba(0, 0, 0, 0.38);\n}\n\n.md-text-field[disabled]::-moz-placeholder {\n  color: rgba(0, 0, 0, 0.38);\n}\n\n.md-text-field[disabled]:-ms-input-placeholder {\n  color: rgba(0, 0, 0, 0.38);\n}\n\n.md-text-field[disabled]::-webkit-input-placeholder {\n  color: rgba(0, 0, 0, 0.38);\n}\n\n.md-text-field--multiline {\n  padding-bottom: 0;\n  padding-top: 0;\n  resize: none;\n}\n\n.md-text-field--multiline-mask {\n  overflow: hidden;\n  position: absolute;\n  visibility: hidden;\n}\n\n.md-divider--text-field {\n  margin-top: 7px;\n  overflow: visible;\n}\n\n.md-divider--text-field::after {\n  background: #3f51b5;\n  content: '';\n  display: block;\n  height: 2px;\n  transition-duration: 0.15s;\n  transition-property: width;\n  width: 0;\n}\n\n.md-divider--text-field-expanded::after {\n  width: 100%;\n}\n\n.md-divider--text-field-error,\n.md-divider--text-field-error::after {\n  background: #f44336;\n}\n\n.md-divider--expand-from-left::after {\n  left: 0;\n}\n\n.md-divider--expand-from-center::after {\n  margin: auto;\n}\n\n.md-divider--expand-from-right::after {\n  right: 0;\n}\n\n.md-floating-label {\n  cursor: text;\n  line-height: 1;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  transition-duration: 0.15s;\n  transition-property: transform, font-size, color;\n  white-space: nowrap;\n}\n\n.md-floating-label--floating {\n  font-size: 12px;\n}\n\n.md-floating-label--icon-offset {\n  left: 40px;\n}\n\n@media screen and (min-width: 1025px) {\n  .md-floating-label--icon-offset {\n    left: 36px;\n  }\n}\n\n.md-text-field-message-container {\n  display: flex;\n  font-size: 12px;\n  justify-content: space-between;\n}\n\n.md-text-field-message-container--count-only {\n  justify-content: flex-end;\n}\n\n.md-text-field-message-container--left-icon-offset {\n  padding-left: 40px;\n}\n\n.md-text-field-message-container--right-icon-offset {\n  padding-right: 40px;\n}\n\n.md-text-field-message {\n  color: inherit;\n  flex-grow: 1;\n  line-height: 1.42857;\n  transition-duration: 0.15s;\n  transition-property: opacity;\n  white-space: normal;\n}\n\n.md-text-field-message--counter {\n  display: block;\n  flex-grow: 0;\n  flex-shrink: 0;\n  padding-left: 16px;\n}\n\n.md-text-field-message--inactive {\n  opacity: 0;\n}\n\n.md-text-field-message--active {\n  opacity: 1;\n}\n\n.md-text-field-divider-container {\n  display: inline-block;\n}\n\n.md-text-field-divider-container--grow {\n  display: block;\n  flex-grow: 1;\n}\n\n.md-text-field-icon + .md-text-field-divider-container,\n.md-text-field-divider-container + .md-text-field-icon {\n  margin-left: 16px;\n}\n\n.md-text-field-icon-container {\n  align-items: flex-end;\n  display: flex;\n  width: 100%;\n}\n\n.md-text-field-container--input-block .md-text-field-icon-container {\n  align-items: center;\n}\n\n.md-text-field-inline-indicator {\n  position: absolute;\n  right: 0;\n}\n\n.md-text-field--inline-indicator {\n  width: calc(100% - 24px);\n}\n\n.md-password-btn {\n  background: transparent;\n  border: 0;\n  height: 24px;\n  padding: 0;\n  width: 24px;\n}\n\n.md-password-btn:not(.md-password-btn--focus):focus {\n  outline-style: none;\n}\n\n.md-password-btn .md-icon {\n  color: inherit;\n}\n\n.md-password-btn--active::before {\n  background: rgba(0, 0, 0, 0.54);\n}\n\n.md-password-btn--invisible::before, .md-password-btn--invisible::after {\n  content: '';\n  display: block;\n  height: 2px;\n  position: absolute;\n  top: 50%;\n  width: 100%;\n}\n\n.md-password-btn--invisible::before {\n  transform: translate3d(-1px, -50%, 0) rotate3d(0, 0, 1, 45deg);\n}\n\n.md-password-btn--invisible::after {\n  background: #fafafa;\n  transform: translate3d(1px, -50%, 0) rotate3d(0, 0, 1, 45deg);\n}\n\n@media screen and (min-width: 320px) {\n  .md-text-field-container--input-block {\n    padding-bottom: 20px;\n    padding-top: 20px;\n  }\n  .md-text-field-container--multiline-block {\n    margin-bottom: 20px;\n    margin-top: 20px;\n  }\n  .md-text-field-container--padded-block {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n  .md-text-field {\n    font-size: 16px;\n  }\n  .md-text-field--floating-margin {\n    margin-top: 37px;\n  }\n  .md-divider--text-field {\n    margin-bottom: 8px;\n  }\n  .md-floating-label--inactive {\n    transform: translate3d(0, 39px, 0);\n  }\n  .md-floating-label--inactive-sized {\n    font-size: 16px;\n  }\n  .md-floating-label--floating {\n    transform: translate3d(0, 16px, 0);\n  }\n  .md-text-field-icon--positioned {\n    margin-bottom: 13.5px;\n  }\n  .md-text-field-inline-indicator {\n    top: 9px;\n  }\n  .md-text-field-inline-indicator--floating {\n    top: 34px;\n  }\n  .md-text-field-inline-indicator--block {\n    top: 17px;\n  }\n  .md-floating-label--inactive-title {\n    transform: translate3d(0, 42px, 0);\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-text-field-container--input-block {\n    padding-bottom: 16px;\n    padding-top: 16px;\n  }\n  .md-text-field-container--multiline-block {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n  .md-text-field-container--padded-block {\n    padding-left: 16px;\n    padding-right: 16px;\n  }\n  .md-text-field {\n    font-size: 13px;\n  }\n  .md-text-field--floating-margin {\n    margin-top: 33px;\n  }\n  .md-divider--text-field {\n    margin-bottom: 4px;\n  }\n  .md-floating-label--inactive {\n    transform: translate3d(0, 33px, 0);\n  }\n  .md-floating-label--inactive-sized {\n    font-size: 13px;\n  }\n  .md-floating-label--floating {\n    transform: translate3d(0, 12px, 0);\n  }\n  .md-text-field-icon--positioned {\n    margin-bottom: 9.5px;\n  }\n  .md-password-btn.md-password-btn {\n    height: 20px;\n    width: 20px;\n  }\n  .md-text-field-message-container--left-icon-offset {\n    padding-left: 36px;\n  }\n  .md-text-field-message-container--right-icon-offset {\n    padding-right: 36px;\n  }\n  .md-text-field-inline-indicator {\n    top: 9px;\n  }\n  .md-text-field-inline-indicator--floating {\n    top: 30px;\n  }\n  .md-text-field-inline-indicator--block {\n    top: 12px;\n  }\n  .md-floating-label--inactive-title {\n    transform: translate3d(0, 36px, 0);\n  }\n}\n\n.md-text-field--title {\n  font-size: 34px;\n}\n\n.md-floating-label--title {\n  transition-duration: 0.25s;\n}\n\n.md-floating-label--inactive-title {\n  font-size: 34px;\n}\n\n@media screen and (min-width: 320px) {\n  .md-toolbar-relative {\n    margin-top: 56px;\n  }\n  .md-toolbar-relative--padding {\n    padding-top: 56px;\n  }\n  .md-toolbar {\n    height: 56px;\n  }\n  .md-btn--toolbar {\n    margin-bottom: 4px;\n    margin-top: 4px;\n  }\n  .md-toolbar .md-btn--text {\n    margin-bottom: 10px;\n    margin-top: 10px;\n  }\n  .md-toolbar--action-left {\n    margin-left: 4px;\n  }\n  .md-toolbar--action-right {\n    margin-right: 4px;\n  }\n  .md-title--toolbar {\n    line-height: 56px;\n    margin-left: 20px;\n  }\n  .md-title--toolbar-offset {\n    margin-left: 72px;\n  }\n  .md-select-field--toolbar.md-select-field--toolbar {\n    margin-bottom: 6px;\n    margin-top: 6px;\n  }\n}\n\n@media screen and (min-width: 320px) and (min-aspect-ratio: 13 / 9) {\n  .md-toolbar-relative {\n    margin-top: 48px;\n  }\n  .md-toolbar-relative--padding {\n    padding-top: 48px;\n  }\n  .md-toolbar {\n    height: 48px;\n  }\n  .md-toolbar--action-left {\n    margin-left: 4px;\n  }\n  .md-toolbar--action-right {\n    margin-right: 4px;\n  }\n  .md-title--toolbar {\n    line-height: 48px;\n    margin-left: 20px;\n  }\n  .md-title--toolbar-offset {\n    margin-left: 72px;\n  }\n}\n\n@media screen and (min-width: 768px) {\n  .md-toolbar-relative {\n    margin-top: 64px;\n  }\n  .md-toolbar-relative--padding {\n    padding-top: 64px;\n  }\n  .md-toolbar {\n    height: 64px;\n  }\n  .md-btn--toolbar {\n    margin-bottom: 8px;\n    margin-top: 8px;\n  }\n  .md-toolbar .md-btn--text {\n    margin-bottom: 14px;\n    margin-top: 14px;\n  }\n  .md-toolbar--action-left {\n    margin-left: 12px;\n  }\n  .md-toolbar--action-right {\n    margin-right: 12px;\n  }\n  .md-title--toolbar {\n    line-height: 64px;\n    margin-left: 20px;\n  }\n  .md-title--toolbar-offset {\n    margin-left: 80px;\n  }\n  .md-select-field--toolbar.md-select-field--toolbar {\n    margin-bottom: 10px;\n    margin-top: 10px;\n  }\n}\n\n@media screen and (min-width: 768px) and (min-aspect-ratio: 13 / 9) {\n  .md-select-field--toolbar.md-select-field--toolbar {\n    margin-bottom: 12px;\n    margin-top: 12px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-toolbar--action-left {\n    margin-left: 14px;\n  }\n  .md-toolbar--action-right {\n    margin-right: 14px;\n  }\n  .md-title--toolbar {\n    margin-left: 26px;\n  }\n  .md-title--toolbar-offset {\n    margin-left: 80px;\n  }\n  .md-btn--toolbar {\n    margin-bottom: 12px;\n    margin-top: 12px;\n  }\n  .md-toolbar .md-btn--text {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n}\n\n.md-toolbar {\n  display: flex;\n}\n\n.md-toolbar--fixed {\n  left: 0;\n  position: fixed;\n  right: 0;\n  top: 0;\n  z-index: 15;\n}\n\n.md-toolbar--inset {\n  margin: 8px;\n  max-width: calc(100vw - 16px);\n}\n\n.md-toolbar--text-white {\n  color: #fff;\n}\n\n.md-toolbar--text-white .md-btn, .md-toolbar--text-white .md-icon, .md-toolbar--text-white .md-title--toolbar, .md-toolbar--text-white .md-text-field, .md-toolbar--text-white .md-select-field {\n  color: inherit;\n}\n\n.md-toolbar--text-white :placeholder {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.md-toolbar--text-white :-moz-placeholder {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.md-toolbar--text-white ::-moz-placeholder {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.md-toolbar--text-white :-ms-input-placeholder {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.md-toolbar--text-white ::-webkit-input-placeholder {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.md-toolbar--themed {\n  background: #f5f5f5;\n}\n\n.md-toolbar--themed .md-title--toolbar {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.md-toolbar--prominent {\n  height: 128px;\n}\n\n.md-title--toolbar {\n  color: rgba(0, 0, 0, 0.87);\n  margin-bottom: 0;\n  transition-duration: 0.15s;\n  transition-property: transform;\n}\n\n.md-title--toolbar-prominent {\n  position: absolute;\n  transform: translate3d(0, 64px, 0);\n}\n\n.md-toolbar-relative--prominent {\n  margin-top: 128px;\n}\n\n.md-toolbar-relative--prominent-padding {\n  padding-top: 128px;\n}\n\n.md-toolbar .md-text-field-container {\n  padding-bottom: 0;\n  padding-top: 0;\n}\n\n.md-toolbar .md-text-field--toolbar {\n  font-size: 20px;\n}\n\n.md-toolbar .md-autocomplete-container,\n.md-toolbar .md-autocomplete {\n  height: 100%;\n}\n\n@media screen and (min-width: 320px) {\n  .md-tooltip {\n    font-size: 14px;\n    padding: 9px 16px;\n  }\n  .md-tooltip--top {\n    top: -24px;\n  }\n  .md-tooltip--right {\n    right: -24px;\n  }\n  .md-tooltip--bottom {\n    bottom: -24px;\n  }\n  .md-tooltip--left {\n    left: -24px;\n  }\n}\n\n@media screen and (min-width: 1025px) {\n  .md-tooltip {\n    font-size: 10px;\n    padding: 6px 8px;\n  }\n  .md-tooltip--top {\n    top: -14px;\n  }\n  .md-tooltip--right {\n    right: -14px;\n  }\n  .md-tooltip--bottom {\n    bottom: -14px;\n  }\n  .md-tooltip--left {\n    left: -14px;\n  }\n}\n\n.md-tooltip-container {\n  height: 100%;\n  left: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 1;\n}\n\n.md-tooltip {\n  background: #616161;\n  color: #fff;\n  display: block;\n  font-weight: 500;\n  opacity: 0.9;\n  outline-style: none;\n  position: absolute;\n  white-space: nowrap;\n}\n\n.md-tooltip--active {\n  transition-duration: 0.15s;\n  transition-property: opacity, transform;\n}\n\n.md-tooltip--enter, .md-tooltip--leave-active {\n  opacity: 0;\n}\n\n.md-tooltip--enter-active {\n  opacity: 0.9;\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n}\n\n.md-tooltip--leave-active {\n  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);\n}\n\n.md-tooltip--horizontal {\n  left: 50%;\n  transform: translate3d(-50%, 0, 0);\n}\n\n.md-tooltip--vertical {\n  top: 50%;\n  transform: translate3d(0, -50%, 0);\n}\n\n.md-tooltip--top-active {\n  transform: translate3d(-50%, -100%, 0);\n}\n\n.md-tooltip--right-active {\n  transform: translate3d(100%, -50%, 0);\n}\n\n.md-tooltip--bottom-active {\n  transform: translate3d(-50%, 100%, 0);\n}\n\n.md-tooltip--left-active {\n  transform: translate3d(-100%, -50%, 0);\n}\n\n.md-text {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.md-text--secondary {\n  color: rgba(0, 0, 0, 0.54);\n}\n\n.md-text--disabled {\n  color: rgba(0, 0, 0, 0.38);\n}\n\n.md-text--theme-primary {\n  color: #3f51b5;\n}\n\n.md-text--theme-secondary {\n  color: #ff4081;\n}\n\n.md-text--error {\n  color: #f44336;\n}\n\n.md-text--inherit.md-text--inherit {\n  color: inherit;\n}\n\n.md-ink--primary .md-ink {\n  background: rgba(63, 81, 181, 0.26);\n}\n\n.md-ink--secondary .md-ink {\n  background: rgba(255, 64, 129, 0.26);\n}\n\n.md-background {\n  background: #fafafa;\n}\n\n.md-background--card {\n  background: #fff;\n}\n\n.md-background--primary {\n  background: #3f51b5;\n  color: #fff;\n}\n\n.md-background--secondary {\n  background: #ff4081;\n  color: #fff;\n}\n\n@media screen and (min-width: 1025px) {\n  .md-background--primary-hover:hover {\n    background: rgba(63, 81, 181, 0.9);\n  }\n  .md-background--secondary-hover:hover {\n    background: rgba(255, 64, 129, 0.9);\n  }\n}\n\n.url-form {\n  display: flex;\n  width: 100%;\n}\n\n.url-form button {\n  margin: auto;\n}\n\na {\n  text-decoration: none;\n  position: relative;\n}\n\na:before {\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  height: 1px;\n  bottom: 0;\n  left: 0;\n  background-color: #20a80d;\n  visibility: hidden;\n  -webkit-transform: scaleX(0);\n  transform: scaleX(0);\n  -webkit-transition: all 0.5s cubic-bezier(1, 0.25, 0, 0.75) 0s;\n  transition: all 0.5s cubic-bezier(1, 0.25, 0, 0.75) 0s;\n}\n\na:hover:before {\n  visibility: visible;\n  -webkit-transform: scaleX(1);\n  transform: scaleX(1);\n}\n\navisited {\n  color: inherit;\n}\n\n#url-shortened {\n  margin: 8px;\n  width: 100%;\n  display: flex;\n}\n\n#url-shortened .result {\n  display: flex;\n  width: 100%;\n}\n\n#url-shortened .result span {\n  margin-top: auto;\n  margin-bottom: auto;\n}\n\n#url-shortened button {\n  margin-top: auto;\n  margin-bottom: auto;\n}\n\n#app {\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n}\n\nfooter {\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background-color: #b8b8b8;\n  color: #15455b;\n  text-align: right;\n}\n\nfooter span {\n  margin: 8px;\n}\n\n.top-bar-right-links {\n  padding: 1em;\n}\n\n.top-bar-right-links a {\n  margin-left: 1em;\n}\n\n.index-link {\n  margin-top: auto;\n  margin-bottom: auto;\n  margin-left: 0;\n  font-size: larger;\n}\n\n.username {\n  display: block;\n  font-size: xx-small;\n  text-align: end;\n}\n\n.isa_info, .isa_success, .isa_warning, .isa_error {\n  margin: 10px 0px;\n  padding: 12px;\n}\n\n.message-info {\n  color: #00529B;\n  background-color: #BDE5F8;\n}\n\n.message-success {\n  color: #4F8A10;\n  background-color: #DFF2BF;\n}\n\n.message-warning {\n  color: #9F6000;\n  background-color: #FEEFB3;\n}\n\n.message-error {\n  color: #D8000C;\n  background-color: #FFD2D2;\n}\n\n.message {\n  margin: 10px 22px;\n  vertical-align: middle;\n  padding-left: 2em;\n  padding-right: 2em;\n  text-align: justify;\n  padding-bottom: 1em;\n  padding-top: 1em;\n}\n\n#not-found-image {\n  bottom: 0;\n  height: 100%;\n  left: 15%;\n  position: absolute;\n  right: 50%;\n  top: 15%;\n  width: auto;\n}\n", ""]);

	// exports


/***/ }),
/* 545 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function(useSourceMap) {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			return this.map(function (item) {
				var content = cssWithMappingToString(item, useSourceMap);
				if(item[2]) {
					return "@media " + item[2] + "{" + content + "}";
				} else {
					return content;
				}
			}).join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};

	function cssWithMappingToString(item, useSourceMap) {
		var content = item[1] || '';
		var cssMapping = item[3];
		if (!cssMapping) {
			return content;
		}

		if (useSourceMap && typeof btoa === 'function') {
			var sourceMapping = toComment(cssMapping);
			var sourceURLs = cssMapping.sources.map(function (source) {
				return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
			});

			return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
		}

		return [content].join('\n');
	}

	// Adapted from convert-source-map (MIT)
	function toComment(sourceMap) {
		// eslint-disable-next-line no-undef
		var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
		var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

		return '/*# ' + data + ' */';
	}


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			// Test for IE <= 9 as proposed by Browserhacks
			// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
			// Tests for existence of standard globals is to allow style-loader 
			// to operate correctly into non-standard environments
			// @see https://github.com/webpack-contrib/style-loader/issues/177
			return window && document && document.all && !window.atob;
		}),
		getElement = (function(fn) {
			var memo = {};
			return function(selector) {
				if (typeof memo[selector] === "undefined") {
					memo[selector] = fn.call(this, selector);
				}
				return memo[selector]
			};
		})(function (styleTarget) {
			return document.querySelector(styleTarget)
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [],
		fixUrls = __webpack_require__(547);

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		options.attrs = typeof options.attrs === "object" ? options.attrs : {};

		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the <head> element
		if (typeof options.insertInto === "undefined") options.insertInto = "head";

		// By default, add <style> tags to the bottom of the target
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	};

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var styleTarget = getElement(options.insertInto)
		if (!styleTarget) {
			throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
		}
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				styleTarget.insertBefore(styleElement, styleTarget.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				styleTarget.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				styleTarget.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			styleTarget.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		options.attrs.type = "text/css";

		attachTagAttrs(styleElement, options.attrs);
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		options.attrs.type = "text/css";
		options.attrs.rel = "stylesheet";

		attachTagAttrs(linkElement, options.attrs);
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function attachTagAttrs(element, attrs) {
		Object.keys(attrs).forEach(function (key) {
			element.setAttribute(key, attrs[key]);
		});
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement, options);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, options, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		/* If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
		*/
		var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

		if (options.convertToAbsoluteUrls || autoFixUrls){
			css = fixUrls(css);
		}

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }),
/* 547 */
/***/ (function(module, exports) {

	
	/**
	 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
	 * embed the css on the page. This breaks all relative urls because now they are relative to a
	 * bundle instead of the current page.
	 *
	 * One solution is to only use full urls, but that may be impossible.
	 *
	 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
	 *
	 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
	 *
	 */

	module.exports = function (css) {
	  // get current location
	  var location = typeof window !== "undefined" && window.location;

	  if (!location) {
	    throw new Error("fixUrls requires window.location");
	  }

		// blank or null?
		if (!css || typeof css !== "string") {
		  return css;
	  }

	  var baseUrl = location.protocol + "//" + location.host;
	  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

		// convert each url(...)
		/*
		This regular expression is just a way to recursively match brackets within
		a string.

		 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
		   (  = Start a capturing group
		     (?:  = Start a non-capturing group
		         [^)(]  = Match anything that isn't a parentheses
		         |  = OR
		         \(  = Match a start parentheses
		             (?:  = Start another non-capturing groups
		                 [^)(]+  = Match anything that isn't a parentheses
		                 |  = OR
		                 \(  = Match a start parentheses
		                     [^)(]*  = Match anything that isn't a parentheses
		                 \)  = Match a end parentheses
		             )  = End Group
	              *\) = Match anything and then a close parens
	          )  = Close non-capturing group
	          *  = Match anything
	       )  = Close capturing group
		 \)  = Match a close parens

		 /gi  = Get all matches, not the first.  Be case insensitive.
		 */
		var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
			// strip quotes (if they exist)
			var unquotedOrigUrl = origUrl
				.trim()
				.replace(/^"(.*)"$/, function(o, $1){ return $1; })
				.replace(/^'(.*)'$/, function(o, $1){ return $1; });

			// already a full url? no change
			if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
			  return fullMatch;
			}

			// convert the url to a full url
			var newUrl;

			if (unquotedOrigUrl.indexOf("//") === 0) {
			  	//TODO: should we add protocol?
				newUrl = unquotedOrigUrl;
			} else if (unquotedOrigUrl.indexOf("/") === 0) {
				// path should be relative to the base url
				newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
			} else {
				// path should be relative to current directory
				newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
			}

			// send back the fixed url(...)
			return "url(" + JSON.stringify(newUrl) + ")";
		});

		// send back the fixed css
		return fixedCss;
	};


/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

	var invariant = __webpack_require__(11);
	var defaultClickRejectionStrategy = __webpack_require__(549);

	var alreadyInjected = false;

	module.exports = function injectTapEventPlugin (strategyOverrides) {
	  strategyOverrides = strategyOverrides || {}
	  var shouldRejectClick = strategyOverrides.shouldRejectClick || defaultClickRejectionStrategy;

	  if (false) {
	    invariant(
	      !alreadyInjected,
	      'injectTapEventPlugin(): Can only be called once per application lifecycle.\n\n\
	It is recommended to call injectTapEventPlugin() just before you call \
	ReactDOM.render(). If you are using an external library which calls injectTapEventPlugin() \
	itself, please contact the maintainer as it shouldn\'t be called in library code and \
	should be injected by the application.'
	    )
	  }

	  alreadyInjected = true;

	  __webpack_require__(41).injection.injectEventPluginsByName({
	    'TapEventPlugin':       __webpack_require__(550)(shouldRejectClick)
	  });
	};


/***/ }),
/* 549 */
/***/ (function(module, exports) {

	module.exports = function(lastTouchEvent, clickTimestamp) {
	  if (lastTouchEvent && (clickTimestamp - lastTouchEvent) < 750) {
	    return true;
	  }
	};


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TapEventPlugin
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(551);
	var EventPluginUtils = __webpack_require__(43);
	var EventPropagators = __webpack_require__(40);
	var SyntheticUIEvent = __webpack_require__(70);
	var TouchEventUtils = __webpack_require__(552);
	var ViewportMetrics = __webpack_require__(71);

	var keyOf = __webpack_require__(553);
	var topLevelTypes = EventConstants.topLevelTypes;

	var isStartish = EventPluginUtils.isStartish;
	var isEndish = EventPluginUtils.isEndish;

	var isTouch = function(topLevelType) {
	  var touchTypes = [
	    'topTouchCancel',
	    'topTouchEnd',
	    'topTouchStart',
	    'topTouchMove'
	  ];
	  return touchTypes.indexOf(topLevelType) >= 0;
	}

	/**
	 * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`
	 * in order to still be considered a 'tap' event.
	 */
	var tapMoveThreshold = 10;
	var ignoreMouseThreshold = 750;
	var startCoords = {x: null, y: null};
	var lastTouchEvent = null;

	var Axis = {
	  x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},
	  y: {page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop'}
	};

	function getAxisCoordOfEvent(axis, nativeEvent) {
	  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
	  if (singleTouch) {
	    return singleTouch[axis.page];
	  }
	  return axis.page in nativeEvent ?
	    nativeEvent[axis.page] :
	    nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];
	}

	function getDistance(coords, nativeEvent) {
	  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
	  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);
	  return Math.pow(
	    Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),
	    0.5
	  );
	}

	var touchEvents = [
	  'topTouchStart',
	  'topTouchCancel',
	  'topTouchEnd',
	  'topTouchMove',
	];

	var dependencies = [
	  'topMouseDown',
	  'topMouseMove',
	  'topMouseUp',
	].concat(touchEvents);

	var eventTypes = {
	  touchTap: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchTap: null}),
	      captured: keyOf({onTouchTapCapture: null})
	    },
	    dependencies: dependencies
	  }
	};

	var now = (function() {
	  if (Date.now) {
	    return Date.now;
	  } else {
	    // IE8 support: http://stackoverflow.com/questions/9430357/please-explain-why-and-how-new-date-works-as-workaround-for-date-now-in
	    return function () {
	      return +new Date;
	    }
	  }
	})();

	function createTapEventPlugin(shouldRejectClick) {
	  return {

	    tapMoveThreshold: tapMoveThreshold,

	    ignoreMouseThreshold: ignoreMouseThreshold,

	    eventTypes: eventTypes,

	    /**
	     * @param {string} topLevelType Record from `EventConstants`.
	     * @param {DOMEventTarget} targetInst The listening component root node.
	     * @param {object} nativeEvent Native browser event.
	     * @return {*} An accumulation of synthetic events.
	     * @see {EventPluginHub.extractEvents}
	     */
	    extractEvents: function(
	      topLevelType,
	      targetInst,
	      nativeEvent,
	      nativeEventTarget
	    ) {

	      if (!isStartish(topLevelType) && !isEndish(topLevelType)) {
	        return null;
	      }

	      if (isTouch(topLevelType)) {
	        lastTouchEvent = now();
	      } else {
	        if (shouldRejectClick(lastTouchEvent, now())) {
	          return null;
	        }
	      }

	      var event = null;
	      var distance = getDistance(startCoords, nativeEvent);
	      if (isEndish(topLevelType) && distance < tapMoveThreshold) {
	        event = SyntheticUIEvent.getPooled(
	          eventTypes.touchTap,
	          targetInst,
	          nativeEvent,
	          nativeEventTarget
	        );
	      }
	      if (isStartish(topLevelType)) {
	        startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);
	        startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);
	      } else if (isEndish(topLevelType)) {
	        startCoords.x = 0;
	        startCoords.y = 0;
	      }
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	      return event;
	    }

	  };
	}

	module.exports = createTapEventPlugin;


/***/ }),
/* 551 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = {
	  topAbort: null,
	  topAnimationEnd: null,
	  topAnimationIteration: null,
	  topAnimationStart: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topInvalid: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topTransitionEnd: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	};

	var EventConstants = {
	  topLevelTypes: topLevelTypes
	};

	module.exports = EventConstants;

/***/ }),
/* 552 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TouchEventUtils
	 */

	var TouchEventUtils = {
	  /**
	   * Utility function for common case of extracting out the primary touch from a
	   * touch event.
	   * - `touchEnd` events usually do not have the `touches` property.
	   *   http://stackoverflow.com/questions/3666929/
	   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
	   *
	   * @param {Event} nativeEvent Native event that may or may not be a touch.
	   * @return {TouchesObject?} an object with pageX and pageY or null.
	   */
	  extractSingleTouch: function(nativeEvent) {
	    var touches = nativeEvent.touches;
	    var changedTouches = nativeEvent.changedTouches;
	    var hasTouches = touches && touches.length > 0;
	    var hasChangedTouches = changedTouches && changedTouches.length > 0;

	    return !hasTouches && hasChangedTouches ? changedTouches[0] :
	           hasTouches ? touches[0] :
	           nativeEvent;
	  }
	};

	module.exports = TouchEventUtils;


/***/ }),
/* 553 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function keyOf(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ })
/******/ ]);